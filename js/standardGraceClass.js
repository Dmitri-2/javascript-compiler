"use strict";
function gracecode_standardGraceClass() {
  setModuleName("standardGraceClass");
  importedModules["standardGraceClass"] = this;
  var module$standardGraceClass = this;
  this.definitionModule = "standardGraceClass";
  this.definitionLine = 0;
  var var_prelude = var___95__prelude;
  this.closureKeys = this.closureKeys || [];
  this.closureKeys.push("outer_standardGraceClass_0");
  this.outer_standardGraceClass_0 = var_prelude;
  setLineNumber(196);    // compilenode method
  var func0 = function(argcv) {    // method standardGrace
    var returnTarget = invocationCount;
    invocationCount++;
    setModuleName("standardGraceClass");
    var ouc = emptyGraceObject("standardGrace", "standardGraceClass", 196);
    var ouc_init = this.methods["standardGrace$build(3)"].call(this, null, ouc, [], []);
    ouc_init.call(ouc);
    return ouc;
  };    // end of method standardGrace
  this.methods["standardGrace"] = func0;
  func0.paramCounts = [0];
  func0.paramNames = [];
  func0.typeParamNames = [];
  func0.definitionLine = 196;
  func0.definitionModule = "standardGraceClass";
  var func1 = function(argcv, inheritingObject, aliases, exclusions) {    // method standardGrace$build(_,_,_)
    var returnTarget = invocationCount;
    invocationCount++;
    setModuleName("standardGraceClass");
    var obj2_build = function(ignore, outerObj, aliases, exclusions) {
      this.closureKeys = this.closureKeys || [];
      this.closureKeys.push("outer_standardGraceClass_196");
      this.outer_standardGraceClass_196 = outerObj;
      var inheritedExclusions = { };
      for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
          var exMeth = exclusions[eix];
          inheritedExclusions[exMeth] = this.methods[exMeth];
      }
      this.data.BoundsError = undefined;
      var reader_BoundsError3 = function() {  // reader method BoundsError
          return this.data.BoundsError;
      };
      reader_BoundsError3.isDef = true;
      this.methods["BoundsError"] = reader_BoundsError3;
      this.data.EnvironmentException = undefined;
      var reader_EnvironmentException4 = function() {  // reader method EnvironmentException
          return this.data.EnvironmentException;
      };
      reader_EnvironmentException4.isDef = true;
      this.methods["EnvironmentException"] = reader_EnvironmentException4;
      this.data.Exception = undefined;
      var reader_Exception5 = function() {  // reader method Exception
          return this.data.Exception;
      };
      reader_Exception5.isDef = true;
      this.methods["Exception"] = reader_Exception5;
      this.data.NoSuchMethod = undefined;
      var reader_NoSuchMethod6 = function() {  // reader method NoSuchMethod
          return this.data.NoSuchMethod;
      };
      reader_NoSuchMethod6.isDef = true;
      this.methods["NoSuchMethod"] = reader_NoSuchMethod6;
      this.data.ProgrammingError = undefined;
      var reader_ProgrammingError7 = function() {  // reader method ProgrammingError
          return this.data.ProgrammingError;
      };
      reader_ProgrammingError7.isDef = true;
      this.methods["ProgrammingError"] = reader_ProgrammingError7;
      this.data.RequestError = undefined;
      var reader_RequestError8 = function() {  // reader method RequestError
          return this.data.RequestError;
      };
      reader_RequestError8.isDef = true;
      this.methods["RequestError"] = reader_RequestError8;
      this.data.ResourceException = undefined;
      var reader_ResourceException9 = function() {  // reader method ResourceException
          return this.data.ResourceException;
      };
      reader_ResourceException9.isDef = true;
      this.methods["ResourceException"] = reader_ResourceException9;
      this.data.RuntimeError = undefined;
      var reader_RuntimeError10 = function() {  // reader method RuntimeError
          return this.data.RuntimeError;
      };
      reader_RuntimeError10.isDef = true;
      this.methods["RuntimeError"] = reader_RuntimeError10;
      this.data.TypeError = undefined;
      var reader_TypeError11 = function() {  // reader method TypeError
          return this.data.TypeError;
      };
      reader_TypeError11.isDef = true;
      this.methods["TypeError"] = reader_TypeError11;
      this.data.UninitializedVariable = undefined;
      var reader_UninitializedVariable12 = function() {  // reader method UninitializedVariable
          return this.data.UninitializedVariable;
      };
      reader_UninitializedVariable12.isDef = true;
      this.methods["UninitializedVariable"] = reader_UninitializedVariable12;
      this.data.ConcurrentModification = undefined;
      var reader_ConcurrentModification13 = function() {  // reader method ConcurrentModification
          return this.data.ConcurrentModification;
      };
      reader_ConcurrentModification13.isDef = true;
      this.methods["ConcurrentModification"] = reader_ConcurrentModification13;
      this.data.IteratorExhausted = undefined;
      var reader_IteratorExhausted14 = function() {  // reader method IteratorExhausted
          return this.data.IteratorExhausted;
      };
      reader_IteratorExhausted14.isDef = true;
      this.methods["IteratorExhausted"] = reader_IteratorExhausted14;
      this.data.NoSuchObject = undefined;
      var reader_NoSuchObject15 = function() {  // reader method NoSuchObject
          return this.data.NoSuchObject;
      };
      reader_NoSuchObject15.isDef = true;
      this.methods["NoSuchObject"] = reader_NoSuchObject15;
      this.data.SizeUnknown = undefined;
      var reader_SizeUnknown16 = function() {  // reader method SizeUnknown
          return this.data.SizeUnknown;
      };
      reader_SizeUnknown16.isDef = true;
      this.methods["SizeUnknown"] = reader_SizeUnknown16;
      this.data.SubobjectResponsibility = undefined;
      var reader_SubobjectResponsibility17 = function() {  // reader method SubobjectResponsibility
          return this.data.SubobjectResponsibility;
      };
      reader_SubobjectResponsibility17.isDef = true;
      this.methods["SubobjectResponsibility"] = reader_SubobjectResponsibility17;
      this.data.SuccessfulMatch = undefined;
      var reader_SuccessfulMatch18 = function() {  // reader method SuccessfulMatch
          return this.data.SuccessfulMatch;
      };
      reader_SuccessfulMatch18.isDef = true;
      this.methods["SuccessfulMatch"] = reader_SuccessfulMatch18;
      this.data.FailedMatch = undefined;
      var reader_FailedMatch19 = function() {  // reader method FailedMatch
          return this.data.FailedMatch;
      };
      reader_FailedMatch19.isDef = true;
      this.methods["FailedMatch"] = reader_FailedMatch19;
      var func20 = function(argcv) {    // method abstract
        var returnTarget = invocationCount;
        invocationCount++;
        setModuleName("standardGraceClass");
        setLineNumber(234);    // compilenode string
        var string22 = new GraceString("abstract method not overriden by subobject");
        // call case 6: other requests
        // call case 4: self request
        var call23 = selfRequest(this, "SubobjectResponsibility", []);
        var call21 = callmethod(call23, "raise(1)", [1], string22);
        return call21;
      };    // end of method abstract
      this.methods["abstract"] = func20;
      func20.paramCounts = [0];
      func20.paramNames = [];
      func20.typeParamNames = [];
      func20.definitionLine = 233;
      func20.definitionModule = "standardGraceClass";
      var func24 = function(argcv) {    // method required
        var returnTarget = invocationCount;
        invocationCount++;
        setModuleName("standardGraceClass");
        setLineNumber(239);    // compilenode string
        var string26 = new GraceString("required method not overriden by subobject");
        // call case 6: other requests
        // call case 4: self request
        var call27 = selfRequest(this, "SubobjectResponsibility", []);
        var call25 = callmethod(call27, "raise(1)", [1], string26);
        return call25;
      };    // end of method required
      this.methods["required"] = func24;
      func24.paramCounts = [0];
      func24.paramNames = [];
      func24.typeParamNames = [];
      func24.definitionLine = 238;
      func24.definitionModule = "standardGraceClass";
      var func28 = function(argcv, var_action, var_condition) {    // method do(_)while(_)
        var returnTarget = invocationCount;
        invocationCount++;
        setModuleName("standardGraceClass");
        setLineNumber(243);    // compilenode block
        var block30 = new GraceBlock(this, 243, 0);
        var matches31 = function() {
          setModuleName("standardGraceClass");
          return true;
        };
        block30.guard = matches31;
        block30.real = function() {
          setLineNumber(244);    // compilenode member
          // call case 6: other requests
          var call32 = callmethod(var_action, "apply", []);
          setLineNumber(245);    // compilenode member
          // call case 6: other requests
          var call33 = callmethod(var_condition, "apply", []);
          return call33;
        };
        setLineNumber(246);    // compilenode block
        var block34 = new GraceBlock(this, 246, 0);
        var matches35 = function() {
          setModuleName("standardGraceClass");
          return true;
        };
        block34.guard = matches35;
        block34.real = function() {
          return GraceDone;
        };
        // call case 5: prelude request
        var call29 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block30, block34);
        return call29;
      };    // end of method do(_)while(_)
      this.methods["do(1)while(1)"] = func28;
      func28.paramCounts = [1, 1];
      func28.paramNames = ["action", "condition"];
      func28.typeParamNames = [];
      func28.definitionLine = 242;
      func28.definitionModule = "standardGraceClass";
      var func36 = function(argcv, var_n, var_action) {    // method repeat(_)times(_)
        var returnTarget = invocationCount;
        invocationCount++;
        setModuleName("standardGraceClass");
        setLineNumber(250);    // compilenode identifier
        var var_ix = var_n;
        setLineNumber(251);    // compilenode block
        var block38 = new GraceBlock(this, 251, 0);
        var matches39 = function() {
          setModuleName("standardGraceClass");
          return true;
        };
        block38.guard = matches39;
        block38.real = function() {
          var opresult40 = callmethod(var_ix, ">(1)", [1], new GraceNum(0));
          return opresult40;
        };
        var block41 = new GraceBlock(this, 251, 0);
        var matches42 = function() {
          setModuleName("standardGraceClass");
          return true;
        };
        block41.guard = matches42;
        block41.real = function() {
          setLineNumber(252);    // compilenode num
          var diff43 = callmethod(var_ix, "-(1)", [1], new GraceNum(1));
          var_ix = diff43;
          setLineNumber(253);    // compilenode member
          // call case 6: other requests
          var call44 = callmethod(var_action, "apply", []);
          return call44;
        };
        // call case 5: prelude request
        var call37 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block38, block41);
        return call37;
      };    // end of method repeat(_)times(_)
      this.methods["repeat(1)times(1)"] = func36;
      func36.paramCounts = [1, 1];
      func36.paramNames = ["n", "action"];
      func36.typeParamNames = [];
      func36.definitionLine = 249;
      func36.definitionModule = "standardGraceClass";
      var func45 = function(argcv, var_cs, var_ds, var_action) {    // method for(_)and(_)do(_)
        var returnTarget = invocationCount;
        invocationCount++;
        setModuleName("standardGraceClass");
        setLineNumber(258);    // compilenode member
        // call case 6: other requests
        var call46 = callmethod(var_ds, "iterator", []);
        var var_dIter = call46;
        setLineNumber(259);    // compilenode block
        var block48 = new GraceBlock(this, 259, 1);
        setLineNumber(1);    // compilenode identifier
        var matches49 = function(var_c) {
          setModuleName("standardGraceClass");
          setLineNumber(259);    // block matches function
          return true;
        };
        block48.guard = matches49;
        block48.real = function(var_c) {
          var if50 = GraceDone;
          setLineNumber(260);    // compilenode member
          // call case 6: other requests
          var call51 = callmethod(var_dIter, "hasNext", []);
          if (Grace_isTrue(call51)) {
            setLineNumber(261);    // compilenode member
            // call case 6: other requests
            var call53 = callmethod(var_dIter, "next", []);
            // call case 6: other requests
            var call52 = callmethod(var_action, "apply(2)", [2], var_c, call53);
            if50 = call52;
          } else {
            setLineNumber(264);    // compilenode identifier
            throw new ReturnException(var_done, returnTarget);
          }
          return if50;
        };
        // call case 6: other requests
        setLineNumber(259);    // compilenode identifier
        var call47 = callmethod(var_cs, "do(1)", [1], block48);
        if (!Grace_isTrue(callmethod(var_Done, "match(1)", [1], call47)))
            raiseTypeError(
                "result of method for(_)and(_)do(_) does not have type" + 
                "Done.", var_Done, call47);
        return call47;
      };    // end of method for(_)and(_)do(_)
      this.methods["for(1)and(1)do(1)"] = func45;
      func45.paramCounts = [1, 1, 1];
      func45.paramNames = ["cs", "ds", "action"];
      func45.typeParamNames = [];
      func45.definitionLine = 257;
      func45.definitionModule = "standardGraceClass";
      var func54 = function(argcv, var_a, var_b) {    // method min(_,_)
        var returnTarget = invocationCount;
        invocationCount++;
        setModuleName("standardGraceClass");
        var if55 = GraceDone;
        setLineNumber(269);    // compilenode identifier
        var opresult56 = callmethod(var_a, "<(1)", [1], var_b);
        if (Grace_isTrue(opresult56)) {
          if55 = var_a;
        } else {
          if55 = var_b;
        }
        return if55;
      };    // end of method min(_,_)
      this.methods["min(2)"] = func54;
      func54.paramCounts = [2];
      func54.paramNames = ["a", "b"];
      func54.typeParamNames = [];
      func54.definitionLine = 268;
      func54.definitionModule = "standardGraceClass";
      var func57 = function(argcv, var_a, var_b) {    // method max(_,_)
        var returnTarget = invocationCount;
        invocationCount++;
        setModuleName("standardGraceClass");
        var if58 = GraceDone;
        setLineNumber(273);    // compilenode identifier
        var opresult59 = callmethod(var_a, ">(1)", [1], var_b);
        if (Grace_isTrue(opresult59)) {
          if58 = var_a;
        } else {
          if58 = var_b;
        }
        return if58;
      };    // end of method max(_,_)
      this.methods["max(2)"] = func57;
      func57.paramCounts = [2];
      func57.paramNames = ["a", "b"];
      func57.typeParamNames = [];
      func57.definitionLine = 272;
      func57.definitionModule = "standardGraceClass";
      var func60 = function(argcv, var_nullaryBlock) {    // method valueOf(_)
        var returnTarget = invocationCount;
        invocationCount++;
        setModuleName("standardGraceClass");
        setLineNumber(277);    // compilenode member
        // call case 6: other requests
        var call61 = callmethod(var_nullaryBlock, "apply", []);
        return call61;
      };    // end of method valueOf(_)
      this.methods["valueOf(1)"] = func60;
      func60.paramCounts = [1];
      func60.paramNames = ["nullaryBlock"];
      func60.typeParamNames = [];
      func60.definitionLine = 276;
      func60.definitionModule = "standardGraceClass";
      this.data.BasicPattern = undefined;
      var reader_BasicPattern62 = function() {  // reader method BasicPattern
          return this.data.BasicPattern;
      };
      reader_BasicPattern62.isDef = true;
      this.methods["BasicPattern"] = reader_BasicPattern62;
      this.data.MatchAndDestructuringPattern = undefined;
      var reader_MatchAndDestructuringPattern63 = function() {  // reader method MatchAndDestructuringPattern
          return this.data.MatchAndDestructuringPattern;
      };
      reader_MatchAndDestructuringPattern63.isDef = true;
      this.methods["MatchAndDestructuringPattern"] = reader_MatchAndDestructuringPattern63;
      this.data.VariablePattern = undefined;
      var reader_VariablePattern64 = function() {  // reader method VariablePattern
          return this.data.VariablePattern;
      };
      reader_VariablePattern64.isDef = true;
      this.methods["VariablePattern"] = reader_VariablePattern64;
      this.data.BindingPattern = undefined;
      var reader_BindingPattern65 = function() {  // reader method BindingPattern
          return this.data.BindingPattern;
      };
      reader_BindingPattern65.isDef = true;
      this.methods["BindingPattern"] = reader_BindingPattern65;
      this.data.WildcardPattern = undefined;
      var reader_WildcardPattern66 = function() {  // reader method WildcardPattern
          return this.data.WildcardPattern;
      };
      reader_WildcardPattern66.isDef = true;
      this.methods["WildcardPattern"] = reader_WildcardPattern66;
      this.data.AndPattern = undefined;
      var reader_AndPattern67 = function() {  // reader method AndPattern
          return this.data.AndPattern;
      };
      reader_AndPattern67.isDef = true;
      this.methods["AndPattern"] = reader_AndPattern67;
      this.data.OrPattern = undefined;
      var reader_OrPattern68 = function() {  // reader method OrPattern
          return this.data.OrPattern;
      };
      reader_OrPattern68.isDef = true;
      this.methods["OrPattern"] = reader_OrPattern68;
      this.data.Singleton = undefined;
      var reader_Singleton69 = function() {  // reader method Singleton
          return this.data.Singleton;
      };
      reader_Singleton69.isDef = true;
      this.methods["Singleton"] = reader_Singleton69;
      this.data.BaseType = undefined;
      var reader_BaseType70 = function() {  // reader method BaseType
          return this.data.BaseType;
      };
      reader_BaseType70.isDef = true;
      this.methods["BaseType"] = reader_BaseType70;
      this.data.TypeIntersection = undefined;
      var reader_TypeIntersection71 = function() {  // reader method TypeIntersection
          return this.data.TypeIntersection;
      };
      reader_TypeIntersection71.isDef = true;
      this.methods["TypeIntersection"] = reader_TypeIntersection71;
      this.data.TypeVariant = undefined;
      var reader_TypeVariant72 = function() {  // reader method TypeVariant
          return this.data.TypeVariant;
      };
      reader_TypeVariant72.isDef = true;
      this.methods["TypeVariant"] = reader_TypeVariant72;
      this.data.TypeUnion = undefined;
      var reader_TypeUnion73 = function() {  // reader method TypeUnion
          return this.data.TypeUnion;
      };
      reader_TypeUnion73.isDef = true;
      this.methods["TypeUnion"] = reader_TypeUnion73;
      this.data.TypeSubtraction = undefined;
      var reader_TypeSubtraction74 = function() {  // reader method TypeSubtraction
          return this.data.TypeSubtraction;
      };
      reader_TypeSubtraction74.isDef = true;
      this.methods["TypeSubtraction"] = reader_TypeSubtraction74;
      this.data.Extractable = undefined;
      var reader_Extractable75 = function() {  // reader method Extractable
          return this.data.Extractable;
      };
      reader_Extractable75.isType = true;
      this.methods["Extractable"] = reader_Extractable75;
      this.data.MatchResult = undefined;
      var reader_MatchResult76 = function() {  // reader method MatchResult
          return this.data.MatchResult;
      };
      reader_MatchResult76.isType = true;
      this.methods["MatchResult"] = reader_MatchResult76;
      this.data.Pattern = undefined;
      var reader_Pattern77 = function() {  // reader method Pattern
          return this.data.Pattern;
      };
      reader_Pattern77.isType = true;
      this.methods["Pattern"] = reader_Pattern77;
      this.data.ExceptionKind = undefined;
      var reader_ExceptionKind78 = function() {  // reader method ExceptionKind
          return this.data.ExceptionKind;
      };
      reader_ExceptionKind78.isType = true;
      this.methods["ExceptionKind"] = reader_ExceptionKind78;
      this.data.Point = undefined;
      var reader_Point79 = function() {  // reader method Point
          return this.data.Point;
      };
      reader_Point79.isType = true;
      this.methods["Point"] = reader_Point79;
      var func80 = function(argcv) {    // method alwaysEqual
        var returnTarget = invocationCount;
        invocationCount++;
        setModuleName("standardGraceClass");
        var ouc = emptyGraceObject("standardGrace.alwaysEqual", "standardGraceClass", 582);
        var ouc_init = this.methods["alwaysEqual$build(3)"].call(this, null, ouc, [], []);
        ouc_init.call(ouc);
        return ouc;
      };    // end of method alwaysEqual
      this.methods["alwaysEqual"] = func80;
      func80.paramCounts = [0];
      func80.paramNames = [];
      func80.typeParamNames = [];
      func80.definitionLine = 582;
      func80.definitionModule = "standardGraceClass";
      var func81 = function(argcv, inheritingObject, aliases, exclusions) {    // method alwaysEqual$build(_,_,_)
        var returnTarget = invocationCount;
        invocationCount++;
        setModuleName("standardGraceClass");
        var obj82_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_582");
          this.outer_standardGraceClass_582 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func83 = function(argcv, var_other) {    // method ==(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(584);    // compilenode identifier
            // call case 4: self request
            var call84 = selfRequest(this, "isMe(1)", [1], var_other);
            return call84;
          };    // end of method ==(_)
          this.methods["==(1)"] = func83;
          func83.paramCounts = [1];
          func83.paramNames = ["other"];
          func83.typeParamNames = [];
          func83.definitionLine = 583;
          func83.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj82_init = function() {    // init of object on line 582
          };
          return obj82_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj82_init = obj82_build.call(inheritingObject, null, this, aliases, exclusions);
        return obj82_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
      };    // end of method alwaysEqual$build(_,_,_)
      this.methods["alwaysEqual$build(3)"] = func81;
      func81.paramCounts = [0];
      func81.paramNames = [];
      func81.typeParamNames = [];
      func81.definitionLine = 582;
      func81.definitionModule = "standardGraceClass";
      var func85 = function(argcv, var_x__39__, var_y__39__) {    // method point2Dx(_)y(_)
        var returnTarget = invocationCount;
        invocationCount++;
        setModuleName("standardGraceClass");
        var ouc = emptyGraceObject("standardGrace.point2Dx(_)y(_)", "standardGraceClass", 588);
        var ouc_init = this.methods["point2Dx(1)y(1)$build(3)"].call(this, null, var_x__39__, var_y__39__, ouc, [], []);
        ouc_init.call(ouc);
        return ouc;
      };    // end of method point2Dx(_)y(_)
      this.methods["point2Dx(1)y(1)"] = func85;
      func85.paramCounts = [1, 1];
      func85.paramNames = ["x'", "y'"];
      func85.typeParamNames = [];
      func85.definitionLine = 588;
      func85.definitionModule = "standardGraceClass";
      var func86 = function(argcv, var_x__39__, var_y__39__, inheritingObject, aliases, exclusions) {    // method point2Dx(_)y(_)$build(_,_,_)
        var returnTarget = invocationCount;
        invocationCount++;
        setModuleName("standardGraceClass");
        var obj87_build = function(ignore, var_x__39__, var_y__39__, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_588");
          this.outer_standardGraceClass_588 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          this.data.x = undefined;
          var reader_x88 = function() {  // reader method x
              return this.data.x;
          };
          reader_x88.isDef = true;
          this.methods["x"] = reader_x88;
          this.data.y = undefined;
          var reader_y89 = function() {  // reader method y
              return this.data.y;
          };
          reader_y89.isDef = true;
          this.methods["y"] = reader_y89;
          var func90 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(591);    // compilenode string
            var string91 = new GraceString("(");
            // call case 4: self request
            var call92 = selfRequest(this, "x", []);
            var opresult93 = callmethod(string91, "++(1)", [1], call92);
            var string94 = new GraceString("@");
            var opresult95 = callmethod(opresult93, "++(1)", [1], string94);
            // call case 4: self request
            var call96 = selfRequest(this, "y", []);
            var opresult97 = callmethod(opresult95, "++(1)", [1], call96);
            var string98 = new GraceString(")");
            var opresult99 = callmethod(opresult97, "++(1)", [1], string98);
            return opresult99;
          };    // end of method asString
          this.methods["asString"] = func90;
          func90.paramCounts = [0];
          func90.paramNames = [];
          func90.typeParamNames = [];
          func90.definitionLine = 591;
          func90.definitionModule = "standardGraceClass";
          var func100 = function(argcv) {    // method asDebugString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(592);    // compilenode member
            // call case 4: self request
            var call101 = selfRequest(this, "asString", []);
            return call101;
          };    // end of method asDebugString
          this.methods["asDebugString"] = func100;
          func100.paramCounts = [0];
          func100.paramNames = [];
          func100.typeParamNames = [];
          func100.definitionLine = 592;
          func100.definitionModule = "standardGraceClass";
          var func102 = function(argcv, var_other) {    // method distanceTo(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            // Start argument type-checks
            setLineNumber(593);    // compilenode member
            // call case 2: outer request
            var call103 = selfRequest(this.outer_standardGraceClass_588, "Point", []);
            if (!Grace_isTrue(callmethod(call103, "match(1)",  [1], var_other)))
                raiseTypeError("in request of `distanceTo(_)`, " +
                  "argument 1 is not of type " +
                  "outer.Point", call103, var_other);
            // End argument type-checks
            // call case 4: self request
            var call104 = selfRequest(this, "x", []);
            // call case 6: other requests
            var call105 = callmethod(var_other, "x", []);
            var diff106 = callmethod(call104, "-(1)", [1], call105);
            var opresult107 = callmethod(diff106, "^(1)", [1], new GraceNum(2));
            // call case 4: self request
            var call108 = selfRequest(this, "y", []);
            // call case 6: other requests
            var call109 = callmethod(var_other, "y", []);
            var diff110 = callmethod(call108, "-(1)", [1], call109);
            var opresult111 = callmethod(diff110, "^(1)", [1], new GraceNum(2));
            var sum112 = callmethod(opresult107, "+(1)", [1], opresult111);
            var opresult113 = callmethod(sum112, "^(1)", [1], new GraceNum(.5));
            return opresult113;
          };    // end of method distanceTo(_)
          this.methods["distanceTo(1)"] = func102;
          func102.paramCounts = [1];
          func102.paramNames = ["other"];
          func102.typeParamNames = [];
          func102.definitionLine = 593;
          func102.definitionModule = "standardGraceClass";
          var func114 = function(argcv, var_other) {    // method -(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            // Start argument type-checks
            setLineNumber(594);    // compilenode member
            // call case 2: outer request
            var call115 = selfRequest(this.outer_standardGraceClass_588, "Point", []);
            if (!Grace_isTrue(callmethod(call115, "match(1)",  [1], var_other)))
                raiseTypeError("in request of `-(_)`, " +
                  "argument 1 is not of type " +
                  "outer.Point", call115, var_other);
            // End argument type-checks
            // call case 4: self request
            var call117 = selfRequest(this, "x", []);
            // call case 6: other requests
            var call118 = callmethod(var_other, "x", []);
            var diff119 = callmethod(call117, "-(1)", [1], call118);
            // call case 4: self request
            var call120 = selfRequest(this, "y", []);
            // call case 6: other requests
            var call121 = callmethod(var_other, "y", []);
            var diff122 = callmethod(call120, "-(1)", [1], call121);
            // call case 2: outer request
            var call116 = selfRequest(this.outer_standardGraceClass_588, "point2Dx(1)y(1)", [1, 1], diff119, diff122);
            return call116;
          };    // end of method -(_)
          this.methods["-(1)"] = func114;
          func114.paramCounts = [1];
          func114.paramNames = ["other"];
          func114.typeParamNames = [];
          func114.definitionLine = 594;
          func114.definitionModule = "standardGraceClass";
          var func123 = function(argcv, var_other) {    // method +(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            // Start argument type-checks
            setLineNumber(595);    // compilenode member
            // call case 2: outer request
            var call124 = selfRequest(this.outer_standardGraceClass_588, "Point", []);
            if (!Grace_isTrue(callmethod(call124, "match(1)",  [1], var_other)))
                raiseTypeError("in request of `+(_)`, " +
                  "argument 1 is not of type " +
                  "outer.Point", call124, var_other);
            // End argument type-checks
            // call case 4: self request
            var call126 = selfRequest(this, "x", []);
            // call case 6: other requests
            var call127 = callmethod(var_other, "x", []);
            var sum128 = callmethod(call126, "+(1)", [1], call127);
            // call case 4: self request
            var call129 = selfRequest(this, "y", []);
            // call case 6: other requests
            var call130 = callmethod(var_other, "y", []);
            var sum131 = callmethod(call129, "+(1)", [1], call130);
            // call case 2: outer request
            var call125 = selfRequest(this.outer_standardGraceClass_588, "point2Dx(1)y(1)", [1, 1], sum128, sum131);
            return call125;
          };    // end of method +(_)
          this.methods["+(1)"] = func123;
          func123.paramCounts = [1];
          func123.paramNames = ["other"];
          func123.typeParamNames = [];
          func123.definitionLine = 595;
          func123.definitionModule = "standardGraceClass";
          var func132 = function(argcv, var_other) {    // method /(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            // Start argument type-checks
            setLineNumber(596);    // compilenode identifier
            if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], var_other)))
                raiseTypeError("in request of `/(_)`, " +
                  "argument 1 is not of type " +
                  "Number", var_Number, var_other);
            // End argument type-checks
            // call case 4: self request
            var call134 = selfRequest(this, "x", []);
            var quotient135 = callmethod(call134, "/(1)", [1], var_other);
            // call case 4: self request
            var call136 = selfRequest(this, "y", []);
            var quotient137 = callmethod(call136, "/(1)", [1], var_other);
            // call case 2: outer request
            var call133 = selfRequest(this.outer_standardGraceClass_588, "point2Dx(1)y(1)", [1, 1], quotient135, quotient137);
            return call133;
          };    // end of method /(_)
          func132.paramTypes = [];
          func132.paramTypes.push([type_Number, "other"]);
          this.methods["/(1)"] = func132;
          func132.paramCounts = [1];
          func132.paramNames = ["other"];
          func132.typeParamNames = [];
          func132.definitionLine = 596;
          func132.definitionModule = "standardGraceClass";
          var func138 = function(argcv, var_other) {    // method *(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            // Start argument type-checks
            setLineNumber(597);    // compilenode identifier
            if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], var_other)))
                raiseTypeError("in request of `*(_)`, " +
                  "argument 1 is not of type " +
                  "Number", var_Number, var_other);
            // End argument type-checks
            // call case 4: self request
            var call140 = selfRequest(this, "x", []);
            var prod141 = callmethod(call140, "*(1)", [1], var_other);
            // call case 4: self request
            var call142 = selfRequest(this, "y", []);
            var prod143 = callmethod(call142, "*(1)", [1], var_other);
            // call case 2: outer request
            var call139 = selfRequest(this.outer_standardGraceClass_588, "point2Dx(1)y(1)", [1, 1], prod141, prod143);
            return call139;
          };    // end of method *(_)
          func138.paramTypes = [];
          func138.paramTypes.push([type_Number, "other"]);
          this.methods["*(1)"] = func138;
          func138.paramCounts = [1];
          func138.paramNames = ["other"];
          func138.typeParamNames = [];
          func138.definitionLine = 597;
          func138.definitionModule = "standardGraceClass";
          var func144 = function(argcv) {    // method length
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(598);    // compilenode member
            // call case 4: self request
            var call145 = selfRequest(this, "x", []);
            var opresult146 = callmethod(call145, "^(1)", [1], new GraceNum(2));
            // call case 4: self request
            var call147 = selfRequest(this, "y", []);
            var opresult148 = callmethod(call147, "^(1)", [1], new GraceNum(2));
            var sum149 = callmethod(opresult146, "+(1)", [1], opresult148);
            var opresult150 = callmethod(sum149, "^(1)", [1], new GraceNum(.5));
            return opresult150;
          };    // end of method length
          this.methods["length"] = func144;
          func144.paramCounts = [0];
          func144.paramNames = [];
          func144.typeParamNames = [];
          func144.definitionLine = 598;
          func144.definitionModule = "standardGraceClass";
          var func151 = function(argcv, var_other) {    // method ==(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(600);    // compilenode identifier
            var cases152 = [];
            setLineNumber(601);    // compilenode block
            var block153 = new GraceBlock(this, 601, 1);
            // call case 2: outer request
            var call154 = selfRequest(this.outer_standardGraceClass_588, "Point", []);
            block153.paramTypes = [call154];
            var matches155 = function(var_o) {
              setModuleName("standardGraceClass");
              // call case 2: outer request
              var call156 = selfRequest(this.outer_standardGraceClass_588, "Point", []);
              if (!Grace_isTrue(callmethod(call156, "match(1)", [1], var_o)))
                  return false;
              return true;
            };
            block153.guard = matches155;
            block153.real = function(var_o) {
              // call case 4: self request
              var call157 = selfRequest(this, "x", []);
              // call case 6: other requests
              var call158 = callmethod(var_o, "x", []);
              var opresult159 = callmethod(call157, "==(1)", [1], call158);
              // call case 4: self request
              var call160 = selfRequest(this, "y", []);
              // call case 6: other requests
              var call161 = callmethod(var_o, "y", []);
              var opresult162 = callmethod(call160, "==(1)", [1], call161);
              var opresult163 = callmethod(opresult159, "&&(1)", [1], opresult162);
              return opresult163;
            };
            cases152.push(block153);
            setLineNumber(602);    // compilenode block
            var block164 = new GraceBlock(this, 602, 1);
            setLineNumber(1);    // compilenode identifier
            var matches165 = function(var___95____95__8) {
              setModuleName("standardGraceClass");
              setLineNumber(602);    // block matches function
              return true;
            };
            block164.guard = matches165;
            block164.real = function(var___95____95__8) {
              return GraceFalse;
            };
            cases152.push(block164);
            setLineNumber(600);    // compilematchcase
            var matchres152 = matchCase(var_other,cases152,false);
            setModuleName("standardGraceClass");
            return matchres152;
          };    // end of method ==(_)
          this.methods["==(1)"] = func151;
          func151.paramCounts = [1];
          func151.paramNames = ["other"];
          func151.typeParamNames = [];
          func151.definitionLine = 599;
          func151.definitionModule = "standardGraceClass";
          var func166 = function(argcv) {    // method prefix-
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(604);    // compilenode call
            // call case 6: other requests
            // call case 4: self request
            var call169 = selfRequest(this, "x", []);
            var call168 = callmethod(call169, "prefix-", [0]);
            // call case 6: other requests
            // call case 4: self request
            var call171 = selfRequest(this, "y", []);
            var call170 = callmethod(call171, "prefix-", [0]);
            // call case 2: outer request
            var call167 = selfRequest(this.outer_standardGraceClass_588, "point2Dx(1)y(1)", [1, 1], call168, call170);
            return call167;
          };    // end of method prefix-
          this.methods["prefix-"] = func166;
          func166.paramCounts = [0];
          func166.paramNames = [];
          func166.typeParamNames = [];
          func166.definitionLine = 604;
          func166.definitionModule = "standardGraceClass";
          var func172 = function(argcv, var_other) {    // method dot(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            // Start argument type-checks
            setLineNumber(605);    // compilenode member
            // call case 2: outer request
            var call173 = selfRequest(this.outer_standardGraceClass_588, "Point", []);
            if (!Grace_isTrue(callmethod(call173, "match(1)",  [1], var_other)))
                raiseTypeError("in request of `dot(_)`, " +
                  "argument 1 is not of type " +
                  "outer.Point", call173, var_other);
            // End argument type-checks
            setLineNumber(607);    // compilenode member
            // call case 4: self request
            var call174 = selfRequest(this, "x", []);
            // call case 6: other requests
            var call175 = callmethod(var_other, "x", []);
            var prod176 = callmethod(call174, "*(1)", [1], call175);
            // call case 4: self request
            var call177 = selfRequest(this, "y", []);
            // call case 6: other requests
            var call178 = callmethod(var_other, "y", []);
            var prod179 = callmethod(call177, "*(1)", [1], call178);
            var sum180 = callmethod(prod176, "+(1)", [1], prod179);
            if (!Grace_isTrue(callmethod(var_Number, "match(1)", [1], sum180)))
                raiseTypeError(
                    "result of method dot(_) does not have type" + 
                    "Number.", var_Number, sum180);
            return sum180;
          };    // end of method dot(_)
          this.methods["dot(1)"] = func172;
          func172.paramCounts = [1];
          func172.paramNames = ["other"];
          func172.typeParamNames = [];
          func172.definitionLine = 605;
          func172.definitionModule = "standardGraceClass";
          var func181 = function(argcv, var_other) {    // method ⋅(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            // Start argument type-checks
            setLineNumber(609);    // compilenode member
            // call case 2: outer request
            var call182 = selfRequest(this.outer_standardGraceClass_588, "Point", []);
            if (!Grace_isTrue(callmethod(call182, "match(1)",  [1], var_other)))
                raiseTypeError("in request of `⋅(_)`, " +
                  "argument 1 is not of type " +
                  "outer.Point", call182, var_other);
            // End argument type-checks
            setLineNumber(611);    // compilenode member
            // call case 4: self request
            var call183 = selfRequest(this, "x", []);
            // call case 6: other requests
            var call184 = callmethod(var_other, "x", []);
            var prod185 = callmethod(call183, "*(1)", [1], call184);
            // call case 4: self request
            var call186 = selfRequest(this, "y", []);
            // call case 6: other requests
            var call187 = callmethod(var_other, "y", []);
            var prod188 = callmethod(call186, "*(1)", [1], call187);
            var sum189 = callmethod(prod185, "+(1)", [1], prod188);
            if (!Grace_isTrue(callmethod(var_Number, "match(1)", [1], sum189)))
                raiseTypeError(
                    "result of method ⋅(_) does not have type" + 
                    "Number.", var_Number, sum189);
            return sum189;
          };    // end of method ⋅(_)
          this.methods["\u22c5(1)"] = func181;
          func181.paramCounts = [1];
          func181.paramNames = ["other"];
          func181.typeParamNames = [];
          func181.definitionLine = 609;
          func181.definitionModule = "standardGraceClass";
          var func190 = function(argcv, var_n) {    // method reverseTimesNumber(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(613);    // compilenode member
            // call case 4: self request
            var call192 = selfRequest(this, "x", []);
            var prod193 = callmethod(var_n, "*(1)", [1], call192);
            // call case 4: self request
            var call194 = selfRequest(this, "x", []);
            var prod195 = callmethod(var_n, "*(1)", [1], call194);
            // call case 2: outer request
            var call191 = selfRequest(this.outer_standardGraceClass_588, "point2Dx(1)y(1)", [1, 1], prod193, prod195);
            return call191;
          };    // end of method reverseTimesNumber(_)
          this.methods["reverseTimesNumber(1)"] = func190;
          func190.paramCounts = [1];
          func190.paramNames = ["n"];
          func190.typeParamNames = [];
          func190.definitionLine = 613;
          func190.definitionModule = "standardGraceClass";
          var func196 = function(argcv, var_n) {    // method reversePlusNumber(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(614);    // compilenode member
            // call case 4: self request
            var call198 = selfRequest(this, "x", []);
            var sum199 = callmethod(var_n, "+(1)", [1], call198);
            // call case 4: self request
            var call200 = selfRequest(this, "x", []);
            var sum201 = callmethod(var_n, "+(1)", [1], call200);
            // call case 2: outer request
            var call197 = selfRequest(this.outer_standardGraceClass_588, "point2Dx(1)y(1)", [1, 1], sum199, sum201);
            return call197;
          };    // end of method reversePlusNumber(_)
          this.methods["reversePlusNumber(1)"] = func196;
          func196.paramCounts = [1];
          func196.paramNames = ["n"];
          func196.typeParamNames = [];
          func196.definitionLine = 614;
          func196.definitionModule = "standardGraceClass";
          var func202 = function(argcv, var_n) {    // method reverseDivideNumber(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(615);    // compilenode member
            // call case 4: self request
            var call204 = selfRequest(this, "x", []);
            var quotient205 = callmethod(var_n, "/(1)", [1], call204);
            // call case 4: self request
            var call206 = selfRequest(this, "x", []);
            var quotient207 = callmethod(var_n, "/(1)", [1], call206);
            // call case 2: outer request
            var call203 = selfRequest(this.outer_standardGraceClass_588, "point2Dx(1)y(1)", [1, 1], quotient205, quotient207);
            return call203;
          };    // end of method reverseDivideNumber(_)
          this.methods["reverseDivideNumber(1)"] = func202;
          func202.paramCounts = [1];
          func202.paramNames = ["n"];
          func202.typeParamNames = [];
          func202.definitionLine = 615;
          func202.definitionModule = "standardGraceClass";
          var func208 = function(argcv, var_n) {    // method reverseMinusNumber(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(616);    // compilenode member
            // call case 4: self request
            var call210 = selfRequest(this, "x", []);
            var diff211 = callmethod(var_n, "-(1)", [1], call210);
            // call case 4: self request
            var call212 = selfRequest(this, "x", []);
            var diff213 = callmethod(var_n, "-(1)", [1], call212);
            // call case 2: outer request
            var call209 = selfRequest(this.outer_standardGraceClass_588, "point2Dx(1)y(1)", [1, 1], diff211, diff213);
            return call209;
          };    // end of method reverseMinusNumber(_)
          this.methods["reverseMinusNumber(1)"] = func208;
          func208.paramCounts = [1];
          func208.paramNames = ["n"];
          func208.typeParamNames = [];
          func208.definitionLine = 616;
          func208.definitionModule = "standardGraceClass";
          var func214 = function(argcv) {    // method norm
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(617);    // compilenode member
            // call case 4: self request
            var call215 = selfRequest(this, "length", []);
            var quotient216 = callmethod(this, "/(1)", [1], call215);
            return quotient216;
          };    // end of method norm
          this.methods["norm"] = func214;
          func214.paramCounts = [0];
          func214.paramNames = [];
          func214.typeParamNames = [];
          func214.definitionLine = 617;
          func214.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj87_init = function() {    // init of object on line 588
            setLineNumber(589);    // compilenode identifier
            this.data.x = var_x__39__;
            setLineNumber(590);    // compilenode identifier
            this.data.y = var_y__39__;
          };
          return obj87_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj87_init = obj87_build.call(inheritingObject, null, var_x__39__, var_y__39__, this, aliases, exclusions);
        return obj87_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
      };    // end of method point2Dx(_)y(_)$build(_,_,_)
      this.methods["point2Dx(1)y(1)$build(3)"] = func86;
      func86.paramCounts = [1, 1];
      func86.paramNames = ["x'", "y'"];
      func86.typeParamNames = [];
      func86.definitionLine = 588;
      func86.definitionModule = "standardGraceClass";
      this.data.Block0 = undefined;
      var reader_Block0217 = function() {  // reader method Block0
          return this.data.Block0;
      };
      reader_Block0217.isType = true;
      this.methods["Block0"] = reader_Block0217;
      this.data.Block1 = undefined;
      var reader_Block1218 = function() {  // reader method Block1
          return this.data.Block1;
      };
      reader_Block1218.isType = true;
      this.methods["Block1"] = reader_Block1218;
      this.data.Block2 = undefined;
      var reader_Block2219 = function() {  // reader method Block2
          return this.data.Block2;
      };
      reader_Block2219.isType = true;
      this.methods["Block2"] = reader_Block2219;
      this.data.Block3 = undefined;
      var reader_Block3220 = function() {  // reader method Block3
          return this.data.Block3;
      };
      reader_Block3220.isType = true;
      this.methods["Block3"] = reader_Block3220;
      this.data.Cmd = undefined;
      var reader_Cmd221 = function() {  // reader method Cmd
          return this.data.Cmd;
      };
      reader_Cmd221.isType = true;
      this.methods["Cmd"] = reader_Cmd221;
      this.data.Fun = undefined;
      var reader_Fun222 = function() {  // reader method Fun
          return this.data.Fun;
      };
      reader_Fun222.isType = true;
      this.methods["Fun"] = reader_Fun222;
      this.data.Fun2 = undefined;
      var reader_Fun2223 = function() {  // reader method Fun2
          return this.data.Fun2;
      };
      reader_Fun2223.isType = true;
      this.methods["Fun2"] = reader_Fun2223;
      this.data.Fun3 = undefined;
      var reader_Fun3224 = function() {  // reader method Fun3
          return this.data.Fun3;
      };
      reader_Fun3224.isType = true;
      this.methods["Fun3"] = reader_Fun3224;
      this.data.Proc = undefined;
      var reader_Proc225 = function() {  // reader method Proc
          return this.data.Proc;
      };
      reader_Proc225.isType = true;
      this.methods["Proc"] = reader_Proc225;
      this.data.Proc2 = undefined;
      var reader_Proc2226 = function() {  // reader method Proc2
          return this.data.Proc2;
      };
      reader_Proc2226.isType = true;
      this.methods["Proc2"] = reader_Proc2226;
      this.data.Proc3 = undefined;
      var reader_Proc3227 = function() {  // reader method Proc3
          return this.data.Proc3;
      };
      reader_Proc3227.isType = true;
      this.methods["Proc3"] = reader_Proc3227;
      this.data.SelfType = undefined;
      var reader_SelfType228 = function() {  // reader method SelfType
          return this.data.SelfType;
      };
      reader_SelfType228.isType = true;
      this.methods["SelfType"] = reader_SelfType228;
      this.data.Iterable = undefined;
      var reader_Iterable229 = function() {  // reader method Iterable
          return this.data.Iterable;
      };
      reader_Iterable229.isType = true;
      this.methods["Iterable"] = reader_Iterable229;
      this.data.Expandable = undefined;
      var reader_Expandable230 = function() {  // reader method Expandable
          return this.data.Expandable;
      };
      reader_Expandable230.isType = true;
      this.methods["Expandable"] = reader_Expandable230;
      this.data.Collection = undefined;
      var reader_Collection231 = function() {  // reader method Collection
          return this.data.Collection;
      };
      reader_Collection231.isType = true;
      this.methods["Collection"] = reader_Collection231;
      this.data.Enumerable = undefined;
      var reader_Enumerable232 = function() {  // reader method Enumerable
          return this.data.Enumerable;
      };
      reader_Enumerable232.isType = true;
      this.methods["Enumerable"] = reader_Enumerable232;
      this.data.Sequence = undefined;
      var reader_Sequence233 = function() {  // reader method Sequence
          return this.data.Sequence;
      };
      reader_Sequence233.isType = true;
      this.methods["Sequence"] = reader_Sequence233;
      this.data.List = undefined;
      var reader_List234 = function() {  // reader method List
          return this.data.List;
      };
      reader_List234.isType = true;
      this.methods["List"] = reader_List234;
      this.data.Set = undefined;
      var reader_Set235 = function() {  // reader method Set
          return this.data.Set;
      };
      reader_Set235.isType = true;
      this.methods["Set"] = reader_Set235;
      this.data.Dictionary = undefined;
      var reader_Dictionary236 = function() {  // reader method Dictionary
          return this.data.Dictionary;
      };
      reader_Dictionary236.isType = true;
      this.methods["Dictionary"] = reader_Dictionary236;
      this.data.Iterator = undefined;
      var reader_Iterator237 = function() {  // reader method Iterator
          return this.data.Iterator;
      };
      reader_Iterator237.isType = true;
      this.methods["Iterator"] = reader_Iterator237;
      var func238 = function(argcv, var_source, var_function, var_T, var_R) {    // method lazySequenceOver(_)mappedBy(_)
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_T === undefined) var_T = var_Unknown;
        if (var_R === undefined) var_R = var_Unknown;
        var numArgs = arguments.length - 1 - 0;
        if ((numArgs > 2) && (numArgs < 4)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method lazySequenceOver(_)mappedBy(_) expects 2 type parameters, but was given " + (numArgs - 2)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        // Start argument type-checks
        setLineNumber(789);    // compilenode member
        // call case 4: self request
        var call239 = selfRequest(this, "Iterable", []);
        if (!Grace_isTrue(callmethod(call239, "match(1)",  [1], var_source)))
            raiseTypeError("in request of `lazySequenceOver(_)mappedBy(_)`, " +
              "argument 1 to `lazySequenceOver`  is not of type " +
              "Iterable⟦T⟧", call239, var_source);
        setLineNumber(790);    // compilenode member
        // call case 4: self request
        var call240 = selfRequest(this, "Block1", []);
        if (!Grace_isTrue(callmethod(call240, "match(1)",  [1], var_function)))
            raiseTypeError("in request of `lazySequenceOver(_)mappedBy(_)`, " +
              "argument 1 to `mappedBy`  is not of type " +
              "Block1⟦T, R⟧", call240, var_function);
        // End argument type-checks
        var ouc = emptyGraceObject("standardGrace.lazySequenceOver(_)mappedBy(_)", "standardGraceClass", 789);
        var ouc_init = this.methods["lazySequenceOver(1)mappedBy(1)$build(3)"].call(this, null, var_source, var_function, ouc, [], []);
        ouc_init.call(ouc);
        return ouc;
      };    // end of method lazySequenceOver(_)mappedBy(_)
      this.methods["lazySequenceOver(1)mappedBy(1)"] = func238;
      func238.paramCounts = [1, 1];
      func238.paramNames = ["source", "function"];
      func238.typeParamNames = ["T", "R"];
      func238.definitionLine = 789;
      func238.definitionModule = "standardGraceClass";
      var func241 = function(argcv, var_source, var_function, inheritingObject, aliases, exclusions, var_T, var_R) {    // method lazySequenceOver(_)mappedBy(_)$build(_,_,_)
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_T === undefined) var_T = var_Unknown;
        if (var_R === undefined) var_R = var_Unknown;
        var numArgs = arguments.length - 1 - 3;
        if ((numArgs > 2) && (numArgs < 4)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method lazySequenceOver(_)mappedBy(_) expects 2 type parameters, but was given " + (numArgs - 2)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        // Start argument type-checks
        setLineNumber(789);    // compilenode member
        // call case 4: self request
        var call242 = selfRequest(this, "Iterable", []);
        if (!Grace_isTrue(callmethod(call242, "match(1)",  [1], var_source)))
            raiseTypeError("in request of `lazySequenceOver(_)mappedBy(_)`, " +
              "argument 1 to `lazySequenceOver`  is not of type " +
              "Iterable⟦T⟧", call242, var_source);
        setLineNumber(790);    // compilenode member
        // call case 4: self request
        var call243 = selfRequest(this, "Block1", []);
        if (!Grace_isTrue(callmethod(call243, "match(1)",  [1], var_function)))
            raiseTypeError("in request of `lazySequenceOver(_)mappedBy(_)`, " +
              "argument 1 to `mappedBy`  is not of type " +
              "Block1⟦T, R⟧", call243, var_function);
        // End argument type-checks
        var obj244_build = function(ignore, var_source, var_function, outerObj, aliases, exclusions, var_T, var_R) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_789");
          this.outer_standardGraceClass_789 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          setLineNumber(791);    // compilenode identifier
          var initFun245 = callmethod(var_traits, "enumerable$build(3)", [null], this, [], []);  // compileReuseCall
          var func246 = function(argcv) {    // method iterator
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("standardGrace.lazySequenceOver(_)mappedBy(_).iterator", "standardGraceClass", 792);
            var ouc_init = this.methods["iterator$build(3)"].call(this, null, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method iterator
          this.methods["iterator"] = func246;
          func246.paramCounts = [0];
          func246.paramNames = [];
          func246.typeParamNames = [];
          func246.definitionLine = 792;
          func246.definitionModule = "standardGraceClass";
          var func247 = function(argcv, inheritingObject, aliases, exclusions) {    // method iterator$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj248_build = function(ignore, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_792");
              this.outer_standardGraceClass_792 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              this.data.sourceIterator = undefined;
              var reader_sourceIterator249 = function() {  // reader method sourceIterator
                  return this.data.sourceIterator;
              };
              reader_sourceIterator249.isDef = true;
              reader_sourceIterator249.confidential = true;
              this.methods["sourceIterator"] = reader_sourceIterator249;
              var func250 = function(argcv) {    // method asString
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(794);    // compilenode string
                var string251 = new GraceString("an iterator over a lazy map sequence");
                return string251;
              };    // end of method asString
              this.methods["asString"] = func250;
              func250.paramCounts = [0];
              func250.paramNames = [];
              func250.typeParamNames = [];
              func250.definitionLine = 794;
              func250.definitionModule = "standardGraceClass";
              var func252 = function(argcv) {    // method hasNext
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(795);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call254 = selfRequest(this, "sourceIterator", []);
                var call253 = callmethod(call254, "hasNext", []);
                return call253;
              };    // end of method hasNext
              this.methods["hasNext"] = func252;
              func252.paramCounts = [0];
              func252.paramNames = [];
              func252.typeParamNames = [];
              func252.definitionLine = 795;
              func252.definitionModule = "standardGraceClass";
              var func255 = function(argcv) {    // method next
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(796);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call258 = selfRequest(this, "sourceIterator", []);
                var call257 = callmethod(call258, "next", []);
                // call case 6: other requests
                var call256 = callmethod(var_function, "apply(1)", [1], call257);
                return call256;
              };    // end of method next
              this.methods["next"] = func255;
              func255.paramCounts = [0];
              func255.paramNames = [];
              func255.typeParamNames = [];
              func255.definitionLine = 796;
              func255.definitionModule = "standardGraceClass";
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj248_init = function() {    // init of object on line 792
                setLineNumber(793);    // compilenode member
                // call case 6: other requests
                var call259 = callmethod(var_source, "iterator", []);
                this.data.sourceIterator = call259;
              };
              return obj248_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj248_init = obj248_build.call(inheritingObject, null, this, aliases, exclusions);
            return obj248_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method iterator$build(_,_,_)
          this.methods["iterator$build(3)"] = func247;
          func247.paramCounts = [0];
          func247.paramNames = [];
          func247.typeParamNames = [];
          func247.definitionLine = 792;
          func247.definitionModule = "standardGraceClass";
          var func260 = function(argcv) {    // method size
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(798);    // compilenode member
            // call case 6: other requests
            var call261 = callmethod(var_source, "size", []);
            return call261;
          };    // end of method size
          this.methods["size"] = func260;
          func260.paramCounts = [0];
          func260.paramNames = [];
          func260.typeParamNames = [];
          func260.definitionLine = 798;
          func260.definitionModule = "standardGraceClass";
          var func262 = function(argcv) {    // method isEmpty
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(799);    // compilenode member
            // call case 6: other requests
            var call263 = callmethod(var_source, "isEmpty", []);
            return call263;
          };    // end of method isEmpty
          this.methods["isEmpty"] = func262;
          func262.paramCounts = [0];
          func262.paramNames = [];
          func262.typeParamNames = [];
          func262.definitionLine = 799;
          func262.definitionModule = "standardGraceClass";
          var func264 = function(argcv) {    // method asDebugString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(800);    // compilenode string
            var string265 = new GraceString("a lazy sequence mapping over ");
            var opresult266 = callmethod(string265, "++(1)", [1], var_source);
            var string267 = new GraceString("");
            var opresult268 = callmethod(opresult266, "++(1)", [1], string267);
            return opresult268;
          };    // end of method asDebugString
          this.methods["asDebugString"] = func264;
          func264.paramCounts = [0];
          func264.paramNames = [];
          func264.typeParamNames = [];
          func264.definitionLine = 800;
          func264.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj244_init = function() {    // init of object on line 789
            initFun245.call(this);
          };
          return obj244_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj244_init = obj244_build.call(inheritingObject, null, var_source, var_function, this, aliases, exclusions, var_T, var_R);
        return obj244_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
      };    // end of method lazySequenceOver(_)mappedBy(_)$build(_,_,_)
      this.methods["lazySequenceOver(1)mappedBy(1)$build(3)"] = func241;
      func241.paramCounts = [1, 1];
      func241.paramNames = ["source", "function"];
      func241.typeParamNames = ["T", "R"];
      func241.definitionLine = 789;
      func241.definitionModule = "standardGraceClass";
      var func269 = function(argcv, var_source, var_predicate, var_T) {    // method lazySequenceOver(_)filteredBy(_)
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_T === undefined) var_T = var_Unknown;
        var numArgs = arguments.length - 1 - 0;
        if ((numArgs > 2) && (numArgs < 3)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method lazySequenceOver(_)filteredBy(_) expects 1 type parameter, but was given " + (numArgs - 2)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        // Start argument type-checks
        setLineNumber(803);    // compilenode member
        // call case 4: self request
        var call270 = selfRequest(this, "Iterable", []);
        if (!Grace_isTrue(callmethod(call270, "match(1)",  [1], var_source)))
            raiseTypeError("in request of `lazySequenceOver(_)filteredBy(_)`, " +
              "argument 1 to `lazySequenceOver`  is not of type " +
              "Iterable⟦T⟧", call270, var_source);
        setLineNumber(804);    // compilenode member
        // call case 4: self request
        var call271 = selfRequest(this, "Block1", []);
        if (!Grace_isTrue(callmethod(call271, "match(1)",  [1], var_predicate)))
            raiseTypeError("in request of `lazySequenceOver(_)filteredBy(_)`, " +
              "argument 1 to `filteredBy`  is not of type " +
              "Block1⟦T, Boolean⟧", call271, var_predicate);
        // End argument type-checks
        var ouc = emptyGraceObject("standardGrace.lazySequenceOver(_)filteredBy(_)", "standardGraceClass", 803);
        var ouc_init = this.methods["lazySequenceOver(1)filteredBy(1)$build(3)"].call(this, null, var_source, var_predicate, ouc, [], []);
        ouc_init.call(ouc);
        return ouc;
      };    // end of method lazySequenceOver(_)filteredBy(_)
      this.methods["lazySequenceOver(1)filteredBy(1)"] = func269;
      func269.paramCounts = [1, 1];
      func269.paramNames = ["source", "predicate"];
      func269.typeParamNames = ["T"];
      func269.definitionLine = 803;
      func269.definitionModule = "standardGraceClass";
      var func272 = function(argcv, var_source, var_predicate, inheritingObject, aliases, exclusions, var_T) {    // method lazySequenceOver(_)filteredBy(_)$build(_,_,_)
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_T === undefined) var_T = var_Unknown;
        var numArgs = arguments.length - 1 - 3;
        if ((numArgs > 2) && (numArgs < 3)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method lazySequenceOver(_)filteredBy(_) expects 1 type parameter, but was given " + (numArgs - 2)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        // Start argument type-checks
        setLineNumber(803);    // compilenode member
        // call case 4: self request
        var call273 = selfRequest(this, "Iterable", []);
        if (!Grace_isTrue(callmethod(call273, "match(1)",  [1], var_source)))
            raiseTypeError("in request of `lazySequenceOver(_)filteredBy(_)`, " +
              "argument 1 to `lazySequenceOver`  is not of type " +
              "Iterable⟦T⟧", call273, var_source);
        setLineNumber(804);    // compilenode member
        // call case 4: self request
        var call274 = selfRequest(this, "Block1", []);
        if (!Grace_isTrue(callmethod(call274, "match(1)",  [1], var_predicate)))
            raiseTypeError("in request of `lazySequenceOver(_)filteredBy(_)`, " +
              "argument 1 to `filteredBy`  is not of type " +
              "Block1⟦T, Boolean⟧", call274, var_predicate);
        // End argument type-checks
        var obj275_build = function(ignore, var_source, var_predicate, outerObj, aliases, exclusions, var_T) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_803");
          this.outer_standardGraceClass_803 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          setLineNumber(805);    // compilenode identifier
          var initFun276 = callmethod(var_traits, "enumerable$build(3)", [null], this, [], []);  // compileReuseCall
          var func277 = function(argcv) {    // method iterator
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("standardGrace.lazySequenceOver(_)filteredBy(_).iterator", "standardGraceClass", 806);
            var ouc_init = this.methods["iterator$build(3)"].call(this, null, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method iterator
          this.methods["iterator"] = func277;
          func277.paramCounts = [0];
          func277.paramNames = [];
          func277.typeParamNames = [];
          func277.definitionLine = 806;
          func277.definitionModule = "standardGraceClass";
          var func278 = function(argcv, inheritingObject, aliases, exclusions) {    // method iterator$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj279_build = function(ignore, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_806");
              this.outer_standardGraceClass_806 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              this.data.cache = undefined;
              var reader_cache280 = function() {  // reader method cache
                  return this.data.cache;
              };
              reader_cache280.isVar = true;
              reader_cache280.confidential = true;
              this.methods["cache"] = reader_cache280;
              var writer_cache280 = function(argcv, n) {   // writer method cache:=(_)
                  this.data.cache = n;
                  return GraceDone;
              };
              writer_cache280.confidential = true;
              this.methods["cache:=(1)"] = writer_cache280;
              this.data.cacheLoaded = undefined;
              var reader_cacheLoaded281 = function() {  // reader method cacheLoaded
                  return this.data.cacheLoaded;
              };
              reader_cacheLoaded281.isVar = true;
              reader_cacheLoaded281.confidential = true;
              this.methods["cacheLoaded"] = reader_cacheLoaded281;
              var writer_cacheLoaded281 = function(argcv, n) {   // writer method cacheLoaded:=(_)
                  this.data.cacheLoaded = n;
                  return GraceDone;
              };
              writer_cacheLoaded281.confidential = true;
              this.methods["cacheLoaded:=(1)"] = writer_cacheLoaded281;
              this.data.sourceIterator = undefined;
              var reader_sourceIterator282 = function() {  // reader method sourceIterator
                  return this.data.sourceIterator;
              };
              reader_sourceIterator282.isDef = true;
              reader_sourceIterator282.confidential = true;
              this.methods["sourceIterator"] = reader_sourceIterator282;
              var func283 = function(argcv) {    // method asString
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(810);    // compilenode string
                var string284 = new GraceString("an iterator over filtered ");
                var opresult285 = callmethod(string284, "++(1)", [1], var_source);
                var string286 = new GraceString("");
                var opresult287 = callmethod(opresult285, "++(1)", [1], string286);
                return opresult287;
              };    // end of method asString
              this.methods["asString"] = func283;
              func283.paramCounts = [0];
              func283.paramNames = [];
              func283.typeParamNames = [];
              func283.definitionLine = 810;
              func283.definitionModule = "standardGraceClass";
              var func288 = function(argcv) {    // method hasNext
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var if289 = GraceDone;
                setLineNumber(814);    // compilenode member
                // call case 4: self request
                var call290 = selfRequest(this, "cacheLoaded", []);
                if (Grace_isTrue(call290)) {
                  if289 = GraceTrue;
                } else {
                  // call case 4: self request
                  var call291 = selfRequest(this, "hasNextAcceptableElement", []);
                  if289 = call291;
                }
                return if289;
              };    // end of method hasNext
              this.methods["hasNext"] = func288;
              func288.paramCounts = [0];
              func288.paramNames = [];
              func288.typeParamNames = [];
              func288.definitionLine = 811;
              func288.definitionModule = "standardGraceClass";
              var func292 = function(argcv) {    // method next
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var if293 = GraceDone;
                setLineNumber(817);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call295 = selfRequest(this, "cacheLoaded", []);
                var call294 = callmethod(call295, "not", []);
                if (Grace_isTrue(call294)) {
                  // call case 4: self request
                  var call297 = selfRequest(this, "nextAcceptableElement", []);
                  // call case 4: self request
                  var call296 = selfRequest(this, "cache:=(1)", [1], call297);
                  if293 = call296;
                }
                setLineNumber(818);    // compilenode identifier
                // call case 4: self request
                var call298 = selfRequest(this, "cacheLoaded:=(1)", [1], GraceFalse);
                setLineNumber(819);    // compilenode member
                // call case 4: self request
                var call299 = selfRequest(this, "cache", []);
                return call299;
                return undefined;
              };    // end of method next
              this.methods["next"] = func292;
              func292.paramCounts = [0];
              func292.paramNames = [];
              func292.typeParamNames = [];
              func292.definitionLine = 816;
              func292.definitionModule = "standardGraceClass";
              var func300 = function(argcv) {    // method nextAcceptableElement
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(824);    // compilenode block
                var block302 = new GraceBlock(this, 824, 0);
                var matches303 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block302.guard = matches303;
                block302.real = function() {
                  return GraceTrue;
                };
                var block304 = new GraceBlock(this, 824, 0);
                var matches305 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block304.guard = matches305;
                block304.real = function() {
                  setLineNumber(825);    // compilenode member
                  // call case 6: other requests
                  // call case 4: self request
                  var call307 = selfRequest(this, "sourceIterator", []);
                  var call306 = callmethod(call307, "next", []);
                  var var_outerNext = call306;
                  setLineNumber(826);    // compilenode identifier
                  // call case 6: other requests
                  var call308 = callmethod(var_predicate, "apply(1)", [1], var_outerNext);
                  var var_isAcceptable = call308;
                  var if309 = GraceDone;
                  setLineNumber(827);    // compilenode identifier
                  if (Grace_isTrue(var_isAcceptable)) {
                    throw new ReturnException(var_outerNext, returnTarget);
                  }
                  return if309;
                };
                // call case 5: prelude request
                var call301 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block302, block304);
                return call301;
              };    // end of method nextAcceptableElement
              func300.confidential = true;
              this.methods["nextAcceptableElement"] = func300;
              func300.paramCounts = [0];
              func300.paramNames = [];
              func300.typeParamNames = [];
              func300.definitionLine = 821;
              func300.definitionModule = "standardGraceClass";
              var func310 = function(argcv) {    // method hasNextAcceptableElement
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(833);    // compilenode block
                var block312 = new GraceBlock(this, 833, 0);
                var matches313 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block312.guard = matches313;
                block312.real = function() {
                  return GraceTrue;
                };
                var block314 = new GraceBlock(this, 833, 0);
                var matches315 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block314.guard = matches315;
                block314.real = function() {
                  var if316 = GraceDone;
                  setLineNumber(834);    // compilenode member
                  // call case 6: other requests
                  // call case 6: other requests
                  // call case 4: self request
                  var call319 = selfRequest(this, "sourceIterator", []);
                  var call318 = callmethod(call319, "hasNext", []);
                  var call317 = callmethod(call318, "not", []);
                  if (Grace_isTrue(call317)) {
                    throw new ReturnException(GraceFalse, returnTarget);
                  }
                  setLineNumber(835);    // compilenode member
                  // call case 6: other requests
                  // call case 4: self request
                  var call321 = selfRequest(this, "sourceIterator", []);
                  var call320 = callmethod(call321, "next", []);
                  var var_outerNext = call320;
                  setLineNumber(836);    // compilenode identifier
                  // call case 6: other requests
                  var call322 = callmethod(var_predicate, "apply(1)", [1], var_outerNext);
                  var var_isAcceptable = call322;
                  var if323 = GraceDone;
                  setLineNumber(837);    // compilenode identifier
                  if (Grace_isTrue(var_isAcceptable)) {
                    setLineNumber(838);    // compilenode identifier
                    // call case 4: self request
                    var call324 = selfRequest(this, "cacheLoaded:=(1)", [1], GraceTrue);
                    setLineNumber(839);    // compilenode identifier
                    // call case 4: self request
                    var call325 = selfRequest(this, "cache:=(1)", [1], var_outerNext);
                    setLineNumber(840);    // compilenode identifier
                    throw new ReturnException(GraceTrue, returnTarget);
                  }
                  return if323;
                };
                // call case 5: prelude request
                var call311 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block312, block314);
                return call311;
              };    // end of method hasNextAcceptableElement
              func310.confidential = true;
              this.methods["hasNextAcceptableElement"] = func310;
              func310.paramCounts = [0];
              func310.paramNames = [];
              func310.typeParamNames = [];
              func310.definitionLine = 830;
              func310.definitionModule = "standardGraceClass";
              this.mutable = true;
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj279_init = function() {    // init of object on line 806
                setLineNumber(808);    // compilenode identifier
                this.data.cacheLoaded = GraceFalse;
                setLineNumber(809);    // compilenode member
                // call case 6: other requests
                var call326 = callmethod(var_source, "iterator", []);
                this.data.sourceIterator = call326;
              };
              return obj279_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj279_init = obj279_build.call(inheritingObject, null, this, aliases, exclusions);
            return obj279_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method iterator$build(_,_,_)
          this.methods["iterator$build(3)"] = func278;
          func278.paramCounts = [0];
          func278.paramNames = [];
          func278.typeParamNames = [];
          func278.definitionLine = 806;
          func278.definitionModule = "standardGraceClass";
          var func327 = function(argcv) {    // method asDebugString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(845);    // compilenode string
            var string328 = new GraceString("a lazy sequence filtering ");
            var opresult329 = callmethod(string328, "++(1)", [1], var_source);
            var string330 = new GraceString("");
            var opresult331 = callmethod(opresult329, "++(1)", [1], string330);
            return opresult331;
          };    // end of method asDebugString
          this.methods["asDebugString"] = func327;
          func327.paramCounts = [0];
          func327.paramNames = [];
          func327.typeParamNames = [];
          func327.definitionLine = 845;
          func327.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj275_init = function() {    // init of object on line 803
            initFun276.call(this);
          };
          return obj275_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj275_init = obj275_build.call(inheritingObject, null, var_source, var_predicate, this, aliases, exclusions, var_T);
        return obj275_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
      };    // end of method lazySequenceOver(_)filteredBy(_)$build(_,_,_)
      this.methods["lazySequenceOver(1)filteredBy(1)$build(3)"] = func272;
      func272.paramCounts = [1, 1];
      func272.paramNames = ["source", "predicate"];
      func272.typeParamNames = ["T"];
      func272.definitionLine = 803;
      func272.definitionModule = "standardGraceClass";
      var func332 = function(argcv, var_left, var_right, var_T) {    // method iteratorConcat(_,_)
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_T === undefined) var_T = var_Unknown;
        var numArgs = arguments.length - 1 - 0;
        if ((numArgs > 2) && (numArgs < 3)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method iteratorConcat(_,_) expects 1 type parameter, but was given " + (numArgs - 2)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        // Start argument type-checks
        setLineNumber(848);    // compilenode member
        // call case 4: self request
        var call333 = selfRequest(this, "Iterator", []);
        if (!Grace_isTrue(callmethod(call333, "match(1)",  [1], var_left)))
            raiseTypeError("in request of `iteratorConcat(_,_)`, " +
              "argument 1 is not of type " +
              "Iterator⟦T⟧", call333, var_left);
        // call case 4: self request
        var call334 = selfRequest(this, "Iterator", []);
        if (!Grace_isTrue(callmethod(call334, "match(1)",  [1], var_right)))
            raiseTypeError("in request of `iteratorConcat(_,_)`, " +
              "argument 2 is not of type " +
              "Iterator⟦T⟧", call334, var_right);
        // End argument type-checks
        var ouc = emptyGraceObject("standardGrace.iteratorConcat(_,_)", "standardGraceClass", 848);
        var ouc_init = this.methods["iteratorConcat(2)$build(3)"].call(this, null, var_left, var_right, ouc, [], []);
        ouc_init.call(ouc);
        return ouc;
      };    // end of method iteratorConcat(_,_)
      this.methods["iteratorConcat(2)"] = func332;
      func332.paramCounts = [2];
      func332.paramNames = ["left", "right"];
      func332.typeParamNames = ["T"];
      func332.definitionLine = 848;
      func332.definitionModule = "standardGraceClass";
      var func335 = function(argcv, var_left, var_right, inheritingObject, aliases, exclusions, var_T) {    // method iteratorConcat(_,_)$build(_,_,_)
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_T === undefined) var_T = var_Unknown;
        var numArgs = arguments.length - 1 - 3;
        if ((numArgs > 2) && (numArgs < 3)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method iteratorConcat(_,_) expects 1 type parameter, but was given " + (numArgs - 2)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        // Start argument type-checks
        // call case 4: self request
        var call336 = selfRequest(this, "Iterator", []);
        if (!Grace_isTrue(callmethod(call336, "match(1)",  [1], var_left)))
            raiseTypeError("in request of `iteratorConcat(_,_)`, " +
              "argument 1 is not of type " +
              "Iterator⟦T⟧", call336, var_left);
        // call case 4: self request
        var call337 = selfRequest(this, "Iterator", []);
        if (!Grace_isTrue(callmethod(call337, "match(1)",  [1], var_right)))
            raiseTypeError("in request of `iteratorConcat(_,_)`, " +
              "argument 2 is not of type " +
              "Iterator⟦T⟧", call337, var_right);
        // End argument type-checks
        var obj338_build = function(ignore, var_left, var_right, outerObj, aliases, exclusions, var_T) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_848");
          this.outer_standardGraceClass_848 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func339 = function(argcv) {    // method next
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var if340 = GraceDone;
            setLineNumber(850);    // compilenode member
            // call case 6: other requests
            var call341 = callmethod(var_left, "hasNext", []);
            if (Grace_isTrue(call341)) {
              setLineNumber(851);    // compilenode member
              // call case 6: other requests
              var call342 = callmethod(var_left, "next", []);
              if340 = call342;
            } else {
              setLineNumber(853);    // compilenode member
              // call case 6: other requests
              var call343 = callmethod(var_right, "next", []);
              if340 = call343;
            }
            return if340;
          };    // end of method next
          this.methods["next"] = func339;
          func339.paramCounts = [0];
          func339.paramNames = [];
          func339.typeParamNames = [];
          func339.definitionLine = 849;
          func339.definitionModule = "standardGraceClass";
          var func344 = function(argcv) {    // method hasNext
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var if345 = GraceDone;
            setLineNumber(857);    // compilenode member
            // call case 6: other requests
            var call346 = callmethod(var_left, "hasNext", []);
            if (Grace_isTrue(call346)) {
              return GraceTrue;
            }
            setLineNumber(858);    // compilenode member
            // call case 6: other requests
            var call347 = callmethod(var_right, "hasNext", []);
            return call347;
            return undefined;
          };    // end of method hasNext
          this.methods["hasNext"] = func344;
          func344.paramCounts = [0];
          func344.paramNames = [];
          func344.typeParamNames = [];
          func344.definitionLine = 856;
          func344.definitionModule = "standardGraceClass";
          var func348 = function(argcv) {    // method asDebugString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(860);    // compilenode string
            var string349 = new GraceString("iteratorConcat of ");
            var opresult350 = callmethod(string349, "++(1)", [1], var_left);
            var string351 = new GraceString(" and ");
            var opresult352 = callmethod(opresult350, "++(1)", [1], string351);
            var opresult353 = callmethod(opresult352, "++(1)", [1], var_right);
            var string354 = new GraceString("");
            var opresult355 = callmethod(opresult353, "++(1)", [1], string354);
            return opresult355;
          };    // end of method asDebugString
          this.methods["asDebugString"] = func348;
          func348.paramCounts = [0];
          func348.paramNames = [];
          func348.typeParamNames = [];
          func348.definitionLine = 860;
          func348.definitionModule = "standardGraceClass";
          var func356 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(861);    // compilenode string
            var string357 = new GraceString("an iterator over a concatenation");
            return string357;
          };    // end of method asString
          this.methods["asString"] = func356;
          func356.paramCounts = [0];
          func356.paramNames = [];
          func356.typeParamNames = [];
          func356.definitionLine = 861;
          func356.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj338_init = function() {    // init of object on line 848
          };
          return obj338_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj338_init = obj338_build.call(inheritingObject, null, var_left, var_right, this, aliases, exclusions, var_T);
        return obj338_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
      };    // end of method iteratorConcat(_,_)$build(_,_,_)
      this.methods["iteratorConcat(2)$build(3)"] = func335;
      func335.paramCounts = [2];
      func335.paramNames = ["left", "right"];
      func335.typeParamNames = ["T"];
      func335.definitionLine = 848;
      func335.definitionModule = "standardGraceClass";
      var func358 = function(argcv, var_left, var_right, var_T) {    // method lazyConcatenation(_,_)
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_T === undefined) var_T = var_Unknown;
        var numArgs = arguments.length - 1 - 0;
        if ((numArgs > 2) && (numArgs < 3)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method lazyConcatenation(_,_) expects 1 type parameter, but was given " + (numArgs - 2)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        var ouc = emptyGraceObject("standardGrace.lazyConcatenation(_,_)", "standardGraceClass", 864);
        var ouc_init = this.methods["lazyConcatenation(2)$build(3)"].call(this, null, var_left, var_right, ouc, [], []);
        ouc_init.call(ouc);
        return ouc;
      };    // end of method lazyConcatenation(_,_)
      this.methods["lazyConcatenation(2)"] = func358;
      func358.paramCounts = [2];
      func358.paramNames = ["left", "right"];
      func358.typeParamNames = ["T"];
      func358.definitionLine = 864;
      func358.definitionModule = "standardGraceClass";
      var func359 = function(argcv, var_left, var_right, inheritingObject, aliases, exclusions, var_T) {    // method lazyConcatenation(_,_)$build(_,_,_)
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_T === undefined) var_T = var_Unknown;
        var numArgs = arguments.length - 1 - 3;
        if ((numArgs > 2) && (numArgs < 3)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method lazyConcatenation(_,_) expects 1 type parameter, but was given " + (numArgs - 2)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        var obj360_build = function(ignore, var_left, var_right, outerObj, aliases, exclusions, var_T) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_864");
          this.outer_standardGraceClass_864 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          setLineNumber(865);    // compilenode identifier
          var initFun361 = callmethod(var_traits, "enumerable$build(3)", [null], this, [], []);  // compileReuseCall
          var func362 = function(argcv) {    // method iterator
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(867);    // compilenode member
            // call case 6: other requests
            var call364 = callmethod(var_left, "iterator", []);
            // call case 6: other requests
            var call365 = callmethod(var_right, "iterator", []);
            // call case 2: outer request
            var call363 = selfRequest(this.outer_standardGraceClass_864, "iteratorConcat(2)", [2], call364, call365);
            return call363;
          };    // end of method iterator
          this.methods["iterator"] = func362;
          func362.paramCounts = [0];
          func362.paramNames = [];
          func362.typeParamNames = [];
          func362.definitionLine = 866;
          func362.definitionModule = "standardGraceClass";
          var func366 = function(argcv) {    // method asDebugString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(869);    // compilenode string
            var string367 = new GraceString("lazy concatenation of ");
            var opresult368 = callmethod(string367, "++(1)", [1], var_left);
            var string369 = new GraceString(" and ");
            var opresult370 = callmethod(opresult368, "++(1)", [1], string369);
            var opresult371 = callmethod(opresult370, "++(1)", [1], var_right);
            var string372 = new GraceString("");
            var opresult373 = callmethod(opresult371, "++(1)", [1], string372);
            return opresult373;
          };    // end of method asDebugString
          this.methods["asDebugString"] = func366;
          func366.paramCounts = [0];
          func366.paramNames = [];
          func366.typeParamNames = [];
          func366.definitionLine = 869;
          func366.definitionModule = "standardGraceClass";
          var func374 = function(argcv) {    // method size
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(870);    // compilenode member
            // call case 6: other requests
            var call375 = callmethod(var_left, "size", []);
            // call case 6: other requests
            var call376 = callmethod(var_right, "size", []);
            var sum377 = callmethod(call375, "+(1)", [1], call376);
            return sum377;
          };    // end of method size
          this.methods["size"] = func374;
          func374.paramCounts = [0];
          func374.paramNames = [];
          func374.typeParamNames = [];
          func374.definitionLine = 870;
          func374.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj360_init = function() {    // init of object on line 864
            initFun361.call(this);
          };
          return obj360_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj360_init = obj360_build.call(inheritingObject, null, var_left, var_right, this, aliases, exclusions, var_T);
        return obj360_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
      };    // end of method lazyConcatenation(_,_)$build(_,_,_)
      this.methods["lazyConcatenation(2)$build(3)"] = func359;
      func359.paramCounts = [2];
      func359.paramNames = ["left", "right"];
      func359.typeParamNames = ["T"];
      func359.definitionLine = 864;
      func359.definitionModule = "standardGraceClass";
      this.data.emptySequence = undefined;
      var reader_emptySequence378 = function() {  // reader method emptySequence
          return this.data.emptySequence;
      };
      reader_emptySequence378.isDef = true;
      reader_emptySequence378.confidential = true;
      this.methods["emptySequence"] = reader_emptySequence378;
      var func379 = function(argcv, var_T) {    // method sequence
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_T === undefined) var_T = var_Unknown;
        var numArgs = arguments.length - 1 - 0;
        if ((numArgs > 0) && (numArgs < 1)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method sequence expects 1 type parameter, but was given " + (numArgs - 0)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        var ouc = emptyGraceObject("standardGrace.sequence", "standardGraceClass", 904);
        var ouc_init = this.methods["sequence$build(3)"].call(this, null, ouc, [], []);
        ouc_init.call(ouc);
        return ouc;
      };    // end of method sequence
      this.methods["sequence"] = func379;
      func379.paramCounts = [0];
      func379.paramNames = [];
      func379.typeParamNames = ["T"];
      func379.definitionLine = 904;
      func379.definitionModule = "standardGraceClass";
      var func380 = function(argcv, inheritingObject, aliases, exclusions, var_T) {    // method sequence$build(_,_,_)
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_T === undefined) var_T = var_Unknown;
        var numArgs = arguments.length - 1 - 3;
        if ((numArgs > 0) && (numArgs < 1)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method sequence expects 1 type parameter, but was given " + (numArgs - 0)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        var obj381_build = function(ignore, outerObj, aliases, exclusions, var_T) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_904");
          this.outer_standardGraceClass_904 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func382 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(906);    // compilenode string
            var string383 = new GraceString("a sequence factory");
            return string383;
          };    // end of method asString
          this.methods["asString"] = func382;
          func382.paramCounts = [0];
          func382.paramNames = [];
          func382.typeParamNames = [];
          func382.definitionLine = 906;
          func382.definitionModule = "standardGraceClass";
          var func384 = function(argcv) {    // method empty
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(910);    // compilenode member
            // call case 2: outer request
            var call385 = selfRequest(this.outer_standardGraceClass_904, "emptySequence", []);
            return call385;
          };    // end of method empty
          this.methods["empty"] = func384;
          func384.paramCounts = [0];
          func384.paramNames = [];
          func384.typeParamNames = [];
          func384.definitionLine = 908;
          func384.definitionModule = "standardGraceClass";
          var func386 = function(argcv, var_arg) {    // method withAll(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            // Start argument type-checks
            setLineNumber(913);    // compilenode member
            // call case 2: outer request
            var call387 = selfRequest(this.outer_standardGraceClass_904, "Iterable", []);
            if (!Grace_isTrue(callmethod(call387, "match(1)",  [1], var_arg)))
                raiseTypeError("in request of `withAll(_)`, " +
                  "argument 1 is not of type " +
                  "Iterable⟦T⟧", call387, var_arg);
            // End argument type-checks
            setLineNumber(914);    // compilenode identifier
            var var_sizeCertain = GraceTrue;
            setLineNumber(916);    // compilenode block
            var block389 = new GraceBlock(this, 916, 0);
            var matches390 = function() {
              setModuleName("standardGraceClass");
              return true;
            };
            block389.guard = matches390;
            block389.real = function() {
              setLineNumber(917);    // compilenode identifier
              var_sizeCertain = GraceFalse;
              setLineNumber(918);    // compilenode num
              return new GraceNum(8);
            };
            // call case 6: other requests
            setLineNumber(916);    // compilenode identifier
            var call388 = callmethod(var_arg, "sizeIfUnknown(1)", [1], block389);
            var var_forecastSize = call388;
            setLineNumber(920);    // compilenode identifier
            // call case 6: other requests
            // call case 6: other requests
            var call392 = callmethod(var___95__prelude, "primitiveArray", []);
            var call391 = callmethod(call392, "new(1)", [1], var_forecastSize);
            var var_inner = call391;
            setLineNumber(921);    // compilenode member
            // call case 6: other requests
            var call393 = callmethod(var_inner, "size", []);
            var var_innerSize = call393;
            setLineNumber(922);    // compilenode num
            var var_ix = new GraceNum(0);
            var if394 = GraceDone;
            setLineNumber(923);    // compilenode identifier
            if (Grace_isTrue(var_sizeCertain)) {
              setLineNumber(925);    // compilenode block
              var block396 = new GraceBlock(this, 925, 1);
              setLineNumber(1);    // compilenode identifier
              var matches397 = function(var_elt) {
                setModuleName("standardGraceClass");
                setLineNumber(925);    // block matches function
                return true;
              };
              block396.guard = matches397;
              block396.real = function(var_elt) {
                setLineNumber(926);    // compilenode call
                if (var_ix === undefined) raiseUninitializedVariable("ix");
                // call case 6: other requests
                var call398 = callmethod(var_inner, "at(1)put(1)", [1, 1], var_ix, var_elt);
                setLineNumber(927);    // compilenode num
                var sum399 = callmethod(var_ix, "+(1)", [1], new GraceNum(1));
                var_ix = sum399;
                return GraceDone;
              };
              // call case 5: prelude request
              var call395 = callmethod(var_prelude, "for(1)do(1)", [1, 1], var_arg, block396);
              if394 = call395;
            } else {
              setLineNumber(931);    // compilenode block
              var block401 = new GraceBlock(this, 931, 1);
              setLineNumber(1);    // compilenode identifier
              var matches402 = function(var_elt) {
                setModuleName("standardGraceClass");
                setLineNumber(931);    // block matches function
                return true;
              };
              block401.guard = matches402;
              block401.real = function(var_elt) {
                var if403 = GraceDone;
                setLineNumber(932);    // compilenode identifier
                if (var_ix === undefined) raiseUninitializedVariable("ix");
                var opresult404 = callmethod(var_innerSize, "\u2264(1)", [1], var_ix);
                if (Grace_isTrue(opresult404)) {
                  setLineNumber(933);    // compilenode num
                  var prod406 = callmethod(var_innerSize, "*(1)", [1], new GraceNum(2));
                  // call case 6: other requests
                  // call case 6: other requests
                  var call407 = callmethod(var___95__prelude, "primitiveArray", []);
                  var call405 = callmethod(call407, "new(1)", [1], prod406);
                  var var_newInner = call405;
                  setLineNumber(934);    // compilenode num
                  var diff409 = callmethod(var_innerSize, "-(1)", [1], new GraceNum(1));
                  var opresult410 = callmethod(new GraceNum(0), "..(1)", [1], diff409);
                  var block411 = new GraceBlock(this, 934, 1);
                  setLineNumber(1);    // compilenode identifier
                  var matches412 = function(var_i) {
                    setModuleName("standardGraceClass");
                    setLineNumber(934);    // block matches function
                    return true;
                  };
                  block411.guard = matches412;
                  block411.real = function(var_i) {
                    setLineNumber(935);    // compilenode identifier
                    // call case 6: other requests
                    var call414 = callmethod(var_inner, "at(1)", [1], var_i);
                    // call case 6: other requests
                    var call413 = callmethod(var_newInner, "at(1)put(1)", [1, 1], var_i, call414);
                    return call413;
                  };
                  // call case 5: prelude request
                  var call408 = callmethod(var_prelude, "for(1)do(1)", [1, 1], opresult410, block411);
                  setLineNumber(937);    // compilenode identifier
                  var_inner = var_newInner;
                  setLineNumber(938);    // compilenode member
                  // call case 6: other requests
                  var call415 = callmethod(var_inner, "size", []);
                  var_innerSize = call415;
                  if403 = GraceDone;
                }
                setLineNumber(940);    // compilenode call
                if (var_ix === undefined) raiseUninitializedVariable("ix");
                // call case 6: other requests
                var call416 = callmethod(var_inner, "at(1)put(1)", [1, 1], var_ix, var_elt);
                setLineNumber(941);    // compilenode num
                var sum417 = callmethod(var_ix, "+(1)", [1], new GraceNum(1));
                var_ix = sum417;
                return GraceDone;
              };
              // call case 5: prelude request
              var call400 = callmethod(var_prelude, "for(1)do(1)", [1, 1], var_arg, block401);
              if394 = call400;
            }
            var if418 = GraceDone;
            setLineNumber(944);    // compilenode num
            var opresult419 = callmethod(var_ix, "==(1)", [1], new GraceNum(0));
            if (Grace_isTrue(opresult419)) {
              // call case 2: outer request
              var call420 = selfRequest(this.outer_standardGraceClass_904, "emptySequence", []);
              return call420;
            }
            setLineNumber(945);    // compilenode call
            if (var_inner === undefined) raiseUninitializedVariable("inner");
            if (var_ix === undefined) raiseUninitializedVariable("ix");
            // call case 4: self request
            var call421 = selfRequest(this, "fromprimitiveArray(2)", [2], var_inner, var_ix);
            return call421;
          };    // end of method withAll(_)
          this.methods["withAll(1)"] = func386;
          func386.paramCounts = [1];
          func386.paramNames = ["arg"];
          func386.typeParamNames = [];
          func386.definitionLine = 913;
          func386.definitionModule = "standardGraceClass";
          var func422 = function(argcv, var_pArray, var_sz) {    // method fromprimitiveArray(_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("standardGrace.sequence.fromprimitiveArray(_,_)", "standardGraceClass", 948);
            var ouc_init = this.methods["fromprimitiveArray(2)$build(3)"].call(this, null, var_pArray, var_sz, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method fromprimitiveArray(_,_)
          func422.confidential = true;
          this.methods["fromprimitiveArray(2)"] = func422;
          func422.paramCounts = [2];
          func422.paramNames = ["pArray", "sz"];
          func422.typeParamNames = [];
          func422.definitionLine = 948;
          func422.definitionModule = "standardGraceClass";
          var func423 = function(argcv, var_pArray, var_sz, inheritingObject, aliases, exclusions) {    // method fromprimitiveArray(_,_)$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj424_build = function(ignore, var_pArray, var_sz, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_951");
              this.outer_standardGraceClass_951 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              setLineNumber(952);    // compilenode identifier
              var initFun425 = callmethod(var_traits, "indexable$build(3)", [null], this, [], []);  // compileReuseCall
              this.data.size = undefined;
              var reader_size426 = function() {  // reader method size
                  return this.data.size;
              };
              reader_size426.isDef = true;
              this.methods["size"] = reader_size426;
              this.data.inner = undefined;
              var reader_inner427 = function() {  // reader method inner
                  return this.data.inner;
              };
              reader_inner427.isDef = true;
              reader_inner427.confidential = true;
              this.methods["inner"] = reader_inner427;
              var func428 = function(argcv, var_n) {    // method boundsCheck(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var if429 = GraceDone;
                setLineNumber(957);    // compilenode call
                // call case 6: other requests
                var opresult431 = callmethod(var_n, "\u2265(1)", [1], new GraceNum(1));
                var call430 = callmethod(opresult431, "prefix!", [0]);
                // call case 6: other requests
                // call case 4: self request
                var call433 = selfRequest(this, "size", []);
                var opresult434 = callmethod(var_n, "\u2264(1)", [1], call433);
                var call432 = callmethod(opresult434, "prefix!", [0]);
                var opresult435 = callmethod(call430, "||(1)", [1], call432);
                if (Grace_isTrue(opresult435)) {
                  setLineNumber(960);    // compilenode string
                  var string437 = new GraceString("index ");
                  var opresult438 = callmethod(string437, "++(1)", [1], var_n);
                  var string439 = new GraceString(" out of bounds 1..");
                  var opresult440 = callmethod(opresult438, "++(1)", [1], string439);
                  // call case 4: self request
                  var call441 = selfRequest(this, "size", []);
                  var opresult442 = callmethod(opresult440, "++(1)", [1], call441);
                  var string443 = new GraceString("");
                  var opresult444 = callmethod(opresult442, "++(1)", [1], string443);
                  // call case 6: other requests
                  // call case 2: outer request
                  var call445 = selfRequest(this.outer_standardGraceClass_951.outer_standardGraceClass_904, "BoundsError", []);
                  var call436 = callmethod(call445, "raise(1)", [1], opresult444);
                  if429 = call436;
                }
                return if429;
              };    // end of method boundsCheck(_)
              func428.confidential = true;
              this.methods["boundsCheck(1)"] = func428;
              func428.paramCounts = [1];
              func428.paramNames = ["n"];
              func428.typeParamNames = [];
              func428.definitionLine = 956;
              func428.definitionModule = "standardGraceClass";
              var func446 = function(argcv, var_n) {    // method at(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(964);    // compilenode identifier
                // call case 4: self request
                var call447 = selfRequest(this, "boundsCheck(1)", [1], var_n);
                setLineNumber(965);    // compilenode num
                var diff449 = callmethod(var_n, "-(1)", [1], new GraceNum(1));
                // call case 6: other requests
                // call case 4: self request
                var call450 = selfRequest(this, "inner", []);
                var call448 = callmethod(call450, "at(1)", [1], diff449);
                return call448;
              };    // end of method at(_)
              this.methods["at(1)"] = func446;
              func446.paramCounts = [1];
              func446.paramNames = ["n"];
              func446.typeParamNames = [];
              func446.definitionLine = 963;
              func446.definitionModule = "standardGraceClass";
              var func451 = function(argcv) {    // method keys
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(968);    // compilenode member
                // call case 4: self request
                var call453 = selfRequest(this, "size", []);
                // call case 6: other requests
                // call case 2: outer request
                var call454 = selfRequest(this.outer_standardGraceClass_951.outer_standardGraceClass_904, "range", []);
                var call452 = callmethod(call454, "from(1)to(1)", [1, 1], new GraceNum(1), call453);
                return call452;
              };    // end of method keys
              this.methods["keys"] = func451;
              func451.paramCounts = [0];
              func451.paramNames = [];
              func451.typeParamNames = [];
              func451.definitionLine = 967;
              func451.definitionModule = "standardGraceClass";
              var func455 = function(argcv) {     // accessor method values
                return this;
              };    // end of method values
              this.methods["values"] = func455;
              func455.paramCounts = [0];
              func455.paramNames = [];
              func455.typeParamNames = [];
              func455.definitionLine = 970;
              func455.definitionModule = "standardGraceClass";
              setLineNumber(971);    // compilenode identifier
              var func456 = function(argcv, var_block2) {    // method keysAndValuesDo(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(974);    // compilenode num
                var var_i = new GraceNum(0);
                setLineNumber(975);    // compilenode block
                var block458 = new GraceBlock(this, 975, 0);
                var matches459 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block458.guard = matches459;
                block458.real = function() {
                  // call case 4: self request
                  var call460 = selfRequest(this, "size", []);
                  var opresult461 = callmethod(var_i, "<(1)", [1], call460);
                  return opresult461;
                };
                var block462 = new GraceBlock(this, 975, 0);
                var matches463 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block462.guard = matches463;
                block462.real = function() {
                  setLineNumber(976);    // compilenode num
                  var sum465 = callmethod(var_i, "+(1)", [1], new GraceNum(1));
                  if (var_i === undefined) raiseUninitializedVariable("i");
                  // call case 6: other requests
                  // call case 4: self request
                  var call467 = selfRequest(this, "inner", []);
                  var call466 = callmethod(call467, "at(1)", [1], var_i);
                  // call case 6: other requests
                  var call464 = callmethod(var_block2, "apply(2)", [2], sum465, call466);
                  setLineNumber(977);    // compilenode num
                  var sum468 = callmethod(var_i, "+(1)", [1], new GraceNum(1));
                  var_i = sum468;
                  return GraceDone;
                };
                // call case 5: prelude request
                var call457 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block458, block462);
                return call457;
              };    // end of method keysAndValuesDo(_)
              this.methods["keysAndValuesDo(1)"] = func456;
              func456.paramCounts = [1];
              func456.paramNames = ["block2"];
              func456.typeParamNames = [];
              func456.definitionLine = 973;
              func456.definitionModule = "standardGraceClass";
              var func469 = function(argcv) {    // method reversed
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(981);    // compilenode member
                // call case 4: self request
                var call471 = selfRequest(this, "size", []);
                // call case 6: other requests
                // call case 6: other requests
                var call472 = callmethod(var___95__prelude, "primitiveArray", []);
                var call470 = callmethod(call472, "new(1)", [1], call471);
                var var_freshArray = call470;
                setLineNumber(982);    // compilenode member
                // call case 4: self request
                var call473 = selfRequest(this, "size", []);
                var diff474 = callmethod(call473, "-(1)", [1], new GraceNum(1));
                var var_ix = diff474;
                setLineNumber(983);    // compilenode block
                var block476 = new GraceBlock(this, 983, 1);
                setLineNumber(1);    // compilenode identifier
                var matches477 = function(var_each) {
                  setModuleName("standardGraceClass");
                  setLineNumber(983);    // block matches function
                  return true;
                };
                block476.guard = matches477;
                block476.real = function(var_each) {
                  setLineNumber(984);    // compilenode call
                  if (var_ix === undefined) raiseUninitializedVariable("ix");
                  // call case 6: other requests
                  var call478 = callmethod(var_freshArray, "at(1)put(1)", [1, 1], var_ix, var_each);
                  setLineNumber(985);    // compilenode num
                  var diff479 = callmethod(var_ix, "-(1)", [1], new GraceNum(1));
                  var_ix = diff479;
                  return GraceDone;
                };
                // call case 4: self request
                var call475 = selfRequest(this, "do(1)", [1], block476);
                setLineNumber(987);    // compilenode member
                // call case 4: self request
                var call481 = selfRequest(this, "size", []);
                // call case 2: outer request
                var call480 = selfRequest(this.outer_standardGraceClass_951, "fromprimitiveArray(2)", [2], var_freshArray, call481);
                return call480;
              };    // end of method reversed
              this.methods["reversed"] = func469;
              func469.paramCounts = [0];
              func469.paramNames = [];
              func469.typeParamNames = [];
              func469.definitionLine = 980;
              func469.definitionModule = "standardGraceClass";
              var func482 = function(argcv, var_other) {    // method ++(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                // Start argument type-checks
                setLineNumber(989);    // compilenode member
                // call case 2: outer request
                var call483 = selfRequest(this.outer_standardGraceClass_951.outer_standardGraceClass_904, "Iterable", []);
                if (!Grace_isTrue(callmethod(call483, "match(1)",  [1], var_other)))
                    raiseTypeError("in request of `++(_)`, " +
                      "argument 1 is not of type " +
                      "outer.outer.Iterable", call483, var_other);
                // End argument type-checks
                setLineNumber(990);    // compilenode identifier
                // call case 2: outer request
                var call485 = selfRequest(this.outer_standardGraceClass_951.outer_standardGraceClass_904, "lazyConcatenation(2)", [2], this, var_other);
                // call case 6: other requests
                // call case 2: outer request
                var call486 = selfRequest(this.outer_standardGraceClass_951.outer_standardGraceClass_904, "sequence", []);
                var call484 = callmethod(call486, "withAll(1)", [1], call485);
                return call484;
              };    // end of method ++(_)
              this.methods["++(1)"] = func482;
              func482.paramCounts = [1];
              func482.paramNames = ["other"];
              func482.typeParamNames = [];
              func482.definitionLine = 989;
              func482.definitionModule = "standardGraceClass";
              var func487 = function(argcv) {    // method asString
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(993);    // compilenode string
                var string488 = new GraceString("\u27e8");
                var var_s = string488;
                setLineNumber(994);    // compilenode member
                // call case 4: self request
                var call490 = selfRequest(this, "size", []);
                var diff491 = callmethod(call490, "-(1)", [1], new GraceNum(1));
                var opresult492 = callmethod(new GraceNum(0), "..(1)", [1], diff491);
                var block493 = new GraceBlock(this, 994, 1);
                setLineNumber(1);    // compilenode identifier
                var matches494 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(994);    // block matches function
                  return true;
                };
                block493.guard = matches494;
                block493.real = function(var_i) {
                  setLineNumber(995);    // compilenode member
                  // call case 6: other requests
                  // call case 6: other requests
                  // call case 4: self request
                  var call497 = selfRequest(this, "inner", []);
                  var call496 = callmethod(call497, "at(1)", [1], var_i);
                  var call495 = callmethod(call496, "asString", []);
                  var opresult498 = callmethod(var_s, "++(1)", [1], call495);
                  var_s = opresult498;
                  var if499 = GraceDone;
                  setLineNumber(996);    // compilenode member
                  // call case 4: self request
                  var call500 = selfRequest(this, "size", []);
                  var diff501 = callmethod(call500, "-(1)", [1], new GraceNum(1));
                  var opresult502 = callmethod(var_i, "<(1)", [1], diff501);
                  if (Grace_isTrue(opresult502)) {
                    var string503 = new GraceString(", ");
                    var opresult504 = callmethod(var_s, "++(1)", [1], string503);
                    var_s = opresult504;
                    if499 = GraceDone;
                  }
                  return if499;
                };
                // call case 5: prelude request
                var call489 = callmethod(var_prelude, "for(1)do(1)", [1, 1], opresult492, block493);
                setLineNumber(998);    // compilenode string
                var string505 = new GraceString("\u27e9");
                var opresult506 = callmethod(var_s, "++(1)", [1], string505);
                return opresult506;
              };    // end of method asString
              this.methods["asString"] = func487;
              func487.paramCounts = [0];
              func487.paramNames = [];
              func487.typeParamNames = [];
              func487.definitionLine = 992;
              func487.definitionModule = "standardGraceClass";
              var func507 = function(argcv, var_element) {    // method contains(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1001);    // compilenode block
                var block509 = new GraceBlock(this, 1001, 1);
                setLineNumber(1);    // compilenode identifier
                var matches510 = function(var_each) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1001);    // block matches function
                  return true;
                };
                block509.guard = matches510;
                block509.real = function(var_each) {
                  var if511 = GraceDone;
                  var opresult512 = callmethod(var_each, "==(1)", [1], var_element);
                  if (Grace_isTrue(opresult512)) {
                    throw new ReturnException(GraceTrue, returnTarget);
                  }
                  return if511;
                };
                // call case 4: self request
                var call508 = selfRequest(this, "do(1)", [1], block509);
                setLineNumber(1002);    // compilenode identifier
                return GraceFalse;
                return undefined;
              };    // end of method contains(_)
              this.methods["contains(1)"] = func507;
              func507.paramCounts = [1];
              func507.paramNames = ["element"];
              func507.typeParamNames = [];
              func507.definitionLine = 1000;
              func507.definitionModule = "standardGraceClass";
              var func513 = function(argcv, var_block1) {    // method do(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1005);    // compilenode num
                var var_i = new GraceNum(0);
                setLineNumber(1006);    // compilenode block
                var block515 = new GraceBlock(this, 1006, 0);
                var matches516 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block515.guard = matches516;
                block515.real = function() {
                  // call case 4: self request
                  var call517 = selfRequest(this, "size", []);
                  var opresult518 = callmethod(var_i, "<(1)", [1], call517);
                  return opresult518;
                };
                var block519 = new GraceBlock(this, 1006, 0);
                var matches520 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block519.guard = matches520;
                block519.real = function() {
                  setLineNumber(1007);    // compilenode call
                  if (var_i === undefined) raiseUninitializedVariable("i");
                  // call case 6: other requests
                  // call case 4: self request
                  var call523 = selfRequest(this, "inner", []);
                  var call522 = callmethod(call523, "at(1)", [1], var_i);
                  // call case 6: other requests
                  var call521 = callmethod(var_block1, "apply(1)", [1], call522);
                  setLineNumber(1008);    // compilenode num
                  var sum524 = callmethod(var_i, "+(1)", [1], new GraceNum(1));
                  var_i = sum524;
                  return GraceDone;
                };
                // call case 5: prelude request
                var call514 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block515, block519);
                return call514;
              };    // end of method do(_)
              this.methods["do(1)"] = func513;
              func513.paramCounts = [1];
              func513.paramNames = ["block1"];
              func513.typeParamNames = [];
              func513.definitionLine = 1004;
              func513.definitionModule = "standardGraceClass";
              var func525 = function(argcv, var_other) {    // method ==(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1012);    // compilenode identifier
                // call case 2: outer request
                var call526 = selfRequest(this.outer_standardGraceClass_951.outer_standardGraceClass_904, "isEqual(1)toIterable(1)", [1, 1], this, var_other);
                return call526;
              };    // end of method ==(_)
              this.methods["==(1)"] = func525;
              func525.paramCounts = [1];
              func525.paramNames = ["other"];
              func525.typeParamNames = [];
              func525.definitionLine = 1011;
              func525.definitionModule = "standardGraceClass";
              var func527 = function(argcv) {    // method iterator
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var ouc = emptyGraceObject("standardGrace.sequence.fromprimitiveArray(_,_).iterator", "standardGraceClass", 1014);
                var ouc_init = this.methods["iterator$build(3)"].call(this, null, ouc, [], []);
                ouc_init.call(ouc);
                return ouc;
              };    // end of method iterator
              this.methods["iterator"] = func527;
              func527.paramCounts = [0];
              func527.paramNames = [];
              func527.typeParamNames = [];
              func527.definitionLine = 1014;
              func527.definitionModule = "standardGraceClass";
              var func528 = function(argcv, inheritingObject, aliases, exclusions) {    // method iterator$build(_,_,_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var obj529_build = function(ignore, outerObj, aliases, exclusions) {
                  this.closureKeys = this.closureKeys || [];
                  this.closureKeys.push("outer_standardGraceClass_1015");
                  this.outer_standardGraceClass_1015 = outerObj;
                  var inheritedExclusions = { };
                  for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                      var exMeth = exclusions[eix];
                      inheritedExclusions[exMeth] = this.methods[exMeth];
                  }
                  this.data.idx = undefined;
                  var reader_idx530 = function() {  // reader method idx
                      return this.data.idx;
                  };
                  reader_idx530.isVar = true;
                  reader_idx530.confidential = true;
                  this.methods["idx"] = reader_idx530;
                  var writer_idx530 = function(argcv, n) {   // writer method idx:=(_)
                      this.data.idx = n;
                      return GraceDone;
                  };
                  writer_idx530.confidential = true;
                  this.methods["idx:=(1)"] = writer_idx530;
                  var func531 = function(argcv) {    // method asDebugString
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    setLineNumber(1017);    // compilenode string
                    var string532 = new GraceString("");
                    // call case 4: self request
                    var call533 = selfRequest(this, "asString", []);
                    var opresult534 = callmethod(string532, "++(1)", [1], call533);
                    var string535 = new GraceString("\u27ea");
                    var opresult536 = callmethod(opresult534, "++(1)", [1], string535);
                    // call case 4: self request
                    var call537 = selfRequest(this, "idx", []);
                    var opresult538 = callmethod(opresult536, "++(1)", [1], call537);
                    var string539 = new GraceString("\u27eb");
                    var opresult540 = callmethod(opresult538, "++(1)", [1], string539);
                    return opresult540;
                  };    // end of method asDebugString
                  this.methods["asDebugString"] = func531;
                  func531.paramCounts = [0];
                  func531.paramNames = [];
                  func531.typeParamNames = [];
                  func531.definitionLine = 1017;
                  func531.definitionModule = "standardGraceClass";
                  var func541 = function(argcv) {    // method asString
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    setLineNumber(1018);    // compilenode string
                    var string542 = new GraceString("aSequenceIterator");
                    return string542;
                  };    // end of method asString
                  this.methods["asString"] = func541;
                  func541.paramCounts = [0];
                  func541.paramNames = [];
                  func541.typeParamNames = [];
                  func541.definitionLine = 1018;
                  func541.definitionModule = "standardGraceClass";
                  var func543 = function(argcv) {    // method hasNext
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    setLineNumber(1019);    // compilenode member
                    // call case 4: self request
                    var call544 = selfRequest(this, "idx", []);
                    var opresult545 = callmethod(call544, "\u2264(1)", [1], var_sz);
                    return opresult545;
                  };    // end of method hasNext
                  this.methods["hasNext"] = func543;
                  func543.paramCounts = [0];
                  func543.paramNames = [];
                  func543.typeParamNames = [];
                  func543.definitionLine = 1019;
                  func543.definitionModule = "standardGraceClass";
                  var func546 = function(argcv) {    // method next
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    var if547 = GraceDone;
                    setLineNumber(1021);    // compilenode member
                    // call case 4: self request
                    var call548 = selfRequest(this, "idx", []);
                    var opresult549 = callmethod(call548, ">(1)", [1], var_sz);
                    if (Grace_isTrue(opresult549)) {
                      var string551 = new GraceString("on sequence ");
                      var opresult552 = callmethod(string551, "++(1)", [1], this.outer_standardGraceClass_1015);
                      var string553 = new GraceString("\u27ea");
                      var opresult554 = callmethod(opresult552, "++(1)", [1], string553);
                      // call case 4: self request
                      var call555 = selfRequest(this, "idx", []);
                      var opresult556 = callmethod(opresult554, "++(1)", [1], call555);
                      var string557 = new GraceString("\u27eb");
                      var opresult558 = callmethod(opresult556, "++(1)", [1], string557);
                      // call case 6: other requests
                      // call case 2: outer request
                      var call559 = selfRequest(this.outer_standardGraceClass_1015.outer_standardGraceClass_951.outer_standardGraceClass_904, "IteratorExhausted", []);
                      var call550 = callmethod(call559, "raise(1)", [1], opresult558);
                      if547 = call550;
                    }
                    setLineNumber(1022);    // compilenode member
                    // call case 4: self request
                    var call561 = selfRequest(this, "idx", []);
                    // call case 2: outer request
                    var call560 = selfRequest(this.outer_standardGraceClass_1015, "at(1)", [1], call561);
                    var var_ret = call560;
                    setLineNumber(1023);    // compilenode member
                    // call case 4: self request
                    var call563 = selfRequest(this, "idx", []);
                    var sum564 = callmethod(call563, "+(1)", [1], new GraceNum(1));
                    // call case 4: self request
                    var call562 = selfRequest(this, "idx:=(1)", [1], sum564);
                    setLineNumber(1024);    // compilenode identifier
                    return var_ret;
                  };    // end of method next
                  this.methods["next"] = func546;
                  func546.paramCounts = [0];
                  func546.paramNames = [];
                  func546.typeParamNames = [];
                  func546.definitionLine = 1020;
                  func546.definitionModule = "standardGraceClass";
                  this.mutable = true;
                  for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                      var oneAlias = aliases[aix];
                      this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
                  }
                  for (var exName in inheritedExclusions) {
                      if (inheritedExclusions.hasOwnProperty(exName)) {
                          if (inheritedExclusions[exName]) {
                              this.methods[exName] = inheritedExclusions[exName];
                          } else {
                              delete this.methods[exName];
                          }
                      }
                  }
                  var obj529_init = function() {    // init of object on line 1015
                    setLineNumber(1016);    // compilenode num
                    this.data.idx = new GraceNum(1);
                  };
                  return obj529_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
                };
                var obj529_init = obj529_build.call(inheritingObject, null, this, aliases, exclusions);
                return obj529_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
              };    // end of method iterator$build(_,_,_)
              this.methods["iterator$build(3)"] = func528;
              func528.paramCounts = [0];
              func528.paramNames = [];
              func528.typeParamNames = [];
              func528.definitionLine = 1014;
              func528.definitionModule = "standardGraceClass";
              var func565 = function(argcv) {    // method sorted
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1029);    // compilenode block
                var block568 = new GraceBlock(this, 1029, 2);
                setLineNumber(1);    // compilenode identifier
                var matches569 = function(var_l, var_r) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1029);    // block matches function
                  return true;
                };
                block568.guard = matches569;
                block568.real = function(var_l, var_r) {
                  var if570 = GraceDone;
                  setLineNumber(1030);    // compilenode identifier
                  var opresult571 = callmethod(var_l, "==(1)", [1], var_r);
                  if (Grace_isTrue(opresult571)) {
                    if570 = new GraceNum(0);
                  } else {
                    var if572 = GraceDone;
                    setLineNumber(1031);    // compilenode identifier
                    var opresult573 = callmethod(var_l, "<(1)", [1], var_r);
                    if (Grace_isTrue(opresult573)) {
                      // call case 6: other requests
                      var call574 = callmethod(new GraceNum(1), "prefix-", [0]);
                      if572 = call574;
                    } else {
                      setLineNumber(1032);    // compilenode num
                      if572 = new GraceNum(1);
                    }
                    if570 = if572;
                  }
                  return if570;
                };
                // call case 6: other requests
                setLineNumber(1029);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call576 = selfRequest(this.outer_standardGraceClass_951.outer_standardGraceClass_904, "list", []);
                var call575 = callmethod(call576, "withAll(1)", [1], this);
                var call567 = callmethod(call575, "sortBy(1)", [1], block568);
                // call case 6: other requests
                // call case 2: outer request
                var call577 = selfRequest(this.outer_standardGraceClass_951.outer_standardGraceClass_904, "sequence", []);
                var call566 = callmethod(call577, "withAll(1)", [1], call567);
                return call566;
              };    // end of method sorted
              this.methods["sorted"] = func565;
              func565.paramCounts = [0];
              func565.paramNames = [];
              func565.typeParamNames = [];
              func565.definitionLine = 1028;
              func565.definitionModule = "standardGraceClass";
              var func578 = function(argcv, var_sortBlock) {    // method sortedBy(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                // Start argument type-checks
                setLineNumber(1035);    // compilenode member
                // call case 2: outer request
                var call579 = selfRequest(this.outer_standardGraceClass_951.outer_standardGraceClass_904, "Block2", []);
                if (!Grace_isTrue(callmethod(call579, "match(1)",  [1], var_sortBlock)))
                    raiseTypeError("in request of `sortedBy(_)`, " +
                      "argument 1 is not of type " +
                      "outer.outer.Block2", call579, var_sortBlock);
                // End argument type-checks
                setLineNumber(1036);    // compilenode identifier
                // call case 6: other requests
                // call case 6: other requests
                // call case 2: outer request
                var call583 = selfRequest(this.outer_standardGraceClass_951.outer_standardGraceClass_904, "list", []);
                var call582 = callmethod(call583, "withAll(1)", [1], this);
                var call581 = callmethod(call582, "sortBy(1)", [1], var_sortBlock);
                // call case 6: other requests
                // call case 2: outer request
                var call584 = selfRequest(this.outer_standardGraceClass_951.outer_standardGraceClass_904, "sequence", []);
                var call580 = callmethod(call584, "withAll(1)", [1], call581);
                return call580;
              };    // end of method sortedBy(_)
              this.methods["sortedBy(1)"] = func578;
              func578.paramCounts = [1];
              func578.paramNames = ["sortBlock"];
              func578.typeParamNames = [];
              func578.definitionLine = 1035;
              func578.definitionModule = "standardGraceClass";
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj424_init = function() {    // init of object on line 951
                initFun425.call(this);
                setLineNumber(953);    // compilenode identifier
                this.data.size = var_sz;
                setLineNumber(954);    // compilenode identifier
                this.data.inner = var_pArray;
              };
              return obj424_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj424_init = obj424_build.call(inheritingObject, null, var_pArray, var_sz, this, aliases, exclusions);
            return obj424_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method fromprimitiveArray(_,_)$build(_,_,_)
          func423.confidential = true;
          this.methods["fromprimitiveArray(2)$build(3)"] = func423;
          func423.paramCounts = [2];
          func423.paramNames = ["pArray", "sz"];
          func423.typeParamNames = [];
          func423.definitionLine = 948;
          func423.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj381_init = function() {    // init of object on line 904
          };
          return obj381_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj381_init = obj381_build.call(inheritingObject, null, this, aliases, exclusions, var_T);
        return obj381_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
      };    // end of method sequence$build(_,_,_)
      this.methods["sequence$build(3)"] = func380;
      func380.paramCounts = [0];
      func380.paramNames = [];
      func380.typeParamNames = ["T"];
      func380.definitionLine = 904;
      func380.definitionModule = "standardGraceClass";
      this.data.MinimalyIterable = undefined;
      var reader_MinimalyIterable585 = function() {  // reader method MinimalyIterable
          return this.data.MinimalyIterable;
      };
      reader_MinimalyIterable585.isType = true;
      this.methods["MinimalyIterable"] = reader_MinimalyIterable585;
      var func586 = function(argcv, var_left, var_right) {    // method isEqual(_)toIterable(_)
        var returnTarget = invocationCount;
        invocationCount++;
        setModuleName("standardGraceClass");
        var if587 = GraceDone;
        setLineNumber(1047);    // compilenode identifier
        // call case 6: other requests
        // call case 4: self request
        var call589 = selfRequest(this, "MinimalyIterable", []);
        var call588 = callmethod(call589, "match(1)", [1], var_right);
        if (Grace_isTrue(call588)) {
          setLineNumber(1048);    // compilenode member
          // call case 6: other requests
          var call590 = callmethod(var_left, "iterator", []);
          var var_leftIter = call590;
          setLineNumber(1049);    // compilenode member
          // call case 6: other requests
          var call591 = callmethod(var_right, "iterator", []);
          var var_rightIter = call591;
          setLineNumber(1050);    // compilenode block
          var block593 = new GraceBlock(this, 1050, 0);
          var matches594 = function() {
            setModuleName("standardGraceClass");
            return true;
          };
          block593.guard = matches594;
          block593.real = function() {
            // call case 6: other requests
            var call595 = callmethod(var_leftIter, "hasNext", []);
            // call case 6: other requests
            var call596 = callmethod(var_rightIter, "hasNext", []);
            var opresult597 = callmethod(call595, "&&(1)", [1], call596);
            return opresult597;
          };
          var block598 = new GraceBlock(this, 1050, 0);
          var matches599 = function() {
            setModuleName("standardGraceClass");
            return true;
          };
          block598.guard = matches599;
          block598.real = function() {
            var if600 = GraceDone;
            setLineNumber(1051);    // compilenode member
            // call case 6: other requests
            var call601 = callmethod(var_leftIter, "next", []);
            // call case 6: other requests
            var call602 = callmethod(var_rightIter, "next", []);
            var opresult603 = callmethod(call601, "\u2260(1)", [1], call602);
            if (Grace_isTrue(opresult603)) {
              setLineNumber(1052);    // compilenode identifier
              throw new ReturnException(GraceFalse, returnTarget);
            }
            return if600;
          };
          // call case 5: prelude request
          var call592 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block593, block598);
          setLineNumber(1055);    // compilenode member
          // call case 6: other requests
          var call604 = callmethod(var_leftIter, "hasNext", []);
          // call case 6: other requests
          var call605 = callmethod(var_rightIter, "hasNext", []);
          var opresult606 = callmethod(call604, "==(1)", [1], call605);
          if587 = opresult606;
        } else {
          setLineNumber(1057);    // compilenode identifier
          if587 = GraceFalse;
        }
        return if587;
      };    // end of method isEqual(_)toIterable(_)
      this.methods["isEqual(1)toIterable(1)"] = func586;
      func586.paramCounts = [1, 1];
      func586.paramNames = ["left", "right"];
      func586.typeParamNames = [];
      func586.definitionLine = 1046;
      func586.definitionModule = "standardGraceClass";
      var func607 = function(argcv, var_T) {    // method list
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_T === undefined) var_T = var_Unknown;
        var numArgs = arguments.length - 1 - 0;
        if ((numArgs > 0) && (numArgs < 1)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method list expects 1 type parameter, but was given " + (numArgs - 0)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        var ouc = emptyGraceObject("standardGrace.list", "standardGraceClass", 1061);
        var ouc_init = this.methods["list$build(3)"].call(this, null, ouc, [], []);
        ouc_init.call(ouc);
        return ouc;
      };    // end of method list
      this.methods["list"] = func607;
      func607.paramCounts = [0];
      func607.paramNames = [];
      func607.typeParamNames = ["T"];
      func607.definitionLine = 1061;
      func607.definitionModule = "standardGraceClass";
      var func608 = function(argcv, inheritingObject, aliases, exclusions, var_T) {    // method list$build(_,_,_)
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_T === undefined) var_T = var_Unknown;
        var numArgs = arguments.length - 1 - 3;
        if ((numArgs > 0) && (numArgs < 1)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method list expects 1 type parameter, but was given " + (numArgs - 0)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        var obj609_build = function(ignore, outerObj, aliases, exclusions, var_T) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_1061");
          this.outer_standardGraceClass_1061 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func610 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(1063);    // compilenode string
            var string611 = new GraceString("a list factory");
            return string611;
          };    // end of method asString
          this.methods["asString"] = func610;
          func610.paramCounts = [0];
          func610.paramNames = [];
          func610.typeParamNames = [];
          func610.definitionLine = 1063;
          func610.definitionModule = "standardGraceClass";
          var func612 = function(argcv) {    // method empty
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(1066);    // compilenode member
            // call case 2: outer request
            var call614 = selfRequest(this.outer_standardGraceClass_1061, "emptySequence", []);
            // call case 4: self request
            var call613 = selfRequest(this, "withAll(1)", [1], call614);
            setLineNumber(1065);    // compilenode member
            // call case 2: outer request
            var call615 = selfRequest(this.outer_standardGraceClass_1061, "List", []);
            setLineNumber(1066);    // return value
            if (!Grace_isTrue(callmethod(call615, "match(1)", [1], call613)))
                raiseTypeError(
                    "result of method empty does not have type" + 
                    "List⟦T⟧.", call615, call613);
            return call613;
          };    // end of method empty
          this.methods["empty"] = func612;
          func612.paramCounts = [0];
          func612.paramNames = [];
          func612.typeParamNames = [];
          func612.definitionLine = 1065;
          func612.definitionModule = "standardGraceClass";
          var func616 = function(argcv, var_a) {    // method withAll(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            // Start argument type-checks
            setLineNumber(1069);    // compilenode member
            // call case 2: outer request
            var call617 = selfRequest(this.outer_standardGraceClass_1061, "Iterable", []);
            if (!Grace_isTrue(callmethod(call617, "match(1)",  [1], var_a)))
                raiseTypeError("in request of `withAll(_)`, " +
                  "argument 1 is not of type " +
                  "Iterable⟦T⟧", call617, var_a);
            // End argument type-checks
            var ouc = emptyGraceObject("standardGrace.list.withAll(_)", "standardGraceClass", 1069);
            var ouc_init = this.methods["withAll(1)$build(3)"].call(this, null, var_a, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method withAll(_)
          this.methods["withAll(1)"] = func616;
          func616.paramCounts = [1];
          func616.paramNames = ["a"];
          func616.typeParamNames = [];
          func616.definitionLine = 1069;
          func616.definitionModule = "standardGraceClass";
          var func618 = function(argcv, var_a, inheritingObject, aliases, exclusions) {    // method withAll(_)$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            // Start argument type-checks
            // call case 2: outer request
            var call619 = selfRequest(this.outer_standardGraceClass_1061, "Iterable", []);
            if (!Grace_isTrue(callmethod(call619, "match(1)",  [1], var_a)))
                raiseTypeError("in request of `withAll(_)`, " +
                  "argument 1 is not of type " +
                  "Iterable⟦T⟧", call619, var_a);
            // End argument type-checks
            var obj620_build = function(ignore, var_a, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_1069");
              this.outer_standardGraceClass_1069 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              setLineNumber(1070);    // compilenode identifier
              var initFun621 = callmethod(var_traits, "indexable$build(3)", [null], this, [], []);  // compileReuseCall
              this.data.mods = undefined;
              var reader_mods622 = function() {  // reader method mods
                  return this.data.mods;
              };
              reader_mods622.isVar = true;
              this.methods["mods"] = reader_mods622;
              var writer_mods622 = function(argcv, n) {   // writer method mods:=(_)
                  this.data.mods = n;
                  return GraceDone;
              };
              writer_mods622.confidential = true;
              this.methods["mods:=(1)"] = writer_mods622;
              this.data.sizeCertain = undefined;
              var reader_sizeCertain623 = function() {  // reader method sizeCertain
                  return this.data.sizeCertain;
              };
              reader_sizeCertain623.isVar = true;
              reader_sizeCertain623.confidential = true;
              this.methods["sizeCertain"] = reader_sizeCertain623;
              var writer_sizeCertain623 = function(argcv, n) {   // writer method sizeCertain:=(_)
                  this.data.sizeCertain = n;
                  return GraceDone;
              };
              writer_sizeCertain623.confidential = true;
              this.methods["sizeCertain:=(1)"] = writer_sizeCertain623;
              this.data.initialSize = undefined;
              var reader_initialSize624 = function() {  // reader method initialSize
                  return this.data.initialSize;
              };
              reader_initialSize624.isDef = true;
              reader_initialSize624.confidential = true;
              this.methods["initialSize"] = reader_initialSize624;
              this.data.inner = undefined;
              var reader_inner625 = function() {  // reader method inner
                  return this.data.inner;
              };
              reader_inner625.isVar = true;
              reader_inner625.confidential = true;
              this.methods["inner"] = reader_inner625;
              var writer_inner625 = function(argcv, n) {   // writer method inner:=(_)
                  this.data.inner = n;
                  return GraceDone;
              };
              writer_inner625.confidential = true;
              this.methods["inner:=(1)"] = writer_inner625;
              this.data.size = undefined;
              var reader_size626 = function() {  // reader method size
                  return this.data.size;
              };
              reader_size626.isVar = true;
              this.methods["size"] = reader_size626;
              var writer_size626 = function(argcv, n) {   // writer method size:=(_)
                  this.data.size = n;
                  return GraceDone;
              };
              writer_size626.confidential = true;
              this.methods["size:=(1)"] = writer_size626;
              var func627 = function(argcv, var_n) {    // method boundsCheck(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var if628 = GraceDone;
                setLineNumber(1101);    // compilenode call
                // call case 6: other requests
                var opresult630 = callmethod(var_n, "\u2265(1)", [1], new GraceNum(1));
                var call629 = callmethod(opresult630, "prefix!", [0]);
                // call case 6: other requests
                // call case 4: self request
                var call632 = selfRequest(this, "size", []);
                var opresult633 = callmethod(var_n, "\u2264(1)", [1], call632);
                var call631 = callmethod(opresult633, "prefix!", [0]);
                var opresult634 = callmethod(call629, "||(1)", [1], call631);
                if (Grace_isTrue(opresult634)) {
                  setLineNumber(1102);    // compilenode string
                  var string636 = new GraceString("index ");
                  var opresult637 = callmethod(string636, "++(1)", [1], var_n);
                  var string638 = new GraceString(" out of bounds 1..");
                  var opresult639 = callmethod(opresult637, "++(1)", [1], string638);
                  // call case 4: self request
                  var call640 = selfRequest(this, "size", []);
                  var opresult641 = callmethod(opresult639, "++(1)", [1], call640);
                  var string642 = new GraceString("");
                  var opresult643 = callmethod(opresult641, "++(1)", [1], string642);
                  // call case 6: other requests
                  // call case 2: outer request
                  var call644 = selfRequest(this.outer_standardGraceClass_1069.outer_standardGraceClass_1061, "BoundsError", []);
                  var call635 = callmethod(call644, "raise(1)", [1], opresult643);
                  if628 = call635;
                }
                return if628;
              };    // end of method boundsCheck(_)
              func627.confidential = true;
              this.methods["boundsCheck(1)"] = func627;
              func627.paramCounts = [1];
              func627.paramNames = ["n"];
              func627.typeParamNames = [];
              func627.definitionLine = 1100;
              func627.definitionModule = "standardGraceClass";
              var func645 = function(argcv, var_n) {    // method at(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1106);    // compilenode identifier
                // call case 4: self request
                var call646 = selfRequest(this, "boundsCheck(1)", [1], var_n);
                setLineNumber(1107);    // compilenode num
                var diff648 = callmethod(var_n, "-(1)", [1], new GraceNum(1));
                // call case 6: other requests
                // call case 4: self request
                var call649 = selfRequest(this, "inner", []);
                var call647 = callmethod(call649, "at(1)", [1], diff648);
                return call647;
              };    // end of method at(_)
              this.methods["at(1)"] = func645;
              func645.paramCounts = [1];
              func645.paramNames = ["n"];
              func645.typeParamNames = [];
              func645.definitionLine = 1105;
              func645.definitionModule = "standardGraceClass";
              var func650 = function(argcv, var_n, var_x) {    // method at(_)put(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1110);    // compilenode member
                // call case 4: self request
                var call652 = selfRequest(this, "mods", []);
                var sum653 = callmethod(call652, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call651 = selfRequest(this, "mods:=(1)", [1], sum653);
                var if654 = GraceDone;
                setLineNumber(1111);    // compilenode member
                // call case 4: self request
                var call655 = selfRequest(this, "size", []);
                var sum656 = callmethod(call655, "+(1)", [1], new GraceNum(1));
                var opresult657 = callmethod(var_n, "==(1)", [1], sum656);
                if (Grace_isTrue(opresult657)) {
                  setLineNumber(1112);    // compilenode identifier
                  // call case 4: self request
                  var call658 = selfRequest(this, "addLast(1)", [1], var_x);
                  if654 = call658;
                } else {
                  setLineNumber(1114);    // compilenode identifier
                  // call case 4: self request
                  var call659 = selfRequest(this, "boundsCheck(1)", [1], var_n);
                  setLineNumber(1115);    // compilenode num
                  var diff661 = callmethod(var_n, "-(1)", [1], new GraceNum(1));
                  // call case 6: other requests
                  // call case 4: self request
                  var call662 = selfRequest(this, "inner", []);
                  var call660 = callmethod(call662, "at(1)put(1)", [1, 1], diff661, var_x);
                  if654 = call660;
                }
                setLineNumber(1117);    // compilenode identifier
                return this;
              };    // end of method at(_)put(_)
              this.methods["at(1)put(1)"] = func650;
              func650.paramCounts = [1, 1];
              func650.paramNames = ["n", "x"];
              func650.typeParamNames = [];
              func650.definitionLine = 1109;
              func650.definitionModule = "standardGraceClass";
              var func663 = function(argcv, var_x) {    // method add(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1120);    // compilenode member
                // call case 4: self request
                var call665 = selfRequest(this, "mods", []);
                var sum666 = callmethod(call665, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call664 = selfRequest(this, "mods:=(1)", [1], sum666);
                var if667 = GraceDone;
                setLineNumber(1121);    // compilenode member
                // call case 4: self request
                var call668 = selfRequest(this, "size", []);
                // call case 6: other requests
                // call case 4: self request
                var call670 = selfRequest(this, "inner", []);
                var call669 = callmethod(call670, "size", []);
                var opresult671 = callmethod(call668, "==(1)", [1], call669);
                if (Grace_isTrue(opresult671)) {
                  // call case 6: other requests
                  // call case 4: self request
                  var call674 = selfRequest(this, "inner", []);
                  var call673 = callmethod(call674, "size", []);
                  var prod675 = callmethod(call673, "*(1)", [1], new GraceNum(2));
                  // call case 4: self request
                  var call672 = selfRequest(this, "expandTo(1)", [1], prod675);
                  if667 = call672;
                }
                setLineNumber(1122);    // compilenode member
                // call case 4: self request
                var call677 = selfRequest(this, "size", []);
                // call case 6: other requests
                // call case 4: self request
                var call678 = selfRequest(this, "inner", []);
                var call676 = callmethod(call678, "at(1)put(1)", [1, 1], call677, var_x);
                setLineNumber(1123);    // compilenode member
                // call case 4: self request
                var call680 = selfRequest(this, "size", []);
                var sum681 = callmethod(call680, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call679 = selfRequest(this, "size:=(1)", [1], sum681);
                setLineNumber(1124);    // compilenode identifier
                return this;
              };    // end of method add(_)
              this.methods["add(1)"] = func663;
              func663.paramCounts = [1];
              func663.paramNames = ["x"];
              func663.typeParamNames = [];
              func663.definitionLine = 1119;
              func663.definitionModule = "standardGraceClass";
              var func682 = function(argcv, var_l) {    // method addAll(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1127);    // compilenode member
                // call case 4: self request
                var call684 = selfRequest(this, "mods", []);
                var sum685 = callmethod(call684, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call683 = selfRequest(this, "mods:=(1)", [1], sum685);
                var if686 = GraceDone;
                setLineNumber(1128);    // compilenode member
                // call case 4: self request
                var call687 = selfRequest(this, "size", []);
                // call case 6: other requests
                var call688 = callmethod(var_l, "size", []);
                var sum689 = callmethod(call687, "+(1)", [1], call688);
                // call case 6: other requests
                // call case 4: self request
                var call691 = selfRequest(this, "inner", []);
                var call690 = callmethod(call691, "size", []);
                var opresult692 = callmethod(sum689, ">(1)", [1], call690);
                if (Grace_isTrue(opresult692)) {
                  setLineNumber(1129);    // compilenode member
                  // call case 4: self request
                  var call695 = selfRequest(this, "size", []);
                  // call case 6: other requests
                  var call696 = callmethod(var_l, "size", []);
                  var sum697 = callmethod(call695, "+(1)", [1], call696);
                  // call case 4: self request
                  var call698 = selfRequest(this, "size", []);
                  var prod699 = callmethod(call698, "*(1)", [1], new GraceNum(2));
                  // call case 2: outer request
                  var call694 = selfRequest(this.outer_standardGraceClass_1069.outer_standardGraceClass_1061, "max(2)", [2], sum697, prod699);
                  // call case 4: self request
                  var call693 = selfRequest(this, "expandTo(1)", [1], call694);
                  if686 = call693;
                }
                setLineNumber(1131);    // compilenode block
                var block701 = new GraceBlock(this, 1131, 1);
                setLineNumber(1);    // compilenode identifier
                var matches702 = function(var_each) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1131);    // block matches function
                  return true;
                };
                block701.guard = matches702;
                block701.real = function(var_each) {
                  setLineNumber(1132);    // compilenode member
                  // call case 4: self request
                  var call704 = selfRequest(this, "size", []);
                  // call case 6: other requests
                  // call case 4: self request
                  var call705 = selfRequest(this, "inner", []);
                  var call703 = callmethod(call705, "at(1)put(1)", [1, 1], call704, var_each);
                  setLineNumber(1133);    // compilenode member
                  // call case 4: self request
                  var call707 = selfRequest(this, "size", []);
                  var sum708 = callmethod(call707, "+(1)", [1], new GraceNum(1));
                  // call case 4: self request
                  var call706 = selfRequest(this, "size:=(1)", [1], sum708);
                  return call706;
                };
                // call case 5: prelude request
                var call700 = callmethod(var_prelude, "for(1)do(1)", [1, 1], var_l, block701);
                setLineNumber(1135);    // compilenode identifier
                return this;
              };    // end of method addAll(_)
              this.methods["addAll(1)"] = func682;
              func682.paramCounts = [1];
              func682.paramNames = ["l"];
              func682.typeParamNames = [];
              func682.definitionLine = 1126;
              func682.definitionModule = "standardGraceClass";
              var func709 = function(argcv, var_x) {    // method push(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1138);    // compilenode member
                // call case 4: self request
                var call711 = selfRequest(this, "mods", []);
                var sum712 = callmethod(call711, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call710 = selfRequest(this, "mods:=(1)", [1], sum712);
                var if713 = GraceDone;
                setLineNumber(1139);    // compilenode member
                // call case 4: self request
                var call714 = selfRequest(this, "size", []);
                // call case 6: other requests
                // call case 4: self request
                var call716 = selfRequest(this, "inner", []);
                var call715 = callmethod(call716, "size", []);
                var opresult717 = callmethod(call714, "==(1)", [1], call715);
                if (Grace_isTrue(opresult717)) {
                  // call case 6: other requests
                  // call case 4: self request
                  var call720 = selfRequest(this, "inner", []);
                  var call719 = callmethod(call720, "size", []);
                  var prod721 = callmethod(call719, "*(1)", [1], new GraceNum(2));
                  // call case 4: self request
                  var call718 = selfRequest(this, "expandTo(1)", [1], prod721);
                  if713 = call718;
                }
                setLineNumber(1140);    // compilenode member
                // call case 4: self request
                var call723 = selfRequest(this, "size", []);
                // call case 6: other requests
                // call case 4: self request
                var call724 = selfRequest(this, "inner", []);
                var call722 = callmethod(call724, "at(1)put(1)", [1, 1], call723, var_x);
                setLineNumber(1141);    // compilenode member
                // call case 4: self request
                var call726 = selfRequest(this, "size", []);
                var sum727 = callmethod(call726, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call725 = selfRequest(this, "size:=(1)", [1], sum727);
                setLineNumber(1142);    // compilenode identifier
                return this;
              };    // end of method push(_)
              this.methods["push(1)"] = func709;
              func709.paramCounts = [1];
              func709.paramNames = ["x"];
              func709.typeParamNames = [];
              func709.definitionLine = 1137;
              func709.definitionModule = "standardGraceClass";
              var func728 = function(argcv, var_x) {    // method addLast(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1144);    // compilenode identifier
                // call case 4: self request
                var call729 = selfRequest(this, "push(1)", [1], var_x);
                return call729;
              };    // end of method addLast(_)
              this.methods["addLast(1)"] = func728;
              func728.paramCounts = [1];
              func728.paramNames = ["x"];
              func728.typeParamNames = [];
              func728.definitionLine = 1144;
              func728.definitionModule = "standardGraceClass";
              var func730 = function(argcv) {    // method removeLast
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1146);    // compilenode member
                // call case 4: self request
                var call732 = selfRequest(this, "mods", []);
                var sum733 = callmethod(call732, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call731 = selfRequest(this, "mods:=(1)", [1], sum733);
                setLineNumber(1147);    // compilenode member
                // call case 4: self request
                var call735 = selfRequest(this, "size", []);
                var diff736 = callmethod(call735, "-(1)", [1], new GraceNum(1));
                // call case 6: other requests
                // call case 4: self request
                var call737 = selfRequest(this, "inner", []);
                var call734 = callmethod(call737, "at(1)", [1], diff736);
                var var_result = call734;
                setLineNumber(1148);    // compilenode member
                // call case 4: self request
                var call739 = selfRequest(this, "size", []);
                var diff740 = callmethod(call739, "-(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call738 = selfRequest(this, "size:=(1)", [1], diff740);
                setLineNumber(1149);    // compilenode identifier
                return var_result;
              };    // end of method removeLast
              this.methods["removeLast"] = func730;
              func730.paramCounts = [0];
              func730.paramNames = [];
              func730.typeParamNames = [];
              func730.definitionLine = 1145;
              func730.definitionModule = "standardGraceClass";
              var func741 = function(argcv, var_l) {    // method addAllFirst(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1152);    // compilenode member
                // call case 4: self request
                var call743 = selfRequest(this, "mods", []);
                var sum744 = callmethod(call743, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call742 = selfRequest(this, "mods:=(1)", [1], sum744);
                setLineNumber(1153);    // compilenode member
                // call case 6: other requests
                var call745 = callmethod(var_l, "size", []);
                var var_increase = call745;
                var if746 = GraceDone;
                setLineNumber(1154);    // compilenode member
                // call case 4: self request
                var call747 = selfRequest(this, "size", []);
                var sum748 = callmethod(call747, "+(1)", [1], var_increase);
                // call case 6: other requests
                // call case 4: self request
                var call750 = selfRequest(this, "inner", []);
                var call749 = callmethod(call750, "size", []);
                var opresult751 = callmethod(sum748, ">(1)", [1], call749);
                if (Grace_isTrue(opresult751)) {
                  setLineNumber(1155);    // compilenode member
                  // call case 4: self request
                  var call754 = selfRequest(this, "size", []);
                  var sum755 = callmethod(call754, "+(1)", [1], var_increase);
                  // call case 4: self request
                  var call756 = selfRequest(this, "size", []);
                  var prod757 = callmethod(call756, "*(1)", [1], new GraceNum(2));
                  // call case 2: outer request
                  var call753 = selfRequest(this.outer_standardGraceClass_1069.outer_standardGraceClass_1061, "max(2)", [2], sum755, prod757);
                  // call case 4: self request
                  var call752 = selfRequest(this, "expandTo(1)", [1], call753);
                  if746 = call752;
                }
                setLineNumber(1157);    // compilenode member
                // call case 4: self request
                var call760 = selfRequest(this, "size", []);
                var diff761 = callmethod(call760, "-(1)", [1], new GraceNum(1));
                // call case 6: other requests
                // call case 2: outer request
                var call762 = selfRequest(this.outer_standardGraceClass_1069.outer_standardGraceClass_1061, "range", []);
                var call759 = callmethod(call762, "from(1)downTo(1)", [1, 1], diff761, new GraceNum(0));
                var block763 = new GraceBlock(this, 1157, 1);
                setLineNumber(1);    // compilenode identifier
                var matches764 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1157);    // block matches function
                  return true;
                };
                block763.guard = matches764;
                block763.real = function(var_i) {
                  setLineNumber(1158);    // compilenode identifier
                  var sum766 = callmethod(var_i, "+(1)", [1], var_increase);
                  // call case 6: other requests
                  // call case 4: self request
                  var call768 = selfRequest(this, "inner", []);
                  var call767 = callmethod(call768, "at(1)", [1], var_i);
                  // call case 6: other requests
                  // call case 4: self request
                  var call769 = selfRequest(this, "inner", []);
                  var call765 = callmethod(call769, "at(1)put(1)", [1, 1], sum766, call767);
                  return call765;
                };
                // call case 5: prelude request
                var call758 = callmethod(var_prelude, "for(1)do(1)", [1, 1], call759, block763);
                setLineNumber(1160);    // compilenode num
                var var_insertionIndex = new GraceNum(0);
                setLineNumber(1161);    // compilenode block
                var block771 = new GraceBlock(this, 1161, 1);
                setLineNumber(1);    // compilenode identifier
                var matches772 = function(var_each) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1161);    // block matches function
                  return true;
                };
                block771.guard = matches772;
                block771.real = function(var_each) {
                  setLineNumber(1162);    // compilenode call
                  if (var_insertionIndex === undefined) raiseUninitializedVariable("insertionIndex");
                  // call case 6: other requests
                  // call case 4: self request
                  var call774 = selfRequest(this, "inner", []);
                  var call773 = callmethod(call774, "at(1)put(1)", [1, 1], var_insertionIndex, var_each);
                  setLineNumber(1163);    // compilenode num
                  var sum775 = callmethod(var_insertionIndex, "+(1)", [1], new GraceNum(1));
                  var_insertionIndex = sum775;
                  return GraceDone;
                };
                // call case 5: prelude request
                var call770 = callmethod(var_prelude, "for(1)do(1)", [1, 1], var_l, block771);
                setLineNumber(1165);    // compilenode member
                // call case 4: self request
                var call777 = selfRequest(this, "size", []);
                var sum778 = callmethod(call777, "+(1)", [1], var_increase);
                // call case 4: self request
                var call776 = selfRequest(this, "size:=(1)", [1], sum778);
                setLineNumber(1166);    // compilenode identifier
                return this;
              };    // end of method addAllFirst(_)
              this.methods["addAllFirst(1)"] = func741;
              func741.paramCounts = [1];
              func741.paramNames = ["l"];
              func741.typeParamNames = [];
              func741.definitionLine = 1151;
              func741.definitionModule = "standardGraceClass";
              var func779 = function(argcv, var_elt) {    // method addFirst(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                // Start argument type-checks
                setLineNumber(1168);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_T, "match(1)",  [1], var_elt)))
                    raiseTypeError("in request of `addFirst(_)`, " +
                      "argument 1 is not of type " +
                      "T", var_T, var_elt);
                // End argument type-checks
                setLineNumber(1169);    // compilenode member
                // call case 4: self request
                var call781 = selfRequest(this, "mods", []);
                var sum782 = callmethod(call781, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call780 = selfRequest(this, "mods:=(1)", [1], sum782);
                var if783 = GraceDone;
                setLineNumber(1170);    // compilenode member
                // call case 4: self request
                var call784 = selfRequest(this, "size", []);
                var sum785 = callmethod(call784, "+(1)", [1], new GraceNum(1));
                // call case 6: other requests
                // call case 4: self request
                var call787 = selfRequest(this, "inner", []);
                var call786 = callmethod(call787, "size", []);
                var opresult788 = callmethod(sum785, ">(1)", [1], call786);
                if (Grace_isTrue(opresult788)) {
                  setLineNumber(1171);    // compilenode member
                  // call case 4: self request
                  var call790 = selfRequest(this, "size", []);
                  var prod791 = callmethod(call790, "*(1)", [1], new GraceNum(2));
                  // call case 4: self request
                  var call789 = selfRequest(this, "expandTo(1)", [1], prod791);
                  if783 = call789;
                }
                setLineNumber(1173);    // compilenode member
                // call case 4: self request
                var call794 = selfRequest(this, "size", []);
                var diff795 = callmethod(call794, "-(1)", [1], new GraceNum(1));
                // call case 6: other requests
                // call case 2: outer request
                var call796 = selfRequest(this.outer_standardGraceClass_1069.outer_standardGraceClass_1061, "range", []);
                var call793 = callmethod(call796, "from(1)downTo(1)", [1, 1], diff795, new GraceNum(0));
                var block797 = new GraceBlock(this, 1173, 1);
                setLineNumber(1);    // compilenode identifier
                var matches798 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1173);    // block matches function
                  return true;
                };
                block797.guard = matches798;
                block797.real = function(var_i) {
                  setLineNumber(1174);    // compilenode num
                  var sum800 = callmethod(var_i, "+(1)", [1], new GraceNum(1));
                  // call case 6: other requests
                  // call case 4: self request
                  var call802 = selfRequest(this, "inner", []);
                  var call801 = callmethod(call802, "at(1)", [1], var_i);
                  // call case 6: other requests
                  // call case 4: self request
                  var call803 = selfRequest(this, "inner", []);
                  var call799 = callmethod(call803, "at(1)put(1)", [1, 1], sum800, call801);
                  return call799;
                };
                // call case 5: prelude request
                var call792 = callmethod(var_prelude, "for(1)do(1)", [1, 1], call793, block797);
                setLineNumber(1176);    // compilenode identifier
                // call case 6: other requests
                // call case 4: self request
                var call805 = selfRequest(this, "inner", []);
                var call804 = callmethod(call805, "at(1)put(1)", [1, 1], new GraceNum(0), var_elt);
                setLineNumber(1177);    // compilenode member
                // call case 4: self request
                var call807 = selfRequest(this, "size", []);
                var sum808 = callmethod(call807, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call806 = selfRequest(this, "size:=(1)", [1], sum808);
                setLineNumber(1178);    // compilenode identifier
                return this;
              };    // end of method addFirst(_)
              func779.paramTypes = [];
              func779.paramTypes.push([]);
              this.methods["addFirst(1)"] = func779;
              func779.paramCounts = [1];
              func779.paramNames = ["elt"];
              func779.typeParamNames = [];
              func779.definitionLine = 1168;
              func779.definitionModule = "standardGraceClass";
              var func809 = function(argcv) {    // method clear
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1181);    // compilenode member
                // call case 4: self request
                var call811 = selfRequest(this, "mods", []);
                var sum812 = callmethod(call811, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call810 = selfRequest(this, "mods:=(1)", [1], sum812);
                setLineNumber(1182);    // compilenode member
                // call case 4: self request
                var call815 = selfRequest(this, "initialSize", []);
                // call case 6: other requests
                // call case 6: other requests
                var call816 = callmethod(var___95__prelude, "primitiveArray", []);
                var call814 = callmethod(call816, "new(1)", [1], call815);
                // call case 4: self request
                var call813 = selfRequest(this, "inner:=(1)", [1], call814);
                setLineNumber(1183);    // compilenode num
                // call case 4: self request
                var call817 = selfRequest(this, "size:=(1)", [1], new GraceNum(0));
                setLineNumber(1184);    // compilenode identifier
                return this;
              };    // end of method clear
              this.methods["clear"] = func809;
              func809.paramCounts = [0];
              func809.paramNames = [];
              func809.typeParamNames = [];
              func809.definitionLine = 1180;
              func809.definitionModule = "standardGraceClass";
              var func818 = function(argcv) {    // method removeFirst
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1187);    // compilenode num
                // call case 4: self request
                var call819 = selfRequest(this, "removeAt(1)", [1], new GraceNum(1));
                return call819;
              };    // end of method removeFirst
              this.methods["removeFirst"] = func818;
              func818.paramCounts = [0];
              func818.paramNames = [];
              func818.typeParamNames = [];
              func818.definitionLine = 1186;
              func818.definitionModule = "standardGraceClass";
              var func820 = function(argcv, var_n) {    // method removeAt(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1190);    // compilenode member
                // call case 4: self request
                var call822 = selfRequest(this, "mods", []);
                var sum823 = callmethod(call822, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call821 = selfRequest(this, "mods:=(1)", [1], sum823);
                setLineNumber(1191);    // compilenode identifier
                // call case 4: self request
                var call824 = selfRequest(this, "boundsCheck(1)", [1], var_n);
                setLineNumber(1192);    // compilenode num
                var diff826 = callmethod(var_n, "-(1)", [1], new GraceNum(1));
                // call case 6: other requests
                // call case 4: self request
                var call827 = selfRequest(this, "inner", []);
                var call825 = callmethod(call827, "at(1)", [1], diff826);
                var var_removed = call825;
                setLineNumber(1193);    // compilenode member
                // call case 4: self request
                var call829 = selfRequest(this, "size", []);
                var diff830 = callmethod(call829, "-(1)", [1], new GraceNum(1));
                var opresult831 = callmethod(var_n, "..(1)", [1], diff830);
                var block832 = new GraceBlock(this, 1193, 1);
                setLineNumber(1);    // compilenode identifier
                var matches833 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1193);    // block matches function
                  return true;
                };
                block832.guard = matches833;
                block832.real = function(var_i) {
                  setLineNumber(1194);    // compilenode num
                  var diff835 = callmethod(var_i, "-(1)", [1], new GraceNum(1));
                  // call case 6: other requests
                  // call case 4: self request
                  var call837 = selfRequest(this, "inner", []);
                  var call836 = callmethod(call837, "at(1)", [1], var_i);
                  // call case 6: other requests
                  // call case 4: self request
                  var call838 = selfRequest(this, "inner", []);
                  var call834 = callmethod(call838, "at(1)put(1)", [1, 1], diff835, call836);
                  return call834;
                };
                // call case 5: prelude request
                var call828 = callmethod(var_prelude, "for(1)do(1)", [1, 1], opresult831, block832);
                setLineNumber(1196);    // compilenode member
                // call case 4: self request
                var call840 = selfRequest(this, "size", []);
                var diff841 = callmethod(call840, "-(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call839 = selfRequest(this, "size:=(1)", [1], diff841);
                setLineNumber(1197);    // compilenode identifier
                return var_removed;
                return undefined;
              };    // end of method removeAt(_)
              this.methods["removeAt(1)"] = func820;
              func820.paramCounts = [1];
              func820.paramNames = ["n"];
              func820.typeParamNames = [];
              func820.definitionLine = 1189;
              func820.definitionModule = "standardGraceClass";
              var func842 = function(argcv, var_elt) {    // method remove(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                // Start argument type-checks
                setLineNumber(1200);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_T, "match(1)",  [1], var_elt)))
                    raiseTypeError("in request of `remove(_)`, " +
                      "argument 1 is not of type " +
                      "T", var_T, var_elt);
                // End argument type-checks
                setLineNumber(1201);    // compilenode block
                var block844 = new GraceBlock(this, 1201, 0);
                var matches845 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block844.guard = matches845;
                block844.real = function() {
                  setLineNumber(1202);    // compilenode string
                  var string847 = new GraceString("list does not contain ");
                  var opresult848 = callmethod(string847, "++(1)", [1], var_elt);
                  var string849 = new GraceString("");
                  var opresult850 = callmethod(opresult848, "++(1)", [1], string849);
                  // call case 6: other requests
                  // call case 2: outer request
                  var call851 = selfRequest(this.outer_standardGraceClass_1069.outer_standardGraceClass_1061, "NoSuchObject", []);
                  var call846 = callmethod(call851, "raise(1)", [1], opresult850);
                  return call846;
                };
                // call case 4: self request
                var call843 = selfRequest(this, "indexOf(1)ifAbsent(1)", [1, 1], var_elt, block844);
                var var_ix = call843;
                setLineNumber(1204);    // compilenode identifier
                // call case 4: self request
                var call852 = selfRequest(this, "removeAt(1)", [1], var_ix);
                setLineNumber(1205);    // compilenode identifier
                return this;
              };    // end of method remove(_)
              func842.paramTypes = [];
              func842.paramTypes.push([]);
              this.methods["remove(1)"] = func842;
              func842.paramCounts = [1];
              func842.paramNames = ["elt"];
              func842.typeParamNames = [];
              func842.definitionLine = 1200;
              func842.definitionModule = "standardGraceClass";
              var func853 = function(argcv, var_elt, var_action) {    // method remove(_)ifAbsent(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                // Start argument type-checks
                setLineNumber(1208);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_T, "match(1)",  [1], var_elt)))
                    raiseTypeError("in request of `remove(_)ifAbsent(_)`, " +
                      "argument 1 to `remove`  is not of type " +
                      "T", var_T, var_elt);
                // call case 2: outer request
                var call854 = selfRequest(this.outer_standardGraceClass_1069.outer_standardGraceClass_1061, "Block0", []);
                if (!Grace_isTrue(callmethod(call854, "match(1)",  [1], var_action)))
                    raiseTypeError("in request of `remove(_)ifAbsent(_)`, " +
                      "argument 1 to `ifAbsent`  is not of type " +
                      "Block0⟦Done⟧", call854, var_action);
                // End argument type-checks
                setLineNumber(1209);    // compilenode block
                var block856 = new GraceBlock(this, 1209, 0);
                var matches857 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block856.guard = matches857;
                block856.real = function() {
                  setLineNumber(1210);    // compilenode member
                  // call case 6: other requests
                  var call858 = callmethod(var_action, "apply", []);
                  setLineNumber(1211);    // compilenode identifier
                  throw new ReturnException(this, returnTarget);
                  return undefined;
                };
                // call case 4: self request
                var call855 = selfRequest(this, "indexOf(1)ifAbsent(1)", [1, 1], var_elt, block856);
                var var_ix = call855;
                setLineNumber(1213);    // compilenode identifier
                // call case 4: self request
                var call859 = selfRequest(this, "removeAt(1)", [1], var_ix);
                setLineNumber(1214);    // compilenode identifier
                return this;
              };    // end of method remove(_)ifAbsent(_)
              func853.paramTypes = [];
              func853.paramTypes.push([]);
              func853.paramTypes.push([]);
              this.methods["remove(1)ifAbsent(1)"] = func853;
              func853.paramCounts = [1, 1];
              func853.paramNames = ["elt", "action"];
              func853.typeParamNames = [];
              func853.definitionLine = 1208;
              func853.definitionModule = "standardGraceClass";
              var func860 = function(argcv, var_vs) {    // method removeAll(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                // Start argument type-checks
                setLineNumber(1217);    // compilenode member
                // call case 2: outer request
                var call861 = selfRequest(this.outer_standardGraceClass_1069.outer_standardGraceClass_1061, "Iterable", []);
                if (!Grace_isTrue(callmethod(call861, "match(1)",  [1], var_vs)))
                    raiseTypeError("in request of `removeAll(_)`, " +
                      "argument 1 is not of type " +
                      "Iterable⟦T⟧", call861, var_vs);
                // End argument type-checks
                setLineNumber(1218);    // compilenode block
                var block863 = new GraceBlock(this, 1218, 0);
                var matches864 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block863.guard = matches864;
                block863.real = function() {
                  var string866 = new GraceString("list does not contain object");
                  // call case 6: other requests
                  // call case 2: outer request
                  var call867 = selfRequest(this.outer_standardGraceClass_1069.outer_standardGraceClass_1061, "NoSuchObject", []);
                  var call865 = callmethod(call867, "raise(1)", [1], string866);
                  return call865;
                };
                // call case 4: self request
                var call862 = selfRequest(this, "removeAll(1)ifAbsent(1)", [1, 1], var_vs, block863);
                setLineNumber(1219);    // compilenode identifier
                return this;
              };    // end of method removeAll(_)
              this.methods["removeAll(1)"] = func860;
              func860.paramCounts = [1];
              func860.paramNames = ["vs"];
              func860.typeParamNames = [];
              func860.definitionLine = 1217;
              func860.definitionModule = "standardGraceClass";
              var func868 = function(argcv, var_vs, var_action) {    // method removeAll(_)ifAbsent(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                // Start argument type-checks
                setLineNumber(1221);    // compilenode member
                // call case 2: outer request
                var call869 = selfRequest(this.outer_standardGraceClass_1069.outer_standardGraceClass_1061, "Iterable", []);
                if (!Grace_isTrue(callmethod(call869, "match(1)",  [1], var_vs)))
                    raiseTypeError("in request of `removeAll(_)ifAbsent(_)`, " +
                      "argument 1 to `removeAll`  is not of type " +
                      "Iterable⟦T⟧", call869, var_vs);
                // call case 2: outer request
                var call870 = selfRequest(this.outer_standardGraceClass_1069.outer_standardGraceClass_1061, "Block0", []);
                if (!Grace_isTrue(callmethod(call870, "match(1)",  [1], var_action)))
                    raiseTypeError("in request of `removeAll(_)ifAbsent(_)`, " +
                      "argument 1 to `ifAbsent`  is not of type " +
                      "Block0⟦Done⟧", call870, var_action);
                // End argument type-checks
                setLineNumber(1222);    // compilenode block
                var block872 = new GraceBlock(this, 1222, 1);
                setLineNumber(1);    // compilenode identifier
                var matches873 = function(var_each) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1222);    // block matches function
                  return true;
                };
                block872.guard = matches873;
                block872.real = function(var_each) {
                  setLineNumber(1223);    // compilenode block
                  var block875 = new GraceBlock(this, 1223, 0);
                  var matches876 = function() {
                    setModuleName("standardGraceClass");
                    return true;
                  };
                  block875.guard = matches876;
                  block875.real = function() {
                    return new GraceNum(0);
                  };
                  // call case 4: self request
                  var call874 = selfRequest(this, "indexOf(1)ifAbsent(1)", [1, 1], var_each, block875);
                  var var_ix = call874;
                  var if877 = GraceDone;
                  setLineNumber(1224);    // compilenode num
                  var opresult878 = callmethod(var_ix, "\u2260(1)", [1], new GraceNum(0));
                  if (Grace_isTrue(opresult878)) {
                    setLineNumber(1225);    // compilenode identifier
                    // call case 4: self request
                    var call879 = selfRequest(this, "removeAt(1)", [1], var_ix);
                    if877 = call879;
                  } else {
                    setLineNumber(1227);    // compilenode member
                    // call case 6: other requests
                    var call880 = callmethod(var_action, "apply", []);
                    if877 = call880;
                  }
                  return if877;
                };
                // call case 5: prelude request
                var call871 = callmethod(var_prelude, "for(1)do(1)", [1, 1], var_vs, block872);
                setLineNumber(1230);    // compilenode identifier
                return this;
              };    // end of method removeAll(_)ifAbsent(_)
              this.methods["removeAll(1)ifAbsent(1)"] = func868;
              func868.paramCounts = [1, 1];
              func868.paramNames = ["vs", "action"];
              func868.typeParamNames = [];
              func868.definitionLine = 1221;
              func868.definitionModule = "standardGraceClass";
              var func881 = function(argcv) {    // method pop
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1232);    // compilenode member
                // call case 4: self request
                var call882 = selfRequest(this, "removeLast", []);
                return call882;
              };    // end of method pop
              this.methods["pop"] = func881;
              func881.paramCounts = [0];
              func881.paramNames = [];
              func881.typeParamNames = [];
              func881.definitionLine = 1232;
              func881.definitionModule = "standardGraceClass";
              var func883 = function(argcv) {    // method reversed
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1234);    // compilenode member
                // call case 6: other requests
                // call case 2: outer request
                var call885 = selfRequest(this.outer_standardGraceClass_1069.outer_standardGraceClass_1061, "list", []);
                var call884 = callmethod(call885, "empty", []);
                var var_result = call884;
                setLineNumber(1235);    // compilenode block
                var block887 = new GraceBlock(this, 1235, 1);
                setLineNumber(1);    // compilenode identifier
                var matches888 = function(var_each) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1235);    // block matches function
                  return true;
                };
                block887.guard = matches888;
                block887.real = function(var_each) {
                  // call case 6: other requests
                  var call889 = callmethod(var_result, "addFirst(1)", [1], var_each);
                  return call889;
                };
                // call case 4: self request
                var call886 = selfRequest(this, "do(1)", [1], block887);
                setLineNumber(1236);    // compilenode identifier
                return var_result;
              };    // end of method reversed
              this.methods["reversed"] = func883;
              func883.paramCounts = [0];
              func883.paramNames = [];
              func883.typeParamNames = [];
              func883.definitionLine = 1233;
              func883.definitionModule = "standardGraceClass";
              var func890 = function(argcv) {    // method reverse
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1239);    // compilenode member
                // call case 4: self request
                var call892 = selfRequest(this, "mods", []);
                var sum893 = callmethod(call892, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call891 = selfRequest(this, "mods:=(1)", [1], sum893);
                setLineNumber(1240);    // compilenode member
                // call case 4: self request
                var call894 = selfRequest(this, "size", []);
                var var_hiIx = call894;
                setLineNumber(1241);    // compilenode num
                var var_loIx = new GraceNum(1);
                setLineNumber(1242);    // compilenode block
                var block896 = new GraceBlock(this, 1242, 0);
                var matches897 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block896.guard = matches897;
                block896.real = function() {
                  if (var_hiIx === undefined) raiseUninitializedVariable("hiIx");
                  var opresult898 = callmethod(var_loIx, "<(1)", [1], var_hiIx);
                  return opresult898;
                };
                var block899 = new GraceBlock(this, 1242, 0);
                var matches900 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block899.guard = matches900;
                block899.real = function() {
                  setLineNumber(1243);    // compilenode call
                  if (var_hiIx === undefined) raiseUninitializedVariable("hiIx");
                  // call case 4: self request
                  var call901 = selfRequest(this, "at(1)", [1], var_hiIx);
                  var var_hiVal = call901;
                  setLineNumber(1244);    // compilenode call
                  if (var_hiIx === undefined) raiseUninitializedVariable("hiIx");
                  if (var_loIx === undefined) raiseUninitializedVariable("loIx");
                  // call case 4: self request
                  var call903 = selfRequest(this, "at(1)", [1], var_loIx);
                  // call case 4: self request
                  var call902 = selfRequest(this, "at(1)put(1)", [1, 1], var_hiIx, call903);
                  setLineNumber(1245);    // compilenode call
                  if (var_loIx === undefined) raiseUninitializedVariable("loIx");
                  // call case 4: self request
                  var call904 = selfRequest(this, "at(1)put(1)", [1, 1], var_loIx, var_hiVal);
                  setLineNumber(1246);    // compilenode num
                  var diff905 = callmethod(var_hiIx, "-(1)", [1], new GraceNum(1));
                  var_hiIx = diff905;
                  setLineNumber(1247);    // compilenode num
                  var sum906 = callmethod(var_loIx, "+(1)", [1], new GraceNum(1));
                  var_loIx = sum906;
                  return GraceDone;
                };
                // call case 5: prelude request
                var call895 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block896, block899);
                setLineNumber(1249);    // compilenode identifier
                return this;
              };    // end of method reverse
              this.methods["reverse"] = func890;
              func890.paramCounts = [0];
              func890.paramNames = [];
              func890.typeParamNames = [];
              func890.definitionLine = 1238;
              func890.definitionModule = "standardGraceClass";
              var func907 = function(argcv, var_o) {    // method ++(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1252);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call909 = selfRequest(this.outer_standardGraceClass_1069.outer_standardGraceClass_1061, "list", []);
                var call908 = callmethod(call909, "withAll(1)", [1], this);
                var var_l = call908;
                setLineNumber(1253);    // compilenode identifier
                // call case 6: other requests
                var call910 = callmethod(var_l, "addAll(1)", [1], var_o);
                return call910;
              };    // end of method ++(_)
              this.methods["++(1)"] = func907;
              func907.paramCounts = [1];
              func907.paramNames = ["o"];
              func907.typeParamNames = [];
              func907.definitionLine = 1251;
              func907.definitionModule = "standardGraceClass";
              var func911 = function(argcv) {    // method asString
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1256);    // compilenode string
                var string912 = new GraceString("[");
                var var_s = string912;
                setLineNumber(1257);    // compilenode member
                // call case 4: self request
                var call914 = selfRequest(this, "size", []);
                var diff915 = callmethod(call914, "-(1)", [1], new GraceNum(1));
                var opresult916 = callmethod(new GraceNum(0), "..(1)", [1], diff915);
                var block917 = new GraceBlock(this, 1257, 1);
                setLineNumber(1);    // compilenode identifier
                var matches918 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1257);    // block matches function
                  return true;
                };
                block917.guard = matches918;
                block917.real = function(var_i) {
                  setLineNumber(1258);    // compilenode member
                  // call case 6: other requests
                  // call case 6: other requests
                  // call case 4: self request
                  var call921 = selfRequest(this, "inner", []);
                  var call920 = callmethod(call921, "at(1)", [1], var_i);
                  var call919 = callmethod(call920, "asString", []);
                  var opresult922 = callmethod(var_s, "++(1)", [1], call919);
                  var_s = opresult922;
                  var if923 = GraceDone;
                  setLineNumber(1259);    // compilenode member
                  // call case 4: self request
                  var call924 = selfRequest(this, "size", []);
                  var diff925 = callmethod(call924, "-(1)", [1], new GraceNum(1));
                  var opresult926 = callmethod(var_i, "<(1)", [1], diff925);
                  if (Grace_isTrue(opresult926)) {
                    var string927 = new GraceString(", ");
                    var opresult928 = callmethod(var_s, "++(1)", [1], string927);
                    var_s = opresult928;
                    if923 = GraceDone;
                  }
                  return if923;
                };
                // call case 5: prelude request
                var call913 = callmethod(var_prelude, "for(1)do(1)", [1, 1], opresult916, block917);
                setLineNumber(1261);    // compilenode string
                var string929 = new GraceString("]");
                var opresult930 = callmethod(var_s, "++(1)", [1], string929);
                return opresult930;
              };    // end of method asString
              this.methods["asString"] = func911;
              func911.paramCounts = [0];
              func911.paramNames = [];
              func911.typeParamNames = [];
              func911.definitionLine = 1255;
              func911.definitionModule = "standardGraceClass";
              var func931 = function(argcv) {    // method asDebugString
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1264);    // compilenode string
                var string932 = new GraceString("[");
                var var_s = string932;
                setLineNumber(1265);    // compilenode member
                // call case 4: self request
                var call934 = selfRequest(this, "size", []);
                var diff935 = callmethod(call934, "-(1)", [1], new GraceNum(1));
                var opresult936 = callmethod(new GraceNum(0), "..(1)", [1], diff935);
                var block937 = new GraceBlock(this, 1265, 1);
                setLineNumber(1);    // compilenode identifier
                var matches938 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1265);    // block matches function
                  return true;
                };
                block937.guard = matches938;
                block937.real = function(var_i) {
                  setLineNumber(1266);    // compilenode member
                  // call case 6: other requests
                  // call case 6: other requests
                  // call case 4: self request
                  var call941 = selfRequest(this, "inner", []);
                  var call940 = callmethod(call941, "at(1)", [1], var_i);
                  var call939 = callmethod(call940, "asDebugString", []);
                  var opresult942 = callmethod(var_s, "++(1)", [1], call939);
                  var_s = opresult942;
                  var if943 = GraceDone;
                  setLineNumber(1267);    // compilenode member
                  // call case 4: self request
                  var call944 = selfRequest(this, "size", []);
                  var diff945 = callmethod(call944, "-(1)", [1], new GraceNum(1));
                  var opresult946 = callmethod(var_i, "<(1)", [1], diff945);
                  if (Grace_isTrue(opresult946)) {
                    var string947 = new GraceString(", ");
                    var opresult948 = callmethod(var_s, "++(1)", [1], string947);
                    var_s = opresult948;
                    if943 = GraceDone;
                  }
                  return if943;
                };
                // call case 5: prelude request
                var call933 = callmethod(var_prelude, "for(1)do(1)", [1, 1], opresult936, block937);
                setLineNumber(1269);    // compilenode string
                var string949 = new GraceString("]");
                var opresult950 = callmethod(var_s, "++(1)", [1], string949);
                return opresult950;
              };    // end of method asDebugString
              this.methods["asDebugString"] = func931;
              func931.paramCounts = [0];
              func931.paramNames = [];
              func931.typeParamNames = [];
              func931.definitionLine = 1263;
              func931.definitionModule = "standardGraceClass";
              var func951 = function(argcv, var_element) {    // method contains(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1272);    // compilenode block
                var block953 = new GraceBlock(this, 1272, 1);
                setLineNumber(1);    // compilenode identifier
                var matches954 = function(var_each) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1272);    // block matches function
                  return true;
                };
                block953.guard = matches954;
                block953.real = function(var_each) {
                  var if955 = GraceDone;
                  var opresult956 = callmethod(var_each, "==(1)", [1], var_element);
                  if (Grace_isTrue(opresult956)) {
                    throw new ReturnException(GraceTrue, returnTarget);
                  }
                  return if955;
                };
                // call case 4: self request
                var call952 = selfRequest(this, "do(1)", [1], block953);
                setLineNumber(1273);    // compilenode identifier
                return GraceFalse;
                return undefined;
              };    // end of method contains(_)
              this.methods["contains(1)"] = func951;
              func951.paramCounts = [1];
              func951.paramNames = ["element"];
              func951.typeParamNames = [];
              func951.definitionLine = 1271;
              func951.definitionModule = "standardGraceClass";
              var func957 = function(argcv, var_block1) {    // method do(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1276);    // compilenode num
                var var_i = new GraceNum(0);
                setLineNumber(1277);    // compilenode block
                var block959 = new GraceBlock(this, 1277, 0);
                var matches960 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block959.guard = matches960;
                block959.real = function() {
                  // call case 4: self request
                  var call961 = selfRequest(this, "size", []);
                  var opresult962 = callmethod(var_i, "<(1)", [1], call961);
                  return opresult962;
                };
                var block963 = new GraceBlock(this, 1277, 0);
                var matches964 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block963.guard = matches964;
                block963.real = function() {
                  setLineNumber(1278);    // compilenode call
                  if (var_i === undefined) raiseUninitializedVariable("i");
                  // call case 6: other requests
                  // call case 4: self request
                  var call967 = selfRequest(this, "inner", []);
                  var call966 = callmethod(call967, "at(1)", [1], var_i);
                  // call case 6: other requests
                  var call965 = callmethod(var_block1, "apply(1)", [1], call966);
                  setLineNumber(1279);    // compilenode num
                  var sum968 = callmethod(var_i, "+(1)", [1], new GraceNum(1));
                  var_i = sum968;
                  return GraceDone;
                };
                // call case 5: prelude request
                var call958 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block959, block963);
                return call958;
              };    // end of method do(_)
              this.methods["do(1)"] = func957;
              func957.paramCounts = [1];
              func957.paramNames = ["block1"];
              func957.typeParamNames = [];
              func957.definitionLine = 1275;
              func957.definitionModule = "standardGraceClass";
              var func969 = function(argcv, var_other) {    // method ==(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1284);    // compilenode identifier
                // call case 2: outer request
                var call970 = selfRequest(this.outer_standardGraceClass_1069.outer_standardGraceClass_1061, "isEqual(1)toIterable(1)", [1, 1], this, var_other);
                return call970;
              };    // end of method ==(_)
              this.methods["==(1)"] = func969;
              func969.paramCounts = [1];
              func969.paramNames = ["other"];
              func969.typeParamNames = [];
              func969.definitionLine = 1283;
              func969.definitionModule = "standardGraceClass";
              var func971 = function(argcv) {    // method iterator
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var ouc = emptyGraceObject("standardGrace.list.withAll(_).iterator", "standardGraceClass", 1286);
                var ouc_init = this.methods["iterator$build(3)"].call(this, null, ouc, [], []);
                ouc_init.call(ouc);
                return ouc;
              };    // end of method iterator
              this.methods["iterator"] = func971;
              func971.paramCounts = [0];
              func971.paramNames = [];
              func971.typeParamNames = [];
              func971.definitionLine = 1286;
              func971.definitionModule = "standardGraceClass";
              var func972 = function(argcv, inheritingObject, aliases, exclusions) {    // method iterator$build(_,_,_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var obj973_build = function(ignore, outerObj, aliases, exclusions) {
                  this.closureKeys = this.closureKeys || [];
                  this.closureKeys.push("outer_standardGraceClass_1287");
                  this.outer_standardGraceClass_1287 = outerObj;
                  var inheritedExclusions = { };
                  for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                      var exMeth = exclusions[eix];
                      inheritedExclusions[exMeth] = this.methods[exMeth];
                  }
                  this.data.imods = undefined;
                  var reader_imods974 = function() {  // reader method imods
                      return this.data.imods;
                  };
                  reader_imods974.isVar = true;
                  reader_imods974.confidential = true;
                  this.methods["imods"] = reader_imods974;
                  var writer_imods974 = function(argcv, n) {   // writer method imods:=(_)
                      this.data.imods = n;
                      return GraceDone;
                  };
                  writer_imods974.confidential = true;
                  this.methods["imods:=(1)"] = writer_imods974;
                  this.data.idx = undefined;
                  var reader_idx975 = function() {  // reader method idx
                      return this.data.idx;
                  };
                  reader_idx975.isVar = true;
                  reader_idx975.confidential = true;
                  this.methods["idx"] = reader_idx975;
                  var writer_idx975 = function(argcv, n) {   // writer method idx:=(_)
                      this.data.idx = n;
                      return GraceDone;
                  };
                  writer_idx975.confidential = true;
                  this.methods["idx:=(1)"] = writer_idx975;
                  var func976 = function(argcv) {    // method asDebugString
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    setLineNumber(1290);    // compilenode string
                    var string977 = new GraceString("");
                    // call case 4: self request
                    var call978 = selfRequest(this, "asString", []);
                    var opresult979 = callmethod(string977, "++(1)", [1], call978);
                    var string980 = new GraceString("\u27ea");
                    var opresult981 = callmethod(opresult979, "++(1)", [1], string980);
                    // call case 4: self request
                    var call982 = selfRequest(this, "idx", []);
                    var opresult983 = callmethod(opresult981, "++(1)", [1], call982);
                    var string984 = new GraceString("\u27eb");
                    var opresult985 = callmethod(opresult983, "++(1)", [1], string984);
                    return opresult985;
                  };    // end of method asDebugString
                  this.methods["asDebugString"] = func976;
                  func976.paramCounts = [0];
                  func976.paramNames = [];
                  func976.typeParamNames = [];
                  func976.definitionLine = 1290;
                  func976.definitionModule = "standardGraceClass";
                  var func986 = function(argcv) {    // method asString
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    setLineNumber(1291);    // compilenode string
                    var string987 = new GraceString("aListIterator");
                    return string987;
                  };    // end of method asString
                  this.methods["asString"] = func986;
                  func986.paramCounts = [0];
                  func986.paramNames = [];
                  func986.typeParamNames = [];
                  func986.definitionLine = 1291;
                  func986.definitionModule = "standardGraceClass";
                  var func988 = function(argcv) {    // method hasNext
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    setLineNumber(1292);    // compilenode member
                    // call case 4: self request
                    var call989 = selfRequest(this, "idx", []);
                    // call case 2: outer request
                    var call990 = selfRequest(this.outer_standardGraceClass_1287, "size", []);
                    var opresult991 = callmethod(call989, "\u2264(1)", [1], call990);
                    return opresult991;
                  };    // end of method hasNext
                  this.methods["hasNext"] = func988;
                  func988.paramCounts = [0];
                  func988.paramNames = [];
                  func988.typeParamNames = [];
                  func988.definitionLine = 1292;
                  func988.definitionModule = "standardGraceClass";
                  var func992 = function(argcv) {    // method next
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    var if993 = GraceDone;
                    setLineNumber(1294);    // compilenode member
                    // call case 4: self request
                    var call994 = selfRequest(this, "imods", []);
                    // call case 2: outer request
                    var call995 = selfRequest(this.outer_standardGraceClass_1287, "mods", []);
                    var opresult996 = callmethod(call994, "\u2260(1)", [1], call995);
                    if (Grace_isTrue(opresult996)) {
                      setLineNumber(1295);    // compilenode member
                      // call case 4: self request
                      var call998 = selfRequest(this, "asDebugString", []);
                      // call case 6: other requests
                      // call case 2: outer request
                      var call999 = selfRequest(this.outer_standardGraceClass_1287.outer_standardGraceClass_1069.outer_standardGraceClass_1061, "ConcurrentModification", []);
                      var call997 = callmethod(call999, "raise(1)", [1], call998);
                      if993 = call997;
                    }
                    var if1000 = GraceDone;
                    setLineNumber(1297);    // compilenode member
                    // call case 4: self request
                    var call1001 = selfRequest(this, "idx", []);
                    // call case 2: outer request
                    var call1002 = selfRequest(this.outer_standardGraceClass_1287, "size", []);
                    var opresult1003 = callmethod(call1001, ">(1)", [1], call1002);
                    if (Grace_isTrue(opresult1003)) {
                      var string1005 = new GraceString("on list");
                      // call case 6: other requests
                      // call case 2: outer request
                      var call1006 = selfRequest(this.outer_standardGraceClass_1287.outer_standardGraceClass_1069.outer_standardGraceClass_1061, "IteratorExhausted", []);
                      var call1004 = callmethod(call1006, "raise(1)", [1], string1005);
                      if1000 = call1004;
                    }
                    setLineNumber(1298);    // compilenode member
                    // call case 4: self request
                    var call1008 = selfRequest(this, "idx", []);
                    // call case 2: outer request
                    var call1007 = selfRequest(this.outer_standardGraceClass_1287, "at(1)", [1], call1008);
                    var var_ret = call1007;
                    setLineNumber(1299);    // compilenode member
                    // call case 4: self request
                    var call1010 = selfRequest(this, "idx", []);
                    var sum1011 = callmethod(call1010, "+(1)", [1], new GraceNum(1));
                    // call case 4: self request
                    var call1009 = selfRequest(this, "idx:=(1)", [1], sum1011);
                    setLineNumber(1300);    // compilenode identifier
                    return var_ret;
                  };    // end of method next
                  this.methods["next"] = func992;
                  func992.paramCounts = [0];
                  func992.paramNames = [];
                  func992.typeParamNames = [];
                  func992.definitionLine = 1293;
                  func992.definitionModule = "standardGraceClass";
                  this.mutable = true;
                  for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                      var oneAlias = aliases[aix];
                      this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
                  }
                  for (var exName in inheritedExclusions) {
                      if (inheritedExclusions.hasOwnProperty(exName)) {
                          if (inheritedExclusions[exName]) {
                              this.methods[exName] = inheritedExclusions[exName];
                          } else {
                              delete this.methods[exName];
                          }
                      }
                  }
                  var obj973_init = function() {    // init of object on line 1287
                    setLineNumber(1288);    // compilenode member
                    // call case 2: outer request
                    var call1012 = selfRequest(this.outer_standardGraceClass_1287, "mods", []);
                    this.data.imods = call1012;
                    setLineNumber(1289);    // compilenode num
                    this.data.idx = new GraceNum(1);
                  };
                  return obj973_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
                };
                var obj973_init = obj973_build.call(inheritingObject, null, this, aliases, exclusions);
                return obj973_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
              };    // end of method iterator$build(_,_,_)
              this.methods["iterator$build(3)"] = func972;
              func972.paramCounts = [0];
              func972.paramNames = [];
              func972.typeParamNames = [];
              func972.definitionLine = 1286;
              func972.definitionModule = "standardGraceClass";
              var func1013 = function(argcv) {     // accessor method values
                return this;
              };    // end of method values
              this.methods["values"] = func1013;
              func1013.paramCounts = [0];
              func1013.paramNames = [];
              func1013.typeParamNames = [];
              func1013.definitionLine = 1304;
              func1013.definitionModule = "standardGraceClass";
              setLineNumber(1305);    // compilenode identifier
              var func1014 = function(argcv) {    // method keys
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1308);    // compilenode member
                // call case 4: self request
                var call1015 = selfRequest(this, "indices", []);
                return call1015;
              };    // end of method keys
              this.methods["keys"] = func1014;
              func1014.paramCounts = [0];
              func1014.paramNames = [];
              func1014.typeParamNames = [];
              func1014.definitionLine = 1307;
              func1014.definitionModule = "standardGraceClass";
              var func1016 = function(argcv, var_newSize) {    // method expandTo(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1311);    // compilenode identifier
                // call case 6: other requests
                // call case 6: other requests
                var call1018 = callmethod(var___95__prelude, "primitiveArray", []);
                var call1017 = callmethod(call1018, "new(1)", [1], var_newSize);
                var var_newInner = call1017;
                setLineNumber(1312);    // compilenode member
                // call case 4: self request
                var call1020 = selfRequest(this, "size", []);
                var diff1021 = callmethod(call1020, "-(1)", [1], new GraceNum(1));
                var opresult1022 = callmethod(new GraceNum(0), "..(1)", [1], diff1021);
                var block1023 = new GraceBlock(this, 1312, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1024 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1312);    // block matches function
                  return true;
                };
                block1023.guard = matches1024;
                block1023.real = function(var_i) {
                  setLineNumber(1313);    // compilenode identifier
                  // call case 6: other requests
                  // call case 4: self request
                  var call1027 = selfRequest(this, "inner", []);
                  var call1026 = callmethod(call1027, "at(1)", [1], var_i);
                  // call case 6: other requests
                  var call1025 = callmethod(var_newInner, "at(1)put(1)", [1, 1], var_i, call1026);
                  return call1025;
                };
                // call case 5: prelude request
                var call1019 = callmethod(var_prelude, "for(1)do(1)", [1, 1], opresult1022, block1023);
                setLineNumber(1315);    // compilenode identifier
                // call case 4: self request
                var call1028 = selfRequest(this, "inner:=(1)", [1], var_newInner);
                return call1028;
              };    // end of method expandTo(_)
              func1016.confidential = true;
              this.methods["expandTo(1)"] = func1016;
              func1016.paramCounts = [1];
              func1016.paramNames = ["newSize"];
              func1016.typeParamNames = [];
              func1016.definitionLine = 1310;
              func1016.definitionModule = "standardGraceClass";
              var func1029 = function(argcv, var_sortBlock) {    // method sortBy(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                // Start argument type-checks
                setLineNumber(1317);    // compilenode member
                // call case 2: outer request
                var call1030 = selfRequest(this.outer_standardGraceClass_1069.outer_standardGraceClass_1061, "Block2", []);
                if (!Grace_isTrue(callmethod(call1030, "match(1)",  [1], var_sortBlock)))
                    raiseTypeError("in request of `sortBy(_)`, " +
                      "argument 1 is not of type " +
                      "outer.outer.Block2", call1030, var_sortBlock);
                // End argument type-checks
                setLineNumber(1318);    // compilenode member
                // call case 4: self request
                var call1032 = selfRequest(this, "mods", []);
                var sum1033 = callmethod(call1032, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call1031 = selfRequest(this, "mods:=(1)", [1], sum1033);
                setLineNumber(1319);    // compilenode member
                // call case 4: self request
                var call1035 = selfRequest(this, "size", []);
                // call case 6: other requests
                // call case 4: self request
                var call1036 = selfRequest(this, "inner", []);
                var call1034 = callmethod(call1036, "sortInitial(1)by(1)", [1, 1], call1035, var_sortBlock);
                setLineNumber(1320);    // compilenode identifier
                return this;
              };    // end of method sortBy(_)
              this.methods["sortBy(1)"] = func1029;
              func1029.paramCounts = [1];
              func1029.paramNames = ["sortBlock"];
              func1029.typeParamNames = [];
              func1029.definitionLine = 1317;
              func1029.definitionModule = "standardGraceClass";
              var func1037 = function(argcv) {    // method sort
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1323);    // compilenode block
                var block1039 = new GraceBlock(this, 1323, 2);
                setLineNumber(1);    // compilenode identifier
                var matches1040 = function(var_l, var_r) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1323);    // block matches function
                  return true;
                };
                block1039.guard = matches1040;
                block1039.real = function(var_l, var_r) {
                  var if1041 = GraceDone;
                  setLineNumber(1324);    // compilenode identifier
                  var opresult1042 = callmethod(var_l, "==(1)", [1], var_r);
                  if (Grace_isTrue(opresult1042)) {
                    if1041 = new GraceNum(0);
                  } else {
                    var if1043 = GraceDone;
                    setLineNumber(1325);    // compilenode identifier
                    var opresult1044 = callmethod(var_l, "<(1)", [1], var_r);
                    if (Grace_isTrue(opresult1044)) {
                      // call case 6: other requests
                      var call1045 = callmethod(new GraceNum(1), "prefix-", [0]);
                      if1043 = call1045;
                    } else {
                      setLineNumber(1326);    // compilenode num
                      if1043 = new GraceNum(1);
                    }
                    if1041 = if1043;
                  }
                  return if1041;
                };
                // call case 4: self request
                var call1038 = selfRequest(this, "sortBy(1)", [1], block1039);
                return call1038;
              };    // end of method sort
              this.methods["sort"] = func1037;
              func1037.paramCounts = [0];
              func1037.paramNames = [];
              func1037.typeParamNames = [];
              func1037.definitionLine = 1322;
              func1037.definitionModule = "standardGraceClass";
              var func1046 = function(argcv, var_sortBlock) {    // method sortedBy(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                // Start argument type-checks
                setLineNumber(1329);    // compilenode member
                // call case 2: outer request
                var call1047 = selfRequest(this.outer_standardGraceClass_1069.outer_standardGraceClass_1061, "Block2", []);
                if (!Grace_isTrue(callmethod(call1047, "match(1)",  [1], var_sortBlock)))
                    raiseTypeError("in request of `sortedBy(_)`, " +
                      "argument 1 is not of type " +
                      "outer.outer.Block2", call1047, var_sortBlock);
                // End argument type-checks
                setLineNumber(1330);    // compilenode identifier
                // call case 6: other requests
                // call case 4: self request
                var call1049 = selfRequest(this, "copy", []);
                var call1048 = callmethod(call1049, "sortBy(1)", [1], var_sortBlock);
                return call1048;
              };    // end of method sortedBy(_)
              this.methods["sortedBy(1)"] = func1046;
              func1046.paramCounts = [1];
              func1046.paramNames = ["sortBlock"];
              func1046.typeParamNames = [];
              func1046.definitionLine = 1329;
              func1046.definitionModule = "standardGraceClass";
              var func1050 = function(argcv) {    // method sorted
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1333);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call1052 = selfRequest(this, "copy", []);
                var call1051 = callmethod(call1052, "sort", []);
                return call1051;
              };    // end of method sorted
              this.methods["sorted"] = func1050;
              func1050.paramCounts = [0];
              func1050.paramNames = [];
              func1050.typeParamNames = [];
              func1050.definitionLine = 1332;
              func1050.definitionModule = "standardGraceClass";
              var func1053 = function(argcv) {    // method copy
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1336);    // compilenode identifier
                // call case 2: outer request
                var call1054 = selfRequest(this.outer_standardGraceClass_1069, "withAll(1)", [1], this);
                return call1054;
              };    // end of method copy
              this.methods["copy"] = func1053;
              func1053.paramCounts = [0];
              func1053.paramNames = [];
              func1053.typeParamNames = [];
              func1053.definitionLine = 1335;
              func1053.definitionModule = "standardGraceClass";
              this.mutable = true;
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj620_init = function() {    // init of object on line 1069
                initFun621.call(this);
                setLineNumber(1072);    // compilenode num
                this.data.mods = new GraceNum(0);
                setLineNumber(1073);    // compilenode identifier
                this.data.sizeCertain = GraceTrue;
                setLineNumber(1075);    // compilenode block
                var block1056 = new GraceBlock(this, 1075, 0);
                var matches1057 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block1056.guard = matches1057;
                block1056.real = function() {
                  // call case 4: self request
                  var call1058 = selfRequest(this, "sizeCertain:=(1)", [1], GraceFalse);
                  return new GraceNum(4);
                };
                // call case 6: other requests
                var call1055 = callmethod(var_a, "sizeIfUnknown(1)", [1], block1056);
                var prod1059 = callmethod(call1055, "*(1)", [1], new GraceNum(2));
                var sum1060 = callmethod(prod1059, "+(1)", [1], new GraceNum(1));
                this.data.initialSize = sum1060;
                setLineNumber(1076);    // compilenode member
                // call case 4: self request
                var call1062 = selfRequest(this, "initialSize", []);
                // call case 6: other requests
                // call case 6: other requests
                var call1063 = callmethod(var___95__prelude, "primitiveArray", []);
                var call1061 = callmethod(call1063, "new(1)", [1], call1062);
                this.data.inner = call1061;
                setLineNumber(1077);    // compilenode num
                this.data.size = new GraceNum(0);
                var if1064 = GraceDone;
                setLineNumber(1078);    // compilenode member
                // call case 4: self request
                var call1065 = selfRequest(this, "sizeCertain", []);
                if (Grace_isTrue(call1065)) {
                  setLineNumber(1080);    // compilenode block
                  var block1067 = new GraceBlock(this, 1080, 1);
                  setLineNumber(1);    // compilenode identifier
                  var matches1068 = function(var_x) {
                    setModuleName("standardGraceClass");
                    setLineNumber(1080);    // block matches function
                    return true;
                  };
                  block1067.guard = matches1068;
                  block1067.real = function(var_x) {
                    setLineNumber(1081);    // compilenode member
                    // call case 4: self request
                    var call1070 = selfRequest(this, "size", []);
                    // call case 6: other requests
                    // call case 4: self request
                    var call1071 = selfRequest(this, "inner", []);
                    var call1069 = callmethod(call1071, "at(1)put(1)", [1, 1], call1070, var_x);
                    setLineNumber(1082);    // compilenode member
                    // call case 4: self request
                    var call1073 = selfRequest(this, "size", []);
                    var sum1074 = callmethod(call1073, "+(1)", [1], new GraceNum(1));
                    // call case 4: self request
                    var call1072 = selfRequest(this, "size:=(1)", [1], sum1074);
                    return call1072;
                  };
                  // call case 5: prelude request
                  var call1066 = callmethod(var_prelude, "for(1)do(1)", [1, 1], var_a, block1067);
                  if1064 = call1066;
                } else {
                  setLineNumber(1086);    // compilenode member
                  // call case 4: self request
                  var call1075 = selfRequest(this, "initialSize", []);
                  var var_innerSize = call1075;
                  setLineNumber(1087);    // compilenode block
                  var block1077 = new GraceBlock(this, 1087, 1);
                  setLineNumber(1);    // compilenode identifier
                  var matches1078 = function(var_x) {
                    setModuleName("standardGraceClass");
                    setLineNumber(1087);    // block matches function
                    return true;
                  };
                  block1077.guard = matches1078;
                  block1077.real = function(var_x) {
                    var if1079 = GraceDone;
                    setLineNumber(1088);    // compilenode member
                    // call case 4: self request
                    var call1080 = selfRequest(this, "size", []);
                    var opresult1081 = callmethod(var_innerSize, "\u2264(1)", [1], call1080);
                    if (Grace_isTrue(opresult1081)) {
                      setLineNumber(1089);    // compilenode num
                      var prod1083 = callmethod(var_innerSize, "*(1)", [1], new GraceNum(2));
                      // call case 6: other requests
                      // call case 6: other requests
                      var call1084 = callmethod(var___95__prelude, "primitiveArray", []);
                      var call1082 = callmethod(call1084, "new(1)", [1], prod1083);
                      var var_newInner = call1082;
                      setLineNumber(1090);    // compilenode num
                      var diff1086 = callmethod(var_innerSize, "-(1)", [1], new GraceNum(1));
                      var opresult1087 = callmethod(new GraceNum(0), "..(1)", [1], diff1086);
                      var block1088 = new GraceBlock(this, 1090, 1);
                      setLineNumber(1);    // compilenode identifier
                      var matches1089 = function(var_i) {
                        setModuleName("standardGraceClass");
                        setLineNumber(1090);    // block matches function
                        return true;
                      };
                      block1088.guard = matches1089;
                      block1088.real = function(var_i) {
                        setLineNumber(1091);    // compilenode identifier
                        // call case 6: other requests
                        // call case 4: self request
                        var call1092 = selfRequest(this, "inner", []);
                        var call1091 = callmethod(call1092, "at(1)", [1], var_i);
                        // call case 6: other requests
                        var call1090 = callmethod(var_newInner, "at(1)put(1)", [1, 1], var_i, call1091);
                        return call1090;
                      };
                      // call case 5: prelude request
                      var call1085 = callmethod(var_prelude, "for(1)do(1)", [1, 1], opresult1087, block1088);
                      setLineNumber(1093);    // compilenode identifier
                      // call case 4: self request
                      var call1093 = selfRequest(this, "inner:=(1)", [1], var_newInner);
                      setLineNumber(1094);    // compilenode member
                      // call case 6: other requests
                      // call case 4: self request
                      var call1095 = selfRequest(this, "inner", []);
                      var call1094 = callmethod(call1095, "size", []);
                      var_innerSize = call1094;
                      if1079 = GraceDone;
                    }
                    setLineNumber(1096);    // compilenode member
                    // call case 4: self request
                    var call1097 = selfRequest(this, "size", []);
                    // call case 6: other requests
                    // call case 4: self request
                    var call1098 = selfRequest(this, "inner", []);
                    var call1096 = callmethod(call1098, "at(1)put(1)", [1, 1], call1097, var_x);
                    setLineNumber(1097);    // compilenode member
                    // call case 4: self request
                    var call1100 = selfRequest(this, "size", []);
                    var sum1101 = callmethod(call1100, "+(1)", [1], new GraceNum(1));
                    // call case 4: self request
                    var call1099 = selfRequest(this, "size:=(1)", [1], sum1101);
                    return call1099;
                  };
                  // call case 5: prelude request
                  var call1076 = callmethod(var_prelude, "for(1)do(1)", [1, 1], var_a, block1077);
                  if1064 = call1076;
                }
              };
              return obj620_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj620_init = obj620_build.call(inheritingObject, null, var_a, this, aliases, exclusions);
            return obj620_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method withAll(_)$build(_,_,_)
          this.methods["withAll(1)$build(3)"] = func618;
          func618.paramCounts = [1];
          func618.paramNames = ["a"];
          func618.typeParamNames = [];
          func618.definitionLine = 1069;
          func618.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj609_init = function() {    // init of object on line 1061
          };
          return obj609_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj609_init = obj609_build.call(inheritingObject, null, this, aliases, exclusions, var_T);
        return obj609_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
      };    // end of method list$build(_,_,_)
      this.methods["list$build(3)"] = func608;
      func608.paramCounts = [0];
      func608.paramNames = [];
      func608.typeParamNames = ["T"];
      func608.definitionLine = 1061;
      func608.definitionModule = "standardGraceClass";
      this.data.unused = undefined;
      var reader_unused1102 = function() {  // reader method unused
          return this.data.unused;
      };
      reader_unused1102.isDef = true;
      reader_unused1102.confidential = true;
      this.methods["unused"] = reader_unused1102;
      this.data.removed = undefined;
      var reader_removed1103 = function() {  // reader method removed
          return this.data.removed;
      };
      reader_removed1103.isDef = true;
      reader_removed1103.confidential = true;
      this.methods["removed"] = reader_removed1103;
      var func1104 = function(argcv, var_T) {    // method set
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_T === undefined) var_T = var_Unknown;
        var numArgs = arguments.length - 1 - 0;
        if ((numArgs > 0) && (numArgs < 1)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method set expects 1 type parameter, but was given " + (numArgs - 0)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        var ouc = emptyGraceObject("standardGrace.set", "standardGraceClass", 1358);
        var ouc_init = this.methods["set$build(3)"].call(this, null, ouc, [], []);
        ouc_init.call(ouc);
        return ouc;
      };    // end of method set
      this.methods["set"] = func1104;
      func1104.paramCounts = [0];
      func1104.paramNames = [];
      func1104.typeParamNames = ["T"];
      func1104.definitionLine = 1358;
      func1104.definitionModule = "standardGraceClass";
      var func1105 = function(argcv, inheritingObject, aliases, exclusions, var_T) {    // method set$build(_,_,_)
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_T === undefined) var_T = var_Unknown;
        var numArgs = arguments.length - 1 - 3;
        if ((numArgs > 0) && (numArgs < 1)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method set expects 1 type parameter, but was given " + (numArgs - 0)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        var obj1106_build = function(ignore, outerObj, aliases, exclusions, var_T) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_1358");
          this.outer_standardGraceClass_1358 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func1107 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(1360);    // compilenode string
            var string1108 = new GraceString("a set factory");
            return string1108;
          };    // end of method asString
          this.methods["asString"] = func1107;
          func1107.paramCounts = [0];
          func1107.paramNames = [];
          func1107.typeParamNames = [];
          func1107.definitionLine = 1360;
          func1107.definitionModule = "standardGraceClass";
          var func1109 = function(argcv, var_a) {    // method withAll(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            // Start argument type-checks
            setLineNumber(1362);    // compilenode member
            // call case 2: outer request
            var call1110 = selfRequest(this.outer_standardGraceClass_1358, "Iterable", []);
            if (!Grace_isTrue(callmethod(call1110, "match(1)",  [1], var_a)))
                raiseTypeError("in request of `withAll(_)`, " +
                  "argument 1 is not of type " +
                  "Iterable⟦T⟧", call1110, var_a);
            // End argument type-checks
            setLineNumber(1363);    // compilenode block
            var block1113 = new GraceBlock(this, 1363, 0);
            var matches1114 = function() {
              setModuleName("standardGraceClass");
              return true;
            };
            block1113.guard = matches1114;
            block1113.real = function() {
              return new GraceNum(2);
            };
            // call case 6: other requests
            var call1112 = callmethod(var_a, "sizeIfUnknown(1)", [1], block1113);
            var prod1115 = callmethod(call1112, "*(1)", [1], new GraceNum(3));
            var sum1116 = callmethod(prod1115, "+(1)", [1], new GraceNum(1));
            // call case 2: outer request
            var call1111 = selfRequest(this.outer_standardGraceClass_1358, "max(2)", [2], sum1116, new GraceNum(8));
            var var_cap = call1111;
            setLineNumber(1364);    // compilenode identifier
            // call case 4: self request
            var call1117 = selfRequest(this, "ofCapacity(1)", [1], var_cap);
            var var_result = call1117;
            setLineNumber(1365);    // compilenode block
            var block1119 = new GraceBlock(this, 1365, 1);
            setLineNumber(1);    // compilenode identifier
            var matches1120 = function(var_x) {
              setModuleName("standardGraceClass");
              setLineNumber(1365);    // block matches function
              return true;
            };
            block1119.guard = matches1120;
            block1119.real = function(var_x) {
              // call case 6: other requests
              var call1121 = callmethod(var_result, "add(1)", [1], var_x);
              return call1121;
            };
            // call case 6: other requests
            var call1118 = callmethod(var_a, "do(1)", [1], block1119);
            setLineNumber(1362);    // compilenode member
            // call case 2: outer request
            var call1122 = selfRequest(this.outer_standardGraceClass_1358, "Set", []);
            setLineNumber(1366);    // return value
            if (!Grace_isTrue(callmethod(call1122, "match(1)", [1], var_result)))
                raiseTypeError(
                    "result of method withAll(_) does not have type" + 
                    "Set⟦T⟧.", call1122, var_result);
            return var_result;
          };    // end of method withAll(_)
          this.methods["withAll(1)"] = func1109;
          func1109.paramCounts = [1];
          func1109.paramNames = ["a"];
          func1109.typeParamNames = [];
          func1109.definitionLine = 1362;
          func1109.definitionModule = "standardGraceClass";
          var func1123 = function(argcv) {    // method empty
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(1370);    // compilenode num
            // call case 4: self request
            var call1124 = selfRequest(this, "ofCapacity(1)", [1], new GraceNum(8));
            setLineNumber(1369);    // compilenode member
            // call case 2: outer request
            var call1125 = selfRequest(this.outer_standardGraceClass_1358, "Set", []);
            setLineNumber(1370);    // return value
            if (!Grace_isTrue(callmethod(call1125, "match(1)", [1], call1124)))
                raiseTypeError(
                    "result of method empty does not have type" + 
                    "Set⟦T⟧.", call1125, call1124);
            return call1124;
          };    // end of method empty
          this.methods["empty"] = func1123;
          func1123.paramCounts = [0];
          func1123.paramNames = [];
          func1123.typeParamNames = [];
          func1123.definitionLine = 1369;
          func1123.definitionModule = "standardGraceClass";
          var func1126 = function(argcv, var_cap) {    // method ofCapacity(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("standardGrace.set.ofCapacity(_)", "standardGraceClass", 1373);
            var ouc_init = this.methods["ofCapacity(1)$build(3)"].call(this, null, var_cap, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method ofCapacity(_)
          func1126.confidential = true;
          this.methods["ofCapacity(1)"] = func1126;
          func1126.paramCounts = [1];
          func1126.paramNames = ["cap"];
          func1126.typeParamNames = [];
          func1126.definitionLine = 1373;
          func1126.definitionModule = "standardGraceClass";
          var func1127 = function(argcv, var_cap, inheritingObject, aliases, exclusions) {    // method ofCapacity(_)$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj1128_build = function(ignore, var_cap, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_1373");
              this.outer_standardGraceClass_1373 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              setLineNumber(1374);    // compilenode identifier
              var initFun1129 = callmethod(var_traits, "collection$build(3)", [null], this, [], []);  // compileReuseCall
              this.data.mods = undefined;
              var reader_mods1130 = function() {  // reader method mods
                  return this.data.mods;
              };
              reader_mods1130.isVar = true;
              this.methods["mods"] = reader_mods1130;
              var writer_mods1130 = function(argcv, n) {   // writer method mods:=(_)
                  this.data.mods = n;
                  return GraceDone;
              };
              writer_mods1130.confidential = true;
              this.methods["mods:=(1)"] = writer_mods1130;
              this.data.inner = undefined;
              var reader_inner1131 = function() {  // reader method inner
                  return this.data.inner;
              };
              reader_inner1131.isVar = true;
              reader_inner1131.confidential = true;
              this.methods["inner"] = reader_inner1131;
              var writer_inner1131 = function(argcv, n) {   // writer method inner:=(_)
                  this.data.inner = n;
                  return GraceDone;
              };
              writer_inner1131.confidential = true;
              this.methods["inner:=(1)"] = writer_inner1131;
              this.data.size = undefined;
              var reader_size1132 = function() {  // reader method size
                  return this.data.size;
              };
              reader_size1132.isVar = true;
              this.methods["size"] = reader_size1132;
              var writer_size1132 = function(argcv, n) {   // writer method size:=(_)
                  this.data.size = n;
                  return GraceDone;
              };
              writer_size1132.confidential = true;
              this.methods["size:=(1)"] = writer_size1132;
              var func1133 = function(argcv, var_elements) {    // method addAll(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1383);    // compilenode member
                // call case 4: self request
                var call1135 = selfRequest(this, "mods", []);
                var sum1136 = callmethod(call1135, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call1134 = selfRequest(this, "mods:=(1)", [1], sum1136);
                setLineNumber(1384);    // compilenode block
                var block1138 = new GraceBlock(this, 1384, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1139 = function(var_x) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1384);    // block matches function
                  return true;
                };
                block1138.guard = matches1139;
                block1138.real = function(var_x) {
                  var if1140 = GraceDone;
                  setLineNumber(1385);    // compilenode call
                  // call case 6: other requests
                  // call case 4: self request
                  var call1142 = selfRequest(this, "contains(1)", [1], var_x);
                  var call1141 = callmethod(call1142, "prefix!", [0]);
                  if (Grace_isTrue(call1141)) {
                    setLineNumber(1386);    // compilenode identifier
                    // call case 4: self request
                    var call1143 = selfRequest(this, "findPositionForAdd(1)", [1], var_x);
                    var var_t = call1143;
                    setLineNumber(1387);    // compilenode identifier
                    // call case 6: other requests
                    // call case 4: self request
                    var call1145 = selfRequest(this, "inner", []);
                    var call1144 = callmethod(call1145, "at(1)put(1)", [1, 1], var_t, var_x);
                    setLineNumber(1388);    // compilenode member
                    // call case 4: self request
                    var call1147 = selfRequest(this, "size", []);
                    var sum1148 = callmethod(call1147, "+(1)", [1], new GraceNum(1));
                    // call case 4: self request
                    var call1146 = selfRequest(this, "size:=(1)", [1], sum1148);
                    var if1149 = GraceDone;
                    setLineNumber(1389);    // compilenode member
                    // call case 4: self request
                    var call1150 = selfRequest(this, "size", []);
                    // call case 6: other requests
                    // call case 4: self request
                    var call1152 = selfRequest(this, "inner", []);
                    var call1151 = callmethod(call1152, "size", []);
                    var quotient1153 = callmethod(call1151, "/(1)", [1], new GraceNum(2));
                    var opresult1154 = callmethod(call1150, ">(1)", [1], quotient1153);
                    if (Grace_isTrue(opresult1154)) {
                      setLineNumber(1390);    // compilenode member
                      // call case 4: self request
                      var call1155 = selfRequest(this, "expand", []);
                      if1149 = call1155;
                    }
                    if1140 = if1149;
                  }
                  return if1140;
                };
                // call case 5: prelude request
                var call1137 = callmethod(var_prelude, "for(1)do(1)", [1, 1], var_elements, block1138);
                setLineNumber(1394);    // compilenode identifier
                return this;
              };    // end of method addAll(_)
              this.methods["addAll(1)"] = func1133;
              func1133.paramCounts = [1];
              func1133.paramNames = ["elements"];
              func1133.typeParamNames = [];
              func1133.definitionLine = 1382;
              func1133.definitionModule = "standardGraceClass";
              var func1156 = function(argcv, var_x) {    // method add(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                // Start argument type-checks
                setLineNumber(1397);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_T, "match(1)",  [1], var_x)))
                    raiseTypeError("in request of `add(_)`, " +
                      "argument 1 is not of type " +
                      "T", var_T, var_x);
                // End argument type-checks
                var if1157 = GraceDone;
                setLineNumber(1398);    // compilenode call
                // call case 6: other requests
                // call case 4: self request
                var call1159 = selfRequest(this, "contains(1)", [1], var_x);
                var call1158 = callmethod(call1159, "prefix!", [0]);
                if (Grace_isTrue(call1158)) {
                  setLineNumber(1399);    // compilenode member
                  // call case 4: self request
                  var call1161 = selfRequest(this, "mods", []);
                  var sum1162 = callmethod(call1161, "+(1)", [1], new GraceNum(1));
                  // call case 4: self request
                  var call1160 = selfRequest(this, "mods:=(1)", [1], sum1162);
                  setLineNumber(1400);    // compilenode identifier
                  // call case 4: self request
                  var call1163 = selfRequest(this, "findPositionForAdd(1)", [1], var_x);
                  var var_t = call1163;
                  setLineNumber(1401);    // compilenode identifier
                  // call case 6: other requests
                  // call case 4: self request
                  var call1165 = selfRequest(this, "inner", []);
                  var call1164 = callmethod(call1165, "at(1)put(1)", [1, 1], var_t, var_x);
                  setLineNumber(1402);    // compilenode member
                  // call case 4: self request
                  var call1167 = selfRequest(this, "size", []);
                  var sum1168 = callmethod(call1167, "+(1)", [1], new GraceNum(1));
                  // call case 4: self request
                  var call1166 = selfRequest(this, "size:=(1)", [1], sum1168);
                  var if1169 = GraceDone;
                  setLineNumber(1403);    // compilenode member
                  // call case 4: self request
                  var call1170 = selfRequest(this, "size", []);
                  // call case 6: other requests
                  // call case 4: self request
                  var call1172 = selfRequest(this, "inner", []);
                  var call1171 = callmethod(call1172, "size", []);
                  var quotient1173 = callmethod(call1171, "/(1)", [1], new GraceNum(2));
                  var opresult1174 = callmethod(call1170, ">(1)", [1], quotient1173);
                  if (Grace_isTrue(opresult1174)) {
                    setLineNumber(1404);    // compilenode member
                    // call case 4: self request
                    var call1175 = selfRequest(this, "expand", []);
                    if1169 = call1175;
                  }
                  if1157 = if1169;
                }
                setLineNumber(1407);    // compilenode identifier
                return this;
              };    // end of method add(_)
              func1156.paramTypes = [];
              func1156.paramTypes.push([]);
              this.methods["add(1)"] = func1156;
              func1156.paramCounts = [1];
              func1156.paramNames = ["x"];
              func1156.typeParamNames = [];
              func1156.definitionLine = 1397;
              func1156.definitionModule = "standardGraceClass";
              var func1176 = function(argcv, var_elements) {    // method removeAll(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1411);    // compilenode block
                var block1178 = new GraceBlock(this, 1411, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1179 = function(var_x) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1411);    // block matches function
                  return true;
                };
                block1178.guard = matches1179;
                block1178.real = function(var_x) {
                  setLineNumber(1412);    // compilenode block
                  var block1181 = new GraceBlock(this, 1412, 0);
                  var matches1182 = function() {
                    setModuleName("standardGraceClass");
                    return true;
                  };
                  block1181.guard = matches1182;
                  block1181.real = function() {
                    setLineNumber(1413);    // compilenode string
                    var string1184 = new GraceString("set does not contain ");
                    var opresult1185 = callmethod(string1184, "++(1)", [1], var_x);
                    var string1186 = new GraceString("");
                    var opresult1187 = callmethod(opresult1185, "++(1)", [1], string1186);
                    // call case 6: other requests
                    // call case 2: outer request
                    var call1188 = selfRequest(this.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "NoSuchObject", []);
                    var call1183 = callmethod(call1188, "raise(1)", [1], opresult1187);
                    return call1183;
                  };
                  // call case 4: self request
                  var call1180 = selfRequest(this, "remove(1)ifAbsent(1)", [1, 1], var_x, block1181);
                  return call1180;
                };
                // call case 5: prelude request
                var call1177 = callmethod(var_prelude, "for(1)do(1)", [1, 1], var_elements, block1178);
                setLineNumber(1416);    // compilenode identifier
                return this;
              };    // end of method removeAll(_)
              this.methods["removeAll(1)"] = func1176;
              func1176.paramCounts = [1];
              func1176.paramNames = ["elements"];
              func1176.typeParamNames = [];
              func1176.definitionLine = 1410;
              func1176.definitionModule = "standardGraceClass";
              var func1189 = function(argcv, var_elements, var_block) {    // method removeAll(_)ifAbsent(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                // Start argument type-checks
                setLineNumber(1418);    // compilenode member
                // call case 2: outer request
                var call1190 = selfRequest(this.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "Block1", []);
                if (!Grace_isTrue(callmethod(call1190, "match(1)",  [1], var_block)))
                    raiseTypeError("in request of `removeAll(_)ifAbsent(_)`, " +
                      "argument 1 to `ifAbsent`  is not of type " +
                      "Block1⟦T, Done⟧", call1190, var_block);
                // End argument type-checks
                setLineNumber(1419);    // compilenode member
                // call case 4: self request
                var call1192 = selfRequest(this, "mods", []);
                var sum1193 = callmethod(call1192, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call1191 = selfRequest(this, "mods:=(1)", [1], sum1193);
                setLineNumber(1420);    // compilenode block
                var block1195 = new GraceBlock(this, 1420, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1196 = function(var_x) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1420);    // block matches function
                  return true;
                };
                block1195.guard = matches1196;
                block1195.real = function(var_x) {
                  setLineNumber(1421);    // compilenode identifier
                  // call case 4: self request
                  var call1197 = selfRequest(this, "findPosition(1)", [1], var_x);
                  var var_t = call1197;
                  var if1198 = GraceDone;
                  setLineNumber(1422);    // compilenode call
                  if (var_t === undefined) raiseUninitializedVariable("t");
                  // call case 6: other requests
                  // call case 4: self request
                  var call1200 = selfRequest(this, "inner", []);
                  var call1199 = callmethod(call1200, "at(1)", [1], var_t);
                  var opresult1201 = callmethod(call1199, "==(1)", [1], var_x);
                  if (Grace_isTrue(opresult1201)) {
                    setLineNumber(1423);    // compilenode call
                    if (var_t === undefined) raiseUninitializedVariable("t");
                    // call case 2: outer request
                    var call1203 = selfRequest(this.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "removed", []);
                    // call case 6: other requests
                    // call case 4: self request
                    var call1204 = selfRequest(this, "inner", []);
                    var call1202 = callmethod(call1204, "at(1)put(1)", [1, 1], var_t, call1203);
                    setLineNumber(1424);    // compilenode member
                    // call case 4: self request
                    var call1206 = selfRequest(this, "size", []);
                    var diff1207 = callmethod(call1206, "-(1)", [1], new GraceNum(1));
                    // call case 4: self request
                    var call1205 = selfRequest(this, "size:=(1)", [1], diff1207);
                    if1198 = call1205;
                  } else {
                    setLineNumber(1426);    // compilenode identifier
                    // call case 6: other requests
                    var call1208 = callmethod(var_block, "apply(1)", [1], var_x);
                    if1198 = call1208;
                  }
                  return if1198;
                };
                // call case 5: prelude request
                var call1194 = callmethod(var_prelude, "for(1)do(1)", [1, 1], var_elements, block1195);
                setLineNumber(1429);    // compilenode identifier
                return this;
              };    // end of method removeAll(_)ifAbsent(_)
              this.methods["removeAll(1)ifAbsent(1)"] = func1189;
              func1189.paramCounts = [1, 1];
              func1189.paramNames = ["elements", "block"];
              func1189.typeParamNames = [];
              func1189.definitionLine = 1418;
              func1189.definitionModule = "standardGraceClass";
              var func1209 = function(argcv) {    // method clear
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1432);    // compilenode member
                // call case 4: self request
                var call1211 = selfRequest(this, "mods", []);
                var sum1212 = callmethod(call1211, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call1210 = selfRequest(this, "mods:=(1)", [1], sum1212);
                setLineNumber(1433);    // compilenode identifier
                // call case 6: other requests
                // call case 6: other requests
                var call1215 = callmethod(var___95__prelude, "primitiveArray", []);
                var call1214 = callmethod(call1215, "new(1)", [1], var_cap);
                // call case 4: self request
                var call1213 = selfRequest(this, "inner:=(1)", [1], call1214);
                setLineNumber(1434);    // compilenode num
                // call case 4: self request
                var call1216 = selfRequest(this, "size:=(1)", [1], new GraceNum(0));
                setLineNumber(1435);    // compilenode identifier
                return this;
              };    // end of method clear
              this.methods["clear"] = func1209;
              func1209.paramCounts = [0];
              func1209.paramNames = [];
              func1209.typeParamNames = [];
              func1209.definitionLine = 1431;
              func1209.definitionModule = "standardGraceClass";
              var func1217 = function(argcv, var_elt, var_block) {    // method remove(_)ifAbsent(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                // Start argument type-checks
                setLineNumber(1438);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_T, "match(1)",  [1], var_elt)))
                    raiseTypeError("in request of `remove(_)ifAbsent(_)`, " +
                      "argument 1 to `remove`  is not of type " +
                      "T", var_T, var_elt);
                // End argument type-checks
                setLineNumber(1439);    // compilenode identifier
                // call case 4: self request
                var call1218 = selfRequest(this, "findPosition(1)", [1], var_elt);
                var var_t = call1218;
                var if1219 = GraceDone;
                setLineNumber(1440);    // compilenode call
                if (var_t === undefined) raiseUninitializedVariable("t");
                // call case 6: other requests
                // call case 4: self request
                var call1221 = selfRequest(this, "inner", []);
                var call1220 = callmethod(call1221, "at(1)", [1], var_t);
                var opresult1222 = callmethod(call1220, "==(1)", [1], var_elt);
                if (Grace_isTrue(opresult1222)) {
                  setLineNumber(1441);    // compilenode call
                  if (var_t === undefined) raiseUninitializedVariable("t");
                  // call case 2: outer request
                  var call1224 = selfRequest(this.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "removed", []);
                  // call case 6: other requests
                  // call case 4: self request
                  var call1225 = selfRequest(this, "inner", []);
                  var call1223 = callmethod(call1225, "at(1)put(1)", [1, 1], var_t, call1224);
                  setLineNumber(1442);    // compilenode member
                  // call case 4: self request
                  var call1227 = selfRequest(this, "mods", []);
                  var sum1228 = callmethod(call1227, "+(1)", [1], new GraceNum(1));
                  // call case 4: self request
                  var call1226 = selfRequest(this, "mods:=(1)", [1], sum1228);
                  setLineNumber(1443);    // compilenode member
                  // call case 4: self request
                  var call1230 = selfRequest(this, "size", []);
                  var diff1231 = callmethod(call1230, "-(1)", [1], new GraceNum(1));
                  // call case 4: self request
                  var call1229 = selfRequest(this, "size:=(1)", [1], diff1231);
                  if1219 = call1229;
                } else {
                  setLineNumber(1445);    // compilenode member
                  // call case 6: other requests
                  var call1232 = callmethod(var_block, "apply", []);
                  if1219 = call1232;
                }
                setLineNumber(1447);    // compilenode identifier
                return this;
              };    // end of method remove(_)ifAbsent(_)
              func1217.paramTypes = [];
              func1217.paramTypes.push([]);
              func1217.paramTypes.push([]);
              this.methods["remove(1)ifAbsent(1)"] = func1217;
              func1217.paramCounts = [1, 1];
              func1217.paramNames = ["elt", "block"];
              func1217.typeParamNames = [];
              func1217.definitionLine = 1438;
              func1217.definitionModule = "standardGraceClass";
              var func1233 = function(argcv, var_elt) {    // method remove(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                // Start argument type-checks
                setLineNumber(1450);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_T, "match(1)",  [1], var_elt)))
                    raiseTypeError("in request of `remove(_)`, " +
                      "argument 1 is not of type " +
                      "T", var_T, var_elt);
                // End argument type-checks
                setLineNumber(1451);    // compilenode block
                var block1235 = new GraceBlock(this, 1451, 0);
                var matches1236 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block1235.guard = matches1236;
                block1235.real = function() {
                  setLineNumber(1452);    // compilenode string
                  var string1238 = new GraceString("set does not contain ");
                  var opresult1239 = callmethod(string1238, "++(1)", [1], var_elt);
                  var string1240 = new GraceString("");
                  var opresult1241 = callmethod(opresult1239, "++(1)", [1], string1240);
                  // call case 6: other requests
                  // call case 2: outer request
                  var call1242 = selfRequest(this.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "NoSuchObject", []);
                  var call1237 = callmethod(call1242, "raise(1)", [1], opresult1241);
                  return call1237;
                };
                // call case 4: self request
                var call1234 = selfRequest(this, "remove(1)ifAbsent(1)", [1, 1], var_elt, block1235);
                setLineNumber(1454);    // compilenode identifier
                return this;
              };    // end of method remove(_)
              func1233.paramTypes = [];
              func1233.paramTypes.push([]);
              this.methods["remove(1)"] = func1233;
              func1233.paramCounts = [1];
              func1233.paramNames = ["elt"];
              func1233.typeParamNames = [];
              func1233.definitionLine = 1450;
              func1233.definitionModule = "standardGraceClass";
              var func1243 = function(argcv, var_x) {    // method contains(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1458);    // compilenode identifier
                // call case 4: self request
                var call1244 = selfRequest(this, "findPosition(1)", [1], var_x);
                var var_t = call1244;
                var if1245 = GraceDone;
                setLineNumber(1459);    // compilenode call
                if (var_t === undefined) raiseUninitializedVariable("t");
                // call case 6: other requests
                // call case 4: self request
                var call1247 = selfRequest(this, "inner", []);
                var call1246 = callmethod(call1247, "at(1)", [1], var_t);
                var opresult1248 = callmethod(call1246, "==(1)", [1], var_x);
                if (Grace_isTrue(opresult1248)) {
                  setLineNumber(1460);    // compilenode identifier
                  return GraceTrue;
                }
                setLineNumber(1462);    // compilenode identifier
                return GraceFalse;
                return undefined;
              };    // end of method contains(_)
              this.methods["contains(1)"] = func1243;
              func1243.paramCounts = [1];
              func1243.paramNames = ["x"];
              func1243.typeParamNames = [];
              func1243.definitionLine = 1457;
              func1243.definitionModule = "standardGraceClass";
              var func1249 = function(argcv, var_booleanBlock) {    // method includes(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1465);    // compilenode block
                var block1251 = new GraceBlock(this, 1465, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1252 = function(var_each) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1465);    // block matches function
                  return true;
                };
                block1251.guard = matches1252;
                block1251.real = function(var_each) {
                  var if1253 = GraceDone;
                  setLineNumber(1466);    // compilenode identifier
                  // call case 6: other requests
                  var call1254 = callmethod(var_booleanBlock, "apply(1)", [1], var_each);
                  if (Grace_isTrue(call1254)) {
                    throw new ReturnException(GraceTrue, returnTarget);
                  }
                  return if1253;
                };
                // call case 4: self request
                var call1250 = selfRequest(this, "do(1)", [1], block1251);
                setLineNumber(1468);    // compilenode identifier
                return GraceFalse;
                return undefined;
              };    // end of method includes(_)
              this.methods["includes(1)"] = func1249;
              func1249.paramCounts = [1];
              func1249.paramNames = ["booleanBlock"];
              func1249.typeParamNames = [];
              func1249.definitionLine = 1464;
              func1249.definitionModule = "standardGraceClass";
              var func1255 = function(argcv, var_booleanBlock, var_notFoundBlock) {    // method find(_)ifNone(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1471);    // compilenode block
                var block1257 = new GraceBlock(this, 1471, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1258 = function(var_each) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1471);    // block matches function
                  return true;
                };
                block1257.guard = matches1258;
                block1257.real = function(var_each) {
                  var if1259 = GraceDone;
                  setLineNumber(1472);    // compilenode identifier
                  // call case 6: other requests
                  var call1260 = callmethod(var_booleanBlock, "apply(1)", [1], var_each);
                  if (Grace_isTrue(call1260)) {
                    throw new ReturnException(var_each, returnTarget);
                  }
                  return if1259;
                };
                // call case 4: self request
                var call1256 = selfRequest(this, "do(1)", [1], block1257);
                setLineNumber(1474);    // compilenode member
                // call case 6: other requests
                var call1261 = callmethod(var_notFoundBlock, "apply", []);
                return call1261;
                return undefined;
              };    // end of method find(_)ifNone(_)
              this.methods["find(1)ifNone(1)"] = func1255;
              func1255.paramCounts = [1, 1];
              func1255.paramNames = ["booleanBlock", "notFoundBlock"];
              func1255.typeParamNames = [];
              func1255.definitionLine = 1470;
              func1255.definitionModule = "standardGraceClass";
              var func1262 = function(argcv, var_x) {    // method findPosition(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1477);    // compilenode member
                // call case 6: other requests
                var call1263 = callmethod(var_x, "hash", []);
                var var_h = call1263;
                setLineNumber(1478);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call1265 = selfRequest(this, "inner", []);
                var call1264 = callmethod(call1265, "size", []);
                var var_s = call1264;
                setLineNumber(1479);    // compilenode identifier
                var modulus1266 = callmethod(var_h, "%(1)", [1], var_s);
                var var_t = modulus1266;
                setLineNumber(1480);    // compilenode num
                var var_jump = new GraceNum(5);
                setLineNumber(1481);    // compilenode vardec
                var var_candidate;
                setLineNumber(1482);    // compilenode block
                var block1268 = new GraceBlock(this, 1482, 0);
                var matches1269 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block1268.guard = matches1269;
                block1268.real = function() {
                  setLineNumber(1483);    // compilenode call
                  if (var_t === undefined) raiseUninitializedVariable("t");
                  // call case 6: other requests
                  // call case 4: self request
                  var call1271 = selfRequest(this, "inner", []);
                  var call1270 = callmethod(call1271, "at(1)", [1], var_t);
                  var_candidate = call1270;
                  setLineNumber(1484);    // compilenode member
                  // call case 2: outer request
                  var call1272 = selfRequest(this.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "unused", []);
                  if (var_candidate === undefined) raiseUninitializedVariable("candidate");
                  var opresult1273 = callmethod(call1272, "\u2260(1)", [1], var_candidate);
                  return opresult1273;
                };
                setLineNumber(1485);    // compilenode block
                var block1274 = new GraceBlock(this, 1485, 0);
                var matches1275 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block1274.guard = matches1275;
                block1274.real = function() {
                  var if1276 = GraceDone;
                  setLineNumber(1486);    // compilenode identifier
                  var opresult1277 = callmethod(var_candidate, "==(1)", [1], var_x);
                  if (Grace_isTrue(opresult1277)) {
                    setLineNumber(1487);    // compilenode identifier
                    throw new ReturnException(var_t, returnTarget);
                  }
                  var if1278 = GraceDone;
                  setLineNumber(1489);    // compilenode num
                  var opresult1279 = callmethod(var_jump, "\u2260(1)", [1], new GraceNum(0));
                  if (Grace_isTrue(opresult1279)) {
                    setLineNumber(1490);    // compilenode num
                    var prod1280 = callmethod(var_t, "*(1)", [1], new GraceNum(3));
                    var sum1281 = callmethod(prod1280, "+(1)", [1], new GraceNum(1));
                    var modulus1282 = callmethod(sum1281, "%(1)", [1], var_s);
                    var_t = modulus1282;
                    setLineNumber(1491);    // compilenode num
                    var diff1283 = callmethod(var_jump, "-(1)", [1], new GraceNum(1));
                    var_jump = diff1283;
                    if1278 = GraceDone;
                  } else {
                    setLineNumber(1493);    // compilenode num
                    var sum1284 = callmethod(var_t, "+(1)", [1], new GraceNum(1));
                    var modulus1285 = callmethod(sum1284, "%(1)", [1], var_s);
                    var_t = modulus1285;
                    if1278 = GraceDone;
                  }
                  return if1278;
                };
                // call case 5: prelude request
                var call1267 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block1268, block1274);
                setLineNumber(1496);    // compilenode identifier
                return var_t;
                return undefined;
              };    // end of method findPosition(_)
              func1262.confidential = true;
              this.methods["findPosition(1)"] = func1262;
              func1262.paramCounts = [1];
              func1262.paramNames = ["x"];
              func1262.typeParamNames = [];
              func1262.definitionLine = 1476;
              func1262.definitionModule = "standardGraceClass";
              var func1286 = function(argcv, var_x) {    // method findPositionForAdd(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1499);    // compilenode member
                // call case 6: other requests
                var call1287 = callmethod(var_x, "hash", []);
                var var_h = call1287;
                setLineNumber(1500);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call1289 = selfRequest(this, "inner", []);
                var call1288 = callmethod(call1289, "size", []);
                var var_s = call1288;
                setLineNumber(1501);    // compilenode identifier
                var modulus1290 = callmethod(var_h, "%(1)", [1], var_s);
                var var_t = modulus1290;
                setLineNumber(1502);    // compilenode num
                var var_jump = new GraceNum(5);
                setLineNumber(1503);    // compilenode vardec
                var var_candidate;
                setLineNumber(1504);    // compilenode block
                var block1292 = new GraceBlock(this, 1504, 0);
                var matches1293 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block1292.guard = matches1293;
                block1292.real = function() {
                  setLineNumber(1505);    // compilenode call
                  if (var_t === undefined) raiseUninitializedVariable("t");
                  // call case 6: other requests
                  // call case 4: self request
                  var call1295 = selfRequest(this, "inner", []);
                  var call1294 = callmethod(call1295, "at(1)", [1], var_t);
                  var_candidate = call1294;
                  setLineNumber(1506);    // compilenode member
                  // call case 2: outer request
                  var call1296 = selfRequest(this.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "unused", []);
                  if (var_candidate === undefined) raiseUninitializedVariable("candidate");
                  var opresult1297 = callmethod(call1296, "\u2260(1)", [1], var_candidate);
                  // call case 2: outer request
                  var call1298 = selfRequest(this.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "removed", []);
                  if (var_candidate === undefined) raiseUninitializedVariable("candidate");
                  var opresult1299 = callmethod(call1298, "\u2260(1)", [1], var_candidate);
                  var opresult1300 = callmethod(opresult1297, "&&(1)", [1], opresult1299);
                  return opresult1300;
                };
                setLineNumber(1507);    // compilenode block
                var block1301 = new GraceBlock(this, 1507, 0);
                var matches1302 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block1301.guard = matches1302;
                block1301.real = function() {
                  var if1303 = GraceDone;
                  setLineNumber(1508);    // compilenode identifier
                  var opresult1304 = callmethod(var_candidate, "==(1)", [1], var_x);
                  if (Grace_isTrue(opresult1304)) {
                    setLineNumber(1509);    // compilenode identifier
                    throw new ReturnException(var_t, returnTarget);
                  }
                  var if1305 = GraceDone;
                  setLineNumber(1511);    // compilenode num
                  var opresult1306 = callmethod(var_jump, "\u2260(1)", [1], new GraceNum(0));
                  if (Grace_isTrue(opresult1306)) {
                    setLineNumber(1512);    // compilenode num
                    var prod1307 = callmethod(var_t, "*(1)", [1], new GraceNum(3));
                    var sum1308 = callmethod(prod1307, "+(1)", [1], new GraceNum(1));
                    var modulus1309 = callmethod(sum1308, "%(1)", [1], var_s);
                    var_t = modulus1309;
                    setLineNumber(1513);    // compilenode num
                    var diff1310 = callmethod(var_jump, "-(1)", [1], new GraceNum(1));
                    var_jump = diff1310;
                    if1305 = GraceDone;
                  } else {
                    setLineNumber(1515);    // compilenode num
                    var sum1311 = callmethod(var_t, "+(1)", [1], new GraceNum(1));
                    var modulus1312 = callmethod(sum1311, "%(1)", [1], var_s);
                    var_t = modulus1312;
                    if1305 = GraceDone;
                  }
                  return if1305;
                };
                // call case 5: prelude request
                var call1291 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block1292, block1301);
                setLineNumber(1518);    // compilenode identifier
                return var_t;
                return undefined;
              };    // end of method findPositionForAdd(_)
              func1286.confidential = true;
              this.methods["findPositionForAdd(1)"] = func1286;
              func1286.paramCounts = [1];
              func1286.paramNames = ["x"];
              func1286.typeParamNames = [];
              func1286.definitionLine = 1498;
              func1286.definitionModule = "standardGraceClass";
              var func1313 = function(argcv) {    // method asString
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1522);    // compilenode string
                var string1314 = new GraceString("set{");
                var var_s = string1314;
                setLineNumber(1523);    // compilenode block
                var block1316 = new GraceBlock(this, 1523, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1317 = function(var_each) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1523);    // block matches function
                  return true;
                };
                block1316.guard = matches1317;
                block1316.real = function(var_each) {
                  // call case 6: other requests
                  var call1318 = callmethod(var_each, "asString", []);
                  var opresult1319 = callmethod(var_s, "++(1)", [1], call1318);
                  var_s = opresult1319;
                  return GraceDone;
                };
                setLineNumber(1524);    // compilenode block
                var block1320 = new GraceBlock(this, 1524, 0);
                var matches1321 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block1320.guard = matches1321;
                block1320.real = function() {
                  var string1322 = new GraceString(", ");
                  var opresult1323 = callmethod(var_s, "++(1)", [1], string1322);
                  var_s = opresult1323;
                  return GraceDone;
                };
                // call case 4: self request
                var call1315 = selfRequest(this, "do(1)separatedBy(1)", [1, 1], block1316, block1320);
                setLineNumber(1525);    // compilenode string
                var string1324 = new GraceString("}");
                var opresult1325 = callmethod(var_s, "++(1)", [1], string1324);
                return opresult1325;
              };    // end of method asString
              this.methods["asString"] = func1313;
              func1313.paramCounts = [0];
              func1313.paramNames = [];
              func1313.typeParamNames = [];
              func1313.definitionLine = 1521;
              func1313.definitionModule = "standardGraceClass";
              var func1326 = function(argcv) {    // method asDebugString
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1528);    // compilenode string
                var string1327 = new GraceString("set{");
                var var_s = string1327;
                setLineNumber(1529);    // compilenode block
                var block1329 = new GraceBlock(this, 1529, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1330 = function(var_each) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1529);    // block matches function
                  return true;
                };
                block1329.guard = matches1330;
                block1329.real = function(var_each) {
                  // call case 6: other requests
                  var call1331 = callmethod(var_each, "asDebugString", []);
                  var opresult1332 = callmethod(var_s, "++(1)", [1], call1331);
                  var_s = opresult1332;
                  return GraceDone;
                };
                setLineNumber(1530);    // compilenode block
                var block1333 = new GraceBlock(this, 1530, 0);
                var matches1334 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block1333.guard = matches1334;
                block1333.real = function() {
                  var string1335 = new GraceString(", ");
                  var opresult1336 = callmethod(var_s, "++(1)", [1], string1335);
                  var_s = opresult1336;
                  return GraceDone;
                };
                // call case 4: self request
                var call1328 = selfRequest(this, "do(1)separatedBy(1)", [1, 1], block1329, block1333);
                setLineNumber(1531);    // compilenode string
                var string1337 = new GraceString("}");
                var opresult1338 = callmethod(var_s, "++(1)", [1], string1337);
                return opresult1338;
              };    // end of method asDebugString
              this.methods["asDebugString"] = func1326;
              func1326.paramCounts = [0];
              func1326.paramNames = [];
              func1326.typeParamNames = [];
              func1326.definitionLine = 1527;
              func1326.definitionModule = "standardGraceClass";
              var func1339 = function(argcv, var_l) {    // method extend(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1534);    // compilenode block
                var block1341 = new GraceBlock(this, 1534, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1342 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1534);    // block matches function
                  return true;
                };
                block1341.guard = matches1342;
                block1341.real = function(var_i) {
                  setLineNumber(1535);    // compilenode identifier
                  // call case 4: self request
                  var call1343 = selfRequest(this, "add(1)", [1], var_i);
                  return call1343;
                };
                // call case 5: prelude request
                var call1340 = callmethod(var_prelude, "for(1)do(1)", [1, 1], var_l, block1341);
                return call1340;
              };    // end of method extend(_)
              this.methods["extend(1)"] = func1339;
              func1339.paramCounts = [1];
              func1339.paramNames = ["l"];
              func1339.typeParamNames = [];
              func1339.definitionLine = 1533;
              func1339.definitionModule = "standardGraceClass";
              var func1344 = function(argcv, var_block1) {    // method do(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1539);    // compilenode num
                var var_i = new GraceNum(0);
                setLineNumber(1540);    // compilenode num
                var var_found = new GraceNum(0);
                setLineNumber(1541);    // compilenode vardec
                var var_candidate;
                setLineNumber(1542);    // compilenode block
                var block1346 = new GraceBlock(this, 1542, 0);
                var matches1347 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block1346.guard = matches1347;
                block1346.real = function() {
                  // call case 4: self request
                  var call1348 = selfRequest(this, "size", []);
                  var opresult1349 = callmethod(var_found, "<(1)", [1], call1348);
                  return opresult1349;
                };
                var block1350 = new GraceBlock(this, 1542, 0);
                var matches1351 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block1350.guard = matches1351;
                block1350.real = function() {
                  setLineNumber(1543);    // compilenode call
                  if (var_i === undefined) raiseUninitializedVariable("i");
                  // call case 6: other requests
                  // call case 4: self request
                  var call1353 = selfRequest(this, "inner", []);
                  var call1352 = callmethod(call1353, "at(1)", [1], var_i);
                  var_candidate = call1352;
                  var if1354 = GraceDone;
                  setLineNumber(1544);    // compilenode member
                  // call case 2: outer request
                  var call1355 = selfRequest(this.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "unused", []);
                  if (var_candidate === undefined) raiseUninitializedVariable("candidate");
                  var opresult1356 = callmethod(call1355, "\u2260(1)", [1], var_candidate);
                  // call case 2: outer request
                  var call1357 = selfRequest(this.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "removed", []);
                  if (var_candidate === undefined) raiseUninitializedVariable("candidate");
                  var opresult1358 = callmethod(call1357, "\u2260(1)", [1], var_candidate);
                  var opresult1359 = callmethod(opresult1356, "&&(1)", [1], opresult1358);
                  if (Grace_isTrue(opresult1359)) {
                    setLineNumber(1545);    // compilenode num
                    var sum1360 = callmethod(var_found, "+(1)", [1], new GraceNum(1));
                    var_found = sum1360;
                    setLineNumber(1546);    // compilenode call
                    if (var_candidate === undefined) raiseUninitializedVariable("candidate");
                    // call case 6: other requests
                    var call1361 = callmethod(var_block1, "apply(1)", [1], var_candidate);
                    if1354 = call1361;
                  }
                  setLineNumber(1548);    // compilenode num
                  var sum1362 = callmethod(var_i, "+(1)", [1], new GraceNum(1));
                  var_i = sum1362;
                  return GraceDone;
                };
                // call case 5: prelude request
                var call1345 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block1346, block1350);
                return call1345;
              };    // end of method do(_)
              this.methods["do(1)"] = func1344;
              func1344.paramCounts = [1];
              func1344.paramNames = ["block1"];
              func1344.typeParamNames = [];
              func1344.definitionLine = 1538;
              func1344.definitionModule = "standardGraceClass";
              var func1363 = function(argcv) {    // method iterator
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var ouc = emptyGraceObject("standardGrace.set.ofCapacity(_).iterator", "standardGraceClass", 1551);
                var ouc_init = this.methods["iterator$build(3)"].call(this, null, ouc, [], []);
                ouc_init.call(ouc);
                return ouc;
              };    // end of method iterator
              this.methods["iterator"] = func1363;
              func1363.paramCounts = [0];
              func1363.paramNames = [];
              func1363.typeParamNames = [];
              func1363.definitionLine = 1551;
              func1363.definitionModule = "standardGraceClass";
              var func1364 = function(argcv, inheritingObject, aliases, exclusions) {    // method iterator$build(_,_,_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var obj1365_build = function(ignore, outerObj, aliases, exclusions) {
                  this.closureKeys = this.closureKeys || [];
                  this.closureKeys.push("outer_standardGraceClass_1552");
                  this.outer_standardGraceClass_1552 = outerObj;
                  var inheritedExclusions = { };
                  for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                      var exMeth = exclusions[eix];
                      inheritedExclusions[exMeth] = this.methods[exMeth];
                  }
                  this.data.imods = undefined;
                  var reader_imods1366 = function() {  // reader method imods
                      return this.data.imods;
                  };
                  reader_imods1366.isVar = true;
                  reader_imods1366.confidential = true;
                  this.methods["imods"] = reader_imods1366;
                  var writer_imods1366 = function(argcv, n) {   // writer method imods:=(_)
                      this.data.imods = n;
                      return GraceDone;
                  };
                  writer_imods1366.confidential = true;
                  this.methods["imods:=(1)"] = writer_imods1366;
                  this.data.count = undefined;
                  var reader_count1367 = function() {  // reader method count
                      return this.data.count;
                  };
                  reader_count1367.isVar = true;
                  reader_count1367.confidential = true;
                  this.methods["count"] = reader_count1367;
                  var writer_count1367 = function(argcv, n) {   // writer method count:=(_)
                      this.data.count = n;
                      return GraceDone;
                  };
                  writer_count1367.confidential = true;
                  this.methods["count:=(1)"] = writer_count1367;
                  this.data.idx = undefined;
                  var reader_idx1368 = function() {  // reader method idx
                      return this.data.idx;
                  };
                  reader_idx1368.isVar = true;
                  reader_idx1368.confidential = true;
                  this.methods["idx"] = reader_idx1368;
                  var writer_idx1368 = function(argcv, n) {   // writer method idx:=(_)
                      this.data.idx = n;
                      return GraceDone;
                  };
                  writer_idx1368.confidential = true;
                  this.methods["idx:=(1)"] = writer_idx1368;
                  var func1369 = function(argcv) {    // method hasNext
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    setLineNumber(1556);    // compilenode member
                    // call case 2: outer request
                    var call1370 = selfRequest(this.outer_standardGraceClass_1552, "size", []);
                    // call case 4: self request
                    var call1371 = selfRequest(this, "count", []);
                    var opresult1372 = callmethod(call1370, "\u2265(1)", [1], call1371);
                    return opresult1372;
                  };    // end of method hasNext
                  this.methods["hasNext"] = func1369;
                  func1369.paramCounts = [0];
                  func1369.paramNames = [];
                  func1369.typeParamNames = [];
                  func1369.definitionLine = 1556;
                  func1369.definitionModule = "standardGraceClass";
                  var func1373 = function(argcv) {    // method next
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    setLineNumber(1558);    // compilenode vardec
                    var var_candidate;
                    setLineNumber(1559);    // compilenode member
                    // call case 6: other requests
                    // call case 2: outer request
                    var call1375 = selfRequest(this.outer_standardGraceClass_1552, "inner", []);
                    var call1374 = callmethod(call1375, "size", []);
                    var var_innerSize = call1374;
                    setLineNumber(1560);    // compilenode block
                    var block1377 = new GraceBlock(this, 1560, 0);
                    var matches1378 = function() {
                      setModuleName("standardGraceClass");
                      return true;
                    };
                    block1377.guard = matches1378;
                    block1377.real = function() {
                      setLineNumber(1561);    // compilenode member
                      // call case 4: self request
                      var call1380 = selfRequest(this, "idx", []);
                      var sum1381 = callmethod(call1380, "+(1)", [1], new GraceNum(1));
                      // call case 4: self request
                      var call1379 = selfRequest(this, "idx:=(1)", [1], sum1381);
                      var if1382 = GraceDone;
                      setLineNumber(1562);    // compilenode member
                      // call case 4: self request
                      var call1383 = selfRequest(this, "imods", []);
                      // call case 2: outer request
                      var call1384 = selfRequest(this.outer_standardGraceClass_1552, "mods", []);
                      var opresult1385 = callmethod(call1383, "\u2260(1)", [1], call1384);
                      if (Grace_isTrue(opresult1385)) {
                        setLineNumber(1563);    // compilenode member
                        // call case 2: outer request
                        var call1387 = selfRequest(this.outer_standardGraceClass_1552, "asString", []);
                        // call case 6: other requests
                        // call case 2: outer request
                        var call1388 = selfRequest(this.outer_standardGraceClass_1552.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "ConcurrentModification", []);
                        var call1386 = callmethod(call1388, "raise(1)", [1], call1387);
                        if1382 = call1386;
                      }
                      var if1389 = GraceDone;
                      setLineNumber(1565);    // compilenode member
                      // call case 4: self request
                      var call1390 = selfRequest(this, "idx", []);
                      var opresult1391 = callmethod(call1390, "\u2265(1)", [1], var_innerSize);
                      if (Grace_isTrue(opresult1391)) {
                        setLineNumber(1566);    // compilenode string
                        var string1393 = new GraceString("iterator over ");
                        // call case 2: outer request
                        var call1394 = selfRequest(this.outer_standardGraceClass_1552, "asString", []);
                        var opresult1395 = callmethod(string1393, "++(1)", [1], call1394);
                        var string1396 = new GraceString("");
                        var opresult1397 = callmethod(opresult1395, "++(1)", [1], string1396);
                        // call case 6: other requests
                        // call case 2: outer request
                        var call1398 = selfRequest(this.outer_standardGraceClass_1552.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "IteratorExhausted", []);
                        var call1392 = callmethod(call1398, "raise(1)", [1], opresult1397);
                        if1389 = call1392;
                      }
                      setLineNumber(1568);    // compilenode member
                      // call case 4: self request
                      var call1400 = selfRequest(this, "idx", []);
                      // call case 6: other requests
                      // call case 2: outer request
                      var call1401 = selfRequest(this.outer_standardGraceClass_1552, "inner", []);
                      var call1399 = callmethod(call1401, "at(1)", [1], call1400);
                      var_candidate = call1399;
                      setLineNumber(1569);    // compilenode member
                      // call case 2: outer request
                      var call1402 = selfRequest(this.outer_standardGraceClass_1552.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "unused", []);
                      if (var_candidate === undefined) raiseUninitializedVariable("candidate");
                      var opresult1403 = callmethod(call1402, "==(1)", [1], var_candidate);
                      // call case 2: outer request
                      var call1404 = selfRequest(this.outer_standardGraceClass_1552.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "removed", []);
                      if (var_candidate === undefined) raiseUninitializedVariable("candidate");
                      var opresult1405 = callmethod(call1404, "==(1)", [1], var_candidate);
                      var opresult1406 = callmethod(opresult1403, "||(1)", [1], opresult1405);
                      return opresult1406;
                    };
                    setLineNumber(1570);    // compilenode block
                    var block1407 = new GraceBlock(this, 1570, 0);
                    var matches1408 = function() {
                      setModuleName("standardGraceClass");
                      return true;
                    };
                    block1407.guard = matches1408;
                    block1407.real = function() {
                      return GraceDone;
                    };
                    // call case 5: prelude request
                    var call1376 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block1377, block1407);
                    setLineNumber(1571);    // compilenode member
                    // call case 4: self request
                    var call1410 = selfRequest(this, "count", []);
                    var sum1411 = callmethod(call1410, "+(1)", [1], new GraceNum(1));
                    // call case 4: self request
                    var call1409 = selfRequest(this, "count:=(1)", [1], sum1411);
                    setLineNumber(1572);    // compilenode identifier
                    return var_candidate;
                  };    // end of method next
                  this.methods["next"] = func1373;
                  func1373.paramCounts = [0];
                  func1373.paramNames = [];
                  func1373.typeParamNames = [];
                  func1373.definitionLine = 1557;
                  func1373.definitionModule = "standardGraceClass";
                  this.mutable = true;
                  for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                      var oneAlias = aliases[aix];
                      this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
                  }
                  for (var exName in inheritedExclusions) {
                      if (inheritedExclusions.hasOwnProperty(exName)) {
                          if (inheritedExclusions[exName]) {
                              this.methods[exName] = inheritedExclusions[exName];
                          } else {
                              delete this.methods[exName];
                          }
                      }
                  }
                  var obj1365_init = function() {    // init of object on line 1552
                    setLineNumber(1553);    // compilenode member
                    // call case 2: outer request
                    var call1412 = selfRequest(this.outer_standardGraceClass_1552, "mods", []);
                    this.data.imods = call1412;
                    if (!Grace_isTrue(callmethod(var_Number, "match(1)", [1], call1412)))
                        raiseTypeError(
                          "value of def imods is not of type Number",
                          var_Number, call1412);
                    setLineNumber(1554);    // compilenode num
                    this.data.count = new GraceNum(1);
                    setLineNumber(1556);    // compilenode call
                    // call case 6: other requests
                    setLineNumber(1555);    // compilenode num
                    var call1413 = callmethod(new GraceNum(1), "prefix-", [0]);
                    this.data.idx = call1413;
                  };
                  return obj1365_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
                };
                var obj1365_init = obj1365_build.call(inheritingObject, null, this, aliases, exclusions);
                return obj1365_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
              };    // end of method iterator$build(_,_,_)
              this.methods["iterator$build(3)"] = func1364;
              func1364.paramCounts = [0];
              func1364.paramNames = [];
              func1364.typeParamNames = [];
              func1364.definitionLine = 1551;
              func1364.definitionModule = "standardGraceClass";
              var func1414 = function(argcv) {    // method expand
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1578);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call1416 = selfRequest(this, "inner", []);
                var call1415 = callmethod(call1416, "size", []);
                var var_c = call1415;
                setLineNumber(1579);    // compilenode num
                var prod1417 = callmethod(var_c, "*(1)", [1], new GraceNum(2));
                var var_n = prod1417;
                setLineNumber(1580);    // compilenode member
                // call case 4: self request
                var call1418 = selfRequest(this, "inner", []);
                var var_oldInner = call1418;
                setLineNumber(1581);    // compilenode num
                // call case 4: self request
                var call1419 = selfRequest(this, "size:=(1)", [1], new GraceNum(0));
                setLineNumber(1582);    // compilenode identifier
                // call case 6: other requests
                // call case 6: other requests
                var call1422 = callmethod(var___95__prelude, "primitiveArray", []);
                var call1421 = callmethod(call1422, "new(1)", [1], var_n);
                // call case 4: self request
                var call1420 = selfRequest(this, "inner:=(1)", [1], call1421);
                setLineNumber(1583);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call1425 = selfRequest(this, "inner", []);
                var call1424 = callmethod(call1425, "size", []);
                var diff1426 = callmethod(call1424, "-(1)", [1], new GraceNum(1));
                var opresult1427 = callmethod(new GraceNum(0), "..(1)", [1], diff1426);
                var block1428 = new GraceBlock(this, 1583, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1429 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1583);    // block matches function
                  return true;
                };
                block1428.guard = matches1429;
                block1428.real = function(var_i) {
                  setLineNumber(1584);    // compilenode member
                  // call case 2: outer request
                  var call1431 = selfRequest(this.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "unused", []);
                  // call case 6: other requests
                  // call case 4: self request
                  var call1432 = selfRequest(this, "inner", []);
                  var call1430 = callmethod(call1432, "at(1)put(1)", [1, 1], var_i, call1431);
                  return call1430;
                };
                // call case 5: prelude request
                var call1423 = callmethod(var_prelude, "for(1)do(1)", [1, 1], opresult1427, block1428);
                setLineNumber(1586);    // compilenode member
                // call case 6: other requests
                var call1434 = callmethod(var_oldInner, "size", []);
                var diff1435 = callmethod(call1434, "-(1)", [1], new GraceNum(1));
                var opresult1436 = callmethod(new GraceNum(0), "..(1)", [1], diff1435);
                var block1437 = new GraceBlock(this, 1586, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1438 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1586);    // block matches function
                  return true;
                };
                block1437.guard = matches1438;
                block1437.real = function(var_i) {
                  var if1439 = GraceDone;
                  setLineNumber(1587);    // compilenode member
                  // call case 2: outer request
                  var call1440 = selfRequest(this.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "unused", []);
                  // call case 6: other requests
                  var call1441 = callmethod(var_oldInner, "at(1)", [1], var_i);
                  var opresult1442 = callmethod(call1440, "\u2260(1)", [1], call1441);
                  // call case 2: outer request
                  var call1443 = selfRequest(this.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "removed", []);
                  // call case 6: other requests
                  var call1444 = callmethod(var_oldInner, "at(1)", [1], var_i);
                  var opresult1445 = callmethod(call1443, "\u2260(1)", [1], call1444);
                  var opresult1446 = callmethod(opresult1442, "&&(1)", [1], opresult1445);
                  if (Grace_isTrue(opresult1446)) {
                    setLineNumber(1588);    // compilenode identifier
                    // call case 6: other requests
                    var call1448 = callmethod(var_oldInner, "at(1)", [1], var_i);
                    // call case 4: self request
                    var call1447 = selfRequest(this, "add(1)", [1], call1448);
                    if1439 = call1447;
                  }
                  return if1439;
                };
                // call case 5: prelude request
                var call1433 = callmethod(var_prelude, "for(1)do(1)", [1, 1], opresult1436, block1437);
                return call1433;
              };    // end of method expand
              func1414.confidential = true;
              this.methods["expand"] = func1414;
              func1414.paramCounts = [0];
              func1414.paramNames = [];
              func1414.typeParamNames = [];
              func1414.definitionLine = 1577;
              func1414.definitionModule = "standardGraceClass";
              var func1449 = function(argcv, var_other) {    // method ==(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var if1450 = GraceDone;
                setLineNumber(1593);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call1452 = selfRequest(this.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "Iterable", []);
                var call1451 = callmethod(call1452, "match(1)", [1], var_other);
                if (Grace_isTrue(call1451)) {
                  setLineNumber(1594);    // compilenode num
                  var var_otherSize = new GraceNum(0);
                  setLineNumber(1595);    // compilenode block
                  var block1454 = new GraceBlock(this, 1595, 1);
                  setLineNumber(1);    // compilenode identifier
                  var matches1455 = function(var_each) {
                    setModuleName("standardGraceClass");
                    setLineNumber(1595);    // block matches function
                    return true;
                  };
                  block1454.guard = matches1455;
                  block1454.real = function(var_each) {
                    setLineNumber(1596);    // compilenode num
                    var sum1456 = callmethod(var_otherSize, "+(1)", [1], new GraceNum(1));
                    var_otherSize = sum1456;
                    var if1457 = GraceDone;
                    setLineNumber(1597);    // compilenode call
                    // call case 6: other requests
                    // call case 4: self request
                    var call1459 = selfRequest(this, "contains(1)", [1], var_each);
                    var call1458 = callmethod(call1459, "prefix!", [0]);
                    if (Grace_isTrue(call1458)) {
                      setLineNumber(1598);    // compilenode identifier
                      throw new ReturnException(GraceFalse, returnTarget);
                    }
                    return if1457;
                  };
                  // call case 6: other requests
                  setLineNumber(1595);    // compilenode identifier
                  var call1453 = callmethod(var_other, "do(1)", [1], block1454);
                  setLineNumber(1601);    // compilenode member
                  // call case 4: self request
                  var call1460 = selfRequest(this, "size", []);
                  var opresult1461 = callmethod(var_otherSize, "==(1)", [1], call1460);
                  if1450 = opresult1461;
                } else {
                  setLineNumber(1603);    // compilenode identifier
                  if1450 = GraceFalse;
                }
                return if1450;
              };    // end of method ==(_)
              this.methods["==(1)"] = func1449;
              func1449.paramCounts = [1];
              func1449.paramNames = ["other"];
              func1449.typeParamNames = [];
              func1449.definitionLine = 1592;
              func1449.definitionModule = "standardGraceClass";
              var func1462 = function(argcv) {    // method copy
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1607);    // compilenode identifier
                // call case 2: outer request
                var call1463 = selfRequest(this.outer_standardGraceClass_1373, "withAll(1)", [1], this);
                return call1463;
              };    // end of method copy
              this.methods["copy"] = func1462;
              func1462.paramCounts = [0];
              func1462.paramNames = [];
              func1462.typeParamNames = [];
              func1462.definitionLine = 1606;
              func1462.definitionModule = "standardGraceClass";
              var func1464 = function(argcv, var_other) {    // method ++(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1611);    // compilenode identifier
                // call case 6: other requests
                // call case 4: self request
                var call1466 = selfRequest(this, "copy", []);
                var call1465 = callmethod(call1466, "addAll(1)", [1], var_other);
                return call1465;
              };    // end of method ++(_)
              this.methods["++(1)"] = func1464;
              func1464.paramCounts = [1];
              func1464.paramNames = ["other"];
              func1464.typeParamNames = [];
              func1464.definitionLine = 1609;
              func1464.definitionModule = "standardGraceClass";
              var func1467 = function(argcv, var_other) {    // method --(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1615);    // compilenode member
                // call case 6: other requests
                // call case 2: outer request
                var call1469 = selfRequest(this.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "set", []);
                var call1468 = callmethod(call1469, "empty", []);
                var var_result = call1468;
                setLineNumber(1616);    // compilenode block
                var block1471 = new GraceBlock(this, 1616, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1472 = function(var_v) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1616);    // block matches function
                  return true;
                };
                block1471.guard = matches1472;
                block1471.real = function(var_v) {
                  var if1473 = GraceDone;
                  setLineNumber(1617);    // compilenode call
                  // call case 6: other requests
                  // call case 6: other requests
                  var call1475 = callmethod(var_other, "contains(1)", [1], var_v);
                  var call1474 = callmethod(call1475, "prefix!", [0]);
                  if (Grace_isTrue(call1474)) {
                    setLineNumber(1618);    // compilenode identifier
                    // call case 6: other requests
                    var call1476 = callmethod(var_result, "add(1)", [1], var_v);
                    if1473 = call1476;
                  }
                  return if1473;
                };
                // call case 5: prelude request
                var call1470 = callmethod(var_prelude, "for(1)do(1)", [1, 1], this, block1471);
                setLineNumber(1621);    // compilenode identifier
                return var_result;
              };    // end of method --(_)
              this.methods["--(1)"] = func1467;
              func1467.paramCounts = [1];
              func1467.paramNames = ["other"];
              func1467.typeParamNames = [];
              func1467.definitionLine = 1613;
              func1467.definitionModule = "standardGraceClass";
              var func1477 = function(argcv, var_other) {    // method **(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1625);    // compilenode block
                var block1480 = new GraceBlock(this, 1625, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1481 = function(var_each) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1625);    // block matches function
                  return true;
                };
                block1480.guard = matches1481;
                block1480.real = function(var_each) {
                  // call case 6: other requests
                  var call1482 = callmethod(var_other, "contains(1)", [1], var_each);
                  return call1482;
                };
                // call case 4: self request
                var call1479 = selfRequest(this, "filter(1)", [1], block1480);
                // call case 6: other requests
                // call case 2: outer request
                var call1483 = selfRequest(this.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "set", []);
                var call1478 = callmethod(call1483, "withAll(1)", [1], call1479);
                return call1478;
              };    // end of method **(_)
              this.methods["**(1)"] = func1477;
              func1477.paramCounts = [1];
              func1477.paramNames = ["other"];
              func1477.typeParamNames = [];
              func1477.definitionLine = 1623;
              func1477.definitionModule = "standardGraceClass";
              var func1484 = function(argcv, var_s2) {    // method isSubset(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                // Start argument type-checks
                setLineNumber(1627);    // compilenode member
                // call case 2: outer request
                var call1485 = selfRequest(this.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "Set", []);
                if (!Grace_isTrue(callmethod(call1485, "match(1)",  [1], var_s2)))
                    raiseTypeError("in request of `isSubset(_)`, " +
                      "argument 1 is not of type " +
                      "Set⟦T⟧", call1485, var_s2);
                // End argument type-checks
                setLineNumber(1628);    // compilenode block
                var block1487 = new GraceBlock(this, 1628, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1488 = function(var_each) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1628);    // block matches function
                  return true;
                };
                block1487.guard = matches1488;
                block1487.real = function(var_each) {
                  var if1489 = GraceDone;
                  setLineNumber(1629);    // compilenode member
                  // call case 6: other requests
                  // call case 6: other requests
                  var call1491 = callmethod(var_s2, "contains(1)", [1], var_each);
                  var call1490 = callmethod(call1491, "not", []);
                  if (Grace_isTrue(call1490)) {
                    throw new ReturnException(GraceFalse, returnTarget);
                  }
                  return if1489;
                };
                // call case 4: self request
                var call1486 = selfRequest(this, "do(1)", [1], block1487);
                setLineNumber(1631);    // compilenode identifier
                return GraceTrue;
                return undefined;
              };    // end of method isSubset(_)
              this.methods["isSubset(1)"] = func1484;
              func1484.paramCounts = [1];
              func1484.paramNames = ["s2"];
              func1484.typeParamNames = [];
              func1484.definitionLine = 1627;
              func1484.definitionModule = "standardGraceClass";
              var func1492 = function(argcv, var_s2) {    // method isSuperset(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                // Start argument type-checks
                setLineNumber(1634);    // compilenode member
                // call case 2: outer request
                var call1493 = selfRequest(this.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "Iterable", []);
                if (!Grace_isTrue(callmethod(call1493, "match(1)",  [1], var_s2)))
                    raiseTypeError("in request of `isSuperset(_)`, " +
                      "argument 1 is not of type " +
                      "Iterable⟦T⟧", call1493, var_s2);
                // End argument type-checks
                setLineNumber(1635);    // compilenode block
                var block1495 = new GraceBlock(this, 1635, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1496 = function(var_each) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1635);    // block matches function
                  return true;
                };
                block1495.guard = matches1496;
                block1495.real = function(var_each) {
                  var if1497 = GraceDone;
                  setLineNumber(1636);    // compilenode member
                  // call case 6: other requests
                  // call case 4: self request
                  var call1499 = selfRequest(this, "contains(1)", [1], var_each);
                  var call1498 = callmethod(call1499, "not", []);
                  if (Grace_isTrue(call1498)) {
                    throw new ReturnException(GraceFalse, returnTarget);
                  }
                  return if1497;
                };
                // call case 6: other requests
                setLineNumber(1635);    // compilenode identifier
                var call1494 = callmethod(var_s2, "do(1)", [1], block1495);
                setLineNumber(1638);    // compilenode identifier
                return GraceTrue;
                return undefined;
              };    // end of method isSuperset(_)
              this.methods["isSuperset(1)"] = func1492;
              func1492.paramCounts = [1];
              func1492.paramNames = ["s2"];
              func1492.typeParamNames = [];
              func1492.definitionLine = 1634;
              func1492.definitionModule = "standardGraceClass";
              var func1500 = function(argcv, var_existing) {    // method into(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                // Start argument type-checks
                setLineNumber(1640);    // compilenode member
                // call case 2: outer request
                var call1501 = selfRequest(this.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "Expandable", []);
                if (!Grace_isTrue(callmethod(call1501, "match(1)",  [1], var_existing)))
                    raiseTypeError("in request of `into(_)`, " +
                      "argument 1 is not of type " +
                      "Expandable⟦T⟧", call1501, var_existing);
                // End argument type-checks
                setLineNumber(1641);    // compilenode block
                var block1503 = new GraceBlock(this, 1641, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1504 = function(var_each) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1641);    // block matches function
                  return true;
                };
                block1503.guard = matches1504;
                block1503.real = function(var_each) {
                  // call case 6: other requests
                  var call1505 = callmethod(var_existing, "add(1)", [1], var_each);
                  return call1505;
                };
                // call case 4: self request
                var call1502 = selfRequest(this, "do(1)", [1], block1503);
                setLineNumber(1640);    // compilenode member
                // call case 2: outer request
                var call1506 = selfRequest(this.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "Collection", []);
                setLineNumber(1642);    // return value
                if (!Grace_isTrue(callmethod(call1506, "match(1)", [1], var_existing)))
                    raiseTypeError(
                        "result of method into(_) does not have type" + 
                        "Collection⟦T⟧.", call1506, var_existing);
                return var_existing;
              };    // end of method into(_)
              this.methods["into(1)"] = func1500;
              func1500.paramCounts = [1];
              func1500.paramNames = ["existing"];
              func1500.typeParamNames = [];
              func1500.definitionLine = 1640;
              func1500.definitionModule = "standardGraceClass";
              this.mutable = true;
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj1128_init = function() {    // init of object on line 1373
                initFun1129.call(this);
                setLineNumber(1375);    // compilenode num
                this.data.mods = new GraceNum(0);
                setLineNumber(1376);    // compilenode identifier
                // call case 6: other requests
                // call case 6: other requests
                var call1508 = callmethod(var___95__prelude, "primitiveArray", []);
                var call1507 = callmethod(call1508, "new(1)", [1], var_cap);
                this.data.inner = call1507;
                setLineNumber(1377);    // compilenode num
                this.data.size = new GraceNum(0);
                setLineNumber(1378);    // compilenode block
                var block1510 = new GraceBlock(this, 1378, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1511 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1378);    // block matches function
                  return true;
                };
                block1510.guard = matches1511;
                block1510.real = function(var_i) {
                  setLineNumber(1379);    // compilenode member
                  // call case 2: outer request
                  var call1513 = selfRequest(this.outer_standardGraceClass_1373.outer_standardGraceClass_1358, "unused", []);
                  // call case 6: other requests
                  // call case 4: self request
                  var call1514 = selfRequest(this, "inner", []);
                  var call1512 = callmethod(call1514, "at(1)put(1)", [1, 1], var_i, call1513);
                  return call1512;
                };
                // call case 6: other requests
                setLineNumber(1378);    // compilenode num
                var diff1515 = callmethod(var_cap, "-(1)", [1], new GraceNum(1));
                var opresult1516 = callmethod(new GraceNum(0), "..(1)", [1], diff1515);
                var call1509 = callmethod(opresult1516, "do(1)", [1], block1510);
              };
              return obj1128_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj1128_init = obj1128_build.call(inheritingObject, null, var_cap, this, aliases, exclusions);
            return obj1128_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method ofCapacity(_)$build(_,_,_)
          func1127.confidential = true;
          this.methods["ofCapacity(1)$build(3)"] = func1127;
          func1127.paramCounts = [1];
          func1127.paramNames = ["cap"];
          func1127.typeParamNames = [];
          func1127.definitionLine = 1373;
          func1127.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj1106_init = function() {    // init of object on line 1358
          };
          return obj1106_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj1106_init = obj1106_build.call(inheritingObject, null, this, aliases, exclusions, var_T);
        return obj1106_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
      };    // end of method set$build(_,_,_)
      this.methods["set$build(3)"] = func1105;
      func1105.paramCounts = [0];
      func1105.paramNames = [];
      func1105.typeParamNames = ["T"];
      func1105.definitionLine = 1358;
      func1105.definitionModule = "standardGraceClass";
      this.data.Binding = undefined;
      var reader_Binding1517 = function() {  // reader method Binding
          return this.data.Binding;
      };
      reader_Binding1517.isType = true;
      this.methods["Binding"] = reader_Binding1517;
      this.data.binding = undefined;
      var reader_binding1518 = function() {  // reader method binding
          return this.data.binding;
      };
      reader_binding1518.isDef = true;
      this.methods["binding"] = reader_binding1518;
      this.data.ComparableToDictionary = undefined;
      var reader_ComparableToDictionary1519 = function() {  // reader method ComparableToDictionary
          return this.data.ComparableToDictionary;
      };
      reader_ComparableToDictionary1519.isType = true;
      this.methods["ComparableToDictionary"] = reader_ComparableToDictionary1519;
      var func1520 = function(argcv, var_K, var_T) {    // method dictionary
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_K === undefined) var_K = var_Unknown;
        if (var_T === undefined) var_T = var_Unknown;
        var numArgs = arguments.length - 1 - 0;
        if ((numArgs > 0) && (numArgs < 2)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method dictionary expects 2 type parameters, but was given " + (numArgs - 0)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        var ouc = emptyGraceObject("standardGrace.dictionary", "standardGraceClass", 1676);
        var ouc_init = this.methods["dictionary$build(3)"].call(this, null, ouc, [], []);
        ouc_init.call(ouc);
        return ouc;
      };    // end of method dictionary
      this.methods["dictionary"] = func1520;
      func1520.paramCounts = [0];
      func1520.paramNames = [];
      func1520.typeParamNames = ["K", "T"];
      func1520.definitionLine = 1676;
      func1520.definitionModule = "standardGraceClass";
      var func1521 = function(argcv, inheritingObject, aliases, exclusions, var_K, var_T) {    // method dictionary$build(_,_,_)
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_K === undefined) var_K = var_Unknown;
        if (var_T === undefined) var_T = var_Unknown;
        var numArgs = arguments.length - 1 - 3;
        if ((numArgs > 0) && (numArgs < 2)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method dictionary expects 2 type parameters, but was given " + (numArgs - 0)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        var obj1522_build = function(ignore, outerObj, aliases, exclusions, var_K, var_T) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_1676");
          this.outer_standardGraceClass_1676 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func1523 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(1678);    // compilenode string
            var string1524 = new GraceString("a dictionary factory");
            return string1524;
          };    // end of method asString
          this.methods["asString"] = func1523;
          func1523.paramCounts = [0];
          func1523.paramNames = [];
          func1523.typeParamNames = [];
          func1523.definitionLine = 1678;
          func1523.definitionModule = "standardGraceClass";
          var func1525 = function(argcv, var_initialBindings) {    // method withAll(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            // Start argument type-checks
            setLineNumber(1680);    // compilenode member
            // call case 2: outer request
            var call1526 = selfRequest(this.outer_standardGraceClass_1676, "Iterable", []);
            if (!Grace_isTrue(callmethod(call1526, "match(1)",  [1], var_initialBindings)))
                raiseTypeError("in request of `withAll(_)`, " +
                  "argument 1 is not of type " +
                  "Iterable⟦Binding⟦K, T⟧⟧", call1526, var_initialBindings);
            // End argument type-checks
            setLineNumber(1681);    // compilenode member
            // call case 4: self request
            var call1527 = selfRequest(this, "empty", []);
            var var_result = call1527;
            setLineNumber(1682);    // compilenode block
            var block1529 = new GraceBlock(this, 1682, 1);
            setLineNumber(1);    // compilenode identifier
            var matches1530 = function(var_b) {
              setModuleName("standardGraceClass");
              setLineNumber(1682);    // block matches function
              return true;
            };
            block1529.guard = matches1530;
            block1529.real = function(var_b) {
              // call case 6: other requests
              var call1531 = callmethod(var_result, "add(1)", [1], var_b);
              return call1531;
            };
            // call case 5: prelude request
            var call1528 = callmethod(var_prelude, "for(1)do(1)", [1, 1], var_initialBindings, block1529);
            setLineNumber(1680);    // compilenode member
            // call case 2: outer request
            var call1532 = selfRequest(this.outer_standardGraceClass_1676, "Dictionary", []);
            setLineNumber(1683);    // return value
            if (!Grace_isTrue(callmethod(call1532, "match(1)", [1], var_result)))
                raiseTypeError(
                    "result of method withAll(_) does not have type" + 
                    "Dictionary⟦K, T⟧.", call1532, var_result);
            return var_result;
          };    // end of method withAll(_)
          this.methods["withAll(1)"] = func1525;
          func1525.paramCounts = [1];
          func1525.paramNames = ["initialBindings"];
          func1525.typeParamNames = [];
          func1525.definitionLine = 1680;
          func1525.definitionModule = "standardGraceClass";
          var func1533 = function(argcv) {    // method empty
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("standardGrace.dictionary.empty", "standardGraceClass", 1686);
            var ouc_init = this.methods["empty$build(3)"].call(this, null, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method empty
          this.methods["empty"] = func1533;
          func1533.paramCounts = [0];
          func1533.paramNames = [];
          func1533.typeParamNames = [];
          func1533.definitionLine = 1686;
          func1533.definitionModule = "standardGraceClass";
          var func1534 = function(argcv, inheritingObject, aliases, exclusions) {    // method empty$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj1535_build = function(ignore, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_1686");
              this.outer_standardGraceClass_1686 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              setLineNumber(1687);    // compilenode identifier
              var initFun1536 = callmethod(var_traits, "collection$build(3)", [null], this, [], []);  // compileReuseCall
              this.data.mods = undefined;
              var reader_mods1537 = function() {  // reader method mods
                  return this.data.mods;
              };
              reader_mods1537.isVar = true;
              this.methods["mods"] = reader_mods1537;
              var writer_mods1537 = function(argcv, n) {   // writer method mods:=(_)
                  this.data.mods = n;
                  return GraceDone;
              };
              writer_mods1537.confidential = true;
              this.methods["mods:=(1)"] = writer_mods1537;
              this.data.numBindings = undefined;
              var reader_numBindings1538 = function() {  // reader method numBindings
                  return this.data.numBindings;
              };
              reader_numBindings1538.isVar = true;
              reader_numBindings1538.confidential = true;
              this.methods["numBindings"] = reader_numBindings1538;
              var writer_numBindings1538 = function(argcv, n) {   // writer method numBindings:=(_)
                  this.data.numBindings = n;
                  return GraceDone;
              };
              writer_numBindings1538.confidential = true;
              this.methods["numBindings:=(1)"] = writer_numBindings1538;
              this.data.inner = undefined;
              var reader_inner1539 = function() {  // reader method inner
                  return this.data.inner;
              };
              reader_inner1539.isVar = true;
              reader_inner1539.confidential = true;
              this.methods["inner"] = reader_inner1539;
              var writer_inner1539 = function(argcv, n) {   // writer method inner:=(_)
                  this.data.inner = n;
                  return GraceDone;
              };
              writer_inner1539.confidential = true;
              this.methods["inner:=(1)"] = writer_inner1539;
              var func1540 = function(argcv) {    // method size
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1694);    // compilenode member
                // call case 4: self request
                var call1541 = selfRequest(this, "numBindings", []);
                return call1541;
              };    // end of method size
              this.methods["size"] = func1540;
              func1540.paramCounts = [0];
              func1540.paramNames = [];
              func1540.typeParamNames = [];
              func1540.definitionLine = 1694;
              func1540.definitionModule = "standardGraceClass";
              var func1542 = function(argcv, var_key__39__, var_value__39__) {    // method at(_)put(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1696);    // compilenode member
                // call case 4: self request
                var call1544 = selfRequest(this, "mods", []);
                var sum1545 = callmethod(call1544, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call1543 = selfRequest(this, "mods:=(1)", [1], sum1545);
                setLineNumber(1697);    // compilenode identifier
                // call case 4: self request
                var call1546 = selfRequest(this, "findPositionForAdd(1)", [1], var_key__39__);
                var var_t = call1546;
                var if1547 = GraceDone;
                setLineNumber(1698);    // compilenode member
                // call case 2: outer request
                var call1548 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "unused", []);
                if (var_t === undefined) raiseUninitializedVariable("t");
                // call case 6: other requests
                // call case 4: self request
                var call1550 = selfRequest(this, "inner", []);
                var call1549 = callmethod(call1550, "at(1)", [1], var_t);
                var opresult1551 = callmethod(call1548, "==(1)", [1], call1549);
                // call case 2: outer request
                var call1552 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "removed", []);
                if (var_t === undefined) raiseUninitializedVariable("t");
                // call case 6: other requests
                // call case 4: self request
                var call1554 = selfRequest(this, "inner", []);
                var call1553 = callmethod(call1554, "at(1)", [1], var_t);
                var opresult1555 = callmethod(call1552, "==(1)", [1], call1553);
                var opresult1556 = callmethod(opresult1551, "||(1)", [1], opresult1555);
                if (Grace_isTrue(opresult1556)) {
                  setLineNumber(1699);    // compilenode member
                  // call case 4: self request
                  var call1558 = selfRequest(this, "numBindings", []);
                  var sum1559 = callmethod(call1558, "+(1)", [1], new GraceNum(1));
                  // call case 4: self request
                  var call1557 = selfRequest(this, "numBindings:=(1)", [1], sum1559);
                  if1547 = call1557;
                }
                setLineNumber(1701);    // compilenode call
                if (var_t === undefined) raiseUninitializedVariable("t");
                // call case 6: other requests
                // call case 2: outer request
                var call1562 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "binding", []);
                var call1561 = callmethod(call1562, "key(1)value(1)", [1, 1], var_key__39__, var_value__39__);
                // call case 6: other requests
                // call case 4: self request
                var call1563 = selfRequest(this, "inner", []);
                var call1560 = callmethod(call1563, "at(1)put(1)", [1, 1], var_t, call1561);
                var if1564 = GraceDone;
                setLineNumber(1702);    // compilenode member
                // call case 4: self request
                var call1565 = selfRequest(this, "size", []);
                var prod1566 = callmethod(call1565, "*(1)", [1], new GraceNum(2));
                // call case 6: other requests
                // call case 4: self request
                var call1568 = selfRequest(this, "inner", []);
                var call1567 = callmethod(call1568, "size", []);
                var opresult1569 = callmethod(prod1566, ">(1)", [1], call1567);
                if (Grace_isTrue(opresult1569)) {
                  // call case 4: self request
                  var call1570 = selfRequest(this, "expand", []);
                  if1564 = call1570;
                }
                setLineNumber(1703);    // compilenode identifier
                return this;
              };    // end of method at(_)put(_)
              this.methods["at(1)put(1)"] = func1542;
              func1542.paramCounts = [1, 1];
              func1542.paramNames = ["key'", "value'"];
              func1542.typeParamNames = [];
              func1542.definitionLine = 1695;
              func1542.definitionModule = "standardGraceClass";
              var func1571 = function(argcv, var_aBinding) {    // method add(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1706);    // compilenode member
                // call case 4: self request
                var call1573 = selfRequest(this, "mods", []);
                var sum1574 = callmethod(call1573, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call1572 = selfRequest(this, "mods:=(1)", [1], sum1574);
                setLineNumber(1707);    // compilenode member
                // call case 6: other requests
                var call1576 = callmethod(var_aBinding, "key", []);
                // call case 4: self request
                var call1575 = selfRequest(this, "findPositionForAdd(1)", [1], call1576);
                var var_t = call1575;
                var if1577 = GraceDone;
                setLineNumber(1708);    // compilenode member
                // call case 2: outer request
                var call1578 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "unused", []);
                if (var_t === undefined) raiseUninitializedVariable("t");
                // call case 6: other requests
                // call case 4: self request
                var call1580 = selfRequest(this, "inner", []);
                var call1579 = callmethod(call1580, "at(1)", [1], var_t);
                var opresult1581 = callmethod(call1578, "==(1)", [1], call1579);
                // call case 2: outer request
                var call1582 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "removed", []);
                if (var_t === undefined) raiseUninitializedVariable("t");
                // call case 6: other requests
                // call case 4: self request
                var call1584 = selfRequest(this, "inner", []);
                var call1583 = callmethod(call1584, "at(1)", [1], var_t);
                var opresult1585 = callmethod(call1582, "==(1)", [1], call1583);
                var opresult1586 = callmethod(opresult1581, "||(1)", [1], opresult1585);
                if (Grace_isTrue(opresult1586)) {
                  setLineNumber(1709);    // compilenode member
                  // call case 4: self request
                  var call1588 = selfRequest(this, "numBindings", []);
                  var sum1589 = callmethod(call1588, "+(1)", [1], new GraceNum(1));
                  // call case 4: self request
                  var call1587 = selfRequest(this, "numBindings:=(1)", [1], sum1589);
                  if1577 = call1587;
                }
                setLineNumber(1711);    // compilenode call
                if (var_t === undefined) raiseUninitializedVariable("t");
                // call case 6: other requests
                // call case 4: self request
                var call1591 = selfRequest(this, "inner", []);
                var call1590 = callmethod(call1591, "at(1)put(1)", [1, 1], var_t, var_aBinding);
                var if1592 = GraceDone;
                setLineNumber(1712);    // compilenode member
                // call case 4: self request
                var call1593 = selfRequest(this, "size", []);
                var prod1594 = callmethod(call1593, "*(1)", [1], new GraceNum(2));
                // call case 6: other requests
                // call case 4: self request
                var call1596 = selfRequest(this, "inner", []);
                var call1595 = callmethod(call1596, "size", []);
                var opresult1597 = callmethod(prod1594, ">(1)", [1], call1595);
                if (Grace_isTrue(opresult1597)) {
                  // call case 4: self request
                  var call1598 = selfRequest(this, "expand", []);
                  if1592 = call1598;
                }
                setLineNumber(1713);    // compilenode identifier
                return this;
              };    // end of method add(_)
              this.methods["add(1)"] = func1571;
              func1571.paramCounts = [1];
              func1571.paramNames = ["aBinding"];
              func1571.typeParamNames = [];
              func1571.definitionLine = 1705;
              func1571.definitionModule = "standardGraceClass";
              var func1599 = function(argcv, var_k) {    // method at(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1716);    // compilenode identifier
                // call case 4: self request
                var call1601 = selfRequest(this, "findPosition(1)", [1], var_k);
                // call case 6: other requests
                // call case 4: self request
                var call1602 = selfRequest(this, "inner", []);
                var call1600 = callmethod(call1602, "at(1)", [1], call1601);
                var var_b = call1600;
                var if1603 = GraceDone;
                setLineNumber(1717);    // compilenode member
                // call case 6: other requests
                var call1604 = callmethod(var_b, "key", []);
                var opresult1605 = callmethod(call1604, "==(1)", [1], var_k);
                if (Grace_isTrue(opresult1605)) {
                  setLineNumber(1718);    // compilenode member
                  // call case 6: other requests
                  var call1606 = callmethod(var_b, "value", []);
                  return call1606;
                }
                setLineNumber(1720);    // compilenode string
                var string1608 = new GraceString("dictionary does not contain entry with key ");
                var opresult1609 = callmethod(string1608, "++(1)", [1], var_k);
                var string1610 = new GraceString("");
                var opresult1611 = callmethod(opresult1609, "++(1)", [1], string1610);
                // call case 6: other requests
                // call case 2: outer request
                var call1612 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "NoSuchObject", []);
                var call1607 = callmethod(call1612, "raise(1)", [1], opresult1611);
                return call1607;
              };    // end of method at(_)
              this.methods["at(1)"] = func1599;
              func1599.paramCounts = [1];
              func1599.paramNames = ["k"];
              func1599.typeParamNames = [];
              func1599.definitionLine = 1715;
              func1599.definitionModule = "standardGraceClass";
              var func1613 = function(argcv, var_k, var_action) {    // method at(_)ifAbsent(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1723);    // compilenode identifier
                // call case 4: self request
                var call1615 = selfRequest(this, "findPosition(1)", [1], var_k);
                // call case 6: other requests
                // call case 4: self request
                var call1616 = selfRequest(this, "inner", []);
                var call1614 = callmethod(call1616, "at(1)", [1], call1615);
                var var_b = call1614;
                var if1617 = GraceDone;
                setLineNumber(1724);    // compilenode member
                // call case 6: other requests
                var call1618 = callmethod(var_b, "key", []);
                var opresult1619 = callmethod(call1618, "==(1)", [1], var_k);
                if (Grace_isTrue(opresult1619)) {
                  setLineNumber(1725);    // compilenode member
                  // call case 6: other requests
                  var call1620 = callmethod(var_b, "value", []);
                  return call1620;
                }
                setLineNumber(1727);    // compilenode member
                // call case 6: other requests
                var call1621 = callmethod(var_action, "apply", []);
                return call1621;
              };    // end of method at(_)ifAbsent(_)
              this.methods["at(1)ifAbsent(1)"] = func1613;
              func1613.paramCounts = [1, 1];
              func1613.paramNames = ["k", "action"];
              func1613.typeParamNames = [];
              func1613.definitionLine = 1722;
              func1613.definitionModule = "standardGraceClass";
              var func1622 = function(argcv, var_k) {    // method containsKey(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1730);    // compilenode identifier
                // call case 4: self request
                var call1623 = selfRequest(this, "findPosition(1)", [1], var_k);
                var var_t = call1623;
                var if1624 = GraceDone;
                setLineNumber(1731);    // compilenode member
                // call case 6: other requests
                if (var_t === undefined) raiseUninitializedVariable("t");
                // call case 6: other requests
                // call case 4: self request
                var call1627 = selfRequest(this, "inner", []);
                var call1626 = callmethod(call1627, "at(1)", [1], var_t);
                var call1625 = callmethod(call1626, "key", []);
                var opresult1628 = callmethod(call1625, "==(1)", [1], var_k);
                if (Grace_isTrue(opresult1628)) {
                  setLineNumber(1732);    // compilenode identifier
                  return GraceTrue;
                }
                setLineNumber(1734);    // compilenode identifier
                return GraceFalse;
              };    // end of method containsKey(_)
              this.methods["containsKey(1)"] = func1622;
              func1622.paramCounts = [1];
              func1622.paramNames = ["k"];
              func1622.typeParamNames = [];
              func1622.definitionLine = 1729;
              func1622.definitionModule = "standardGraceClass";
              var func1629 = function(argcv, var_keys) {    // method removeAllKeys(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1737);    // compilenode member
                // call case 4: self request
                var call1631 = selfRequest(this, "mods", []);
                var sum1632 = callmethod(call1631, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call1630 = selfRequest(this, "mods:=(1)", [1], sum1632);
                setLineNumber(1738);    // compilenode block
                var block1634 = new GraceBlock(this, 1738, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1635 = function(var_k) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1738);    // block matches function
                  return true;
                };
                block1634.guard = matches1635;
                block1634.real = function(var_k) {
                  setLineNumber(1739);    // compilenode identifier
                  // call case 4: self request
                  var call1636 = selfRequest(this, "findPosition(1)", [1], var_k);
                  var var_t = call1636;
                  var if1637 = GraceDone;
                  setLineNumber(1740);    // compilenode member
                  // call case 6: other requests
                  if (var_t === undefined) raiseUninitializedVariable("t");
                  // call case 6: other requests
                  // call case 4: self request
                  var call1640 = selfRequest(this, "inner", []);
                  var call1639 = callmethod(call1640, "at(1)", [1], var_t);
                  var call1638 = callmethod(call1639, "key", []);
                  var opresult1641 = callmethod(call1638, "==(1)", [1], var_k);
                  if (Grace_isTrue(opresult1641)) {
                    setLineNumber(1741);    // compilenode call
                    if (var_t === undefined) raiseUninitializedVariable("t");
                    // call case 2: outer request
                    var call1643 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "removed", []);
                    // call case 6: other requests
                    // call case 4: self request
                    var call1644 = selfRequest(this, "inner", []);
                    var call1642 = callmethod(call1644, "at(1)put(1)", [1, 1], var_t, call1643);
                    setLineNumber(1742);    // compilenode member
                    // call case 4: self request
                    var call1646 = selfRequest(this, "numBindings", []);
                    var diff1647 = callmethod(call1646, "-(1)", [1], new GraceNum(1));
                    // call case 4: self request
                    var call1645 = selfRequest(this, "numBindings:=(1)", [1], diff1647);
                    if1637 = call1645;
                  } else {
                    setLineNumber(1744);    // compilenode string
                    var string1649 = new GraceString("dictionary does not contain entry with key ");
                    var opresult1650 = callmethod(string1649, "++(1)", [1], var_k);
                    var string1651 = new GraceString("");
                    var opresult1652 = callmethod(opresult1650, "++(1)", [1], string1651);
                    // call case 6: other requests
                    // call case 2: outer request
                    var call1653 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "NoSuchObject", []);
                    var call1648 = callmethod(call1653, "raise(1)", [1], opresult1652);
                    if1637 = call1648;
                  }
                  return if1637;
                };
                // call case 5: prelude request
                var call1633 = callmethod(var_prelude, "for(1)do(1)", [1, 1], var_keys, block1634);
                setLineNumber(1747);    // compilenode identifier
                return this;
              };    // end of method removeAllKeys(_)
              this.methods["removeAllKeys(1)"] = func1629;
              func1629.paramCounts = [1];
              func1629.paramNames = ["keys"];
              func1629.typeParamNames = [];
              func1629.definitionLine = 1736;
              func1629.definitionModule = "standardGraceClass";
              var func1654 = function(argcv, var_k) {    // method removeKey(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                // Start argument type-checks
                setLineNumber(1749);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_K, "match(1)",  [1], var_k)))
                    raiseTypeError("in request of `removeKey(_)`, " +
                      "argument 1 is not of type " +
                      "K", var_K, var_k);
                // End argument type-checks
                setLineNumber(1750);    // compilenode member
                // call case 4: self request
                var call1656 = selfRequest(this, "mods", []);
                var sum1657 = callmethod(call1656, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call1655 = selfRequest(this, "mods:=(1)", [1], sum1657);
                setLineNumber(1751);    // compilenode identifier
                // call case 4: self request
                var call1658 = selfRequest(this, "findPosition(1)", [1], var_k);
                var var_t = call1658;
                var if1659 = GraceDone;
                setLineNumber(1752);    // compilenode member
                // call case 6: other requests
                if (var_t === undefined) raiseUninitializedVariable("t");
                // call case 6: other requests
                // call case 4: self request
                var call1662 = selfRequest(this, "inner", []);
                var call1661 = callmethod(call1662, "at(1)", [1], var_t);
                var call1660 = callmethod(call1661, "key", []);
                var opresult1663 = callmethod(call1660, "==(1)", [1], var_k);
                if (Grace_isTrue(opresult1663)) {
                  setLineNumber(1753);    // compilenode call
                  if (var_t === undefined) raiseUninitializedVariable("t");
                  // call case 2: outer request
                  var call1665 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "removed", []);
                  // call case 6: other requests
                  // call case 4: self request
                  var call1666 = selfRequest(this, "inner", []);
                  var call1664 = callmethod(call1666, "at(1)put(1)", [1, 1], var_t, call1665);
                  setLineNumber(1754);    // compilenode member
                  // call case 4: self request
                  var call1668 = selfRequest(this, "numBindings", []);
                  var diff1669 = callmethod(call1668, "-(1)", [1], new GraceNum(1));
                  // call case 4: self request
                  var call1667 = selfRequest(this, "numBindings:=(1)", [1], diff1669);
                  if1659 = call1667;
                } else {
                  setLineNumber(1756);    // compilenode string
                  var string1671 = new GraceString("dictionary does not contain entry with key ");
                  var opresult1672 = callmethod(string1671, "++(1)", [1], var_k);
                  var string1673 = new GraceString("");
                  var opresult1674 = callmethod(opresult1672, "++(1)", [1], string1673);
                  // call case 6: other requests
                  // call case 2: outer request
                  var call1675 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "NoSuchObject", []);
                  var call1670 = callmethod(call1675, "raise(1)", [1], opresult1674);
                  if1659 = call1670;
                }
                setLineNumber(1758);    // compilenode identifier
                return this;
              };    // end of method removeKey(_)
              func1654.paramTypes = [];
              func1654.paramTypes.push([]);
              this.methods["removeKey(1)"] = func1654;
              func1654.paramCounts = [1];
              func1654.paramNames = ["k"];
              func1654.typeParamNames = [];
              func1654.definitionLine = 1749;
              func1654.definitionModule = "standardGraceClass";
              var func1676 = function(argcv, var_removals) {    // method removeAllValues(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1761);    // compilenode member
                // call case 4: self request
                var call1678 = selfRequest(this, "mods", []);
                var sum1679 = callmethod(call1678, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call1677 = selfRequest(this, "mods:=(1)", [1], sum1679);
                setLineNumber(1762);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call1682 = selfRequest(this, "inner", []);
                var call1681 = callmethod(call1682, "size", []);
                var diff1683 = callmethod(call1681, "-(1)", [1], new GraceNum(1));
                var opresult1684 = callmethod(new GraceNum(0), "..(1)", [1], diff1683);
                var block1685 = new GraceBlock(this, 1762, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1686 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1762);    // block matches function
                  return true;
                };
                block1685.guard = matches1686;
                block1685.real = function(var_i) {
                  setLineNumber(1763);    // compilenode identifier
                  // call case 6: other requests
                  // call case 4: self request
                  var call1688 = selfRequest(this, "inner", []);
                  var call1687 = callmethod(call1688, "at(1)", [1], var_i);
                  var var_a = call1687;
                  var if1689 = GraceDone;
                  setLineNumber(1764);    // compilenode member
                  // call case 6: other requests
                  var call1691 = callmethod(var_a, "value", []);
                  // call case 6: other requests
                  var call1690 = callmethod(var_removals, "contains(1)", [1], call1691);
                  if (Grace_isTrue(call1690)) {
                    setLineNumber(1765);    // compilenode member
                    // call case 2: outer request
                    var call1693 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "removed", []);
                    // call case 6: other requests
                    // call case 4: self request
                    var call1694 = selfRequest(this, "inner", []);
                    var call1692 = callmethod(call1694, "at(1)put(1)", [1, 1], var_i, call1693);
                    setLineNumber(1766);    // compilenode member
                    // call case 4: self request
                    var call1696 = selfRequest(this, "numBindings", []);
                    var diff1697 = callmethod(call1696, "-(1)", [1], new GraceNum(1));
                    // call case 4: self request
                    var call1695 = selfRequest(this, "numBindings:=(1)", [1], diff1697);
                    if1689 = call1695;
                  }
                  return if1689;
                };
                // call case 5: prelude request
                var call1680 = callmethod(var_prelude, "for(1)do(1)", [1, 1], opresult1684, block1685);
                setLineNumber(1769);    // compilenode identifier
                return this;
              };    // end of method removeAllValues(_)
              this.methods["removeAllValues(1)"] = func1676;
              func1676.paramCounts = [1];
              func1676.paramNames = ["removals"];
              func1676.typeParamNames = [];
              func1676.definitionLine = 1760;
              func1676.definitionModule = "standardGraceClass";
              var func1698 = function(argcv, var_v) {    // method removeValue(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1773);    // compilenode member
                // call case 4: self request
                var call1700 = selfRequest(this, "mods", []);
                var sum1701 = callmethod(call1700, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call1699 = selfRequest(this, "mods:=(1)", [1], sum1701);
                setLineNumber(1774);    // compilenode member
                // call case 4: self request
                var call1702 = selfRequest(this, "numBindings", []);
                var var_initialNumBindings = call1702;
                setLineNumber(1775);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call1705 = selfRequest(this, "inner", []);
                var call1704 = callmethod(call1705, "size", []);
                var diff1706 = callmethod(call1704, "-(1)", [1], new GraceNum(1));
                var opresult1707 = callmethod(new GraceNum(0), "..(1)", [1], diff1706);
                var block1708 = new GraceBlock(this, 1775, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1709 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1775);    // block matches function
                  return true;
                };
                block1708.guard = matches1709;
                block1708.real = function(var_i) {
                  setLineNumber(1776);    // compilenode identifier
                  // call case 6: other requests
                  // call case 4: self request
                  var call1711 = selfRequest(this, "inner", []);
                  var call1710 = callmethod(call1711, "at(1)", [1], var_i);
                  var var_a = call1710;
                  var if1712 = GraceDone;
                  setLineNumber(1777);    // compilenode member
                  // call case 6: other requests
                  var call1713 = callmethod(var_a, "value", []);
                  var opresult1714 = callmethod(var_v, "==(1)", [1], call1713);
                  if (Grace_isTrue(opresult1714)) {
                    setLineNumber(1778);    // compilenode member
                    // call case 2: outer request
                    var call1716 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "removed", []);
                    // call case 6: other requests
                    // call case 4: self request
                    var call1717 = selfRequest(this, "inner", []);
                    var call1715 = callmethod(call1717, "at(1)put(1)", [1, 1], var_i, call1716);
                    setLineNumber(1779);    // compilenode member
                    // call case 4: self request
                    var call1719 = selfRequest(this, "numBindings", []);
                    var diff1720 = callmethod(call1719, "-(1)", [1], new GraceNum(1));
                    // call case 4: self request
                    var call1718 = selfRequest(this, "numBindings:=(1)", [1], diff1720);
                    if1712 = call1718;
                  }
                  return if1712;
                };
                // call case 5: prelude request
                var call1703 = callmethod(var_prelude, "for(1)do(1)", [1, 1], opresult1707, block1708);
                var if1721 = GraceDone;
                setLineNumber(1782);    // compilenode member
                // call case 4: self request
                var call1722 = selfRequest(this, "numBindings", []);
                var opresult1723 = callmethod(call1722, "==(1)", [1], var_initialNumBindings);
                if (Grace_isTrue(opresult1723)) {
                  setLineNumber(1783);    // compilenode string
                  var string1725 = new GraceString("dictionary does not contain entry with value ");
                  var opresult1726 = callmethod(string1725, "++(1)", [1], var_v);
                  var string1727 = new GraceString("");
                  var opresult1728 = callmethod(opresult1726, "++(1)", [1], string1727);
                  // call case 6: other requests
                  // call case 2: outer request
                  var call1729 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "NoSuchObject", []);
                  var call1724 = callmethod(call1729, "raise(1)", [1], opresult1728);
                  if1721 = call1724;
                }
                setLineNumber(1785);    // compilenode identifier
                return this;
              };    // end of method removeValue(_)
              this.methods["removeValue(1)"] = func1698;
              func1698.paramCounts = [1];
              func1698.paramNames = ["v"];
              func1698.typeParamNames = [];
              func1698.definitionLine = 1771;
              func1698.definitionModule = "standardGraceClass";
              var func1730 = function(argcv, var_v, var_action) {    // method removeValue(_)ifAbsent(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                // Start argument type-checks
                setLineNumber(1787);    // compilenode member
                // call case 2: outer request
                var call1731 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "Block0", []);
                if (!Grace_isTrue(callmethod(call1731, "match(1)",  [1], var_action)))
                    raiseTypeError("in request of `removeValue(_)ifAbsent(_)`, " +
                      "argument 1 to `ifAbsent`  is not of type " +
                      "Block0⟦Unknown⟧", call1731, var_action);
                // End argument type-checks
                setLineNumber(1789);    // compilenode member
                // call case 4: self request
                var call1733 = selfRequest(this, "mods", []);
                var sum1734 = callmethod(call1733, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call1732 = selfRequest(this, "mods:=(1)", [1], sum1734);
                setLineNumber(1790);    // compilenode member
                // call case 4: self request
                var call1735 = selfRequest(this, "numBindings", []);
                var var_initialNumBindings = call1735;
                setLineNumber(1791);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call1738 = selfRequest(this, "inner", []);
                var call1737 = callmethod(call1738, "size", []);
                var diff1739 = callmethod(call1737, "-(1)", [1], new GraceNum(1));
                var opresult1740 = callmethod(new GraceNum(0), "..(1)", [1], diff1739);
                var block1741 = new GraceBlock(this, 1791, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1742 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1791);    // block matches function
                  return true;
                };
                block1741.guard = matches1742;
                block1741.real = function(var_i) {
                  setLineNumber(1792);    // compilenode identifier
                  // call case 6: other requests
                  // call case 4: self request
                  var call1744 = selfRequest(this, "inner", []);
                  var call1743 = callmethod(call1744, "at(1)", [1], var_i);
                  var var_a = call1743;
                  var if1745 = GraceDone;
                  setLineNumber(1793);    // compilenode member
                  // call case 6: other requests
                  var call1746 = callmethod(var_a, "value", []);
                  var opresult1747 = callmethod(var_v, "==(1)", [1], call1746);
                  if (Grace_isTrue(opresult1747)) {
                    setLineNumber(1794);    // compilenode member
                    // call case 2: outer request
                    var call1749 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "removed", []);
                    // call case 6: other requests
                    // call case 4: self request
                    var call1750 = selfRequest(this, "inner", []);
                    var call1748 = callmethod(call1750, "at(1)put(1)", [1, 1], var_i, call1749);
                    setLineNumber(1795);    // compilenode member
                    // call case 4: self request
                    var call1752 = selfRequest(this, "numBindings", []);
                    var diff1753 = callmethod(call1752, "-(1)", [1], new GraceNum(1));
                    // call case 4: self request
                    var call1751 = selfRequest(this, "numBindings:=(1)", [1], diff1753);
                    if1745 = call1751;
                  }
                  return if1745;
                };
                // call case 5: prelude request
                var call1736 = callmethod(var_prelude, "for(1)do(1)", [1, 1], opresult1740, block1741);
                var if1754 = GraceDone;
                setLineNumber(1798);    // compilenode member
                // call case 4: self request
                var call1755 = selfRequest(this, "numBindings", []);
                var opresult1756 = callmethod(call1755, "==(1)", [1], var_initialNumBindings);
                if (Grace_isTrue(opresult1756)) {
                  setLineNumber(1799);    // compilenode member
                  // call case 6: other requests
                  var call1757 = callmethod(var_action, "apply", []);
                  if1754 = call1757;
                }
                setLineNumber(1801);    // compilenode identifier
                return this;
              };    // end of method removeValue(_)ifAbsent(_)
              this.methods["removeValue(1)ifAbsent(1)"] = func1730;
              func1730.paramCounts = [1, 1];
              func1730.paramNames = ["v", "action"];
              func1730.typeParamNames = [];
              func1730.definitionLine = 1787;
              func1730.definitionModule = "standardGraceClass";
              var func1758 = function(argcv) {    // method clear
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1804);    // compilenode num
                // call case 6: other requests
                // call case 6: other requests
                var call1761 = callmethod(var___95__prelude, "primitiveArray", []);
                var call1760 = callmethod(call1761, "new(1)", [1], new GraceNum(8));
                // call case 4: self request
                var call1759 = selfRequest(this, "inner:=(1)", [1], call1760);
                setLineNumber(1805);    // compilenode num
                // call case 4: self request
                var call1762 = selfRequest(this, "numBindings:=(1)", [1], new GraceNum(0));
                setLineNumber(1806);    // compilenode member
                // call case 4: self request
                var call1764 = selfRequest(this, "mods", []);
                var sum1765 = callmethod(call1764, "+(1)", [1], new GraceNum(1));
                // call case 4: self request
                var call1763 = selfRequest(this, "mods:=(1)", [1], sum1765);
                setLineNumber(1807);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call1768 = selfRequest(this, "inner", []);
                var call1767 = callmethod(call1768, "size", []);
                var diff1769 = callmethod(call1767, "-(1)", [1], new GraceNum(1));
                var opresult1770 = callmethod(new GraceNum(0), "..(1)", [1], diff1769);
                var block1771 = new GraceBlock(this, 1807, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1772 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1807);    // block matches function
                  return true;
                };
                block1771.guard = matches1772;
                block1771.real = function(var_i) {
                  setLineNumber(1808);    // compilenode member
                  // call case 2: outer request
                  var call1774 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "unused", []);
                  // call case 6: other requests
                  // call case 4: self request
                  var call1775 = selfRequest(this, "inner", []);
                  var call1773 = callmethod(call1775, "at(1)put(1)", [1, 1], var_i, call1774);
                  return call1773;
                };
                // call case 5: prelude request
                var call1766 = callmethod(var_prelude, "for(1)do(1)", [1, 1], opresult1770, block1771);
                setLineNumber(1810);    // compilenode identifier
                return this;
              };    // end of method clear
              this.methods["clear"] = func1758;
              func1758.paramCounts = [0];
              func1758.paramNames = [];
              func1758.typeParamNames = [];
              func1758.definitionLine = 1803;
              func1758.definitionModule = "standardGraceClass";
              var func1776 = function(argcv, var_v) {    // method containsValue(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1813);    // compilenode block
                var block1778 = new GraceBlock(this, 1813, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1779 = function(var_each) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1813);    // block matches function
                  return true;
                };
                block1778.guard = matches1779;
                block1778.real = function(var_each) {
                  var if1780 = GraceDone;
                  setLineNumber(1814);    // compilenode identifier
                  var opresult1781 = callmethod(var_v, "==(1)", [1], var_each);
                  if (Grace_isTrue(opresult1781)) {
                    throw new ReturnException(GraceTrue, returnTarget);
                  }
                  return if1780;
                };
                // call case 4: self request
                var call1777 = selfRequest(this, "valuesDo(1)", [1], block1778);
                setLineNumber(1816);    // compilenode identifier
                return GraceFalse;
              };    // end of method containsValue(_)
              this.methods["containsValue(1)"] = func1776;
              func1776.paramCounts = [1];
              func1776.paramNames = ["v"];
              func1776.typeParamNames = [];
              func1776.definitionLine = 1812;
              func1776.definitionModule = "standardGraceClass";
              var func1782 = function(argcv, var_v) {    // method contains(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1818);    // compilenode identifier
                // call case 4: self request
                var call1783 = selfRequest(this, "containsValue(1)", [1], var_v);
                return call1783;
              };    // end of method contains(_)
              this.methods["contains(1)"] = func1782;
              func1782.paramCounts = [1];
              func1782.paramNames = ["v"];
              func1782.typeParamNames = [];
              func1782.definitionLine = 1818;
              func1782.definitionModule = "standardGraceClass";
              var func1784 = function(argcv, var_x) {    // method findPosition(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1821);    // compilenode member
                // call case 6: other requests
                var call1785 = callmethod(var_x, "hash", []);
                var var_h = call1785;
                setLineNumber(1822);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call1787 = selfRequest(this, "inner", []);
                var call1786 = callmethod(call1787, "size", []);
                var var_s = call1786;
                setLineNumber(1823);    // compilenode identifier
                var modulus1788 = callmethod(var_h, "%(1)", [1], var_s);
                var var_t = modulus1788;
                setLineNumber(1824);    // compilenode num
                var var_jump = new GraceNum(5);
                setLineNumber(1825);    // compilenode block
                var block1790 = new GraceBlock(this, 1825, 0);
                var matches1791 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block1790.guard = matches1791;
                block1790.real = function() {
                  // call case 2: outer request
                  var call1792 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "unused", []);
                  if (var_t === undefined) raiseUninitializedVariable("t");
                  // call case 6: other requests
                  // call case 4: self request
                  var call1794 = selfRequest(this, "inner", []);
                  var call1793 = callmethod(call1794, "at(1)", [1], var_t);
                  var opresult1795 = callmethod(call1792, "\u2260(1)", [1], call1793);
                  return opresult1795;
                };
                var block1796 = new GraceBlock(this, 1825, 0);
                var matches1797 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block1796.guard = matches1797;
                block1796.real = function() {
                  var if1798 = GraceDone;
                  setLineNumber(1826);    // compilenode member
                  // call case 6: other requests
                  if (var_t === undefined) raiseUninitializedVariable("t");
                  // call case 6: other requests
                  // call case 4: self request
                  var call1801 = selfRequest(this, "inner", []);
                  var call1800 = callmethod(call1801, "at(1)", [1], var_t);
                  var call1799 = callmethod(call1800, "key", []);
                  var opresult1802 = callmethod(call1799, "==(1)", [1], var_x);
                  if (Grace_isTrue(opresult1802)) {
                    setLineNumber(1827);    // compilenode identifier
                    throw new ReturnException(var_t, returnTarget);
                  }
                  var if1803 = GraceDone;
                  setLineNumber(1829);    // compilenode num
                  var opresult1804 = callmethod(var_jump, "\u2260(1)", [1], new GraceNum(0));
                  if (Grace_isTrue(opresult1804)) {
                    setLineNumber(1830);    // compilenode num
                    var prod1805 = callmethod(var_t, "*(1)", [1], new GraceNum(3));
                    var sum1806 = callmethod(prod1805, "+(1)", [1], new GraceNum(1));
                    var modulus1807 = callmethod(sum1806, "%(1)", [1], var_s);
                    var_t = modulus1807;
                    setLineNumber(1831);    // compilenode num
                    var diff1808 = callmethod(var_jump, "-(1)", [1], new GraceNum(1));
                    var_jump = diff1808;
                    if1803 = GraceDone;
                  } else {
                    setLineNumber(1833);    // compilenode num
                    var sum1809 = callmethod(var_t, "+(1)", [1], new GraceNum(1));
                    var modulus1810 = callmethod(sum1809, "%(1)", [1], var_s);
                    var_t = modulus1810;
                    if1803 = GraceDone;
                  }
                  return if1803;
                };
                // call case 5: prelude request
                var call1789 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block1790, block1796);
                setLineNumber(1836);    // compilenode identifier
                return var_t;
                return undefined;
              };    // end of method findPosition(_)
              func1784.confidential = true;
              this.methods["findPosition(1)"] = func1784;
              func1784.paramCounts = [1];
              func1784.paramNames = ["x"];
              func1784.typeParamNames = [];
              func1784.definitionLine = 1820;
              func1784.definitionModule = "standardGraceClass";
              var func1811 = function(argcv, var_x) {    // method findPositionForAdd(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1839);    // compilenode member
                // call case 6: other requests
                var call1812 = callmethod(var_x, "hash", []);
                var var_h = call1812;
                setLineNumber(1840);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call1814 = selfRequest(this, "inner", []);
                var call1813 = callmethod(call1814, "size", []);
                var var_s = call1813;
                setLineNumber(1841);    // compilenode identifier
                var modulus1815 = callmethod(var_h, "%(1)", [1], var_s);
                var var_t = modulus1815;
                setLineNumber(1842);    // compilenode num
                var var_jump = new GraceNum(5);
                setLineNumber(1843);    // compilenode block
                var block1817 = new GraceBlock(this, 1843, 0);
                var matches1818 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block1817.guard = matches1818;
                block1817.real = function() {
                  // call case 2: outer request
                  var call1819 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "unused", []);
                  if (var_t === undefined) raiseUninitializedVariable("t");
                  // call case 6: other requests
                  // call case 4: self request
                  var call1821 = selfRequest(this, "inner", []);
                  var call1820 = callmethod(call1821, "at(1)", [1], var_t);
                  var opresult1822 = callmethod(call1819, "\u2260(1)", [1], call1820);
                  // call case 2: outer request
                  var call1823 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "removed", []);
                  if (var_t === undefined) raiseUninitializedVariable("t");
                  // call case 6: other requests
                  // call case 4: self request
                  var call1825 = selfRequest(this, "inner", []);
                  var call1824 = callmethod(call1825, "at(1)", [1], var_t);
                  var opresult1826 = callmethod(call1823, "\u2260(1)", [1], call1824);
                  var opresult1827 = callmethod(opresult1822, "&&(1)", [1], opresult1826);
                  return opresult1827;
                };
                var block1828 = new GraceBlock(this, 1843, 0);
                var matches1829 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block1828.guard = matches1829;
                block1828.real = function() {
                  var if1830 = GraceDone;
                  setLineNumber(1844);    // compilenode member
                  // call case 6: other requests
                  if (var_t === undefined) raiseUninitializedVariable("t");
                  // call case 6: other requests
                  // call case 4: self request
                  var call1833 = selfRequest(this, "inner", []);
                  var call1832 = callmethod(call1833, "at(1)", [1], var_t);
                  var call1831 = callmethod(call1832, "key", []);
                  var opresult1834 = callmethod(call1831, "==(1)", [1], var_x);
                  if (Grace_isTrue(opresult1834)) {
                    setLineNumber(1845);    // compilenode identifier
                    throw new ReturnException(var_t, returnTarget);
                  }
                  var if1835 = GraceDone;
                  setLineNumber(1847);    // compilenode num
                  var opresult1836 = callmethod(var_jump, "\u2260(1)", [1], new GraceNum(0));
                  if (Grace_isTrue(opresult1836)) {
                    setLineNumber(1848);    // compilenode num
                    var prod1837 = callmethod(var_t, "*(1)", [1], new GraceNum(3));
                    var sum1838 = callmethod(prod1837, "+(1)", [1], new GraceNum(1));
                    var modulus1839 = callmethod(sum1838, "%(1)", [1], var_s);
                    var_t = modulus1839;
                    setLineNumber(1849);    // compilenode num
                    var diff1840 = callmethod(var_jump, "-(1)", [1], new GraceNum(1));
                    var_jump = diff1840;
                    if1835 = GraceDone;
                  } else {
                    setLineNumber(1851);    // compilenode num
                    var sum1841 = callmethod(var_t, "+(1)", [1], new GraceNum(1));
                    var modulus1842 = callmethod(sum1841, "%(1)", [1], var_s);
                    var_t = modulus1842;
                    if1835 = GraceDone;
                  }
                  return if1835;
                };
                // call case 5: prelude request
                var call1816 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block1817, block1828);
                setLineNumber(1854);    // compilenode identifier
                return var_t;
                return undefined;
              };    // end of method findPositionForAdd(_)
              func1811.confidential = true;
              this.methods["findPositionForAdd(1)"] = func1811;
              func1811.paramCounts = [1];
              func1811.paramNames = ["x"];
              func1811.typeParamNames = [];
              func1811.definitionLine = 1838;
              func1811.definitionModule = "standardGraceClass";
              var func1843 = function(argcv) {    // method asString
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1859);    // compilenode string
                var string1844 = new GraceString("dict\u27ec");
                var var_s = string1844;
                setLineNumber(1860);    // compilenode identifier
                var var_firstElement = GraceTrue;
                setLineNumber(1861);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call1847 = selfRequest(this, "inner", []);
                var call1846 = callmethod(call1847, "size", []);
                var diff1848 = callmethod(call1846, "-(1)", [1], new GraceNum(1));
                var opresult1849 = callmethod(new GraceNum(0), "..(1)", [1], diff1848);
                var block1850 = new GraceBlock(this, 1861, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1851 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1861);    // block matches function
                  return true;
                };
                block1850.guard = matches1851;
                block1850.real = function(var_i) {
                  setLineNumber(1862);    // compilenode identifier
                  // call case 6: other requests
                  // call case 4: self request
                  var call1853 = selfRequest(this, "inner", []);
                  var call1852 = callmethod(call1853, "at(1)", [1], var_i);
                  var var_a = call1852;
                  var if1854 = GraceDone;
                  setLineNumber(1863);    // compilenode member
                  // call case 2: outer request
                  var call1855 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "unused", []);
                  var opresult1856 = callmethod(call1855, "\u2260(1)", [1], var_a);
                  // call case 2: outer request
                  var call1857 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "removed", []);
                  var opresult1858 = callmethod(call1857, "\u2260(1)", [1], var_a);
                  var opresult1859 = callmethod(opresult1856, "&&(1)", [1], opresult1858);
                  if (Grace_isTrue(opresult1859)) {
                    var if1860 = GraceDone;
                    setLineNumber(1864);    // compilenode call
                    // call case 6: other requests
                    var call1861 = callmethod(var_firstElement, "prefix!", [0]);
                    if (Grace_isTrue(call1861)) {
                      setLineNumber(1865);    // compilenode string
                      var string1862 = new GraceString(", ");
                      var opresult1863 = callmethod(var_s, "++(1)", [1], string1862);
                      var_s = opresult1863;
                      if1860 = GraceDone;
                    } else {
                      setLineNumber(1867);    // compilenode identifier
                      var_firstElement = GraceFalse;
                      if1860 = GraceDone;
                    }
                    setLineNumber(1869);    // compilenode string
                    var string1864 = new GraceString("");
                    // call case 6: other requests
                    var call1865 = callmethod(var_a, "key", []);
                    var opresult1866 = callmethod(string1864, "++(1)", [1], call1865);
                    var string1867 = new GraceString("::");
                    var opresult1868 = callmethod(opresult1866, "++(1)", [1], string1867);
                    // call case 6: other requests
                    var call1869 = callmethod(var_a, "value", []);
                    var opresult1870 = callmethod(opresult1868, "++(1)", [1], call1869);
                    var string1871 = new GraceString("");
                    var opresult1872 = callmethod(opresult1870, "++(1)", [1], string1871);
                    var opresult1873 = callmethod(var_s, "++(1)", [1], opresult1872);
                    var_s = opresult1873;
                    if1854 = GraceDone;
                  }
                  return if1854;
                };
                // call case 5: prelude request
                var call1845 = callmethod(var_prelude, "for(1)do(1)", [1, 1], opresult1849, block1850);
                setLineNumber(1872);    // compilenode string
                var string1874 = new GraceString("\u27ed");
                var opresult1875 = callmethod(var_s, "++(1)", [1], string1874);
                return opresult1875;
              };    // end of method asString
              this.methods["asString"] = func1843;
              func1843.paramCounts = [0];
              func1843.paramNames = [];
              func1843.typeParamNames = [];
              func1843.definitionLine = 1856;
              func1843.definitionModule = "standardGraceClass";
              var func1876 = function(argcv) {    // method asDebugString
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1875);    // compilenode string
                var string1877 = new GraceString("dict\u27ec");
                var var_s = string1877;
                setLineNumber(1876);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call1880 = selfRequest(this, "inner", []);
                var call1879 = callmethod(call1880, "size", []);
                var diff1881 = callmethod(call1879, "-(1)", [1], new GraceNum(1));
                var opresult1882 = callmethod(new GraceNum(0), "..(1)", [1], diff1881);
                var block1883 = new GraceBlock(this, 1876, 1);
                setLineNumber(1);    // compilenode identifier
                var matches1884 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1876);    // block matches function
                  return true;
                };
                block1883.guard = matches1884;
                block1883.real = function(var_i) {
                  var if1885 = GraceDone;
                  setLineNumber(1877);    // compilenode num
                  var opresult1886 = callmethod(var_i, ">(1)", [1], new GraceNum(0));
                  if (Grace_isTrue(opresult1886)) {
                    var string1887 = new GraceString(", ");
                    var opresult1888 = callmethod(var_s, "++(1)", [1], string1887);
                    var_s = opresult1888;
                    if1885 = GraceDone;
                  }
                  setLineNumber(1878);    // compilenode identifier
                  // call case 6: other requests
                  // call case 4: self request
                  var call1890 = selfRequest(this, "inner", []);
                  var call1889 = callmethod(call1890, "at(1)", [1], var_i);
                  var var_a = call1889;
                  var if1891 = GraceDone;
                  setLineNumber(1879);    // compilenode member
                  // call case 2: outer request
                  var call1892 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "unused", []);
                  var opresult1893 = callmethod(call1892, "\u2260(1)", [1], var_a);
                  // call case 2: outer request
                  var call1894 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "removed", []);
                  var opresult1895 = callmethod(call1894, "\u2260(1)", [1], var_a);
                  var opresult1896 = callmethod(opresult1893, "&&(1)", [1], opresult1895);
                  if (Grace_isTrue(opresult1896)) {
                    setLineNumber(1880);    // compilenode string
                    var string1897 = new GraceString("");
                    var opresult1898 = callmethod(string1897, "++(1)", [1], var_i);
                    var string1899 = new GraceString("\u2192");
                    var opresult1900 = callmethod(opresult1898, "++(1)", [1], string1899);
                    // call case 6: other requests
                    var call1901 = callmethod(var_a, "key", []);
                    var opresult1902 = callmethod(opresult1900, "++(1)", [1], call1901);
                    var string1903 = new GraceString("::");
                    var opresult1904 = callmethod(opresult1902, "++(1)", [1], string1903);
                    // call case 6: other requests
                    var call1905 = callmethod(var_a, "value", []);
                    var opresult1906 = callmethod(opresult1904, "++(1)", [1], call1905);
                    var string1907 = new GraceString("");
                    var opresult1908 = callmethod(opresult1906, "++(1)", [1], string1907);
                    var opresult1909 = callmethod(var_s, "++(1)", [1], opresult1908);
                    var_s = opresult1909;
                    if1891 = GraceDone;
                  } else {
                    setLineNumber(1882);    // compilenode string
                    var string1910 = new GraceString("");
                    var opresult1911 = callmethod(string1910, "++(1)", [1], var_i);
                    var string1912 = new GraceString("\u2192");
                    var opresult1913 = callmethod(opresult1911, "++(1)", [1], string1912);
                    // call case 6: other requests
                    var call1914 = callmethod(var_a, "asDebugString", []);
                    var opresult1915 = callmethod(opresult1913, "++(1)", [1], call1914);
                    var string1916 = new GraceString("");
                    var opresult1917 = callmethod(opresult1915, "++(1)", [1], string1916);
                    var opresult1918 = callmethod(var_s, "++(1)", [1], opresult1917);
                    var_s = opresult1918;
                    if1891 = GraceDone;
                  }
                  return if1891;
                };
                // call case 5: prelude request
                var call1878 = callmethod(var_prelude, "for(1)do(1)", [1, 1], opresult1882, block1883);
                setLineNumber(1885);    // compilenode string
                var string1919 = new GraceString("\u27ed");
                var opresult1920 = callmethod(var_s, "++(1)", [1], string1919);
                return opresult1920;
              };    // end of method asDebugString
              this.methods["asDebugString"] = func1876;
              func1876.paramCounts = [0];
              func1876.paramNames = [];
              func1876.typeParamNames = [];
              func1876.definitionLine = 1874;
              func1876.definitionModule = "standardGraceClass";
              var func1921 = function(argcv) {    // method keys
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var ouc = emptyGraceObject("standardGrace.dictionary.empty.keys", "standardGraceClass", 1887);
                var ouc_init = this.methods["keys$build(3)"].call(this, null, ouc, [], []);
                ouc_init.call(ouc);
                return ouc;
              };    // end of method keys
              this.methods["keys"] = func1921;
              func1921.paramCounts = [0];
              func1921.paramNames = [];
              func1921.typeParamNames = [];
              func1921.definitionLine = 1887;
              func1921.definitionModule = "standardGraceClass";
              var func1922 = function(argcv, inheritingObject, aliases, exclusions) {    // method keys$build(_,_,_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1888);    // compilenode identifier
                var var_sourceDictionary = this;
                var obj1923_build = function(ignore, outerObj, aliases, exclusions) {
                  this.closureKeys = this.closureKeys || [];
                  this.closureKeys.push("outer_standardGraceClass_1889");
                  this.outer_standardGraceClass_1889 = outerObj;
                  var inheritedExclusions = { };
                  for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                      var exMeth = exclusions[eix];
                      inheritedExclusions[exMeth] = this.methods[exMeth];
                  }
                  setLineNumber(1890);    // compilenode identifier
                  var initFun1924 = callmethod(var_traits, "enumerable$build(3)", [null], this, [], []);  // compileReuseCall
                  var func1925 = function(argcv) {    // method iterator
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    var ouc = emptyGraceObject("standardGrace.dictionary.empty.keys.iterator", "standardGraceClass", 1891);
                    var ouc_init = this.methods["iterator$build(3)"].call(this, null, ouc, [], []);
                    ouc_init.call(ouc);
                    return ouc;
                  };    // end of method iterator
                  this.methods["iterator"] = func1925;
                  func1925.paramCounts = [0];
                  func1925.paramNames = [];
                  func1925.typeParamNames = [];
                  func1925.definitionLine = 1891;
                  func1925.definitionModule = "standardGraceClass";
                  var func1926 = function(argcv, inheritingObject, aliases, exclusions) {    // method iterator$build(_,_,_)
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    var obj1927_build = function(ignore, outerObj, aliases, exclusions) {
                      this.closureKeys = this.closureKeys || [];
                      this.closureKeys.push("outer_standardGraceClass_1891");
                      this.outer_standardGraceClass_1891 = outerObj;
                      var inheritedExclusions = { };
                      for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                          var exMeth = exclusions[eix];
                          inheritedExclusions[exMeth] = this.methods[exMeth];
                      }
                      this.data.sourceIterator = undefined;
                      var reader_sourceIterator1928 = function() {  // reader method sourceIterator
                          return this.data.sourceIterator;
                      };
                      reader_sourceIterator1928.isDef = true;
                      reader_sourceIterator1928.confidential = true;
                      this.methods["sourceIterator"] = reader_sourceIterator1928;
                      var func1929 = function(argcv) {    // method hasNext
                        var returnTarget = invocationCount;
                        invocationCount++;
                        setModuleName("standardGraceClass");
                        setLineNumber(1893);    // compilenode member
                        // call case 6: other requests
                        // call case 4: self request
                        var call1931 = selfRequest(this, "sourceIterator", []);
                        var call1930 = callmethod(call1931, "hasNext", []);
                        return call1930;
                      };    // end of method hasNext
                      this.methods["hasNext"] = func1929;
                      func1929.paramCounts = [0];
                      func1929.paramNames = [];
                      func1929.typeParamNames = [];
                      func1929.definitionLine = 1893;
                      func1929.definitionModule = "standardGraceClass";
                      var func1932 = function(argcv) {    // method next
                        var returnTarget = invocationCount;
                        invocationCount++;
                        setModuleName("standardGraceClass");
                        setLineNumber(1894);    // compilenode member
                        // call case 6: other requests
                        // call case 6: other requests
                        // call case 4: self request
                        var call1935 = selfRequest(this, "sourceIterator", []);
                        var call1934 = callmethod(call1935, "next", []);
                        var call1933 = callmethod(call1934, "key", []);
                        return call1933;
                      };    // end of method next
                      this.methods["next"] = func1932;
                      func1932.paramCounts = [0];
                      func1932.paramNames = [];
                      func1932.typeParamNames = [];
                      func1932.definitionLine = 1894;
                      func1932.definitionModule = "standardGraceClass";
                      var func1936 = function(argcv) {    // method asString
                        var returnTarget = invocationCount;
                        invocationCount++;
                        setModuleName("standardGraceClass");
                        setLineNumber(1896);    // compilenode string
                        var string1937 = new GraceString("an iterator over keys of ");
                        var opresult1938 = callmethod(string1937, "++(1)", [1], var_sourceDictionary);
                        var string1939 = new GraceString("");
                        var opresult1940 = callmethod(opresult1938, "++(1)", [1], string1939);
                        return opresult1940;
                      };    // end of method asString
                      this.methods["asString"] = func1936;
                      func1936.paramCounts = [0];
                      func1936.paramNames = [];
                      func1936.typeParamNames = [];
                      func1936.definitionLine = 1895;
                      func1936.definitionModule = "standardGraceClass";
                      for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                          var oneAlias = aliases[aix];
                          this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
                      }
                      for (var exName in inheritedExclusions) {
                          if (inheritedExclusions.hasOwnProperty(exName)) {
                              if (inheritedExclusions[exName]) {
                                  this.methods[exName] = inheritedExclusions[exName];
                              } else {
                                  delete this.methods[exName];
                              }
                          }
                      }
                      var obj1927_init = function() {    // init of object on line 1891
                        setLineNumber(1892);    // compilenode member
                        // call case 6: other requests
                        var call1941 = callmethod(var_sourceDictionary, "bindingsIterator", []);
                        this.data.sourceIterator = call1941;
                      };
                      return obj1927_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
                    };
                    var obj1927_init = obj1927_build.call(inheritingObject, null, this, aliases, exclusions);
                    return obj1927_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
                  };    // end of method iterator$build(_,_,_)
                  this.methods["iterator$build(3)"] = func1926;
                  func1926.paramCounts = [0];
                  func1926.paramNames = [];
                  func1926.typeParamNames = [];
                  func1926.definitionLine = 1891;
                  func1926.definitionModule = "standardGraceClass";
                  this.data.size = undefined;
                  var reader_size1942 = function() {  // reader method size
                      return this.data.size;
                  };
                  reader_size1942.isDef = true;
                  this.methods["size"] = reader_size1942;
                  var func1943 = function(argcv) {    // method asDebugString
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    setLineNumber(1901);    // compilenode string
                    var string1944 = new GraceString("a lazy sequence over keys of ");
                    var opresult1945 = callmethod(string1944, "++(1)", [1], var_sourceDictionary);
                    var string1946 = new GraceString("");
                    var opresult1947 = callmethod(opresult1945, "++(1)", [1], string1946);
                    return opresult1947;
                  };    // end of method asDebugString
                  this.methods["asDebugString"] = func1943;
                  func1943.paramCounts = [0];
                  func1943.paramNames = [];
                  func1943.typeParamNames = [];
                  func1943.definitionLine = 1900;
                  func1943.definitionModule = "standardGraceClass";
                  for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                      var oneAlias = aliases[aix];
                      this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
                  }
                  for (var exName in inheritedExclusions) {
                      if (inheritedExclusions.hasOwnProperty(exName)) {
                          if (inheritedExclusions[exName]) {
                              this.methods[exName] = inheritedExclusions[exName];
                          } else {
                              delete this.methods[exName];
                          }
                      }
                  }
                  var obj1923_init = function() {    // init of object on line 1889
                    initFun1924.call(this);
                    setLineNumber(1899);    // compilenode member
                    // call case 6: other requests
                    var call1948 = callmethod(var_sourceDictionary, "size", []);
                    this.data.size = call1948;
                  };
                  return obj1923_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
                };
                var obj1923_init = obj1923_build.call(inheritingObject, null, this, aliases, exclusions);
                return obj1923_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
              };    // end of method keys$build(_,_,_)
              this.methods["keys$build(3)"] = func1922;
              func1922.paramCounts = [0];
              func1922.paramNames = [];
              func1922.typeParamNames = [];
              func1922.definitionLine = 1887;
              func1922.definitionModule = "standardGraceClass";
              var func1949 = function(argcv) {    // method values
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var ouc = emptyGraceObject("standardGrace.dictionary.empty.values", "standardGraceClass", 1905);
                var ouc_init = this.methods["values$build(3)"].call(this, null, ouc, [], []);
                ouc_init.call(ouc);
                return ouc;
              };    // end of method values
              this.methods["values"] = func1949;
              func1949.paramCounts = [0];
              func1949.paramNames = [];
              func1949.typeParamNames = [];
              func1949.definitionLine = 1905;
              func1949.definitionModule = "standardGraceClass";
              var func1950 = function(argcv, inheritingObject, aliases, exclusions) {    // method values$build(_,_,_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1906);    // compilenode identifier
                var var_sourceDictionary = this;
                var obj1951_build = function(ignore, outerObj, aliases, exclusions) {
                  this.closureKeys = this.closureKeys || [];
                  this.closureKeys.push("outer_standardGraceClass_1907");
                  this.outer_standardGraceClass_1907 = outerObj;
                  var inheritedExclusions = { };
                  for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                      var exMeth = exclusions[eix];
                      inheritedExclusions[exMeth] = this.methods[exMeth];
                  }
                  setLineNumber(1908);    // compilenode identifier
                  var initFun1952 = callmethod(var_traits, "enumerable$build(3)", [null], this, [], []);  // compileReuseCall
                  var func1953 = function(argcv) {    // method iterator
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    var ouc = emptyGraceObject("standardGrace.dictionary.empty.values.iterator", "standardGraceClass", 1909);
                    var ouc_init = this.methods["iterator$build(3)"].call(this, null, ouc, [], []);
                    ouc_init.call(ouc);
                    return ouc;
                  };    // end of method iterator
                  this.methods["iterator"] = func1953;
                  func1953.paramCounts = [0];
                  func1953.paramNames = [];
                  func1953.typeParamNames = [];
                  func1953.definitionLine = 1909;
                  func1953.definitionModule = "standardGraceClass";
                  var func1954 = function(argcv, inheritingObject, aliases, exclusions) {    // method iterator$build(_,_,_)
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    var obj1955_build = function(ignore, outerObj, aliases, exclusions) {
                      this.closureKeys = this.closureKeys || [];
                      this.closureKeys.push("outer_standardGraceClass_1909");
                      this.outer_standardGraceClass_1909 = outerObj;
                      var inheritedExclusions = { };
                      for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                          var exMeth = exclusions[eix];
                          inheritedExclusions[exMeth] = this.methods[exMeth];
                      }
                      this.data.sourceIterator = undefined;
                      var reader_sourceIterator1956 = function() {  // reader method sourceIterator
                          return this.data.sourceIterator;
                      };
                      reader_sourceIterator1956.isDef = true;
                      reader_sourceIterator1956.confidential = true;
                      this.methods["sourceIterator"] = reader_sourceIterator1956;
                      var func1957 = function(argcv) {    // method hasNext
                        var returnTarget = invocationCount;
                        invocationCount++;
                        setModuleName("standardGraceClass");
                        setLineNumber(1912);    // compilenode member
                        // call case 6: other requests
                        // call case 4: self request
                        var call1959 = selfRequest(this, "sourceIterator", []);
                        var call1958 = callmethod(call1959, "hasNext", []);
                        return call1958;
                      };    // end of method hasNext
                      this.methods["hasNext"] = func1957;
                      func1957.paramCounts = [0];
                      func1957.paramNames = [];
                      func1957.typeParamNames = [];
                      func1957.definitionLine = 1912;
                      func1957.definitionModule = "standardGraceClass";
                      var func1960 = function(argcv) {    // method next
                        var returnTarget = invocationCount;
                        invocationCount++;
                        setModuleName("standardGraceClass");
                        setLineNumber(1913);    // compilenode member
                        // call case 6: other requests
                        // call case 6: other requests
                        // call case 4: self request
                        var call1963 = selfRequest(this, "sourceIterator", []);
                        var call1962 = callmethod(call1963, "next", []);
                        var call1961 = callmethod(call1962, "value", []);
                        return call1961;
                      };    // end of method next
                      this.methods["next"] = func1960;
                      func1960.paramCounts = [0];
                      func1960.paramNames = [];
                      func1960.typeParamNames = [];
                      func1960.definitionLine = 1913;
                      func1960.definitionModule = "standardGraceClass";
                      var func1964 = function(argcv) {    // method asString
                        var returnTarget = invocationCount;
                        invocationCount++;
                        setModuleName("standardGraceClass");
                        setLineNumber(1915);    // compilenode string
                        var string1965 = new GraceString("an iterator over values of ");
                        var opresult1966 = callmethod(string1965, "++(1)", [1], var_sourceDictionary);
                        var string1967 = new GraceString("");
                        var opresult1968 = callmethod(opresult1966, "++(1)", [1], string1967);
                        return opresult1968;
                      };    // end of method asString
                      this.methods["asString"] = func1964;
                      func1964.paramCounts = [0];
                      func1964.paramNames = [];
                      func1964.typeParamNames = [];
                      func1964.definitionLine = 1914;
                      func1964.definitionModule = "standardGraceClass";
                      for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                          var oneAlias = aliases[aix];
                          this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
                      }
                      for (var exName in inheritedExclusions) {
                          if (inheritedExclusions.hasOwnProperty(exName)) {
                              if (inheritedExclusions[exName]) {
                                  this.methods[exName] = inheritedExclusions[exName];
                              } else {
                                  delete this.methods[exName];
                              }
                          }
                      }
                      var obj1955_init = function() {    // init of object on line 1909
                        setLineNumber(1910);    // compilenode member
                        // call case 6: other requests
                        var call1969 = callmethod(var_sourceDictionary, "bindingsIterator", []);
                        this.data.sourceIterator = call1969;
                      };
                      return obj1955_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
                    };
                    var obj1955_init = obj1955_build.call(inheritingObject, null, this, aliases, exclusions);
                    return obj1955_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
                  };    // end of method iterator$build(_,_,_)
                  this.methods["iterator$build(3)"] = func1954;
                  func1954.paramCounts = [0];
                  func1954.paramNames = [];
                  func1954.typeParamNames = [];
                  func1954.definitionLine = 1909;
                  func1954.definitionModule = "standardGraceClass";
                  this.data.size = undefined;
                  var reader_size1970 = function() {  // reader method size
                      return this.data.size;
                  };
                  reader_size1970.isDef = true;
                  this.methods["size"] = reader_size1970;
                  var func1971 = function(argcv) {    // method asDebugString
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    setLineNumber(1920);    // compilenode string
                    var string1972 = new GraceString("a lazy sequence over values of ");
                    var opresult1973 = callmethod(string1972, "++(1)", [1], var_sourceDictionary);
                    var string1974 = new GraceString("");
                    var opresult1975 = callmethod(opresult1973, "++(1)", [1], string1974);
                    return opresult1975;
                  };    // end of method asDebugString
                  this.methods["asDebugString"] = func1971;
                  func1971.paramCounts = [0];
                  func1971.paramNames = [];
                  func1971.typeParamNames = [];
                  func1971.definitionLine = 1919;
                  func1971.definitionModule = "standardGraceClass";
                  for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                      var oneAlias = aliases[aix];
                      this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
                  }
                  for (var exName in inheritedExclusions) {
                      if (inheritedExclusions.hasOwnProperty(exName)) {
                          if (inheritedExclusions[exName]) {
                              this.methods[exName] = inheritedExclusions[exName];
                          } else {
                              delete this.methods[exName];
                          }
                      }
                  }
                  var obj1951_init = function() {    // init of object on line 1907
                    initFun1952.call(this);
                    setLineNumber(1918);    // compilenode member
                    // call case 6: other requests
                    var call1976 = callmethod(var_sourceDictionary, "size", []);
                    this.data.size = call1976;
                  };
                  return obj1951_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
                };
                var obj1951_init = obj1951_build.call(inheritingObject, null, this, aliases, exclusions);
                return obj1951_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
              };    // end of method values$build(_,_,_)
              this.methods["values$build(3)"] = func1950;
              func1950.paramCounts = [0];
              func1950.paramNames = [];
              func1950.typeParamNames = [];
              func1950.definitionLine = 1905;
              func1950.definitionModule = "standardGraceClass";
              var func1977 = function(argcv) {    // method bindings
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var ouc = emptyGraceObject("standardGrace.dictionary.empty.bindings", "standardGraceClass", 1924);
                var ouc_init = this.methods["bindings$build(3)"].call(this, null, ouc, [], []);
                ouc_init.call(ouc);
                return ouc;
              };    // end of method bindings
              this.methods["bindings"] = func1977;
              func1977.paramCounts = [0];
              func1977.paramNames = [];
              func1977.typeParamNames = [];
              func1977.definitionLine = 1924;
              func1977.definitionModule = "standardGraceClass";
              var func1978 = function(argcv, inheritingObject, aliases, exclusions) {    // method bindings$build(_,_,_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1925);    // compilenode identifier
                var var_sourceDictionary = this;
                var obj1979_build = function(ignore, outerObj, aliases, exclusions) {
                  this.closureKeys = this.closureKeys || [];
                  this.closureKeys.push("outer_standardGraceClass_1926");
                  this.outer_standardGraceClass_1926 = outerObj;
                  var inheritedExclusions = { };
                  for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                      var exMeth = exclusions[eix];
                      inheritedExclusions[exMeth] = this.methods[exMeth];
                  }
                  setLineNumber(1927);    // compilenode identifier
                  var initFun1980 = callmethod(var_traits, "enumerable$build(3)", [null], this, [], []);  // compileReuseCall
                  var func1981 = function(argcv) {    // method iterator
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    setLineNumber(1928);    // compilenode member
                    // call case 6: other requests
                    var call1982 = callmethod(var_sourceDictionary, "bindingsIterator", []);
                    return call1982;
                  };    // end of method iterator
                  this.methods["iterator"] = func1981;
                  func1981.paramCounts = [0];
                  func1981.paramNames = [];
                  func1981.typeParamNames = [];
                  func1981.definitionLine = 1928;
                  func1981.definitionModule = "standardGraceClass";
                  this.data.size = undefined;
                  var reader_size1983 = function() {  // reader method size
                      return this.data.size;
                  };
                  reader_size1983.isDef = true;
                  this.methods["size"] = reader_size1983;
                  var func1984 = function(argcv) {    // method asDebugString
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    setLineNumber(1932);    // compilenode string
                    var string1985 = new GraceString("a lazy sequence over bindings of ");
                    var opresult1986 = callmethod(string1985, "++(1)", [1], var_sourceDictionary);
                    var string1987 = new GraceString("");
                    var opresult1988 = callmethod(opresult1986, "++(1)", [1], string1987);
                    return opresult1988;
                  };    // end of method asDebugString
                  this.methods["asDebugString"] = func1984;
                  func1984.paramCounts = [0];
                  func1984.paramNames = [];
                  func1984.typeParamNames = [];
                  func1984.definitionLine = 1931;
                  func1984.definitionModule = "standardGraceClass";
                  for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                      var oneAlias = aliases[aix];
                      this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
                  }
                  for (var exName in inheritedExclusions) {
                      if (inheritedExclusions.hasOwnProperty(exName)) {
                          if (inheritedExclusions[exName]) {
                              this.methods[exName] = inheritedExclusions[exName];
                          } else {
                              delete this.methods[exName];
                          }
                      }
                  }
                  var obj1979_init = function() {    // init of object on line 1926
                    initFun1980.call(this);
                    setLineNumber(1930);    // compilenode member
                    // call case 6: other requests
                    var call1989 = callmethod(var_sourceDictionary, "size", []);
                    this.data.size = call1989;
                  };
                  return obj1979_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
                };
                var obj1979_init = obj1979_build.call(inheritingObject, null, this, aliases, exclusions);
                return obj1979_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
              };    // end of method bindings$build(_,_,_)
              this.methods["bindings$build(3)"] = func1978;
              func1978.paramCounts = [0];
              func1978.paramNames = [];
              func1978.typeParamNames = [];
              func1978.definitionLine = 1924;
              func1978.definitionModule = "standardGraceClass";
              var func1990 = function(argcv) {    // method iterator
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1936);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call1992 = selfRequest(this, "values", []);
                var call1991 = callmethod(call1992, "iterator", []);
                // call case 2: outer request
                var call1993 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "Iterator", []);
                if (!Grace_isTrue(callmethod(call1993, "match(1)", [1], call1991)))
                    raiseTypeError(
                        "result of method iterator does not have type" + 
                        "Iterator⟦T⟧.", call1993, call1991);
                return call1991;
              };    // end of method iterator
              this.methods["iterator"] = func1990;
              func1990.paramCounts = [0];
              func1990.paramNames = [];
              func1990.typeParamNames = [];
              func1990.definitionLine = 1936;
              func1990.definitionModule = "standardGraceClass";
              var func1994 = function(argcv) {    // method bindingsIterator
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var ouc = emptyGraceObject("standardGrace.dictionary.empty.bindingsIterator", "standardGraceClass", 1937);
                var ouc_init = this.methods["bindingsIterator$build(3)"].call(this, null, ouc, [], []);
                ouc_init.call(ouc);
                return ouc;
              };    // end of method bindingsIterator
              this.methods["bindingsIterator"] = func1994;
              func1994.paramCounts = [0];
              func1994.paramNames = [];
              func1994.typeParamNames = [];
              func1994.definitionLine = 1937;
              func1994.definitionModule = "standardGraceClass";
              var func1995 = function(argcv, inheritingObject, aliases, exclusions) {    // method bindingsIterator$build(_,_,_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var obj1996_build = function(ignore, outerObj, aliases, exclusions) {
                  this.closureKeys = this.closureKeys || [];
                  this.closureKeys.push("outer_standardGraceClass_1937");
                  this.outer_standardGraceClass_1937 = outerObj;
                  var inheritedExclusions = { };
                  for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                      var exMeth = exclusions[eix];
                      inheritedExclusions[exMeth] = this.methods[exMeth];
                  }
                  this.data.imods = undefined;
                  var reader_imods1997 = function() {  // reader method imods
                      return this.data.imods;
                  };
                  reader_imods1997.isDef = true;
                  reader_imods1997.confidential = true;
                  this.methods["imods"] = reader_imods1997;
                  this.data.count = undefined;
                  var reader_count1998 = function() {  // reader method count
                      return this.data.count;
                  };
                  reader_count1998.isVar = true;
                  reader_count1998.confidential = true;
                  this.methods["count"] = reader_count1998;
                  var writer_count1998 = function(argcv, n) {   // writer method count:=(_)
                      this.data.count = n;
                      return GraceDone;
                  };
                  writer_count1998.confidential = true;
                  this.methods["count:=(1)"] = writer_count1998;
                  this.data.idx = undefined;
                  var reader_idx1999 = function() {  // reader method idx
                      return this.data.idx;
                  };
                  reader_idx1999.isVar = true;
                  reader_idx1999.confidential = true;
                  this.methods["idx"] = reader_idx1999;
                  var writer_idx1999 = function(argcv, n) {   // writer method idx:=(_)
                      this.data.idx = n;
                      return GraceDone;
                  };
                  writer_idx1999.confidential = true;
                  this.methods["idx:=(1)"] = writer_idx1999;
                  this.data.elt = undefined;
                  var reader_elt2000 = function() {  // reader method elt
                      return this.data.elt;
                  };
                  reader_elt2000.isVar = true;
                  reader_elt2000.confidential = true;
                  this.methods["elt"] = reader_elt2000;
                  var writer_elt2000 = function(argcv, n) {   // writer method elt:=(_)
                      this.data.elt = n;
                      return GraceDone;
                  };
                  writer_elt2000.confidential = true;
                  this.methods["elt:=(1)"] = writer_elt2000;
                  var func2001 = function(argcv) {    // method hasNext
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    setLineNumber(1943);    // compilenode member
                    // call case 2: outer request
                    var call2002 = selfRequest(this.outer_standardGraceClass_1937, "size", []);
                    // call case 4: self request
                    var call2003 = selfRequest(this, "count", []);
                    var opresult2004 = callmethod(call2002, "\u2265(1)", [1], call2003);
                    return opresult2004;
                  };    // end of method hasNext
                  this.methods["hasNext"] = func2001;
                  func2001.paramCounts = [0];
                  func2001.paramNames = [];
                  func2001.typeParamNames = [];
                  func2001.definitionLine = 1943;
                  func2001.definitionModule = "standardGraceClass";
                  var func2005 = function(argcv) {    // method next
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    var if2006 = GraceDone;
                    setLineNumber(1945);    // compilenode member
                    // call case 4: self request
                    var call2007 = selfRequest(this, "imods", []);
                    // call case 2: outer request
                    var call2008 = selfRequest(this.outer_standardGraceClass_1937, "mods", []);
                    var opresult2009 = callmethod(call2007, "\u2260(1)", [1], call2008);
                    if (Grace_isTrue(opresult2009)) {
                      setLineNumber(1946);    // compilenode member
                      // call case 2: outer request
                      var call2011 = selfRequest(this.outer_standardGraceClass_1937, "asString", []);
                      // call case 6: other requests
                      // call case 2: outer request
                      var call2012 = selfRequest(this.outer_standardGraceClass_1937.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "ConcurrentModification", []);
                      var call2010 = callmethod(call2012, "raise(1)", [1], call2011);
                      if2006 = call2010;
                    }
                    var if2013 = GraceDone;
                    setLineNumber(1948);    // compilenode member
                    // call case 2: outer request
                    var call2014 = selfRequest(this.outer_standardGraceClass_1937, "size", []);
                    // call case 4: self request
                    var call2015 = selfRequest(this, "count", []);
                    var opresult2016 = callmethod(call2014, "<(1)", [1], call2015);
                    if (Grace_isTrue(opresult2016)) {
                      var string2018 = new GraceString("over ");
                      // call case 2: outer request
                      var call2019 = selfRequest(this.outer_standardGraceClass_1937, "asString", []);
                      var opresult2020 = callmethod(string2018, "++(1)", [1], call2019);
                      var string2021 = new GraceString("");
                      var opresult2022 = callmethod(opresult2020, "++(1)", [1], string2021);
                      // call case 6: other requests
                      // call case 2: outer request
                      var call2023 = selfRequest(this.outer_standardGraceClass_1937.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "IteratorExhausted", []);
                      var call2017 = callmethod(call2023, "raise(1)", [1], opresult2022);
                      if2013 = call2017;
                    }
                    setLineNumber(1949);    // compilenode block
                    var block2025 = new GraceBlock(this, 1949, 0);
                    var matches2026 = function() {
                      setModuleName("standardGraceClass");
                      return true;
                    };
                    block2025.guard = matches2026;
                    block2025.real = function() {
                      setLineNumber(1950);    // compilenode member
                      // call case 4: self request
                      var call2029 = selfRequest(this, "idx", []);
                      // call case 6: other requests
                      // call case 2: outer request
                      var call2030 = selfRequest(this.outer_standardGraceClass_1937, "inner", []);
                      var call2028 = callmethod(call2030, "at(1)", [1], call2029);
                      // call case 4: self request
                      var call2027 = selfRequest(this, "elt:=(1)", [1], call2028);
                      setLineNumber(1951);    // compilenode member
                      // call case 2: outer request
                      var call2031 = selfRequest(this.outer_standardGraceClass_1937.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "unused", []);
                      // call case 4: self request
                      var call2032 = selfRequest(this, "elt", []);
                      var opresult2033 = callmethod(call2031, "==(1)", [1], call2032);
                      // call case 2: outer request
                      var call2034 = selfRequest(this.outer_standardGraceClass_1937.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "removed", []);
                      // call case 4: self request
                      var call2035 = selfRequest(this, "elt", []);
                      var opresult2036 = callmethod(call2034, "==(1)", [1], call2035);
                      var opresult2037 = callmethod(opresult2033, "||(1)", [1], opresult2036);
                      return opresult2037;
                    };
                    setLineNumber(1952);    // compilenode block
                    var block2038 = new GraceBlock(this, 1952, 0);
                    var matches2039 = function() {
                      setModuleName("standardGraceClass");
                      return true;
                    };
                    block2038.guard = matches2039;
                    block2038.real = function() {
                      setLineNumber(1953);    // compilenode member
                      // call case 4: self request
                      var call2041 = selfRequest(this, "idx", []);
                      var sum2042 = callmethod(call2041, "+(1)", [1], new GraceNum(1));
                      // call case 4: self request
                      var call2040 = selfRequest(this, "idx:=(1)", [1], sum2042);
                      return call2040;
                    };
                    // call case 5: prelude request
                    var call2024 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block2025, block2038);
                    setLineNumber(1955);    // compilenode member
                    // call case 4: self request
                    var call2044 = selfRequest(this, "count", []);
                    var sum2045 = callmethod(call2044, "+(1)", [1], new GraceNum(1));
                    // call case 4: self request
                    var call2043 = selfRequest(this, "count:=(1)", [1], sum2045);
                    setLineNumber(1956);    // compilenode member
                    // call case 4: self request
                    var call2047 = selfRequest(this, "idx", []);
                    var sum2048 = callmethod(call2047, "+(1)", [1], new GraceNum(1));
                    // call case 4: self request
                    var call2046 = selfRequest(this, "idx:=(1)", [1], sum2048);
                    setLineNumber(1957);    // compilenode member
                    // call case 4: self request
                    var call2049 = selfRequest(this, "elt", []);
                    return call2049;
                  };    // end of method next
                  this.methods["next"] = func2005;
                  func2005.paramCounts = [0];
                  func2005.paramNames = [];
                  func2005.typeParamNames = [];
                  func2005.definitionLine = 1944;
                  func2005.definitionModule = "standardGraceClass";
                  this.mutable = true;
                  for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                      var oneAlias = aliases[aix];
                      this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
                  }
                  for (var exName in inheritedExclusions) {
                      if (inheritedExclusions.hasOwnProperty(exName)) {
                          if (inheritedExclusions[exName]) {
                              this.methods[exName] = inheritedExclusions[exName];
                          } else {
                              delete this.methods[exName];
                          }
                      }
                  }
                  var obj1996_init = function() {    // init of object on line 1937
                    setLineNumber(1939);    // compilenode member
                    // call case 2: outer request
                    var call2050 = selfRequest(this.outer_standardGraceClass_1937, "mods", []);
                    this.data.imods = call2050;
                    if (!Grace_isTrue(callmethod(var_Number, "match(1)", [1], call2050)))
                        raiseTypeError(
                          "value of def imods is not of type Number",
                          var_Number, call2050);
                    setLineNumber(1940);    // compilenode num
                    this.data.count = new GraceNum(1);
                    setLineNumber(1941);    // compilenode num
                    this.data.idx = new GraceNum(0);
                  };
                  return obj1996_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
                };
                var obj1996_init = obj1996_build.call(inheritingObject, null, this, aliases, exclusions);
                return obj1996_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
              };    // end of method bindingsIterator$build(_,_,_)
              this.methods["bindingsIterator$build(3)"] = func1995;
              func1995.paramCounts = [0];
              func1995.paramNames = [];
              func1995.typeParamNames = [];
              func1995.definitionLine = 1937;
              func1995.definitionModule = "standardGraceClass";
              var func2051 = function(argcv) {    // method expand
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1961);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call2053 = selfRequest(this, "inner", []);
                var call2052 = callmethod(call2053, "size", []);
                var var_c = call2052;
                setLineNumber(1962);    // compilenode num
                var prod2054 = callmethod(var_c, "*(1)", [1], new GraceNum(2));
                var var_n = prod2054;
                setLineNumber(1963);    // compilenode member
                // call case 4: self request
                var call2055 = selfRequest(this, "inner", []);
                var var_oldInner = call2055;
                setLineNumber(1964);    // compilenode identifier
                // call case 6: other requests
                // call case 6: other requests
                var call2058 = callmethod(var___95__prelude, "primitiveArray", []);
                var call2057 = callmethod(call2058, "new(1)", [1], var_n);
                // call case 4: self request
                var call2056 = selfRequest(this, "inner:=(1)", [1], call2057);
                setLineNumber(1965);    // compilenode num
                var diff2060 = callmethod(var_n, "-(1)", [1], new GraceNum(1));
                var opresult2061 = callmethod(new GraceNum(0), "..(1)", [1], diff2060);
                var block2062 = new GraceBlock(this, 1965, 1);
                setLineNumber(1);    // compilenode identifier
                var matches2063 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1965);    // block matches function
                  return true;
                };
                block2062.guard = matches2063;
                block2062.real = function(var_i) {
                  setLineNumber(1966);    // compilenode member
                  // call case 2: outer request
                  var call2065 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "unused", []);
                  // call case 6: other requests
                  // call case 4: self request
                  var call2066 = selfRequest(this, "inner", []);
                  var call2064 = callmethod(call2066, "at(1)put(1)", [1, 1], var_i, call2065);
                  return call2064;
                };
                // call case 5: prelude request
                var call2059 = callmethod(var_prelude, "for(1)do(1)", [1, 1], opresult2061, block2062);
                setLineNumber(1968);    // compilenode num
                // call case 4: self request
                var call2067 = selfRequest(this, "numBindings:=(1)", [1], new GraceNum(0));
                setLineNumber(1969);    // compilenode num
                var diff2069 = callmethod(var_c, "-(1)", [1], new GraceNum(1));
                var opresult2070 = callmethod(new GraceNum(0), "..(1)", [1], diff2069);
                var block2071 = new GraceBlock(this, 1969, 1);
                setLineNumber(1);    // compilenode identifier
                var matches2072 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1969);    // block matches function
                  return true;
                };
                block2071.guard = matches2072;
                block2071.real = function(var_i) {
                  setLineNumber(1970);    // compilenode identifier
                  // call case 6: other requests
                  var call2073 = callmethod(var_oldInner, "at(1)", [1], var_i);
                  var var_a = call2073;
                  var if2074 = GraceDone;
                  setLineNumber(1971);    // compilenode member
                  // call case 2: outer request
                  var call2075 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "unused", []);
                  var opresult2076 = callmethod(call2075, "\u2260(1)", [1], var_a);
                  // call case 2: outer request
                  var call2077 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "removed", []);
                  var opresult2078 = callmethod(call2077, "\u2260(1)", [1], var_a);
                  var opresult2079 = callmethod(opresult2076, "&&(1)", [1], opresult2078);
                  if (Grace_isTrue(opresult2079)) {
                    setLineNumber(1972);    // compilenode member
                    // call case 6: other requests
                    var call2081 = callmethod(var_a, "key", []);
                    // call case 6: other requests
                    var call2082 = callmethod(var_a, "value", []);
                    // call case 4: self request
                    var call2080 = selfRequest(this, "at(1)put(1)", [1, 1], call2081, call2082);
                    if2074 = call2080;
                  }
                  return if2074;
                };
                // call case 5: prelude request
                var call2068 = callmethod(var_prelude, "for(1)do(1)", [1, 1], opresult2070, block2071);
                return call2068;
              };    // end of method expand
              func2051.confidential = true;
              this.methods["expand"] = func2051;
              func2051.paramCounts = [0];
              func2051.paramNames = [];
              func2051.typeParamNames = [];
              func2051.definitionLine = 1960;
              func2051.definitionModule = "standardGraceClass";
              var func2083 = function(argcv, var_block2) {    // method keysAndValuesDo(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1977);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call2086 = selfRequest(this, "inner", []);
                var call2085 = callmethod(call2086, "size", []);
                var diff2087 = callmethod(call2085, "-(1)", [1], new GraceNum(1));
                var opresult2088 = callmethod(new GraceNum(0), "..(1)", [1], diff2087);
                var block2089 = new GraceBlock(this, 1977, 1);
                setLineNumber(1);    // compilenode identifier
                var matches2090 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1977);    // block matches function
                  return true;
                };
                block2089.guard = matches2090;
                block2089.real = function(var_i) {
                  setLineNumber(1978);    // compilenode identifier
                  // call case 6: other requests
                  // call case 4: self request
                  var call2092 = selfRequest(this, "inner", []);
                  var call2091 = callmethod(call2092, "at(1)", [1], var_i);
                  var var_a = call2091;
                  var if2093 = GraceDone;
                  setLineNumber(1979);    // compilenode member
                  // call case 2: outer request
                  var call2094 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "unused", []);
                  var opresult2095 = callmethod(call2094, "\u2260(1)", [1], var_a);
                  // call case 2: outer request
                  var call2096 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "removed", []);
                  var opresult2097 = callmethod(call2096, "\u2260(1)", [1], var_a);
                  var opresult2098 = callmethod(opresult2095, "&&(1)", [1], opresult2097);
                  if (Grace_isTrue(opresult2098)) {
                    setLineNumber(1980);    // compilenode member
                    // call case 6: other requests
                    var call2100 = callmethod(var_a, "key", []);
                    // call case 6: other requests
                    var call2101 = callmethod(var_a, "value", []);
                    // call case 6: other requests
                    var call2099 = callmethod(var_block2, "apply(2)", [2], call2100, call2101);
                    if2093 = call2099;
                  }
                  return if2093;
                };
                // call case 5: prelude request
                var call2084 = callmethod(var_prelude, "for(1)do(1)", [1, 1], opresult2088, block2089);
                return call2084;
              };    // end of method keysAndValuesDo(_)
              this.methods["keysAndValuesDo(1)"] = func2083;
              func2083.paramCounts = [1];
              func2083.paramNames = ["block2"];
              func2083.typeParamNames = [];
              func2083.definitionLine = 1976;
              func2083.definitionModule = "standardGraceClass";
              var func2102 = function(argcv, var_block1) {    // method keysDo(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1985);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call2105 = selfRequest(this, "inner", []);
                var call2104 = callmethod(call2105, "size", []);
                var diff2106 = callmethod(call2104, "-(1)", [1], new GraceNum(1));
                var opresult2107 = callmethod(new GraceNum(0), "..(1)", [1], diff2106);
                var block2108 = new GraceBlock(this, 1985, 1);
                setLineNumber(1);    // compilenode identifier
                var matches2109 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1985);    // block matches function
                  return true;
                };
                block2108.guard = matches2109;
                block2108.real = function(var_i) {
                  setLineNumber(1986);    // compilenode identifier
                  // call case 6: other requests
                  // call case 4: self request
                  var call2111 = selfRequest(this, "inner", []);
                  var call2110 = callmethod(call2111, "at(1)", [1], var_i);
                  var var_a = call2110;
                  var if2112 = GraceDone;
                  setLineNumber(1987);    // compilenode member
                  // call case 2: outer request
                  var call2113 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "unused", []);
                  var opresult2114 = callmethod(call2113, "\u2260(1)", [1], var_a);
                  // call case 2: outer request
                  var call2115 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "removed", []);
                  var opresult2116 = callmethod(call2115, "\u2260(1)", [1], var_a);
                  var opresult2117 = callmethod(opresult2114, "&&(1)", [1], opresult2116);
                  if (Grace_isTrue(opresult2117)) {
                    setLineNumber(1988);    // compilenode member
                    // call case 6: other requests
                    var call2119 = callmethod(var_a, "key", []);
                    // call case 6: other requests
                    var call2118 = callmethod(var_block1, "apply(1)", [1], call2119);
                    if2112 = call2118;
                  }
                  return if2112;
                };
                // call case 5: prelude request
                var call2103 = callmethod(var_prelude, "for(1)do(1)", [1, 1], opresult2107, block2108);
                return call2103;
              };    // end of method keysDo(_)
              this.methods["keysDo(1)"] = func2102;
              func2102.paramCounts = [1];
              func2102.paramNames = ["block1"];
              func2102.typeParamNames = [];
              func2102.definitionLine = 1984;
              func2102.definitionModule = "standardGraceClass";
              var func2120 = function(argcv, var_block1) {    // method valuesDo(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1993);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call2123 = selfRequest(this, "inner", []);
                var call2122 = callmethod(call2123, "size", []);
                var diff2124 = callmethod(call2122, "-(1)", [1], new GraceNum(1));
                var opresult2125 = callmethod(new GraceNum(0), "..(1)", [1], diff2124);
                var block2126 = new GraceBlock(this, 1993, 1);
                setLineNumber(1);    // compilenode identifier
                var matches2127 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1993);    // block matches function
                  return true;
                };
                block2126.guard = matches2127;
                block2126.real = function(var_i) {
                  setLineNumber(1994);    // compilenode identifier
                  // call case 6: other requests
                  // call case 4: self request
                  var call2129 = selfRequest(this, "inner", []);
                  var call2128 = callmethod(call2129, "at(1)", [1], var_i);
                  var var_a = call2128;
                  var if2130 = GraceDone;
                  setLineNumber(1995);    // compilenode member
                  // call case 2: outer request
                  var call2131 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "unused", []);
                  var opresult2132 = callmethod(call2131, "\u2260(1)", [1], var_a);
                  // call case 2: outer request
                  var call2133 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "removed", []);
                  var opresult2134 = callmethod(call2133, "\u2260(1)", [1], var_a);
                  var opresult2135 = callmethod(opresult2132, "&&(1)", [1], opresult2134);
                  if (Grace_isTrue(opresult2135)) {
                    setLineNumber(1996);    // compilenode member
                    // call case 6: other requests
                    var call2137 = callmethod(var_a, "value", []);
                    // call case 6: other requests
                    var call2136 = callmethod(var_block1, "apply(1)", [1], call2137);
                    if2130 = call2136;
                  }
                  return if2130;
                };
                // call case 5: prelude request
                var call2121 = callmethod(var_prelude, "for(1)do(1)", [1, 1], opresult2125, block2126);
                return call2121;
              };    // end of method valuesDo(_)
              this.methods["valuesDo(1)"] = func2120;
              func2120.paramCounts = [1];
              func2120.paramNames = ["block1"];
              func2120.typeParamNames = [];
              func2120.definitionLine = 1992;
              func2120.definitionModule = "standardGraceClass";
              var func2138 = function(argcv, var_block1) {    // method do(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2000);    // compilenode identifier
                // call case 4: self request
                var call2139 = selfRequest(this, "valuesDo(1)", [1], var_block1);
                return call2139;
              };    // end of method do(_)
              this.methods["do(1)"] = func2138;
              func2138.paramCounts = [1];
              func2138.paramNames = ["block1"];
              func2138.typeParamNames = [];
              func2138.definitionLine = 2000;
              func2138.definitionModule = "standardGraceClass";
              var func2140 = function(argcv, var_other) {    // method ==(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2003);    // compilenode identifier
                var cases2141 = [];
                setLineNumber(2004);    // compilenode block
                var block2142 = new GraceBlock(this, 2004, 1);
                // call case 2: outer request
                var call2143 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "ComparableToDictionary", []);
                block2142.paramTypes = [call2143];
                var matches2144 = function(var_o) {
                  setModuleName("standardGraceClass");
                  // call case 2: outer request
                  var call2145 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "ComparableToDictionary", []);
                  if (!Grace_isTrue(callmethod(call2145, "match(1)", [1], var_o)))
                      return false;
                  return true;
                };
                block2142.guard = matches2144;
                block2142.real = function(var_o) {
                  var if2146 = GraceDone;
                  setLineNumber(2005);    // compilenode member
                  // call case 4: self request
                  var call2147 = selfRequest(this, "size", []);
                  // call case 6: other requests
                  var call2148 = callmethod(var_o, "size", []);
                  var opresult2149 = callmethod(call2147, "\u2260(1)", [1], call2148);
                  if (Grace_isTrue(opresult2149)) {
                    throw new ReturnException(GraceFalse, returnTarget);
                  }
                  setLineNumber(2006);    // compilenode block
                  var block2151 = new GraceBlock(this, 2006, 2);
                  setLineNumber(1);    // compilenode identifier
                  var matches2152 = function(var_k, var_v) {
                    setModuleName("standardGraceClass");
                    setLineNumber(2006);    // block matches function
                    return true;
                  };
                  block2151.guard = matches2152;
                  block2151.real = function(var_k, var_v) {
                    var if2153 = GraceDone;
                    setLineNumber(2007);    // compilenode block
                    var block2155 = new GraceBlock(this, 2007, 0);
                    var matches2156 = function() {
                      setModuleName("standardGraceClass");
                      return true;
                    };
                    block2155.guard = matches2156;
                    block2155.real = function() {
                      throw new ReturnException(GraceFalse, returnTarget);
                      return undefined;
                    };
                    // call case 6: other requests
                    var call2154 = callmethod(var_o, "at(1)ifAbsent(1)", [1, 1], var_k, block2155);
                    var opresult2157 = callmethod(call2154, "\u2260(1)", [1], var_v);
                    if (Grace_isTrue(opresult2157)) {
                      setLineNumber(2008);    // compilenode identifier
                      throw new ReturnException(GraceFalse, returnTarget);
                    }
                    return if2153;
                  };
                  // call case 4: self request
                  var call2150 = selfRequest(this, "keysAndValuesDo(1)", [1], block2151);
                  setLineNumber(2011);    // compilenode identifier
                  throw new ReturnException(GraceTrue, returnTarget);
                  return undefined;
                };
                cases2141.push(block2142);
                setLineNumber(2013);    // compilenode block
                var block2158 = new GraceBlock(this, 2013, 1);
                setLineNumber(1);    // compilenode identifier
                var matches2159 = function(var___95____95__28) {
                  setModuleName("standardGraceClass");
                  setLineNumber(2013);    // block matches function
                  return true;
                };
                block2158.guard = matches2159;
                block2158.real = function(var___95____95__28) {
                  setLineNumber(2014);    // compilenode identifier
                  throw new ReturnException(GraceFalse, returnTarget);
                  return undefined;
                };
                cases2141.push(block2158);
                setLineNumber(2003);    // compilematchcase
                var matchres2141 = matchCase(var_other,cases2141,false);
                setModuleName("standardGraceClass");
                return matchres2141;
              };    // end of method ==(_)
              this.methods["==(1)"] = func2140;
              func2140.paramCounts = [1];
              func2140.paramNames = ["other"];
              func2140.typeParamNames = [];
              func2140.definitionLine = 2002;
              func2140.definitionModule = "standardGraceClass";
              var func2160 = function(argcv) {    // method copy
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2019);    // compilenode member
                // call case 6: other requests
                // call case 2: outer request
                var call2162 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "dictionary", []);
                var call2161 = callmethod(call2162, "empty", []);
                var var_newCopy = call2161;
                setLineNumber(2020);    // compilenode block
                var block2164 = new GraceBlock(this, 2020, 2);
                setLineNumber(1);    // compilenode identifier
                var matches2165 = function(var_k, var_v) {
                  setModuleName("standardGraceClass");
                  setLineNumber(2020);    // block matches function
                  return true;
                };
                block2164.guard = matches2165;
                block2164.real = function(var_k, var_v) {
                  setLineNumber(2021);    // compilenode identifier
                  // call case 6: other requests
                  var call2166 = callmethod(var_newCopy, "at(1)put(1)", [1, 1], var_k, var_v);
                  return call2166;
                };
                // call case 4: self request
                var call2163 = selfRequest(this, "keysAndValuesDo(1)", [1], block2164);
                setLineNumber(2023);    // compilenode identifier
                return var_newCopy;
              };    // end of method copy
              this.methods["copy"] = func2160;
              func2160.paramCounts = [0];
              func2160.paramNames = [];
              func2160.typeParamNames = [];
              func2160.definitionLine = 2018;
              func2160.definitionModule = "standardGraceClass";
              var func2167 = function(argcv) {     // accessor method asDictionary
                return this;
              };    // end of method asDictionary
              this.methods["asDictionary"] = func2167;
              func2167.paramCounts = [0];
              func2167.paramNames = [];
              func2167.typeParamNames = [];
              func2167.definitionLine = 2026;
              func2167.definitionModule = "standardGraceClass";
              setLineNumber(2027);    // compilenode identifier
              var func2168 = function(argcv, var_other) {    // method ++(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2031);    // compilenode member
                // call case 4: self request
                var call2169 = selfRequest(this, "copy", []);
                var var_newDict = call2169;
                setLineNumber(2032);    // compilenode block
                var block2171 = new GraceBlock(this, 2032, 2);
                setLineNumber(1);    // compilenode identifier
                var matches2172 = function(var_k, var_v) {
                  setModuleName("standardGraceClass");
                  setLineNumber(2032);    // block matches function
                  return true;
                };
                block2171.guard = matches2172;
                block2171.real = function(var_k, var_v) {
                  setLineNumber(2033);    // compilenode identifier
                  // call case 6: other requests
                  var call2173 = callmethod(var_newDict, "at(1)put(1)", [1, 1], var_k, var_v);
                  return call2173;
                };
                // call case 6: other requests
                setLineNumber(2032);    // compilenode identifier
                var call2170 = callmethod(var_other, "keysAndValuesDo(1)", [1], block2171);
                setLineNumber(2035);    // compilenode identifier
                return var_newDict;
                return undefined;
              };    // end of method ++(_)
              this.methods["++(1)"] = func2168;
              func2168.paramCounts = [1];
              func2168.paramNames = ["other"];
              func2168.typeParamNames = [];
              func2168.definitionLine = 2030;
              func2168.definitionModule = "standardGraceClass";
              var func2174 = function(argcv, var_other) {    // method --(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2039);    // compilenode member
                // call case 6: other requests
                // call case 2: outer request
                var call2176 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "dictionary", []);
                var call2175 = callmethod(call2176, "empty", []);
                var var_newDict = call2175;
                setLineNumber(2040);    // compilenode block
                var block2178 = new GraceBlock(this, 2040, 2);
                setLineNumber(1);    // compilenode identifier
                var matches2179 = function(var_k, var_v) {
                  setModuleName("standardGraceClass");
                  setLineNumber(2040);    // block matches function
                  return true;
                };
                block2178.guard = matches2179;
                block2178.real = function(var_k, var_v) {
                  var if2180 = GraceDone;
                  setLineNumber(2041);    // compilenode call
                  // call case 6: other requests
                  // call case 6: other requests
                  var call2182 = callmethod(var_other, "containsKey(1)", [1], var_k);
                  var call2181 = callmethod(call2182, "prefix!", [0]);
                  if (Grace_isTrue(call2181)) {
                    setLineNumber(2042);    // compilenode identifier
                    // call case 6: other requests
                    var call2183 = callmethod(var_newDict, "at(1)put(1)", [1, 1], var_k, var_v);
                    if2180 = call2183;
                  }
                  return if2180;
                };
                // call case 4: self request
                var call2177 = selfRequest(this, "keysAndValuesDo(1)", [1], block2178);
                setLineNumber(2045);    // compilenode identifier
                return var_newDict;
                return undefined;
              };    // end of method --(_)
              this.methods["--(1)"] = func2174;
              func2174.paramCounts = [1];
              func2174.paramNames = ["other"];
              func2174.typeParamNames = [];
              func2174.definitionLine = 2038;
              func2174.definitionModule = "standardGraceClass";
              this.mutable = true;
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj1535_init = function() {    // init of object on line 1686
                initFun1536.call(this);
                setLineNumber(1688);    // compilenode num
                this.data.mods = new GraceNum(0);
                setLineNumber(1689);    // compilenode num
                this.data.numBindings = new GraceNum(0);
                setLineNumber(1690);    // compilenode num
                // call case 6: other requests
                // call case 6: other requests
                var call2185 = callmethod(var___95__prelude, "primitiveArray", []);
                var call2184 = callmethod(call2185, "new(1)", [1], new GraceNum(8));
                this.data.inner = call2184;
                setLineNumber(1691);    // compilenode member
                // call case 6: other requests
                // call case 4: self request
                var call2188 = selfRequest(this, "inner", []);
                var call2187 = callmethod(call2188, "size", []);
                var diff2189 = callmethod(call2187, "-(1)", [1], new GraceNum(1));
                var opresult2190 = callmethod(new GraceNum(0), "..(1)", [1], diff2189);
                var block2191 = new GraceBlock(this, 1691, 1);
                setLineNumber(1);    // compilenode identifier
                var matches2192 = function(var_i) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1691);    // block matches function
                  return true;
                };
                block2191.guard = matches2192;
                block2191.real = function(var_i) {
                  setLineNumber(1692);    // compilenode member
                  // call case 2: outer request
                  var call2194 = selfRequest(this.outer_standardGraceClass_1686.outer_standardGraceClass_1676, "unused", []);
                  // call case 6: other requests
                  // call case 4: self request
                  var call2195 = selfRequest(this, "inner", []);
                  var call2193 = callmethod(call2195, "at(1)put(1)", [1, 1], var_i, call2194);
                  return call2193;
                };
                // call case 5: prelude request
                var call2186 = callmethod(var_prelude, "for(1)do(1)", [1, 1], opresult2190, block2191);
              };
              return obj1535_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj1535_init = obj1535_build.call(inheritingObject, null, this, aliases, exclusions);
            return obj1535_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method empty$build(_,_,_)
          this.methods["empty$build(3)"] = func1534;
          func1534.paramCounts = [0];
          func1534.paramNames = [];
          func1534.typeParamNames = [];
          func1534.definitionLine = 1686;
          func1534.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj1522_init = function() {    // init of object on line 1676
          };
          return obj1522_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj1522_init = obj1522_build.call(inheritingObject, null, this, aliases, exclusions, var_K, var_T);
        return obj1522_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
      };    // end of method dictionary$build(_,_,_)
      this.methods["dictionary$build(3)"] = func1521;
      func1521.paramCounts = [0];
      func1521.paramNames = [];
      func1521.typeParamNames = ["K", "T"];
      func1521.definitionLine = 1676;
      func1521.definitionModule = "standardGraceClass";
      this.data.range = undefined;
      var reader_range2196 = function() {  // reader method range
          return this.data.range;
      };
      reader_range2196.isDef = true;
      this.methods["range"] = reader_range2196;
      var func2197 = function(argcv, var_arg, var_T) {    // method sequence(_)
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_T === undefined) var_T = var_Unknown;
        var numArgs = arguments.length - 1 - 0;
        if ((numArgs > 1) && (numArgs < 2)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method sequence(_) expects 1 type parameter, but was given " + (numArgs - 1)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        setLineNumber(2248);    // compilenode identifier
        // call case 6: other requests
        // call case 4: self request
        var call2199 = selfRequest(this, "sequence", []);
        var call2198 = callmethod(call2199, "withAll(1)", [1], var_arg);
        return call2198;
      };    // end of method sequence(_)
      this.methods["sequence(1)"] = func2197;
      func2197.paramCounts = [1];
      func2197.paramNames = ["arg"];
      func2197.typeParamNames = ["T"];
      func2197.definitionLine = 2248;
      func2197.definitionModule = "standardGraceClass";
      var func2200 = function(argcv, var_arg, var_T) {    // method list(_)
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_T === undefined) var_T = var_Unknown;
        var numArgs = arguments.length - 1 - 0;
        if ((numArgs > 1) && (numArgs < 2)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method list(_) expects 1 type parameter, but was given " + (numArgs - 1)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        setLineNumber(2249);    // compilenode identifier
        // call case 6: other requests
        // call case 4: self request
        var call2202 = selfRequest(this, "list", []);
        var call2201 = callmethod(call2202, "withAll(1)", [1], var_arg);
        return call2201;
      };    // end of method list(_)
      this.methods["list(1)"] = func2200;
      func2200.paramCounts = [1];
      func2200.paramNames = ["arg"];
      func2200.typeParamNames = ["T"];
      func2200.definitionLine = 2249;
      func2200.definitionModule = "standardGraceClass";
      var func2203 = function(argcv, var_T) {    // method emptyList
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_T === undefined) var_T = var_Unknown;
        var numArgs = arguments.length - 1 - 0;
        if ((numArgs > 0) && (numArgs < 1)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method emptyList expects 1 type parameter, but was given " + (numArgs - 0)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        setLineNumber(2250);    // compilenode member
        // call case 6: other requests
        // call case 4: self request
        var call2205 = selfRequest(this, "list", []);
        var call2204 = callmethod(call2205, "empty", []);
        return call2204;
      };    // end of method emptyList
      this.methods["emptyList"] = func2203;
      func2203.paramCounts = [0];
      func2203.paramNames = [];
      func2203.typeParamNames = ["T"];
      func2203.definitionLine = 2250;
      func2203.definitionModule = "standardGraceClass";
      var func2206 = function(argcv, var_arg, var_T) {    // method set(_)
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_T === undefined) var_T = var_Unknown;
        var numArgs = arguments.length - 1 - 0;
        if ((numArgs > 1) && (numArgs < 2)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method set(_) expects 1 type parameter, but was given " + (numArgs - 1)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        setLineNumber(2251);    // compilenode identifier
        // call case 6: other requests
        // call case 4: self request
        var call2208 = selfRequest(this, "set", []);
        var call2207 = callmethod(call2208, "withAll(1)", [1], var_arg);
        return call2207;
      };    // end of method set(_)
      this.methods["set(1)"] = func2206;
      func2206.paramCounts = [1];
      func2206.paramNames = ["arg"];
      func2206.typeParamNames = ["T"];
      func2206.definitionLine = 2251;
      func2206.definitionModule = "standardGraceClass";
      var func2209 = function(argcv, var_T) {    // method emptySet
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_T === undefined) var_T = var_Unknown;
        var numArgs = arguments.length - 1 - 0;
        if ((numArgs > 0) && (numArgs < 1)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method emptySet expects 1 type parameter, but was given " + (numArgs - 0)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        setLineNumber(2252);    // compilenode member
        // call case 6: other requests
        // call case 4: self request
        var call2211 = selfRequest(this, "set", []);
        var call2210 = callmethod(call2211, "empty", []);
        return call2210;
      };    // end of method emptySet
      this.methods["emptySet"] = func2209;
      func2209.paramCounts = [0];
      func2209.paramNames = [];
      func2209.typeParamNames = ["T"];
      func2209.definitionLine = 2252;
      func2209.definitionModule = "standardGraceClass";
      var func2212 = function(argcv, var_arg, var_K, var_T) {    // method dictionary(_)
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_K === undefined) var_K = var_Unknown;
        if (var_T === undefined) var_T = var_Unknown;
        var numArgs = arguments.length - 1 - 0;
        if ((numArgs > 1) && (numArgs < 3)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method dictionary(_) expects 2 type parameters, but was given " + (numArgs - 1)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        setLineNumber(2253);    // compilenode identifier
        // call case 6: other requests
        // call case 4: self request
        var call2214 = selfRequest(this, "dictionary", []);
        var call2213 = callmethod(call2214, "withAll(1)", [1], var_arg);
        return call2213;
      };    // end of method dictionary(_)
      this.methods["dictionary(1)"] = func2212;
      func2212.paramCounts = [1];
      func2212.paramNames = ["arg"];
      func2212.typeParamNames = ["K", "T"];
      func2212.definitionLine = 2253;
      func2212.definitionModule = "standardGraceClass";
      var func2215 = function(argcv, var_K, var_T) {    // method emptyDictionary
        var returnTarget = invocationCount;
        invocationCount++;
        // Start type parameters
        if (var_K === undefined) var_K = var_Unknown;
        if (var_T === undefined) var_T = var_Unknown;
        var numArgs = arguments.length - 1 - 0;
        if ((numArgs > 0) && (numArgs < 2)) {
            throw new GraceExceptionPacket(RequestErrorObject, 
                new GraceString("method emptyDictionary expects 2 type parameters, but was given " + (numArgs - 0)));
        }
        // End type parameters
        setModuleName("standardGraceClass");
        setLineNumber(2254);    // compilenode member
        // call case 6: other requests
        // call case 4: self request
        var call2217 = selfRequest(this, "dictionary", []);
        var call2216 = callmethod(call2217, "empty", []);
        return call2216;
      };    // end of method emptyDictionary
      this.methods["emptyDictionary"] = func2215;
      func2215.paramCounts = [0];
      func2215.paramNames = [];
      func2215.typeParamNames = ["K", "T"];
      func2215.definitionLine = 2254;
      func2215.definitionModule = "standardGraceClass";
      for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
          var oneAlias = aliases[aix];
          this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
      }
      for (var exName in inheritedExclusions) {
          if (inheritedExclusions.hasOwnProperty(exName)) {
              if (inheritedExclusions[exName]) {
                  this.methods[exName] = inheritedExclusions[exName];
              } else {
                  delete this.methods[exName];
              }
          }
      }
      var obj2_init = function() {    // init of object on line 196
        setLineNumber(198);    // compilenode member
        // call case 6: other requests
        var call2218 = callmethod(var___95__prelude, "BoundsError", []);
        this.data.BoundsError = call2218;
        setLineNumber(199);    // compilenode member
        // call case 6: other requests
        var call2219 = callmethod(var___95__prelude, "EnvironmentException", []);
        this.data.EnvironmentException = call2219;
        setLineNumber(200);    // compilenode member
        // call case 6: other requests
        var call2220 = callmethod(var___95__prelude, "Exception", []);
        this.data.Exception = call2220;
        setLineNumber(201);    // compilenode member
        // call case 6: other requests
        var call2221 = callmethod(var___95__prelude, "NoSuchMethod", []);
        this.data.NoSuchMethod = call2221;
        setLineNumber(202);    // compilenode member
        // call case 6: other requests
        var call2222 = callmethod(var___95__prelude, "ProgrammingError", []);
        this.data.ProgrammingError = call2222;
        setLineNumber(203);    // compilenode member
        // call case 6: other requests
        var call2223 = callmethod(var___95__prelude, "RequestError", []);
        this.data.RequestError = call2223;
        setLineNumber(204);    // compilenode member
        // call case 6: other requests
        var call2224 = callmethod(var___95__prelude, "ResourceException", []);
        this.data.ResourceException = call2224;
        setLineNumber(205);    // compilenode member
        // call case 6: other requests
        var call2225 = callmethod(var___95__prelude, "RuntimeError", []);
        this.data.RuntimeError = call2225;
        setLineNumber(206);    // compilenode member
        // call case 6: other requests
        var call2226 = callmethod(var___95__prelude, "TypeError", []);
        this.data.TypeError = call2226;
        setLineNumber(207);    // compilenode member
        // call case 6: other requests
        var call2227 = callmethod(var___95__prelude, "UninitializedVariable", []);
        this.data.UninitializedVariable = call2227;
        setLineNumber(209);    // compilenode string
        var string2229 = new GraceString("ConcurrentModification");
        // call case 6: other requests
        // call case 4: self request
        var call2230 = selfRequest(this, "ProgrammingError", []);
        var call2228 = callmethod(call2230, "refine(1)", [1], string2229);
        this.data.ConcurrentModification = call2228;
        setLineNumber(210);    // compilenode string
        var string2232 = new GraceString("IteratorExhausted");
        // call case 6: other requests
        // call case 4: self request
        var call2233 = selfRequest(this, "ProgrammingError", []);
        var call2231 = callmethod(call2233, "refine(1)", [1], string2232);
        this.data.IteratorExhausted = call2231;
        setLineNumber(211);    // compilenode string
        var string2235 = new GraceString("NoSuchObject");
        // call case 6: other requests
        // call case 4: self request
        var call2236 = selfRequest(this, "ProgrammingError", []);
        var call2234 = callmethod(call2236, "refine(1)", [1], string2235);
        this.data.NoSuchObject = call2234;
        setLineNumber(212);    // compilenode string
        var string2238 = new GraceString("SizeUnknown");
        // call case 6: other requests
        // call case 4: self request
        var call2239 = selfRequest(this, "Exception", []);
        var call2237 = callmethod(call2239, "refine(1)", [1], string2238);
        this.data.SizeUnknown = call2237;
        setLineNumber(213);    // compilenode string
        var string2241 = new GraceString("SubobjectResponsibility");
        // call case 6: other requests
        // call case 4: self request
        var call2242 = selfRequest(this, "ProgrammingError", []);
        var call2240 = callmethod(call2242, "refine(1)", [1], string2241);
        this.data.SubobjectResponsibility = call2240;
        setLineNumber(215);    // compilenode object
        var obj2243_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_215");
          this.outer_standardGraceClass_215 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func2244 = function(argcv, var_result__39__, var_bindings__39__) {    // method new(_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("SuccessfulMatch.new(_,_)", "standardGraceClass", 215);
            var ouc_init = this.methods["new(2)$build(3)"].call(this, null, var_result__39__, var_bindings__39__, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method new(_,_)
          this.methods["new(2)"] = func2244;
          func2244.paramCounts = [2];
          func2244.paramNames = ["result'", "bindings'"];
          func2244.typeParamNames = [];
          func2244.definitionLine = 215;
          func2244.definitionModule = "standardGraceClass";
          var func2245 = function(argcv, var_result__39__, var_bindings__39__, inheritingObject, aliases, exclusions) {    // method new(_,_)$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj2246_build = function(ignore, var_result__39__, var_bindings__39__, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_215");
              this.outer_standardGraceClass_215 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              setLineNumber(216);    // compilenode identifier
              var initFun2247 = callmethod(var___95__prelude, "true$build(3)", [null], this, [], []);  // compileReuseCall
              var func2248 = function(argcv) {     // accessor method result
                return var_result__39__;
              };    // end of method result
              this.methods["result"] = func2248;
              func2248.paramCounts = [0];
              func2248.paramNames = [];
              func2248.typeParamNames = [];
              func2248.definitionLine = 217;
              func2248.definitionModule = "standardGraceClass";
              var func2249 = function(argcv) {     // accessor method bindings
                return var_bindings__39__;
              };    // end of method bindings
              this.methods["bindings"] = func2249;
              func2249.paramCounts = [0];
              func2249.paramNames = [];
              func2249.typeParamNames = [];
              func2249.definitionLine = 218;
              func2249.definitionModule = "standardGraceClass";
              setLineNumber(218);    // compilenode identifier
              var func2250 = function(argcv) {    // method asString
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(220);    // compilenode string
                var string2251 = new GraceString("SuccessfulMatch(result = ");
                // call case 4: self request
                var call2252 = selfRequest(this, "result", []);
                var opresult2253 = callmethod(string2251, "++(1)", [1], call2252);
                var string2254 = new GraceString(", bindings = ");
                var opresult2255 = callmethod(opresult2253, "++(1)", [1], string2254);
                // call case 4: self request
                var call2256 = selfRequest(this, "bindings", []);
                var opresult2257 = callmethod(opresult2255, "++(1)", [1], call2256);
                var string2258 = new GraceString(")");
                var opresult2259 = callmethod(opresult2257, "++(1)", [1], string2258);
                return opresult2259;
              };    // end of method asString
              this.methods["asString"] = func2250;
              func2250.paramCounts = [0];
              func2250.paramNames = [];
              func2250.typeParamNames = [];
              func2250.definitionLine = 219;
              func2250.definitionModule = "standardGraceClass";
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj2246_init = function() {    // init of object on line 215
                initFun2247.call(this);
              };
              return obj2246_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj2246_init = obj2246_build.call(inheritingObject, null, var_result__39__, var_bindings__39__, this, aliases, exclusions);
            return obj2246_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method new(_,_)$build(_,_,_)
          this.methods["new(2)$build(3)"] = func2245;
          func2245.paramCounts = [2];
          func2245.paramNames = ["result'", "bindings'"];
          func2245.typeParamNames = [];
          func2245.definitionLine = 215;
          func2245.definitionModule = "standardGraceClass";
          var func2260 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(215);    // compilenode string
            var string2261 = new GraceString("class SuccessfulMatch");
            return string2261;
          };    // end of method asString
          this.methods["asString"] = func2260;
          func2260.paramCounts = [0];
          func2260.paramNames = [];
          func2260.typeParamNames = [];
          func2260.definitionLine = 215;
          func2260.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj2243_init = function() {    // init of object on line 215
          };
          return obj2243_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj2243 = emptyGraceObject("SuccessfulMatch", "standardGraceClass", 215);
        var obj2243_init = obj2243_build.call(obj2243, null, this, [], []);
        obj2243_init.call(obj2243);  // end of compileobject
        this.data.SuccessfulMatch = obj2243;
        setLineNumber(224);    // compilenode object
        var obj2262_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_224");
          this.outer_standardGraceClass_224 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func2263 = function(argcv, var_result__39__) {    // method new(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("FailedMatch.new(_)", "standardGraceClass", 224);
            var ouc_init = this.methods["new(1)$build(3)"].call(this, null, var_result__39__, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method new(_)
          this.methods["new(1)"] = func2263;
          func2263.paramCounts = [1];
          func2263.paramNames = ["result'"];
          func2263.typeParamNames = [];
          func2263.definitionLine = 224;
          func2263.definitionModule = "standardGraceClass";
          var func2264 = function(argcv, var_result__39__, inheritingObject, aliases, exclusions) {    // method new(_)$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj2265_build = function(ignore, var_result__39__, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_224");
              this.outer_standardGraceClass_224 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              setLineNumber(225);    // compilenode identifier
              var initFun2266 = callmethod(var___95__prelude, "false$build(3)", [null], this, [], []);  // compileReuseCall
              var func2267 = function(argcv) {     // accessor method result
                return var_result__39__;
              };    // end of method result
              this.methods["result"] = func2267;
              func2267.paramCounts = [0];
              func2267.paramNames = [];
              func2267.typeParamNames = [];
              func2267.definitionLine = 226;
              func2267.definitionModule = "standardGraceClass";
              setLineNumber(226);    // compilenode identifier
              var func2268 = function(argcv) {    // method bindings
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(227);    // compilenode member
                // call case 2: outer request
                var call2269 = selfRequest(this.outer_standardGraceClass_224.outer_standardGraceClass_224, "emptySequence", []);
                return call2269;
              };    // end of method bindings
              this.methods["bindings"] = func2268;
              func2268.paramCounts = [0];
              func2268.paramNames = [];
              func2268.typeParamNames = [];
              func2268.definitionLine = 227;
              func2268.definitionModule = "standardGraceClass";
              var func2270 = function(argcv) {    // method asString
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(229);    // compilenode string
                var string2271 = new GraceString("FailedMatch(result = ");
                // call case 4: self request
                var call2272 = selfRequest(this, "result", []);
                var opresult2273 = callmethod(string2271, "++(1)", [1], call2272);
                var string2274 = new GraceString(")");
                var opresult2275 = callmethod(opresult2273, "++(1)", [1], string2274);
                return opresult2275;
              };    // end of method asString
              this.methods["asString"] = func2270;
              func2270.paramCounts = [0];
              func2270.paramNames = [];
              func2270.typeParamNames = [];
              func2270.definitionLine = 228;
              func2270.definitionModule = "standardGraceClass";
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj2265_init = function() {    // init of object on line 224
                initFun2266.call(this);
              };
              return obj2265_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj2265_init = obj2265_build.call(inheritingObject, null, var_result__39__, this, aliases, exclusions);
            return obj2265_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method new(_)$build(_,_,_)
          this.methods["new(1)$build(3)"] = func2264;
          func2264.paramCounts = [1];
          func2264.paramNames = ["result'"];
          func2264.typeParamNames = [];
          func2264.definitionLine = 224;
          func2264.definitionModule = "standardGraceClass";
          var func2276 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(224);    // compilenode string
            var string2277 = new GraceString("class FailedMatch");
            return string2277;
          };    // end of method asString
          this.methods["asString"] = func2276;
          func2276.paramCounts = [0];
          func2276.paramNames = [];
          func2276.typeParamNames = [];
          func2276.definitionLine = 224;
          func2276.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj2262_init = function() {    // init of object on line 224
          };
          return obj2262_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj2262 = emptyGraceObject("FailedMatch", "standardGraceClass", 224);
        var obj2262_init = obj2262_build.call(obj2262, null, this, [], []);
        obj2262_init.call(obj2262);  // end of compileobject
        this.data.FailedMatch = obj2262;
        setLineNumber(280);    // compilenode object
        var obj2278_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_280");
          this.outer_standardGraceClass_280 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func2279 = function(argcv) {    // method new
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("BasicPattern.new", "standardGraceClass", 280);
            var ouc_init = this.methods["new$build(3)"].call(this, null, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method new
          this.methods["new"] = func2279;
          func2279.paramCounts = [0];
          func2279.paramNames = [];
          func2279.typeParamNames = [];
          func2279.definitionLine = 280;
          func2279.definitionModule = "standardGraceClass";
          var func2280 = function(argcv, inheritingObject, aliases, exclusions) {    // method new$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj2281_build = function(ignore, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_280");
              this.outer_standardGraceClass_280 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              var func2282 = function(argcv, var_o) {    // method &(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(282);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2284 = selfRequest(this.outer_standardGraceClass_280.outer_standardGraceClass_280, "AndPattern", []);
                var call2283 = callmethod(call2284, "new(2)", [2], this, var_o);
                return call2283;
              };    // end of method &(_)
              this.methods["&(1)"] = func2282;
              func2282.paramCounts = [1];
              func2282.paramNames = ["o"];
              func2282.typeParamNames = [];
              func2282.definitionLine = 281;
              func2282.definitionModule = "standardGraceClass";
              var func2285 = function(argcv, var_o) {    // method |(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(285);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2287 = selfRequest(this.outer_standardGraceClass_280.outer_standardGraceClass_280, "OrPattern", []);
                var call2286 = callmethod(call2287, "new(2)", [2], this, var_o);
                return call2286;
              };    // end of method |(_)
              this.methods["|(1)"] = func2285;
              func2285.paramCounts = [1];
              func2285.paramNames = ["o"];
              func2285.typeParamNames = [];
              func2285.definitionLine = 284;
              func2285.definitionModule = "standardGraceClass";
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj2281_init = function() {    // init of object on line 280
              };
              return obj2281_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj2281_init = obj2281_build.call(inheritingObject, null, this, aliases, exclusions);
            return obj2281_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method new$build(_,_,_)
          this.methods["new$build(3)"] = func2280;
          func2280.paramCounts = [0];
          func2280.paramNames = [];
          func2280.typeParamNames = [];
          func2280.definitionLine = 280;
          func2280.definitionModule = "standardGraceClass";
          var func2288 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(280);    // compilenode string
            var string2289 = new GraceString("class BasicPattern");
            return string2289;
          };    // end of method asString
          this.methods["asString"] = func2288;
          func2288.paramCounts = [0];
          func2288.paramNames = [];
          func2288.typeParamNames = [];
          func2288.definitionLine = 280;
          func2288.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj2278_init = function() {    // init of object on line 280
          };
          return obj2278_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj2278 = emptyGraceObject("BasicPattern", "standardGraceClass", 280);
        var obj2278_init = obj2278_build.call(obj2278, null, this, [], []);
        obj2278_init.call(obj2278);  // end of compileobject
        this.data.BasicPattern = obj2278;
        setLineNumber(288);    // compilenode object
        var obj2290_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_288");
          this.outer_standardGraceClass_288 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func2291 = function(argcv, var_pat, var_items__39__) {    // method new(_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("MatchAndDestructuringPattern.new(_,_)", "standardGraceClass", 288);
            var ouc_init = this.methods["new(2)$build(3)"].call(this, null, var_pat, var_items__39__, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method new(_,_)
          this.methods["new(2)"] = func2291;
          func2291.paramCounts = [2];
          func2291.paramNames = ["pat", "items'"];
          func2291.typeParamNames = [];
          func2291.definitionLine = 288;
          func2291.definitionModule = "standardGraceClass";
          var func2292 = function(argcv, var_pat, var_items__39__, inheritingObject, aliases, exclusions) {    // method new(_,_)$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj2293_build = function(ignore, var_pat, var_items__39__, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_288");
              this.outer_standardGraceClass_288 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              setLineNumber(289);    // compilenode member
              // call case 2: outer request
              var call2294 = selfRequest(this.outer_standardGraceClass_288.outer_standardGraceClass_288, "BasicPattern", []);
              var initFun2295 = callmethod(call2294, "new$build(3)", [null], this, [], []);  // compileReuseCall
              this.data.pattern = undefined;
              var reader_pattern2296 = function() {  // reader method pattern
                  return this.data.pattern;
              };
              reader_pattern2296.isDef = true;
              reader_pattern2296.confidential = true;
              this.methods["pattern"] = reader_pattern2296;
              this.data.items = undefined;
              var reader_items2297 = function() {  // reader method items
                  return this.data.items;
              };
              reader_items2297.isDef = true;
              reader_items2297.confidential = true;
              this.methods["items"] = reader_items2297;
              var func2298 = function(argcv, var_o) {    // method match(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(293);    // compilenode identifier
                // call case 6: other requests
                var call2299 = callmethod(var_pat, "match(1)", [1], var_o);
                var var_m = call2299;
                var if2300 = GraceDone;
                setLineNumber(294);    // compilenode identifier
                if (Grace_isTrue(var_m)) {
                  setLineNumber(295);    // compilenode member
                  // call case 6: other requests
                  var call2301 = callmethod(var_m, "bindings", []);
                  var var_mbindings = call2301;
                  setLineNumber(296);    // compilenode array
                  var array2302 = new PrimitiveGraceList([]);
                  var var_bindings = array2302;
                  var if2303 = GraceDone;
                  setLineNumber(297);    // compilenode member
                  // call case 6: other requests
                  var call2304 = callmethod(var_mbindings, "size", []);
                  // call case 6: other requests
                  // call case 4: self request
                  var call2306 = selfRequest(this, "items", []);
                  var call2305 = callmethod(call2306, "size", []);
                  var opresult2307 = callmethod(call2304, "<(1)", [1], call2305);
                  if (Grace_isTrue(opresult2307)) {
                    var if2308 = GraceDone;
                    setLineNumber(298);    // compilenode identifier
                    // call case 6: other requests
                    // call case 2: outer request
                    var call2310 = selfRequest(this.outer_standardGraceClass_288.outer_standardGraceClass_288, "Extractable", []);
                    var call2309 = callmethod(call2310, "match(1)", [1], var_o);
                    if (Grace_isTrue(call2309)) {
                      setLineNumber(299);    // compilenode member
                      // call case 6: other requests
                      var call2311 = callmethod(var_o, "extract", []);
                      var_mbindings = call2311;
                      if2308 = GraceDone;
                    } else {
                      setLineNumber(301);    // compilenode identifier
                      // call case 6: other requests
                      // call case 2: outer request
                      var call2313 = selfRequest(this.outer_standardGraceClass_288.outer_standardGraceClass_288, "FailedMatch", []);
                      var call2312 = callmethod(call2313, "new(1)", [1], var_o);
                      return call2312;
                    }
                    if2303 = if2308;
                  }
                  setLineNumber(304);    // compilenode member
                  // call case 6: other requests
                  // call case 4: self request
                  var call2316 = selfRequest(this, "items", []);
                  var call2315 = callmethod(call2316, "indices", []);
                  var block2317 = new GraceBlock(this, 304, 1);
                  setLineNumber(1);    // compilenode identifier
                  var matches2318 = function(var_i) {
                    setModuleName("standardGraceClass");
                    setLineNumber(304);    // block matches function
                    return true;
                  };
                  block2317.guard = matches2318;
                  block2317.real = function(var_i) {
                    setLineNumber(305);    // compilenode identifier
                    // call case 6: other requests
                    var call2320 = callmethod(var_mbindings, "at(1)", [1], var_i);
                    // call case 6: other requests
                    // call case 6: other requests
                    // call case 4: self request
                    var call2322 = selfRequest(this, "items", []);
                    var call2321 = callmethod(call2322, "at(1)", [1], var_i);
                    var call2319 = callmethod(call2321, "match(1)", [1], call2320);
                    var var_b = call2319;
                    var if2323 = GraceDone;
                    setLineNumber(306);    // compilenode call
                    // call case 6: other requests
                    var call2324 = callmethod(var_b, "prefix!", [0]);
                    if (Grace_isTrue(call2324)) {
                      setLineNumber(307);    // compilenode identifier
                      // call case 6: other requests
                      // call case 2: outer request
                      var call2326 = selfRequest(this.outer_standardGraceClass_288.outer_standardGraceClass_288, "FailedMatch", []);
                      var call2325 = callmethod(call2326, "new(1)", [1], var_o);
                      throw new ReturnException(call2325, returnTarget);
                    }
                    setLineNumber(309);    // compilenode member
                    // call case 6: other requests
                    var call2328 = callmethod(var_b, "bindings", []);
                    var block2329 = new GraceBlock(this, 309, 1);
                    setLineNumber(1);    // compilenode identifier
                    var matches2330 = function(var_bb) {
                      setModuleName("standardGraceClass");
                      setLineNumber(309);    // block matches function
                      return true;
                    };
                    block2329.guard = matches2330;
                    block2329.real = function(var_bb) {
                      setLineNumber(310);    // compilenode identifier
                      // call case 6: other requests
                      var call2331 = callmethod(var_bindings, "push(1)", [1], var_bb);
                      return call2331;
                    };
                    // call case 5: prelude request
                    var call2327 = callmethod(var_prelude, "for(1)do(1)", [1, 1], call2328, block2329);
                    return call2327;
                  };
                  // call case 5: prelude request
                  var call2314 = callmethod(var_prelude, "for(1)do(1)", [1, 1], call2315, block2317);
                  setLineNumber(313);    // compilenode identifier
                  // call case 6: other requests
                  // call case 2: outer request
                  var call2333 = selfRequest(this.outer_standardGraceClass_288.outer_standardGraceClass_288, "SuccessfulMatch", []);
                  var call2332 = callmethod(call2333, "new(2)", [2], var_o, var_bindings);
                  if2300 = call2332;
                } else {
                  setLineNumber(315);    // compilenode identifier
                  // call case 6: other requests
                  // call case 2: outer request
                  var call2335 = selfRequest(this.outer_standardGraceClass_288.outer_standardGraceClass_288, "FailedMatch", []);
                  var call2334 = callmethod(call2335, "new(1)", [1], var_o);
                  if2300 = call2334;
                }
                return if2300;
              };    // end of method match(_)
              this.methods["match(1)"] = func2298;
              func2298.paramCounts = [1];
              func2298.paramNames = ["o"];
              func2298.typeParamNames = [];
              func2298.definitionLine = 292;
              func2298.definitionModule = "standardGraceClass";
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj2293_init = function() {    // init of object on line 288
                initFun2295.call(this);
                setLineNumber(290);    // compilenode identifier
                this.data.pattern = var_pat;
                setLineNumber(291);    // compilenode identifier
                this.data.items = var_items__39__;
              };
              return obj2293_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj2293_init = obj2293_build.call(inheritingObject, null, var_pat, var_items__39__, this, aliases, exclusions);
            return obj2293_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method new(_,_)$build(_,_,_)
          this.methods["new(2)$build(3)"] = func2292;
          func2292.paramCounts = [2];
          func2292.paramNames = ["pat", "items'"];
          func2292.typeParamNames = [];
          func2292.definitionLine = 288;
          func2292.definitionModule = "standardGraceClass";
          var func2336 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(288);    // compilenode string
            var string2337 = new GraceString("class MatchAndDestructuringPattern");
            return string2337;
          };    // end of method asString
          this.methods["asString"] = func2336;
          func2336.paramCounts = [0];
          func2336.paramNames = [];
          func2336.typeParamNames = [];
          func2336.definitionLine = 288;
          func2336.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj2290_init = function() {    // init of object on line 288
          };
          return obj2290_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj2290 = emptyGraceObject("MatchAndDestructuringPattern", "standardGraceClass", 288);
        var obj2290_init = obj2290_build.call(obj2290, null, this, [], []);
        obj2290_init.call(obj2290);  // end of compileobject
        this.data.MatchAndDestructuringPattern = obj2290;
        setLineNumber(320);    // compilenode object
        var obj2338_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_320");
          this.outer_standardGraceClass_320 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func2339 = function(argcv, var_nm) {    // method new(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("VariablePattern.new(_)", "standardGraceClass", 320);
            var ouc_init = this.methods["new(1)$build(3)"].call(this, null, var_nm, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method new(_)
          this.methods["new(1)"] = func2339;
          func2339.paramCounts = [1];
          func2339.paramNames = ["nm"];
          func2339.typeParamNames = [];
          func2339.definitionLine = 320;
          func2339.definitionModule = "standardGraceClass";
          var func2340 = function(argcv, var_nm, inheritingObject, aliases, exclusions) {    // method new(_)$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj2341_build = function(ignore, var_nm, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_320");
              this.outer_standardGraceClass_320 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              setLineNumber(321);    // compilenode member
              // call case 2: outer request
              var call2342 = selfRequest(this.outer_standardGraceClass_320.outer_standardGraceClass_320, "BasicPattern", []);
              var initFun2343 = callmethod(call2342, "new$build(3)", [null], this, [], []);  // compileReuseCall
              var func2344 = function(argcv, var_o) {    // method match(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(323);    // compilenode identifier
                var array2346 = new PrimitiveGraceList([var_o]);
                // call case 6: other requests
                // call case 2: outer request
                var call2347 = selfRequest(this.outer_standardGraceClass_320.outer_standardGraceClass_320, "SuccessfulMatch", []);
                var call2345 = callmethod(call2347, "new(2)", [2], var_o, array2346);
                return call2345;
              };    // end of method match(_)
              this.methods["match(1)"] = func2344;
              func2344.paramCounts = [1];
              func2344.paramNames = ["o"];
              func2344.typeParamNames = [];
              func2344.definitionLine = 322;
              func2344.definitionModule = "standardGraceClass";
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj2341_init = function() {    // init of object on line 320
                initFun2343.call(this);
              };
              return obj2341_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj2341_init = obj2341_build.call(inheritingObject, null, var_nm, this, aliases, exclusions);
            return obj2341_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method new(_)$build(_,_,_)
          this.methods["new(1)$build(3)"] = func2340;
          func2340.paramCounts = [1];
          func2340.paramNames = ["nm"];
          func2340.typeParamNames = [];
          func2340.definitionLine = 320;
          func2340.definitionModule = "standardGraceClass";
          var func2348 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(320);    // compilenode string
            var string2349 = new GraceString("class VariablePattern");
            return string2349;
          };    // end of method asString
          this.methods["asString"] = func2348;
          func2348.paramCounts = [0];
          func2348.paramNames = [];
          func2348.typeParamNames = [];
          func2348.definitionLine = 320;
          func2348.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj2338_init = function() {    // init of object on line 320
          };
          return obj2338_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj2338 = emptyGraceObject("VariablePattern", "standardGraceClass", 320);
        var obj2338_init = obj2338_build.call(obj2338, null, this, [], []);
        obj2338_init.call(obj2338);  // end of compileobject
        this.data.VariablePattern = obj2338;
        setLineNumber(327);    // compilenode object
        var obj2350_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_327");
          this.outer_standardGraceClass_327 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func2351 = function(argcv, var_pat) {    // method new(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("BindingPattern.new(_)", "standardGraceClass", 327);
            var ouc_init = this.methods["new(1)$build(3)"].call(this, null, var_pat, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method new(_)
          this.methods["new(1)"] = func2351;
          func2351.paramCounts = [1];
          func2351.paramNames = ["pat"];
          func2351.typeParamNames = [];
          func2351.definitionLine = 327;
          func2351.definitionModule = "standardGraceClass";
          var func2352 = function(argcv, var_pat, inheritingObject, aliases, exclusions) {    // method new(_)$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj2353_build = function(ignore, var_pat, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_327");
              this.outer_standardGraceClass_327 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              setLineNumber(328);    // compilenode member
              // call case 2: outer request
              var call2354 = selfRequest(this.outer_standardGraceClass_327.outer_standardGraceClass_327, "BasicPattern", []);
              var initFun2355 = callmethod(call2354, "new$build(3)", [null], this, [], []);  // compileReuseCall
              var func2356 = function(argcv, var_o) {    // method match(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(330);    // compilenode identifier
                var array2357 = new PrimitiveGraceList([var_o]);
                var var_bindings = array2357;
                setLineNumber(331);    // compilenode identifier
                // call case 6: other requests
                var call2358 = callmethod(var_pat, "match(1)", [1], var_o);
                var var_m = call2358;
                var if2359 = GraceDone;
                setLineNumber(332);    // compilenode call
                // call case 6: other requests
                var call2360 = callmethod(var_m, "prefix!", [0]);
                if (Grace_isTrue(call2360)) {
                  setLineNumber(333);    // compilenode identifier
                  return var_m;
                }
                setLineNumber(335);    // compilenode member
                // call case 6: other requests
                var call2362 = callmethod(var_m, "bindings", []);
                var block2363 = new GraceBlock(this, 335, 1);
                setLineNumber(1);    // compilenode identifier
                var matches2364 = function(var_b) {
                  setModuleName("standardGraceClass");
                  setLineNumber(335);    // block matches function
                  return true;
                };
                block2363.guard = matches2364;
                block2363.real = function(var_b) {
                  setLineNumber(336);    // compilenode identifier
                  // call case 6: other requests
                  var call2365 = callmethod(var_bindings, "push(1)", [1], var_b);
                  return call2365;
                };
                // call case 5: prelude request
                var call2361 = callmethod(var_prelude, "for(1)do(1)", [1, 1], call2362, block2363);
                setLineNumber(338);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2367 = selfRequest(this.outer_standardGraceClass_327.outer_standardGraceClass_327, "SuccessfulMatch", []);
                var call2366 = callmethod(call2367, "new(2)", [2], var_o, var_bindings);
                return call2366;
              };    // end of method match(_)
              this.methods["match(1)"] = func2356;
              func2356.paramCounts = [1];
              func2356.paramNames = ["o"];
              func2356.typeParamNames = [];
              func2356.definitionLine = 329;
              func2356.definitionModule = "standardGraceClass";
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj2353_init = function() {    // init of object on line 327
                initFun2355.call(this);
              };
              return obj2353_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj2353_init = obj2353_build.call(inheritingObject, null, var_pat, this, aliases, exclusions);
            return obj2353_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method new(_)$build(_,_,_)
          this.methods["new(1)$build(3)"] = func2352;
          func2352.paramCounts = [1];
          func2352.paramNames = ["pat"];
          func2352.typeParamNames = [];
          func2352.definitionLine = 327;
          func2352.definitionModule = "standardGraceClass";
          var func2368 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(327);    // compilenode string
            var string2369 = new GraceString("class BindingPattern");
            return string2369;
          };    // end of method asString
          this.methods["asString"] = func2368;
          func2368.paramCounts = [0];
          func2368.paramNames = [];
          func2368.typeParamNames = [];
          func2368.definitionLine = 327;
          func2368.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj2350_init = function() {    // init of object on line 327
          };
          return obj2350_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj2350 = emptyGraceObject("BindingPattern", "standardGraceClass", 327);
        var obj2350_init = obj2350_build.call(obj2350, null, this, [], []);
        obj2350_init.call(obj2350);  // end of compileobject
        this.data.BindingPattern = obj2350;
        setLineNumber(342);    // compilenode object
        var obj2370_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_342");
          this.outer_standardGraceClass_342 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func2371 = function(argcv) {    // method new
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("WildcardPattern.new", "standardGraceClass", 342);
            var ouc_init = this.methods["new$build(3)"].call(this, null, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method new
          this.methods["new"] = func2371;
          func2371.paramCounts = [0];
          func2371.paramNames = [];
          func2371.typeParamNames = [];
          func2371.definitionLine = 342;
          func2371.definitionModule = "standardGraceClass";
          var func2372 = function(argcv, inheritingObject, aliases, exclusions) {    // method new$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj2373_build = function(ignore, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_342");
              this.outer_standardGraceClass_342 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              setLineNumber(343);    // compilenode member
              // call case 2: outer request
              var call2374 = selfRequest(this.outer_standardGraceClass_342.outer_standardGraceClass_342, "BasicPattern", []);
              var initFun2375 = callmethod(call2374, "new$build(3)", [null], this, [], []);  // compileReuseCall
              var func2376 = function(argcv, var_o) {    // method match(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(345);    // compilenode array
                var array2378 = new PrimitiveGraceList([]);
                // call case 6: other requests
                // call case 2: outer request
                var call2379 = selfRequest(this.outer_standardGraceClass_342.outer_standardGraceClass_342, "SuccessfulMatch", []);
                var call2377 = callmethod(call2379, "new(2)", [2], var_done, array2378);
                return call2377;
              };    // end of method match(_)
              this.methods["match(1)"] = func2376;
              func2376.paramCounts = [1];
              func2376.paramNames = ["o"];
              func2376.typeParamNames = [];
              func2376.definitionLine = 344;
              func2376.definitionModule = "standardGraceClass";
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj2373_init = function() {    // init of object on line 342
                initFun2375.call(this);
              };
              return obj2373_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj2373_init = obj2373_build.call(inheritingObject, null, this, aliases, exclusions);
            return obj2373_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method new$build(_,_,_)
          this.methods["new$build(3)"] = func2372;
          func2372.paramCounts = [0];
          func2372.paramNames = [];
          func2372.typeParamNames = [];
          func2372.definitionLine = 342;
          func2372.definitionModule = "standardGraceClass";
          var func2380 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(342);    // compilenode string
            var string2381 = new GraceString("class WildcardPattern");
            return string2381;
          };    // end of method asString
          this.methods["asString"] = func2380;
          func2380.paramCounts = [0];
          func2380.paramNames = [];
          func2380.typeParamNames = [];
          func2380.definitionLine = 342;
          func2380.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj2370_init = function() {    // init of object on line 342
          };
          return obj2370_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj2370 = emptyGraceObject("WildcardPattern", "standardGraceClass", 342);
        var obj2370_init = obj2370_build.call(obj2370, null, this, [], []);
        obj2370_init.call(obj2370);  // end of compileobject
        this.data.WildcardPattern = obj2370;
        setLineNumber(349);    // compilenode object
        var obj2382_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_349");
          this.outer_standardGraceClass_349 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func2383 = function(argcv, var_p1, var_p2) {    // method new(_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("AndPattern.new(_,_)", "standardGraceClass", 349);
            var ouc_init = this.methods["new(2)$build(3)"].call(this, null, var_p1, var_p2, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method new(_,_)
          this.methods["new(2)"] = func2383;
          func2383.paramCounts = [2];
          func2383.paramNames = ["p1", "p2"];
          func2383.typeParamNames = [];
          func2383.definitionLine = 349;
          func2383.definitionModule = "standardGraceClass";
          var func2384 = function(argcv, var_p1, var_p2, inheritingObject, aliases, exclusions) {    // method new(_,_)$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj2385_build = function(ignore, var_p1, var_p2, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_349");
              this.outer_standardGraceClass_349 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              setLineNumber(350);    // compilenode member
              // call case 2: outer request
              var call2386 = selfRequest(this.outer_standardGraceClass_349.outer_standardGraceClass_349, "BasicPattern", []);
              var initFun2387 = callmethod(call2386, "new$build(3)", [null], this, [], []);  // compileReuseCall
              var func2388 = function(argcv, var_o) {    // method match(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(352);    // compilenode identifier
                // call case 6: other requests
                var call2389 = callmethod(var_p1, "match(1)", [1], var_o);
                var var_m1 = call2389;
                var if2390 = GraceDone;
                setLineNumber(353);    // compilenode call
                // call case 6: other requests
                var call2391 = callmethod(var_m1, "prefix!", [0]);
                if (Grace_isTrue(call2391)) {
                  setLineNumber(354);    // compilenode identifier
                  return var_m1;
                }
                setLineNumber(356);    // compilenode identifier
                // call case 6: other requests
                var call2392 = callmethod(var_p2, "match(1)", [1], var_o);
                var var_m2 = call2392;
                var if2393 = GraceDone;
                setLineNumber(357);    // compilenode call
                // call case 6: other requests
                var call2394 = callmethod(var_m2, "prefix!", [0]);
                if (Grace_isTrue(call2394)) {
                  setLineNumber(358);    // compilenode identifier
                  return var_m2;
                }
                setLineNumber(360);    // compilenode array
                var array2395 = new PrimitiveGraceList([]);
                var var_bindings = array2395;
                setLineNumber(361);    // compilenode member
                // call case 6: other requests
                var call2397 = callmethod(var_m1, "bindings", []);
                var block2398 = new GraceBlock(this, 361, 1);
                setLineNumber(1);    // compilenode identifier
                var matches2399 = function(var_b) {
                  setModuleName("standardGraceClass");
                  setLineNumber(361);    // block matches function
                  return true;
                };
                block2398.guard = matches2399;
                block2398.real = function(var_b) {
                  setLineNumber(362);    // compilenode identifier
                  // call case 6: other requests
                  var call2400 = callmethod(var_bindings, "push(1)", [1], var_b);
                  return call2400;
                };
                // call case 5: prelude request
                var call2396 = callmethod(var_prelude, "for(1)do(1)", [1, 1], call2397, block2398);
                setLineNumber(364);    // compilenode member
                // call case 6: other requests
                var call2402 = callmethod(var_m2, "bindings", []);
                var block2403 = new GraceBlock(this, 364, 1);
                setLineNumber(1);    // compilenode identifier
                var matches2404 = function(var_b) {
                  setModuleName("standardGraceClass");
                  setLineNumber(364);    // block matches function
                  return true;
                };
                block2403.guard = matches2404;
                block2403.real = function(var_b) {
                  setLineNumber(365);    // compilenode identifier
                  // call case 6: other requests
                  var call2405 = callmethod(var_bindings, "push(1)", [1], var_b);
                  return call2405;
                };
                // call case 5: prelude request
                var call2401 = callmethod(var_prelude, "for(1)do(1)", [1, 1], call2402, block2403);
                setLineNumber(367);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2407 = selfRequest(this.outer_standardGraceClass_349.outer_standardGraceClass_349, "SuccessfulMatch", []);
                var call2406 = callmethod(call2407, "new(2)", [2], var_o, var_bindings);
                return call2406;
              };    // end of method match(_)
              this.methods["match(1)"] = func2388;
              func2388.paramCounts = [1];
              func2388.paramNames = ["o"];
              func2388.typeParamNames = [];
              func2388.definitionLine = 351;
              func2388.definitionModule = "standardGraceClass";
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj2385_init = function() {    // init of object on line 349
                initFun2387.call(this);
              };
              return obj2385_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj2385_init = obj2385_build.call(inheritingObject, null, var_p1, var_p2, this, aliases, exclusions);
            return obj2385_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method new(_,_)$build(_,_,_)
          this.methods["new(2)$build(3)"] = func2384;
          func2384.paramCounts = [2];
          func2384.paramNames = ["p1", "p2"];
          func2384.typeParamNames = [];
          func2384.definitionLine = 349;
          func2384.definitionModule = "standardGraceClass";
          var func2408 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(349);    // compilenode string
            var string2409 = new GraceString("class AndPattern");
            return string2409;
          };    // end of method asString
          this.methods["asString"] = func2408;
          func2408.paramCounts = [0];
          func2408.paramNames = [];
          func2408.typeParamNames = [];
          func2408.definitionLine = 349;
          func2408.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj2382_init = function() {    // init of object on line 349
          };
          return obj2382_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj2382 = emptyGraceObject("AndPattern", "standardGraceClass", 349);
        var obj2382_init = obj2382_build.call(obj2382, null, this, [], []);
        obj2382_init.call(obj2382);  // end of compileobject
        this.data.AndPattern = obj2382;
        setLineNumber(371);    // compilenode object
        var obj2410_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_371");
          this.outer_standardGraceClass_371 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func2411 = function(argcv, var_p1, var_p2) {    // method new(_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("OrPattern.new(_,_)", "standardGraceClass", 371);
            var ouc_init = this.methods["new(2)$build(3)"].call(this, null, var_p1, var_p2, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method new(_,_)
          this.methods["new(2)"] = func2411;
          func2411.paramCounts = [2];
          func2411.paramNames = ["p1", "p2"];
          func2411.typeParamNames = [];
          func2411.definitionLine = 371;
          func2411.definitionModule = "standardGraceClass";
          var func2412 = function(argcv, var_p1, var_p2, inheritingObject, aliases, exclusions) {    // method new(_,_)$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj2413_build = function(ignore, var_p1, var_p2, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_371");
              this.outer_standardGraceClass_371 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              setLineNumber(372);    // compilenode member
              // call case 2: outer request
              var call2414 = selfRequest(this.outer_standardGraceClass_371.outer_standardGraceClass_371, "BasicPattern", []);
              var initFun2415 = callmethod(call2414, "new$build(3)", [null], this, [], []);  // compileReuseCall
              var func2416 = function(argcv, var_o) {    // method match(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var if2417 = GraceDone;
                setLineNumber(374);    // compilenode identifier
                // call case 6: other requests
                var call2418 = callmethod(var_p1, "match(1)", [1], var_o);
                if (Grace_isTrue(call2418)) {
                  setLineNumber(375);    // compilenode array
                  var array2420 = new PrimitiveGraceList([]);
                  // call case 6: other requests
                  // call case 2: outer request
                  var call2421 = selfRequest(this.outer_standardGraceClass_371.outer_standardGraceClass_371, "SuccessfulMatch", []);
                  var call2419 = callmethod(call2421, "new(2)", [2], var_o, array2420);
                  return call2419;
                }
                var if2422 = GraceDone;
                setLineNumber(377);    // compilenode identifier
                // call case 6: other requests
                var call2423 = callmethod(var_p2, "match(1)", [1], var_o);
                if (Grace_isTrue(call2423)) {
                  setLineNumber(378);    // compilenode array
                  var array2425 = new PrimitiveGraceList([]);
                  // call case 6: other requests
                  // call case 2: outer request
                  var call2426 = selfRequest(this.outer_standardGraceClass_371.outer_standardGraceClass_371, "SuccessfulMatch", []);
                  var call2424 = callmethod(call2426, "new(2)", [2], var_o, array2425);
                  return call2424;
                }
                setLineNumber(380);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2428 = selfRequest(this.outer_standardGraceClass_371.outer_standardGraceClass_371, "FailedMatch", []);
                var call2427 = callmethod(call2428, "new(1)", [1], var_o);
                return call2427;
              };    // end of method match(_)
              this.methods["match(1)"] = func2416;
              func2416.paramCounts = [1];
              func2416.paramNames = ["o"];
              func2416.typeParamNames = [];
              func2416.definitionLine = 373;
              func2416.definitionModule = "standardGraceClass";
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj2413_init = function() {    // init of object on line 371
                initFun2415.call(this);
              };
              return obj2413_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj2413_init = obj2413_build.call(inheritingObject, null, var_p1, var_p2, this, aliases, exclusions);
            return obj2413_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method new(_,_)$build(_,_,_)
          this.methods["new(2)$build(3)"] = func2412;
          func2412.paramCounts = [2];
          func2412.paramNames = ["p1", "p2"];
          func2412.typeParamNames = [];
          func2412.definitionLine = 371;
          func2412.definitionModule = "standardGraceClass";
          var func2429 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(371);    // compilenode string
            var string2430 = new GraceString("class OrPattern");
            return string2430;
          };    // end of method asString
          this.methods["asString"] = func2429;
          func2429.paramCounts = [0];
          func2429.paramNames = [];
          func2429.typeParamNames = [];
          func2429.definitionLine = 371;
          func2429.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj2410_init = function() {    // init of object on line 371
          };
          return obj2410_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj2410 = emptyGraceObject("OrPattern", "standardGraceClass", 371);
        var obj2410_init = obj2410_build.call(obj2410, null, this, [], []);
        obj2410_init.call(obj2410);  // end of compileobject
        this.data.OrPattern = obj2410;
        setLineNumber(384);    // compilenode object
        var obj2431_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_384");
          this.outer_standardGraceClass_384 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func2432 = function(argcv) {    // method new
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("Singleton.new", "standardGraceClass", 385);
            var ouc_init = this.methods["new$build(3)"].call(this, null, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method new
          this.methods["new"] = func2432;
          func2432.paramCounts = [0];
          func2432.paramNames = [];
          func2432.typeParamNames = [];
          func2432.definitionLine = 385;
          func2432.definitionModule = "standardGraceClass";
          var func2433 = function(argcv, inheritingObject, aliases, exclusions) {    // method new$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj2434_build = function(ignore, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_385");
              this.outer_standardGraceClass_385 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              setLineNumber(386);    // compilenode member
              // call case 2: outer request
              var call2435 = selfRequest(this.outer_standardGraceClass_385.outer_standardGraceClass_384, "BasicPattern", []);
              var initFun2436 = callmethod(call2435, "new$build(3)", [null], this, [], []);  // compileReuseCall
              var func2437 = function(argcv, var_other) {    // method match(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var if2438 = GraceDone;
                setLineNumber(388);    // compilenode identifier
                // call case 4: self request
                var call2439 = selfRequest(this, "isMe(1)", [1], var_other);
                if (Grace_isTrue(call2439)) {
                  setLineNumber(389);    // compilenode array
                  var array2441 = new PrimitiveGraceList([]);
                  // call case 6: other requests
                  // call case 2: outer request
                  var call2442 = selfRequest(this.outer_standardGraceClass_385.outer_standardGraceClass_384, "SuccessfulMatch", []);
                  var call2440 = callmethod(call2442, "new(2)", [2], var_other, array2441);
                  if2438 = call2440;
                } else {
                  setLineNumber(391);    // compilenode identifier
                  // call case 6: other requests
                  // call case 2: outer request
                  var call2444 = selfRequest(this.outer_standardGraceClass_385.outer_standardGraceClass_384, "FailedMatch", []);
                  var call2443 = callmethod(call2444, "new(1)", [1], var_other);
                  if2438 = call2443;
                }
                return if2438;
              };    // end of method match(_)
              this.methods["match(1)"] = func2437;
              func2437.paramCounts = [1];
              func2437.paramNames = ["other"];
              func2437.typeParamNames = [];
              func2437.definitionLine = 387;
              func2437.definitionModule = "standardGraceClass";
              var func2445 = function(argcv, var_other) {    // method ==(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(394);    // compilenode identifier
                // call case 4: self request
                var call2446 = selfRequest(this, "isMe(1)", [1], var_other);
                return call2446;
              };    // end of method ==(_)
              this.methods["==(1)"] = func2445;
              func2445.paramCounts = [1];
              func2445.paramNames = ["other"];
              func2445.typeParamNames = [];
              func2445.definitionLine = 394;
              func2445.definitionModule = "standardGraceClass";
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj2434_init = function() {    // init of object on line 385
                initFun2436.call(this);
              };
              return obj2434_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj2434_init = obj2434_build.call(inheritingObject, null, this, aliases, exclusions);
            return obj2434_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method new$build(_,_,_)
          this.methods["new$build(3)"] = func2433;
          func2433.paramCounts = [0];
          func2433.paramNames = [];
          func2433.typeParamNames = [];
          func2433.definitionLine = 385;
          func2433.definitionModule = "standardGraceClass";
          var func2447 = function(argcv, var_printString) {    // method named(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("Singleton.named(_)", "standardGraceClass", 396);
            var ouc_init = this.methods["named(1)$build(3)"].call(this, null, var_printString, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method named(_)
          this.methods["named(1)"] = func2447;
          func2447.paramCounts = [1];
          func2447.paramNames = ["printString"];
          func2447.typeParamNames = [];
          func2447.definitionLine = 396;
          func2447.definitionModule = "standardGraceClass";
          var func2448 = function(argcv, var_printString, inheritingObject, aliases, exclusions) {    // method named(_)$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj2449_build = function(ignore, var_printString, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_396");
              this.outer_standardGraceClass_396 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              setLineNumber(397);    // compilenode member
              // call case 2: outer request
              var call2450 = selfRequest(this.outer_standardGraceClass_396.outer_standardGraceClass_384, "Singleton", []);
              var initFun2451 = callmethod(call2450, "new$build(3)", [null], this, [], []);  // compileReuseCall
              var func2452 = function(argcv) {     // accessor method asString
                return var_printString;
              };    // end of method asString
              this.methods["asString"] = func2452;
              func2452.paramCounts = [0];
              func2452.paramNames = [];
              func2452.typeParamNames = [];
              func2452.definitionLine = 398;
              func2452.definitionModule = "standardGraceClass";
              setLineNumber(398);    // compilenode identifier
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj2449_init = function() {    // init of object on line 396
                initFun2451.call(this);
              };
              return obj2449_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj2449_init = obj2449_build.call(inheritingObject, null, var_printString, this, aliases, exclusions);
            return obj2449_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method named(_)$build(_,_,_)
          this.methods["named(1)$build(3)"] = func2448;
          func2448.paramCounts = [1];
          func2448.paramNames = ["printString"];
          func2448.typeParamNames = [];
          func2448.definitionLine = 396;
          func2448.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj2431_init = function() {    // init of object on line 384
          };
          return obj2431_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj2431 = emptyGraceObject("Singleton", "standardGraceClass", 384);
        var obj2431_init = obj2431_build.call(obj2431, null, this, [], []);
        obj2431_init.call(obj2431);  // end of compileobject
        this.data.Singleton = obj2431;
        setLineNumber(402);    // compilenode object
        var obj2453_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_402");
          this.outer_standardGraceClass_402 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func2454 = function(argcv, var_name) {    // method new(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("BaseType.new(_)", "standardGraceClass", 402);
            var ouc_init = this.methods["new(1)$build(3)"].call(this, null, var_name, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method new(_)
          this.methods["new(1)"] = func2454;
          func2454.paramCounts = [1];
          func2454.paramNames = ["name"];
          func2454.typeParamNames = [];
          func2454.definitionLine = 402;
          func2454.definitionModule = "standardGraceClass";
          var func2455 = function(argcv, var_name, inheritingObject, aliases, exclusions) {    // method new(_)$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj2456_build = function(ignore, var_name, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_402");
              this.outer_standardGraceClass_402 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              var func2457 = function(argcv, var_o) {    // method &(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(404);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2459 = selfRequest(this.outer_standardGraceClass_402.outer_standardGraceClass_402, "TypeIntersection", []);
                var call2458 = callmethod(call2459, "new(2)", [2], this, var_o);
                return call2458;
              };    // end of method &(_)
              this.methods["&(1)"] = func2457;
              func2457.paramCounts = [1];
              func2457.paramNames = ["o"];
              func2457.typeParamNames = [];
              func2457.definitionLine = 403;
              func2457.definitionModule = "standardGraceClass";
              var func2460 = function(argcv, var_o) {    // method |(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(407);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2462 = selfRequest(this.outer_standardGraceClass_402.outer_standardGraceClass_402, "TypeVariant", []);
                var call2461 = callmethod(call2462, "new(2)", [2], this, var_o);
                return call2461;
              };    // end of method |(_)
              this.methods["|(1)"] = func2460;
              func2460.paramCounts = [1];
              func2460.paramNames = ["o"];
              func2460.typeParamNames = [];
              func2460.definitionLine = 406;
              func2460.definitionModule = "standardGraceClass";
              var func2463 = function(argcv, var_o) {    // method +(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(410);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2465 = selfRequest(this.outer_standardGraceClass_402.outer_standardGraceClass_402, "TypeUnion", []);
                var call2464 = callmethod(call2465, "new(2)", [2], this, var_o);
                return call2464;
              };    // end of method +(_)
              this.methods["+(1)"] = func2463;
              func2463.paramCounts = [1];
              func2463.paramNames = ["o"];
              func2463.typeParamNames = [];
              func2463.definitionLine = 409;
              func2463.definitionModule = "standardGraceClass";
              var func2466 = function(argcv, var_o) {    // method -(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(413);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2468 = selfRequest(this.outer_standardGraceClass_402.outer_standardGraceClass_402, "TypeSubtraction", []);
                var call2467 = callmethod(call2468, "new(2)", [2], this, var_o);
                return call2467;
              };    // end of method -(_)
              this.methods["-(1)"] = func2466;
              func2466.paramCounts = [1];
              func2466.paramNames = ["o"];
              func2466.typeParamNames = [];
              func2466.definitionLine = 412;
              func2466.definitionModule = "standardGraceClass";
              var func2469 = function(argcv) {    // method asString
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var if2470 = GraceDone;
                setLineNumber(416);    // compilenode string
                var string2471 = new GraceString("");
                var opresult2472 = callmethod(var_name, "==(1)", [1], string2471);
                if (Grace_isTrue(opresult2472)) {
                  var string2473 = new GraceString("type \u2039anon\u203a");
                  if2470 = string2473;
                } else {
                  setLineNumber(417);    // compilenode string
                  var string2474 = new GraceString("type ");
                  var opresult2475 = callmethod(string2474, "++(1)", [1], var_name);
                  var string2476 = new GraceString("");
                  var opresult2477 = callmethod(opresult2475, "++(1)", [1], string2476);
                  if2470 = opresult2477;
                }
                return if2470;
              };    // end of method asString
              this.methods["asString"] = func2469;
              func2469.paramCounts = [0];
              func2469.paramNames = [];
              func2469.typeParamNames = [];
              func2469.definitionLine = 415;
              func2469.definitionModule = "standardGraceClass";
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj2456_init = function() {    // init of object on line 402
              };
              return obj2456_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj2456_init = obj2456_build.call(inheritingObject, null, var_name, this, aliases, exclusions);
            return obj2456_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method new(_)$build(_,_,_)
          this.methods["new(1)$build(3)"] = func2455;
          func2455.paramCounts = [1];
          func2455.paramNames = ["name"];
          func2455.typeParamNames = [];
          func2455.definitionLine = 402;
          func2455.definitionModule = "standardGraceClass";
          var func2478 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(402);    // compilenode string
            var string2479 = new GraceString("class BaseType");
            return string2479;
          };    // end of method asString
          this.methods["asString"] = func2478;
          func2478.paramCounts = [0];
          func2478.paramNames = [];
          func2478.typeParamNames = [];
          func2478.definitionLine = 402;
          func2478.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj2453_init = function() {    // init of object on line 402
          };
          return obj2453_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj2453 = emptyGraceObject("BaseType", "standardGraceClass", 402);
        var obj2453_init = obj2453_build.call(obj2453, null, this, [], []);
        obj2453_init.call(obj2453);  // end of compileobject
        this.data.BaseType = obj2453;
        setLineNumber(421);    // compilenode object
        var obj2480_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_421");
          this.outer_standardGraceClass_421 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func2481 = function(argcv, var_t1, var_t2) {    // method new(_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("TypeIntersection.new(_,_)", "standardGraceClass", 421);
            var ouc_init = this.methods["new(2)$build(3)"].call(this, null, var_t1, var_t2, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method new(_,_)
          this.methods["new(2)"] = func2481;
          func2481.paramCounts = [2];
          func2481.paramNames = ["t1", "t2"];
          func2481.typeParamNames = [];
          func2481.definitionLine = 421;
          func2481.definitionModule = "standardGraceClass";
          var func2482 = function(argcv, var_t1, var_t2, inheritingObject, aliases, exclusions) {    // method new(_,_)$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj2483_build = function(ignore, var_t1, var_t2, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_421");
              this.outer_standardGraceClass_421 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              setLineNumber(422);    // compilenode member
              // call case 2: outer request
              var call2484 = selfRequest(this.outer_standardGraceClass_421.outer_standardGraceClass_421, "AndPattern", []);
              var initFun2485 = callmethod(call2484, "new(2)$build(3)", [null], var_t1, var_t2, this, [], []);  // compileReuseCall
              var func2486 = function(argcv, var_o) {    // method &(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(425);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2488 = selfRequest(this.outer_standardGraceClass_421.outer_standardGraceClass_421, "TypeIntersection", []);
                var call2487 = callmethod(call2488, "new(2)", [2], this, var_o);
                return call2487;
              };    // end of method &(_)
              this.methods["&(1)"] = func2486;
              func2486.paramCounts = [1];
              func2486.paramNames = ["o"];
              func2486.typeParamNames = [];
              func2486.definitionLine = 424;
              func2486.definitionModule = "standardGraceClass";
              var func2489 = function(argcv, var_o) {    // method |(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(428);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2491 = selfRequest(this.outer_standardGraceClass_421.outer_standardGraceClass_421, "TypeVariant", []);
                var call2490 = callmethod(call2491, "new(2)", [2], this, var_o);
                return call2490;
              };    // end of method |(_)
              this.methods["|(1)"] = func2489;
              func2489.paramCounts = [1];
              func2489.paramNames = ["o"];
              func2489.typeParamNames = [];
              func2489.definitionLine = 427;
              func2489.definitionModule = "standardGraceClass";
              var func2492 = function(argcv, var_o) {    // method +(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(431);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2494 = selfRequest(this.outer_standardGraceClass_421.outer_standardGraceClass_421, "TypeUnion", []);
                var call2493 = callmethod(call2494, "new(2)", [2], this, var_o);
                return call2493;
              };    // end of method +(_)
              this.methods["+(1)"] = func2492;
              func2492.paramCounts = [1];
              func2492.paramNames = ["o"];
              func2492.typeParamNames = [];
              func2492.definitionLine = 430;
              func2492.definitionModule = "standardGraceClass";
              var func2495 = function(argcv, var_o) {    // method -(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(434);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2497 = selfRequest(this.outer_standardGraceClass_421.outer_standardGraceClass_421, "TypeSubtraction", []);
                var call2496 = callmethod(call2497, "new(2)", [2], this, var_o);
                return call2496;
              };    // end of method -(_)
              this.methods["-(1)"] = func2495;
              func2495.paramCounts = [1];
              func2495.paramNames = ["o"];
              func2495.typeParamNames = [];
              func2495.definitionLine = 433;
              func2495.definitionModule = "standardGraceClass";
              var func2498 = function(argcv) {    // method methodNames
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(437);    // compilenode member
                // call case 6: other requests
                var call2500 = callmethod(var_t2, "methodNames", []);
                // call case 6: other requests
                // call case 6: other requests
                var call2501 = callmethod(var_t1, "methodNames", []);
                var call2499 = callmethod(call2501, "addAll(1)", [1], call2500);
                return call2499;
              };    // end of method methodNames
              this.methods["methodNames"] = func2498;
              func2498.paramCounts = [0];
              func2498.paramNames = [];
              func2498.typeParamNames = [];
              func2498.definitionLine = 436;
              func2498.definitionModule = "standardGraceClass";
              var func2502 = function(argcv) {    // method asString
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(439);    // compilenode string
                var string2503 = new GraceString("(");
                var opresult2504 = callmethod(string2503, "++(1)", [1], var_t1);
                var string2505 = new GraceString(" & ");
                var opresult2506 = callmethod(opresult2504, "++(1)", [1], string2505);
                var opresult2507 = callmethod(opresult2506, "++(1)", [1], var_t2);
                var string2508 = new GraceString(")");
                var opresult2509 = callmethod(opresult2507, "++(1)", [1], string2508);
                return opresult2509;
              };    // end of method asString
              this.methods["asString"] = func2502;
              func2502.paramCounts = [0];
              func2502.paramNames = [];
              func2502.typeParamNames = [];
              func2502.definitionLine = 439;
              func2502.definitionModule = "standardGraceClass";
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj2483_init = function() {    // init of object on line 421
                initFun2485.call(this);
              };
              return obj2483_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj2483_init = obj2483_build.call(inheritingObject, null, var_t1, var_t2, this, aliases, exclusions);
            return obj2483_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method new(_,_)$build(_,_,_)
          this.methods["new(2)$build(3)"] = func2482;
          func2482.paramCounts = [2];
          func2482.paramNames = ["t1", "t2"];
          func2482.typeParamNames = [];
          func2482.definitionLine = 421;
          func2482.definitionModule = "standardGraceClass";
          var func2510 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(421);    // compilenode string
            var string2511 = new GraceString("class TypeIntersection");
            return string2511;
          };    // end of method asString
          this.methods["asString"] = func2510;
          func2510.paramCounts = [0];
          func2510.paramNames = [];
          func2510.typeParamNames = [];
          func2510.definitionLine = 421;
          func2510.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj2480_init = function() {    // init of object on line 421
          };
          return obj2480_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj2480 = emptyGraceObject("TypeIntersection", "standardGraceClass", 421);
        var obj2480_init = obj2480_build.call(obj2480, null, this, [], []);
        obj2480_init.call(obj2480);  // end of compileobject
        this.data.TypeIntersection = obj2480;
        setLineNumber(442);    // compilenode object
        var obj2512_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_442");
          this.outer_standardGraceClass_442 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func2513 = function(argcv, var_t1, var_t2) {    // method new(_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("TypeVariant.new(_,_)", "standardGraceClass", 442);
            var ouc_init = this.methods["new(2)$build(3)"].call(this, null, var_t1, var_t2, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method new(_,_)
          this.methods["new(2)"] = func2513;
          func2513.paramCounts = [2];
          func2513.paramNames = ["t1", "t2"];
          func2513.typeParamNames = [];
          func2513.definitionLine = 442;
          func2513.definitionModule = "standardGraceClass";
          var func2514 = function(argcv, var_t1, var_t2, inheritingObject, aliases, exclusions) {    // method new(_,_)$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj2515_build = function(ignore, var_t1, var_t2, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_442");
              this.outer_standardGraceClass_442 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              setLineNumber(443);    // compilenode member
              // call case 2: outer request
              var call2516 = selfRequest(this.outer_standardGraceClass_442.outer_standardGraceClass_442, "OrPattern", []);
              var initFun2517 = callmethod(call2516, "new(2)$build(3)", [null], var_t1, var_t2, this, [], []);  // compileReuseCall
              var func2518 = function(argcv, var_o) {    // method &(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(446);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2520 = selfRequest(this.outer_standardGraceClass_442.outer_standardGraceClass_442, "TypeIntersection", []);
                var call2519 = callmethod(call2520, "new(2)", [2], this, var_o);
                return call2519;
              };    // end of method &(_)
              this.methods["&(1)"] = func2518;
              func2518.paramCounts = [1];
              func2518.paramNames = ["o"];
              func2518.typeParamNames = [];
              func2518.definitionLine = 445;
              func2518.definitionModule = "standardGraceClass";
              var func2521 = function(argcv, var_o) {    // method |(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(449);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2523 = selfRequest(this.outer_standardGraceClass_442.outer_standardGraceClass_442, "TypeVariant", []);
                var call2522 = callmethod(call2523, "new(2)", [2], this, var_o);
                return call2522;
              };    // end of method |(_)
              this.methods["|(1)"] = func2521;
              func2521.paramCounts = [1];
              func2521.paramNames = ["o"];
              func2521.typeParamNames = [];
              func2521.definitionLine = 448;
              func2521.definitionModule = "standardGraceClass";
              var func2524 = function(argcv, var_o) {    // method +(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(452);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2526 = selfRequest(this.outer_standardGraceClass_442.outer_standardGraceClass_442, "TypeUnion", []);
                var call2525 = callmethod(call2526, "new(2)", [2], this, var_o);
                return call2525;
              };    // end of method +(_)
              this.methods["+(1)"] = func2524;
              func2524.paramCounts = [1];
              func2524.paramNames = ["o"];
              func2524.typeParamNames = [];
              func2524.definitionLine = 451;
              func2524.definitionModule = "standardGraceClass";
              var func2527 = function(argcv, var_o) {    // method -(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(455);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2529 = selfRequest(this.outer_standardGraceClass_442.outer_standardGraceClass_442, "TypeSubtraction", []);
                var call2528 = callmethod(call2529, "new(2)", [2], this, var_o);
                return call2528;
              };    // end of method -(_)
              this.methods["-(1)"] = func2527;
              func2527.paramCounts = [1];
              func2527.paramNames = ["o"];
              func2527.typeParamNames = [];
              func2527.definitionLine = 454;
              func2527.definitionModule = "standardGraceClass";
              var func2530 = function(argcv) {    // method methodNames
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(458);    // compilenode member
                // call case 4: self request
                var call2531 = selfRequest(this, "TypeVariantsCannotBeCharacterizedByASetOfMethods", []);
                return call2531;
              };    // end of method methodNames
              this.methods["methodNames"] = func2530;
              func2530.paramCounts = [0];
              func2530.paramNames = [];
              func2530.typeParamNames = [];
              func2530.definitionLine = 457;
              func2530.definitionModule = "standardGraceClass";
              var func2532 = function(argcv) {    // method asString
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(460);    // compilenode string
                var string2533 = new GraceString("(");
                var opresult2534 = callmethod(string2533, "++(1)", [1], var_t1);
                var string2535 = new GraceString(" | ");
                var opresult2536 = callmethod(opresult2534, "++(1)", [1], string2535);
                var opresult2537 = callmethod(opresult2536, "++(1)", [1], var_t2);
                var string2538 = new GraceString(")");
                var opresult2539 = callmethod(opresult2537, "++(1)", [1], string2538);
                return opresult2539;
              };    // end of method asString
              this.methods["asString"] = func2532;
              func2532.paramCounts = [0];
              func2532.paramNames = [];
              func2532.typeParamNames = [];
              func2532.definitionLine = 460;
              func2532.definitionModule = "standardGraceClass";
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj2515_init = function() {    // init of object on line 442
                initFun2517.call(this);
              };
              return obj2515_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj2515_init = obj2515_build.call(inheritingObject, null, var_t1, var_t2, this, aliases, exclusions);
            return obj2515_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method new(_,_)$build(_,_,_)
          this.methods["new(2)$build(3)"] = func2514;
          func2514.paramCounts = [2];
          func2514.paramNames = ["t1", "t2"];
          func2514.typeParamNames = [];
          func2514.definitionLine = 442;
          func2514.definitionModule = "standardGraceClass";
          var func2540 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(442);    // compilenode string
            var string2541 = new GraceString("class TypeVariant");
            return string2541;
          };    // end of method asString
          this.methods["asString"] = func2540;
          func2540.paramCounts = [0];
          func2540.paramNames = [];
          func2540.typeParamNames = [];
          func2540.definitionLine = 442;
          func2540.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj2512_init = function() {    // init of object on line 442
          };
          return obj2512_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj2512 = emptyGraceObject("TypeVariant", "standardGraceClass", 442);
        var obj2512_init = obj2512_build.call(obj2512, null, this, [], []);
        obj2512_init.call(obj2512);  // end of compileobject
        this.data.TypeVariant = obj2512;
        setLineNumber(463);    // compilenode object
        var obj2542_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_463");
          this.outer_standardGraceClass_463 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func2543 = function(argcv, var_t1, var_t2) {    // method new(_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("TypeUnion.new(_,_)", "standardGraceClass", 463);
            var ouc_init = this.methods["new(2)$build(3)"].call(this, null, var_t1, var_t2, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method new(_,_)
          this.methods["new(2)"] = func2543;
          func2543.paramCounts = [2];
          func2543.paramNames = ["t1", "t2"];
          func2543.typeParamNames = [];
          func2543.definitionLine = 463;
          func2543.definitionModule = "standardGraceClass";
          var func2544 = function(argcv, var_t1, var_t2, inheritingObject, aliases, exclusions) {    // method new(_,_)$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj2545_build = function(ignore, var_t1, var_t2, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_463");
              this.outer_standardGraceClass_463 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              setLineNumber(464);    // compilenode member
              // call case 2: outer request
              var call2546 = selfRequest(this.outer_standardGraceClass_463.outer_standardGraceClass_463, "BasicPattern", []);
              var initFun2547 = callmethod(call2546, "new$build(3)", [null], this, [], []);  // compileReuseCall
              var func2548 = function(argcv, var_o) {    // method &(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(467);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2550 = selfRequest(this.outer_standardGraceClass_463.outer_standardGraceClass_463, "TypeIntersection", []);
                var call2549 = callmethod(call2550, "new(2)", [2], this, var_o);
                return call2549;
              };    // end of method &(_)
              this.methods["&(1)"] = func2548;
              func2548.paramCounts = [1];
              func2548.paramNames = ["o"];
              func2548.typeParamNames = [];
              func2548.definitionLine = 466;
              func2548.definitionModule = "standardGraceClass";
              var func2551 = function(argcv, var_o) {    // method |(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(470);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2553 = selfRequest(this.outer_standardGraceClass_463.outer_standardGraceClass_463, "TypeVariant", []);
                var call2552 = callmethod(call2553, "new(2)", [2], this, var_o);
                return call2552;
              };    // end of method |(_)
              this.methods["|(1)"] = func2551;
              func2551.paramCounts = [1];
              func2551.paramNames = ["o"];
              func2551.typeParamNames = [];
              func2551.definitionLine = 469;
              func2551.definitionModule = "standardGraceClass";
              var func2554 = function(argcv, var_o) {    // method +(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(473);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2556 = selfRequest(this.outer_standardGraceClass_463.outer_standardGraceClass_463, "TypeUnion", []);
                var call2555 = callmethod(call2556, "new(2)", [2], this, var_o);
                return call2555;
              };    // end of method +(_)
              this.methods["+(1)"] = func2554;
              func2554.paramCounts = [1];
              func2554.paramNames = ["o"];
              func2554.typeParamNames = [];
              func2554.definitionLine = 472;
              func2554.definitionModule = "standardGraceClass";
              var func2557 = function(argcv, var_o) {    // method -(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(476);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2559 = selfRequest(this.outer_standardGraceClass_463.outer_standardGraceClass_463, "TypeSubtraction", []);
                var call2558 = callmethod(call2559, "new(2)", [2], this, var_o);
                return call2558;
              };    // end of method -(_)
              this.methods["-(1)"] = func2557;
              func2557.paramCounts = [1];
              func2557.paramNames = ["o"];
              func2557.typeParamNames = [];
              func2557.definitionLine = 475;
              func2557.definitionModule = "standardGraceClass";
              var func2560 = function(argcv) {    // method methodNames
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(479);    // compilenode member
                // call case 6: other requests
                var call2561 = callmethod(var_t1, "methodNames", []);
                // call case 6: other requests
                var call2562 = callmethod(var_t2, "methodNames", []);
                var opresult2563 = callmethod(call2561, "**(1)", [1], call2562);
                return opresult2563;
              };    // end of method methodNames
              this.methods["methodNames"] = func2560;
              func2560.paramCounts = [0];
              func2560.paramNames = [];
              func2560.typeParamNames = [];
              func2560.definitionLine = 478;
              func2560.definitionModule = "standardGraceClass";
              var func2564 = function(argcv, var_o) {    // method match(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(482);    // compilenode string
                var string2566 = new GraceString("matching against a TypeUnion not yet implemented");
                // call case 6: other requests
                // call case 2: outer request
                var call2567 = selfRequest(this.outer_standardGraceClass_463.outer_standardGraceClass_463, "ResourceException", []);
                var call2565 = callmethod(call2567, "raise(1)", [1], string2566);
                setLineNumber(485);    // compilenode identifier
                var var_mirror = ellipsis;
                setLineNumber(486);    // compilenode member
                // call case 6: other requests
                // call case 6: other requests
                var call2569 = callmethod(var_mirror, "reflect(1)", [1], var_o);
                var call2568 = callmethod(call2569, "methodNames", []);
                var var_oMethodNames = call2568;
                setLineNumber(487);    // compilenode member
                // call case 4: self request
                var call2571 = selfRequest(this, "methodNames", []);
                var block2572 = new GraceBlock(this, 487, 1);
                setLineNumber(1);    // compilenode identifier
                var matches2573 = function(var_each) {
                  setModuleName("standardGraceClass");
                  setLineNumber(487);    // block matches function
                  return true;
                };
                block2572.guard = matches2573;
                block2572.real = function(var_each) {
                  var if2574 = GraceDone;
                  setLineNumber(488);    // compilenode call
                  // call case 6: other requests
                  // call case 6: other requests
                  var call2576 = callmethod(var_oMethodNames, "contains(1)", [1], var_each);
                  var call2575 = callmethod(call2576, "prefix!", [0]);
                  if (Grace_isTrue(call2575)) {
                    setLineNumber(489);    // compilenode identifier
                    // call case 6: other requests
                    // call case 2: outer request
                    var call2578 = selfRequest(this.outer_standardGraceClass_463.outer_standardGraceClass_463, "FailedMatch", []);
                    var call2577 = callmethod(call2578, "new(1)", [1], var_o);
                    throw new ReturnException(call2577, returnTarget);
                  }
                  return if2574;
                };
                // call case 5: prelude request
                var call2570 = callmethod(var_prelude, "for(1)do(1)", [1, 1], call2571, block2572);
                setLineNumber(492);    // compilenode array
                var array2580 = new PrimitiveGraceList([]);
                // call case 6: other requests
                // call case 2: outer request
                var call2581 = selfRequest(this.outer_standardGraceClass_463.outer_standardGraceClass_463, "SuccessfulMatch", []);
                var call2579 = callmethod(call2581, "new(2)", [2], var_o, array2580);
                return call2579;
                return undefined;
              };    // end of method match(_)
              this.methods["match(1)"] = func2564;
              func2564.paramCounts = [1];
              func2564.paramNames = ["o"];
              func2564.typeParamNames = [];
              func2564.definitionLine = 481;
              func2564.definitionModule = "standardGraceClass";
              var func2582 = function(argcv) {    // method asString
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(494);    // compilenode string
                var string2583 = new GraceString("(");
                var opresult2584 = callmethod(string2583, "++(1)", [1], var_t1);
                var string2585 = new GraceString(" + ");
                var opresult2586 = callmethod(opresult2584, "++(1)", [1], string2585);
                var opresult2587 = callmethod(opresult2586, "++(1)", [1], var_t2);
                var string2588 = new GraceString(")");
                var opresult2589 = callmethod(opresult2587, "++(1)", [1], string2588);
                return opresult2589;
              };    // end of method asString
              this.methods["asString"] = func2582;
              func2582.paramCounts = [0];
              func2582.paramNames = [];
              func2582.typeParamNames = [];
              func2582.definitionLine = 494;
              func2582.definitionModule = "standardGraceClass";
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj2545_init = function() {    // init of object on line 463
                initFun2547.call(this);
              };
              return obj2545_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj2545_init = obj2545_build.call(inheritingObject, null, var_t1, var_t2, this, aliases, exclusions);
            return obj2545_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method new(_,_)$build(_,_,_)
          this.methods["new(2)$build(3)"] = func2544;
          func2544.paramCounts = [2];
          func2544.paramNames = ["t1", "t2"];
          func2544.typeParamNames = [];
          func2544.definitionLine = 463;
          func2544.definitionModule = "standardGraceClass";
          var func2590 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(463);    // compilenode string
            var string2591 = new GraceString("class TypeUnion");
            return string2591;
          };    // end of method asString
          this.methods["asString"] = func2590;
          func2590.paramCounts = [0];
          func2590.paramNames = [];
          func2590.typeParamNames = [];
          func2590.definitionLine = 463;
          func2590.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj2542_init = function() {    // init of object on line 463
          };
          return obj2542_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj2542 = emptyGraceObject("TypeUnion", "standardGraceClass", 463);
        var obj2542_init = obj2542_build.call(obj2542, null, this, [], []);
        obj2542_init.call(obj2542);  // end of compileobject
        this.data.TypeUnion = obj2542;
        setLineNumber(497);    // compilenode object
        var obj2592_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_497");
          this.outer_standardGraceClass_497 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func2593 = function(argcv, var_t1, var_t2) {    // method new(_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("TypeSubtraction.new(_,_)", "standardGraceClass", 497);
            var ouc_init = this.methods["new(2)$build(3)"].call(this, null, var_t1, var_t2, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method new(_,_)
          this.methods["new(2)"] = func2593;
          func2593.paramCounts = [2];
          func2593.paramNames = ["t1", "t2"];
          func2593.typeParamNames = [];
          func2593.definitionLine = 497;
          func2593.definitionModule = "standardGraceClass";
          var func2594 = function(argcv, var_t1, var_t2, inheritingObject, aliases, exclusions) {    // method new(_,_)$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj2595_build = function(ignore, var_t1, var_t2, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_497");
              this.outer_standardGraceClass_497 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              setLineNumber(498);    // compilenode member
              // call case 2: outer request
              var call2596 = selfRequest(this.outer_standardGraceClass_497.outer_standardGraceClass_497, "BasicPattern", []);
              var initFun2597 = callmethod(call2596, "new$build(3)", [null], this, [], []);  // compileReuseCall
              var func2598 = function(argcv, var_o) {    // method &(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(500);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2600 = selfRequest(this.outer_standardGraceClass_497.outer_standardGraceClass_497, "TypeIntersection", []);
                var call2599 = callmethod(call2600, "new(2)", [2], this, var_o);
                return call2599;
              };    // end of method &(_)
              this.methods["&(1)"] = func2598;
              func2598.paramCounts = [1];
              func2598.paramNames = ["o"];
              func2598.typeParamNames = [];
              func2598.definitionLine = 499;
              func2598.definitionModule = "standardGraceClass";
              var func2601 = function(argcv, var_o) {    // method |(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(503);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2603 = selfRequest(this.outer_standardGraceClass_497.outer_standardGraceClass_497, "TypeVariant", []);
                var call2602 = callmethod(call2603, "new(2)", [2], this, var_o);
                return call2602;
              };    // end of method |(_)
              this.methods["|(1)"] = func2601;
              func2601.paramCounts = [1];
              func2601.paramNames = ["o"];
              func2601.typeParamNames = [];
              func2601.definitionLine = 502;
              func2601.definitionModule = "standardGraceClass";
              var func2604 = function(argcv, var_o) {    // method +(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(506);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2606 = selfRequest(this.outer_standardGraceClass_497.outer_standardGraceClass_497, "TypeUnion", []);
                var call2605 = callmethod(call2606, "new(2)", [2], this, var_o);
                return call2605;
              };    // end of method +(_)
              this.methods["+(1)"] = func2604;
              func2604.paramCounts = [1];
              func2604.paramNames = ["o"];
              func2604.typeParamNames = [];
              func2604.definitionLine = 505;
              func2604.definitionModule = "standardGraceClass";
              var func2607 = function(argcv, var_o) {    // method -(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(509);    // compilenode identifier
                // call case 6: other requests
                // call case 2: outer request
                var call2609 = selfRequest(this.outer_standardGraceClass_497.outer_standardGraceClass_497, "TypeSubtraction", []);
                var call2608 = callmethod(call2609, "new(2)", [2], this, var_o);
                return call2608;
              };    // end of method -(_)
              this.methods["-(1)"] = func2607;
              func2607.paramCounts = [1];
              func2607.paramNames = ["o"];
              func2607.typeParamNames = [];
              func2607.definitionLine = 508;
              func2607.definitionModule = "standardGraceClass";
              var func2610 = function(argcv) {    // method methodNames
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(512);    // compilenode member
                // call case 6: other requests
                var call2612 = callmethod(var_t2, "methodNames", []);
                // call case 6: other requests
                // call case 6: other requests
                var call2613 = callmethod(var_t1, "methodNames", []);
                var call2611 = callmethod(call2613, "removeAll(1)", [1], call2612);
                return call2611;
              };    // end of method methodNames
              this.methods["methodNames"] = func2610;
              func2610.paramCounts = [0];
              func2610.paramNames = [];
              func2610.typeParamNames = [];
              func2610.definitionLine = 511;
              func2610.definitionModule = "standardGraceClass";
              var func2614 = function(argcv) {    // method asString
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(514);    // compilenode string
                var string2615 = new GraceString("(");
                var opresult2616 = callmethod(string2615, "++(1)", [1], var_t1);
                var string2617 = new GraceString(" - ");
                var opresult2618 = callmethod(opresult2616, "++(1)", [1], string2617);
                var opresult2619 = callmethod(opresult2618, "++(1)", [1], var_t2);
                var string2620 = new GraceString(")");
                var opresult2621 = callmethod(opresult2619, "++(1)", [1], string2620);
                return opresult2621;
              };    // end of method asString
              this.methods["asString"] = func2614;
              func2614.paramCounts = [0];
              func2614.paramNames = [];
              func2614.typeParamNames = [];
              func2614.definitionLine = 514;
              func2614.definitionModule = "standardGraceClass";
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj2595_init = function() {    // init of object on line 497
                initFun2597.call(this);
              };
              return obj2595_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj2595_init = obj2595_build.call(inheritingObject, null, var_t1, var_t2, this, aliases, exclusions);
            return obj2595_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method new(_,_)$build(_,_,_)
          this.methods["new(2)$build(3)"] = func2594;
          func2594.paramCounts = [2];
          func2594.paramNames = ["t1", "t2"];
          func2594.typeParamNames = [];
          func2594.definitionLine = 497;
          func2594.definitionModule = "standardGraceClass";
          var func2622 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(497);    // compilenode string
            var string2623 = new GraceString("class TypeSubtraction");
            return string2623;
          };    // end of method asString
          this.methods["asString"] = func2622;
          func2622.paramCounts = [0];
          func2622.paramNames = [];
          func2622.typeParamNames = [];
          func2622.definitionLine = 497;
          func2622.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj2592_init = function() {    // init of object on line 497
          };
          return obj2592_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj2592 = emptyGraceObject("TypeSubtraction", "standardGraceClass", 497);
        var obj2592_init = obj2592_build.call(obj2592, null, this, [], []);
        obj2592_init.call(obj2592);  // end of compileobject
        this.data.TypeSubtraction = obj2592;
        setLineNumber(520);    // compilenode typeliteral
        //   Type literal 
        var type2624 = new GraceType("Extractable");
        type2624.typeMethods.push("extract");
        this.data.Extractable = type2624;
        setLineNumber(524);    // compilenode typeliteral
        //   Type literal 
        var type2625 = new GraceType("\u2039anon\u203a");
        type2625.typeMethods.push("result");
        type2625.typeMethods.push("bindings");
        var opresult2626 = callmethod(var_Boolean, "&(1)", [1], type2625);
        this.data.MatchResult = opresult2626;
        setLineNumber(529);    // compilenode typeliteral
        //   Type literal 
        var type2627 = new GraceType("Pattern");
        type2627.typeMethods.push("&(1)");
        type2627.typeMethods.push("|(1)");
        type2627.typeMethods.push("match(1)");
        this.data.Pattern = type2627;
        setLineNumber(535);    // compilenode member
        // call case 4: self request
        var call2628 = selfRequest(this, "Pattern", []);
        //   Type literal 
        var type2629 = new GraceType("\u2039anon\u203a");
        type2629.typeMethods.push("refine(1)");
        type2629.typeMethods.push("parent");
        type2629.typeMethods.push("raise(1)");
        type2629.typeMethods.push("raise(1)with(1)");
        var opresult2630 = callmethod(call2628, "&(1)", [1], type2629);
        this.data.ExceptionKind = opresult2630;
        setLineNumber(542);    // compilenode typeliteral
        //   Type literal 
        var type2631 = new GraceType("Point");
        type2631.typeMethods.push("x");
        type2631.typeMethods.push("y");
        type2631.typeMethods.push("==(1)");
        type2631.typeMethods.push("+(1)");
        type2631.typeMethods.push("-(1)");
        type2631.typeMethods.push("prefix-");
        type2631.typeMethods.push("*(1)");
        type2631.typeMethods.push("/(1)");
        type2631.typeMethods.push("length");
        type2631.typeMethods.push("distanceTo(1)");
        type2631.typeMethods.push("dot(1)");
        type2631.typeMethods.push("\u22c5(1)");
        type2631.typeMethods.push("norm");
        this.data.Point = type2631;
        setLineNumber(624);    // compilenode typeliteral
        //   Type literal 
        var type2632 = new GraceType("Block0");
        type2632.typeMethods.push("apply");
        this.data.Block0 = type2632;
        setLineNumber(628);    // compilenode typeliteral
        //   Type literal 
        var type2633 = new GraceType("Block1");
        type2633.typeMethods.push("apply(1)");
        this.data.Block1 = type2633;
        setLineNumber(632);    // compilenode typeliteral
        //   Type literal 
        var type2634 = new GraceType("Block2");
        type2634.typeMethods.push("apply(2)");
        this.data.Block2 = type2634;
        setLineNumber(636);    // compilenode typeliteral
        //   Type literal 
        var type2635 = new GraceType("Block3");
        type2635.typeMethods.push("apply(3)");
        this.data.Block3 = type2635;
        setLineNumber(640);    // compilenode member
        // call case 4: self request
        var call2636 = selfRequest(this, "Block0", []);
        this.data.Cmd = call2636;
        setLineNumber(641);    // compilenode member
        // call case 4: self request
        var call2637 = selfRequest(this, "Block1", []);
        this.data.Fun = call2637;
        setLineNumber(642);    // compilenode member
        // call case 4: self request
        var call2638 = selfRequest(this, "Block2", []);
        this.data.Fun2 = call2638;
        setLineNumber(643);    // compilenode member
        // call case 4: self request
        var call2639 = selfRequest(this, "Block3", []);
        this.data.Fun3 = call2639;
        setLineNumber(644);    // compilenode member
        // call case 4: self request
        var call2640 = selfRequest(this, "Block1", []);
        this.data.Proc = call2640;
        setLineNumber(645);    // compilenode member
        // call case 4: self request
        var call2641 = selfRequest(this, "Block2", []);
        this.data.Proc2 = call2641;
        setLineNumber(646);    // compilenode member
        // call case 4: self request
        var call2642 = selfRequest(this, "Block3", []);
        this.data.Proc3 = call2642;
        setLineNumber(648);    // compilenode identifier
        this.data.SelfType = var_Unknown;
        setLineNumber(654);    // compilenode typeliteral
        //   Type literal 
        var type2643 = new GraceType("\u2039anon\u203a");
        type2643.typeMethods.push("iterator");
        type2643.typeMethods.push("isEmpty");
        type2643.typeMethods.push("size");
        type2643.typeMethods.push("sizeIfUnknown(1)");
        type2643.typeMethods.push("first");
        type2643.typeMethods.push("do(1)");
        type2643.typeMethods.push("do(1)separatedBy(1)");
        type2643.typeMethods.push("++(1)");
        type2643.typeMethods.push("fold(1)startingWith(1)");
        type2643.typeMethods.push("map(1)");
        type2643.typeMethods.push("filter(1)");
        var opresult2644 = callmethod(var_Object, "&(1)", [1], type2643);
        this.data.Iterable = opresult2644;
        setLineNumber(680);    // compilenode member
        // call case 4: self request
        var call2645 = selfRequest(this, "Iterable", []);
        //   Type literal 
        var type2646 = new GraceType("\u2039anon\u203a");
        type2646.typeMethods.push("add(1)");
        type2646.typeMethods.push("addAll(1)");
        var opresult2647 = callmethod(call2645, "&(1)", [1], type2646);
        this.data.Expandable = opresult2647;
        setLineNumber(685);    // compilenode member
        // call case 4: self request
        var call2648 = selfRequest(this, "Iterable", []);
        this.data.Collection = call2648;
        setLineNumber(687);    // compilenode member
        // call case 4: self request
        var call2649 = selfRequest(this, "Collection", []);
        //   Type literal 
        var type2650 = new GraceType("\u2039anon\u203a");
        type2650.typeMethods.push("values");
        type2650.typeMethods.push("asDictionary");
        type2650.typeMethods.push("keysAndValuesDo(1)");
        type2650.typeMethods.push("into(1)");
        type2650.typeMethods.push("sortedBy(1)");
        type2650.typeMethods.push("sorted");
        var opresult2651 = callmethod(call2649, "&(1)", [1], type2650);
        this.data.Enumerable = opresult2651;
        setLineNumber(696);    // compilenode member
        // call case 4: self request
        var call2652 = selfRequest(this, "Enumerable", []);
        //   Type literal 
        var type2653 = new GraceType("\u2039anon\u203a");
        type2653.typeMethods.push("size");
        type2653.typeMethods.push("at(1)");
        type2653.typeMethods.push("indices");
        type2653.typeMethods.push("keys");
        type2653.typeMethods.push("second");
        type2653.typeMethods.push("third");
        type2653.typeMethods.push("fourth");
        type2653.typeMethods.push("fifth");
        type2653.typeMethods.push("last");
        type2653.typeMethods.push("indexOf(1)ifAbsent(1)");
        type2653.typeMethods.push("indexOf(1)");
        type2653.typeMethods.push("contains(1)");
        type2653.typeMethods.push("reversed");
        var opresult2654 = callmethod(call2652, "&(1)", [1], type2653);
        this.data.Sequence = opresult2654;
        setLineNumber(712);    // compilenode member
        // call case 4: self request
        var call2655 = selfRequest(this, "Sequence", []);
        //   Type literal 
        var type2656 = new GraceType("\u2039anon\u203a");
        type2656.typeMethods.push("add(1)");
        type2656.typeMethods.push("addAll(1)");
        type2656.typeMethods.push("addFirst(1)");
        type2656.typeMethods.push("addAllFirst(1)");
        type2656.typeMethods.push("addLast(1)");
        type2656.typeMethods.push("at(1)put(1)");
        type2656.typeMethods.push("clear");
        type2656.typeMethods.push("removeFirst");
        type2656.typeMethods.push("removeAt(1)");
        type2656.typeMethods.push("removeLast");
        type2656.typeMethods.push("remove(1)");
        type2656.typeMethods.push("remove(1)ifAbsent(1)");
        type2656.typeMethods.push("removeAll(1)");
        type2656.typeMethods.push("removeAll(1)ifAbsent(1)");
        type2656.typeMethods.push("pop");
        type2656.typeMethods.push("++(1)");
        type2656.typeMethods.push("addAll(1)");
        type2656.typeMethods.push("copy");
        type2656.typeMethods.push("sort");
        type2656.typeMethods.push("sortBy(1)");
        type2656.typeMethods.push("reverse");
        type2656.typeMethods.push("reversed");
        var opresult2657 = callmethod(call2655, "&(1)", [1], type2656);
        this.data.List = opresult2657;
        setLineNumber(737);    // compilenode member
        // call case 4: self request
        var call2658 = selfRequest(this, "Collection", []);
        //   Type literal 
        var type2659 = new GraceType("\u2039anon\u203a");
        type2659.typeMethods.push("size");
        type2659.typeMethods.push("add(1)");
        type2659.typeMethods.push("addAll(1)");
        type2659.typeMethods.push("remove(1)");
        type2659.typeMethods.push("remove(1)ifAbsent(1)");
        type2659.typeMethods.push("clear");
        type2659.typeMethods.push("includes(1)");
        type2659.typeMethods.push("find(1)ifNone(1)");
        type2659.typeMethods.push("copy");
        type2659.typeMethods.push("contains(1)");
        type2659.typeMethods.push("**(1)");
        type2659.typeMethods.push("--(1)");
        type2659.typeMethods.push("++(1)");
        type2659.typeMethods.push("isSubset(1)");
        type2659.typeMethods.push("isSuperset(1)");
        type2659.typeMethods.push("removeAll(1)");
        type2659.typeMethods.push("removeAll(1)ifAbsent(1)");
        type2659.typeMethods.push("into(1)");
        var opresult2660 = callmethod(call2658, "&(1)", [1], type2659);
        this.data.Set = opresult2660;
        setLineNumber(758);    // compilenode member
        // call case 4: self request
        var call2661 = selfRequest(this, "Collection", []);
        //   Type literal 
        var type2662 = new GraceType("\u2039anon\u203a");
        type2662.typeMethods.push("size");
        type2662.typeMethods.push("containsKey(1)");
        type2662.typeMethods.push("containsValue(1)");
        type2662.typeMethods.push("contains(1)");
        type2662.typeMethods.push("at(1)ifAbsent(1)");
        type2662.typeMethods.push("at(1)put(1)");
        type2662.typeMethods.push("at(1)");
        type2662.typeMethods.push("removeAllKeys(1)");
        type2662.typeMethods.push("removeKey(1)");
        type2662.typeMethods.push("removeAllValues(1)");
        type2662.typeMethods.push("removeValue(1)");
        type2662.typeMethods.push("clear");
        type2662.typeMethods.push("keys");
        type2662.typeMethods.push("values");
        type2662.typeMethods.push("bindings");
        type2662.typeMethods.push("keysAndValuesDo(1)");
        type2662.typeMethods.push("keysDo(1)");
        type2662.typeMethods.push("valuesDo(1)");
        type2662.typeMethods.push("==(1)");
        type2662.typeMethods.push("copy");
        type2662.typeMethods.push("++(1)");
        type2662.typeMethods.push("--(1)");
        type2662.typeMethods.push("asDictionary");
        var opresult2663 = callmethod(call2661, "&(1)", [1], type2662);
        this.data.Dictionary = opresult2663;
        setLineNumber(784);    // compilenode typeliteral
        //   Type literal 
        var type2664 = new GraceType("Iterator");
        type2664.typeMethods.push("hasNext");
        type2664.typeMethods.push("next");
        this.data.Iterator = type2664;
        setLineNumber(873);    // compilenode object
        var obj2665_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_873");
          this.outer_standardGraceClass_873 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          setLineNumber(874);    // compilenode identifier
          var initFun2666 = callmethod(var_traits, "indexable$build(3)", [null], this, [], []);  // compileReuseCall
          var func2667 = function(argcv) {    // method size
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(875);    // compilenode num
            return new GraceNum(0);
          };    // end of method size
          this.methods["size"] = func2667;
          func2667.paramCounts = [0];
          func2667.paramNames = [];
          func2667.typeParamNames = [];
          func2667.definitionLine = 875;
          func2667.definitionModule = "standardGraceClass";
          var func2668 = function(argcv) {     // accessor method isEmpty
            return GraceTrue;
          };    // end of method isEmpty
          this.methods["isEmpty"] = func2668;
          func2668.paramCounts = [0];
          func2668.paramNames = [];
          func2668.typeParamNames = [];
          func2668.definitionLine = 876;
          func2668.definitionModule = "standardGraceClass";
          setLineNumber(876);    // compilenode identifier
          var func2669 = function(argcv, var_n) {    // method at(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(877);    // compilenode string
            var string2671 = new GraceString("index ");
            var opresult2672 = callmethod(string2671, "++(1)", [1], var_n);
            var string2673 = new GraceString(" of empty sequence");
            var opresult2674 = callmethod(opresult2672, "++(1)", [1], string2673);
            // call case 6: other requests
            // call case 2: outer request
            var call2675 = selfRequest(this.outer_standardGraceClass_873, "BoundsError", []);
            var call2670 = callmethod(call2675, "raise(1)", [1], opresult2674);
            return call2670;
          };    // end of method at(_)
          this.methods["at(1)"] = func2669;
          func2669.paramCounts = [1];
          func2669.paramNames = ["n"];
          func2669.typeParamNames = [];
          func2669.definitionLine = 877;
          func2669.definitionModule = "standardGraceClass";
          var func2676 = function(argcv) {     // accessor method keys
            return this;
          };    // end of method keys
          this.methods["keys"] = func2676;
          func2676.paramCounts = [0];
          func2676.paramNames = [];
          func2676.typeParamNames = [];
          func2676.definitionLine = 878;
          func2676.definitionModule = "standardGraceClass";
          var func2677 = function(argcv) {     // accessor method values
            return this;
          };    // end of method values
          this.methods["values"] = func2677;
          func2677.paramCounts = [0];
          func2677.paramNames = [];
          func2677.typeParamNames = [];
          func2677.definitionLine = 879;
          func2677.definitionModule = "standardGraceClass";
          var func2678 = function(argcv, var_block2) {     // accessor method keysAndValuesDo(1)
            return var_done;
          };    // end of method keysAndValuesDo(_)
          this.methods["keysAndValuesDo(1)"] = func2678;
          func2678.paramCounts = [1];
          func2678.paramNames = ["block2"];
          func2678.typeParamNames = [];
          func2678.definitionLine = 880;
          func2678.definitionModule = "standardGraceClass";
          var func2679 = function(argcv) {     // accessor method reversed
            return this;
          };    // end of method reversed
          this.methods["reversed"] = func2679;
          func2679.paramCounts = [0];
          func2679.paramNames = [];
          func2679.typeParamNames = [];
          func2679.definitionLine = 881;
          func2679.definitionModule = "standardGraceClass";
          setLineNumber(881);    // compilenode identifier
          var func2680 = function(argcv, var_other) {    // method ++(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            // Start argument type-checks
            setLineNumber(882);    // compilenode member
            // call case 2: outer request
            var call2681 = selfRequest(this.outer_standardGraceClass_873, "Iterable", []);
            if (!Grace_isTrue(callmethod(call2681, "match(1)",  [1], var_other)))
                raiseTypeError("in request of `++(_)`, " +
                  "argument 1 is not of type " +
                  "outer.Iterable", call2681, var_other);
            // End argument type-checks
            // call case 6: other requests
            // call case 2: outer request
            var call2683 = selfRequest(this.outer_standardGraceClass_873, "sequence", []);
            var call2682 = callmethod(call2683, "withAll(1)", [1], var_other);
            return call2682;
          };    // end of method ++(_)
          this.methods["++(1)"] = func2680;
          func2680.paramCounts = [1];
          func2680.paramNames = ["other"];
          func2680.typeParamNames = [];
          func2680.definitionLine = 882;
          func2680.definitionModule = "standardGraceClass";
          var func2684 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(883);    // compilenode string
            var string2685 = new GraceString("\u27e8\u27e9");
            return string2685;
          };    // end of method asString
          this.methods["asString"] = func2684;
          func2684.paramCounts = [0];
          func2684.paramNames = [];
          func2684.typeParamNames = [];
          func2684.definitionLine = 883;
          func2684.definitionModule = "standardGraceClass";
          var func2686 = function(argcv, var_element) {     // accessor method contains(1)
            return GraceFalse;
          };    // end of method contains(_)
          this.methods["contains(1)"] = func2686;
          func2686.paramCounts = [1];
          func2686.paramNames = ["element"];
          func2686.typeParamNames = [];
          func2686.definitionLine = 884;
          func2686.definitionModule = "standardGraceClass";
          var func2687 = function(argcv, var_block1) {     // accessor method do(1)
            return var_done;
          };    // end of method do(_)
          this.methods["do(1)"] = func2687;
          func2687.paramCounts = [1];
          func2687.paramNames = ["block1"];
          func2687.typeParamNames = [];
          func2687.definitionLine = 885;
          func2687.definitionModule = "standardGraceClass";
          setLineNumber(885);    // compilenode identifier
          var func2688 = function(argcv, var_other) {    // method ==(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(887);    // compilenode identifier
            var cases2689 = [];
            setLineNumber(888);    // compilenode block
            var block2690 = new GraceBlock(this, 888, 1);
            // call case 2: outer request
            var call2691 = selfRequest(this.outer_standardGraceClass_873, "Iterable", []);
            block2690.paramTypes = [call2691];
            var matches2692 = function(var_o) {
              setModuleName("standardGraceClass");
              // call case 2: outer request
              var call2693 = selfRequest(this.outer_standardGraceClass_873, "Iterable", []);
              if (!Grace_isTrue(callmethod(call2693, "match(1)", [1], var_o)))
                  return false;
              return true;
            };
            block2690.guard = matches2692;
            block2690.real = function(var_o) {
              setLineNumber(889);    // compilenode member
              // call case 6: other requests
              var call2694 = callmethod(var_o, "isEmpty", []);
              return call2694;
            };
            cases2689.push(block2690);
            setLineNumber(891);    // compilenode block
            var block2695 = new GraceBlock(this, 891, 1);
            setLineNumber(1);    // compilenode identifier
            var matches2696 = function(var___95____95__21) {
              setModuleName("standardGraceClass");
              setLineNumber(891);    // block matches function
              return true;
            };
            block2695.guard = matches2696;
            block2695.real = function(var___95____95__21) {
              setLineNumber(892);    // compilenode identifier
              return GraceFalse;
            };
            cases2689.push(block2695);
            setLineNumber(887);    // compilematchcase
            var matchres2689 = matchCase(var_other,cases2689,false);
            setModuleName("standardGraceClass");
            return matchres2689;
          };    // end of method ==(_)
          this.methods["==(1)"] = func2688;
          func2688.paramCounts = [1];
          func2688.paramNames = ["other"];
          func2688.typeParamNames = [];
          func2688.definitionLine = 886;
          func2688.definitionModule = "standardGraceClass";
          var func2697 = function(argcv) {    // method iterator
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("emptySequence.iterator", "standardGraceClass", 895);
            var ouc_init = this.methods["iterator$build(3)"].call(this, null, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method iterator
          this.methods["iterator"] = func2697;
          func2697.paramCounts = [0];
          func2697.paramNames = [];
          func2697.typeParamNames = [];
          func2697.definitionLine = 895;
          func2697.definitionModule = "standardGraceClass";
          var func2698 = function(argcv, inheritingObject, aliases, exclusions) {    // method iterator$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj2699_build = function(ignore, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_895");
              this.outer_standardGraceClass_895 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              var func2700 = function(argcv) {    // method asString
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(896);    // compilenode string
                var string2701 = new GraceString("emptySequenceIterator");
                return string2701;
              };    // end of method asString
              this.methods["asString"] = func2700;
              func2700.paramCounts = [0];
              func2700.paramNames = [];
              func2700.typeParamNames = [];
              func2700.definitionLine = 896;
              func2700.definitionModule = "standardGraceClass";
              var func2702 = function(argcv) {     // accessor method hasNext
                return GraceFalse;
              };    // end of method hasNext
              this.methods["hasNext"] = func2702;
              func2702.paramCounts = [0];
              func2702.paramNames = [];
              func2702.typeParamNames = [];
              func2702.definitionLine = 897;
              func2702.definitionModule = "standardGraceClass";
              setLineNumber(897);    // compilenode identifier
              var func2703 = function(argcv) {    // method next
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(898);    // compilenode string
                var string2705 = new GraceString("on empty sequence");
                // call case 6: other requests
                // call case 2: outer request
                var call2706 = selfRequest(this.outer_standardGraceClass_895.outer_standardGraceClass_873, "IteratorExhausted", []);
                var call2704 = callmethod(call2706, "raise(1)", [1], string2705);
                return call2704;
              };    // end of method next
              this.methods["next"] = func2703;
              func2703.paramCounts = [0];
              func2703.paramNames = [];
              func2703.typeParamNames = [];
              func2703.definitionLine = 898;
              func2703.definitionModule = "standardGraceClass";
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj2699_init = function() {    // init of object on line 895
              };
              return obj2699_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj2699_init = obj2699_build.call(inheritingObject, null, this, aliases, exclusions);
            return obj2699_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method iterator$build(_,_,_)
          this.methods["iterator$build(3)"] = func2698;
          func2698.paramCounts = [0];
          func2698.paramNames = [];
          func2698.typeParamNames = [];
          func2698.definitionLine = 895;
          func2698.definitionModule = "standardGraceClass";
          var func2707 = function(argcv) {     // accessor method sorted
            return this;
          };    // end of method sorted
          this.methods["sorted"] = func2707;
          func2707.paramCounts = [0];
          func2707.paramNames = [];
          func2707.typeParamNames = [];
          func2707.definitionLine = 900;
          func2707.definitionModule = "standardGraceClass";
          var func2708 = function(argcv, var_sortBlock) {     // accessor method sortedBy(1)
            return this;
          };    // end of method sortedBy(_)
          this.methods["sortedBy(1)"] = func2708;
          func2708.paramCounts = [1];
          func2708.paramNames = ["sortBlock"];
          func2708.typeParamNames = [];
          func2708.definitionLine = 901;
          func2708.definitionModule = "standardGraceClass";
          setLineNumber(901);    // compilenode identifier
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj2665_init = function() {    // init of object on line 873
            initFun2666.call(this);
          };
          return obj2665_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj2665 = emptyGraceObject("emptySequence", "standardGraceClass", 873);
        var obj2665_init = obj2665_build.call(obj2665, null, this, [], []);
        obj2665_init.call(obj2665);  // end of compileobject
        this.data.emptySequence = obj2665;
        setLineNumber(1042);    // compilenode typeliteral
        //   Type literal 
        var type2709 = new GraceType("MinimalyIterable");
        type2709.typeMethods.push("iterator");
        this.data.MinimalyIterable = type2709;
        setLineNumber(1342);    // compilenode object
        var obj2710_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_1342");
          this.outer_standardGraceClass_1342 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          this.data.unused = undefined;
          var reader_unused2711 = function() {  // reader method unused
              return this.data.unused;
          };
          reader_unused2711.isVar = true;
          reader_unused2711.confidential = true;
          this.methods["unused"] = reader_unused2711;
          var writer_unused2711 = function(argcv, n) {   // writer method unused:=(_)
              this.data.unused = n;
              return GraceDone;
          };
          writer_unused2711.confidential = true;
          this.methods["unused:=(1)"] = writer_unused2711;
          this.data.key = undefined;
          var reader_key2712 = function() {  // reader method key
              return this.data.key;
          };
          reader_key2712.isDef = true;
          this.methods["key"] = reader_key2712;
          this.data.value = undefined;
          var reader_value2713 = function() {  // reader method value
              return this.data.value;
          };
          reader_value2713.isDef = true;
          this.methods["value"] = reader_value2713;
          var func2714 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(1346);    // compilenode string
            var string2715 = new GraceString("unused");
            return string2715;
          };    // end of method asString
          this.methods["asString"] = func2714;
          func2714.paramCounts = [0];
          func2714.paramNames = [];
          func2714.typeParamNames = [];
          func2714.definitionLine = 1346;
          func2714.definitionModule = "standardGraceClass";
          var func2716 = function(argcv, var_other) {    // method ==(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(1347);    // compilenode identifier
            // call case 4: self request
            var call2717 = selfRequest(this, "isMe(1)", [1], var_other);
            return call2717;
          };    // end of method ==(_)
          this.methods["==(1)"] = func2716;
          func2716.paramCounts = [1];
          func2716.paramNames = ["other"];
          func2716.typeParamNames = [];
          func2716.definitionLine = 1347;
          func2716.definitionModule = "standardGraceClass";
          this.mutable = true;
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj2710_init = function() {    // init of object on line 1342
            setLineNumber(1343);    // compilenode identifier
            this.data.unused = GraceTrue;
            setLineNumber(1344);    // compilenode identifier
            this.data.key = this;
            setLineNumber(1345);    // compilenode identifier
            this.data.value = this;
          };
          return obj2710_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj2710 = emptyGraceObject("unused", "standardGraceClass", 1342);
        var obj2710_init = obj2710_build.call(obj2710, null, this, [], []);
        obj2710_init.call(obj2710);  // end of compileobject
        this.data.unused = obj2710;
        setLineNumber(1350);    // compilenode object
        var obj2718_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_1350");
          this.outer_standardGraceClass_1350 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          this.data.removed = undefined;
          var reader_removed2719 = function() {  // reader method removed
              return this.data.removed;
          };
          reader_removed2719.isVar = true;
          reader_removed2719.confidential = true;
          this.methods["removed"] = reader_removed2719;
          var writer_removed2719 = function(argcv, n) {   // writer method removed:=(_)
              this.data.removed = n;
              return GraceDone;
          };
          writer_removed2719.confidential = true;
          this.methods["removed:=(1)"] = writer_removed2719;
          this.data.key = undefined;
          var reader_key2720 = function() {  // reader method key
              return this.data.key;
          };
          reader_key2720.isDef = true;
          this.methods["key"] = reader_key2720;
          this.data.value = undefined;
          var reader_value2721 = function() {  // reader method value
              return this.data.value;
          };
          reader_value2721.isDef = true;
          this.methods["value"] = reader_value2721;
          var func2722 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(1354);    // compilenode string
            var string2723 = new GraceString("removed");
            return string2723;
          };    // end of method asString
          this.methods["asString"] = func2722;
          func2722.paramCounts = [0];
          func2722.paramNames = [];
          func2722.typeParamNames = [];
          func2722.definitionLine = 1354;
          func2722.definitionModule = "standardGraceClass";
          var func2724 = function(argcv, var_other) {    // method ==(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(1355);    // compilenode identifier
            // call case 4: self request
            var call2725 = selfRequest(this, "isMe(1)", [1], var_other);
            return call2725;
          };    // end of method ==(_)
          this.methods["==(1)"] = func2724;
          func2724.paramCounts = [1];
          func2724.paramNames = ["other"];
          func2724.typeParamNames = [];
          func2724.definitionLine = 1355;
          func2724.definitionModule = "standardGraceClass";
          this.mutable = true;
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj2718_init = function() {    // init of object on line 1350
            setLineNumber(1351);    // compilenode identifier
            this.data.removed = GraceTrue;
            setLineNumber(1352);    // compilenode identifier
            this.data.key = this;
            setLineNumber(1353);    // compilenode identifier
            this.data.value = this;
          };
          return obj2718_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj2718 = emptyGraceObject("removed", "standardGraceClass", 1350);
        var obj2718_init = obj2718_build.call(obj2718, null, this, [], []);
        obj2718_init.call(obj2718);  // end of compileobject
        this.data.removed = obj2718;
        setLineNumber(1647);    // compilenode typeliteral
        //   Type literal 
        var type2726 = new GraceType("Binding");
        type2726.typeMethods.push("key");
        type2726.typeMethods.push("value");
        type2726.typeMethods.push("hash");
        type2726.typeMethods.push("==(1)");
        this.data.Binding = type2726;
        setLineNumber(1654);    // compilenode object
        var obj2727_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_1654");
          this.outer_standardGraceClass_1654 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func2728 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(1655);    // compilenode string
            var string2729 = new GraceString("binding class");
            return string2729;
          };    // end of method asString
          this.methods["asString"] = func2728;
          func2728.paramCounts = [0];
          func2728.paramNames = [];
          func2728.typeParamNames = [];
          func2728.definitionLine = 1655;
          func2728.definitionModule = "standardGraceClass";
          var func2730 = function(argcv, var_k, var_v) {    // method key(_)value(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("binding.key(_)value(_)", "standardGraceClass", 1657);
            var ouc_init = this.methods["key(1)value(1)$build(3)"].call(this, null, var_k, var_v, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method key(_)value(_)
          this.methods["key(1)value(1)"] = func2730;
          func2730.paramCounts = [1, 1];
          func2730.paramNames = ["k", "v"];
          func2730.typeParamNames = [];
          func2730.definitionLine = 1657;
          func2730.definitionModule = "standardGraceClass";
          var func2731 = function(argcv, var_k, var_v, inheritingObject, aliases, exclusions) {    // method key(_)value(_)$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj2732_build = function(ignore, var_k, var_v, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_1657");
              this.outer_standardGraceClass_1657 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              var func2733 = function(argcv) {     // accessor method key
                return var_k;
              };    // end of method key
              this.methods["key"] = func2733;
              func2733.paramCounts = [0];
              func2733.paramNames = [];
              func2733.typeParamNames = [];
              func2733.definitionLine = 1658;
              func2733.definitionModule = "standardGraceClass";
              var func2734 = function(argcv) {     // accessor method value
                return var_v;
              };    // end of method value
              this.methods["value"] = func2734;
              func2734.paramCounts = [0];
              func2734.paramNames = [];
              func2734.typeParamNames = [];
              func2734.definitionLine = 1659;
              func2734.definitionModule = "standardGraceClass";
              setLineNumber(1659);    // compilenode identifier
              var func2735 = function(argcv) {    // method asString
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1660);    // compilenode string
                var string2736 = new GraceString("");
                var opresult2737 = callmethod(string2736, "++(1)", [1], var_k);
                var string2738 = new GraceString("::");
                var opresult2739 = callmethod(opresult2737, "++(1)", [1], string2738);
                var opresult2740 = callmethod(opresult2739, "++(1)", [1], var_v);
                var string2741 = new GraceString("");
                var opresult2742 = callmethod(opresult2740, "++(1)", [1], string2741);
                return opresult2742;
              };    // end of method asString
              this.methods["asString"] = func2735;
              func2735.paramCounts = [0];
              func2735.paramNames = [];
              func2735.typeParamNames = [];
              func2735.definitionLine = 1660;
              func2735.definitionModule = "standardGraceClass";
              var func2743 = function(argcv) {    // method hashcode
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1661);    // compilenode member
                // call case 6: other requests
                var call2744 = callmethod(var_k, "hashcode", []);
                var prod2745 = callmethod(call2744, "*(1)", [1], new GraceNum(1021));
                // call case 6: other requests
                var call2746 = callmethod(var_v, "hashcode", []);
                var sum2747 = callmethod(prod2745, "+(1)", [1], call2746);
                return sum2747;
              };    // end of method hashcode
              this.methods["hashcode"] = func2743;
              func2743.paramCounts = [0];
              func2743.paramNames = [];
              func2743.typeParamNames = [];
              func2743.definitionLine = 1661;
              func2743.definitionModule = "standardGraceClass";
              var func2748 = function(argcv) {    // method hash
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1662);    // compilenode member
                // call case 6: other requests
                var call2749 = callmethod(var_k, "hash", []);
                var prod2750 = callmethod(call2749, "*(1)", [1], new GraceNum(1021));
                // call case 6: other requests
                var call2751 = callmethod(var_v, "hash", []);
                var sum2752 = callmethod(prod2750, "+(1)", [1], call2751);
                return sum2752;
              };    // end of method hash
              this.methods["hash"] = func2748;
              func2748.paramCounts = [0];
              func2748.paramNames = [];
              func2748.typeParamNames = [];
              func2748.definitionLine = 1662;
              func2748.definitionModule = "standardGraceClass";
              var func2753 = function(argcv, var_other) {    // method ==(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(1664);    // compilenode identifier
                var cases2754 = [];
                setLineNumber(1665);    // compilenode block
                var block2755 = new GraceBlock(this, 1665, 1);
                // call case 2: outer request
                var call2756 = selfRequest(this.outer_standardGraceClass_1657.outer_standardGraceClass_1654, "Binding", []);
                block2755.paramTypes = [call2756];
                var matches2757 = function(var_o) {
                  setModuleName("standardGraceClass");
                  // call case 2: outer request
                  var call2758 = selfRequest(this.outer_standardGraceClass_1657.outer_standardGraceClass_1654, "Binding", []);
                  if (!Grace_isTrue(callmethod(call2758, "match(1)", [1], var_o)))
                      return false;
                  return true;
                };
                block2755.guard = matches2757;
                block2755.real = function(var_o) {
                  // call case 6: other requests
                  var call2759 = callmethod(var_o, "key", []);
                  var opresult2760 = callmethod(var_k, "==(1)", [1], call2759);
                  // call case 6: other requests
                  var call2761 = callmethod(var_o, "value", []);
                  var opresult2762 = callmethod(var_v, "==(1)", [1], call2761);
                  var opresult2763 = callmethod(opresult2760, "&&(1)", [1], opresult2762);
                  return opresult2763;
                };
                cases2754.push(block2755);
                setLineNumber(1666);    // compilenode block
                var block2764 = new GraceBlock(this, 1666, 1);
                setLineNumber(1);    // compilenode identifier
                var matches2765 = function(var___95____95__24) {
                  setModuleName("standardGraceClass");
                  setLineNumber(1666);    // block matches function
                  return true;
                };
                block2764.guard = matches2765;
                block2764.real = function(var___95____95__24) {
                  throw new ReturnException(GraceFalse, returnTarget);
                  return undefined;
                };
                cases2754.push(block2764);
                setLineNumber(1664);    // compilematchcase
                var matchres2754 = matchCase(var_other,cases2754,false);
                setModuleName("standardGraceClass");
                return matchres2754;
              };    // end of method ==(_)
              this.methods["==(1)"] = func2753;
              func2753.paramCounts = [1];
              func2753.paramNames = ["other"];
              func2753.typeParamNames = [];
              func2753.definitionLine = 1663;
              func2753.definitionModule = "standardGraceClass";
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj2732_init = function() {    // init of object on line 1657
              };
              return obj2732_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj2732_init = obj2732_build.call(inheritingObject, null, var_k, var_v, this, aliases, exclusions);
            return obj2732_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method key(_)value(_)$build(_,_,_)
          this.methods["key(1)value(1)$build(3)"] = func2731;
          func2731.paramCounts = [1, 1];
          func2731.paramNames = ["k", "v"];
          func2731.typeParamNames = [];
          func2731.definitionLine = 1657;
          func2731.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj2727_init = function() {    // init of object on line 1654
          };
          return obj2727_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj2727 = emptyGraceObject("binding", "standardGraceClass", 1654);
        var obj2727_init = obj2727_build.call(obj2727, null, this, [], []);
        obj2727_init.call(obj2727);  // end of compileobject
        this.data.binding = obj2727;
        setLineNumber(1671);    // compilenode typeliteral
        //   Type literal 
        var type2766 = new GraceType("ComparableToDictionary");
        type2766.typeMethods.push("size");
        type2766.typeMethods.push("at(1)ifAbsent(1)");
        this.data.ComparableToDictionary = type2766;
        setLineNumber(2050);    // compilenode object
        var obj2767_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_standardGraceClass_2050");
          this.outer_standardGraceClass_2050 = outerObj;
          var inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              var exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth];
          }
          var func2768 = function(argcv, var_lower, var_upper) {    // method from(_)to(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            setLineNumber(2052);    // compilenode identifier
            var cases2769 = [];
            setLineNumber(2053);    // compilenode block
            var block2770 = new GraceBlock(this, 2053, 1);
            block2770.paramTypes = [var_Number];
            var matches2771 = function(var___95____95__29) {
              setModuleName("standardGraceClass");
              if (!Grace_isTrue(callmethod(var_Number, "match(1)", [1], var___95____95__29)))
                  return false;
              return true;
            };
            block2770.guard = matches2771;
            block2770.real = function(var___95____95__29) {
              return GraceDone;
            };
            cases2769.push(block2770);
            setLineNumber(2054);    // compilenode block
            var block2772 = new GraceBlock(this, 2054, 1);
            setLineNumber(1);    // compilenode identifier
            var matches2773 = function(var___95____95__30) {
              setModuleName("standardGraceClass");
              setLineNumber(2054);    // block matches function
              return true;
            };
            block2772.guard = matches2773;
            block2772.real = function(var___95____95__30) {
              var string2775 = new GraceString("lower bound ");
              var opresult2776 = callmethod(string2775, "++(1)", [1], var_lower);
              var string2777 = new GraceString("");
              var opresult2778 = callmethod(opresult2776, "++(1)", [1], string2777);
              setLineNumber(2055);    // compilenode string
              var string2779 = new GraceString(" in range.from(");
              var opresult2780 = callmethod(string2779, "++(1)", [1], var_lower);
              var string2781 = new GraceString(")to(");
              var opresult2782 = callmethod(opresult2780, "++(1)", [1], string2781);
              var opresult2783 = callmethod(opresult2782, "++(1)", [1], var_upper);
              var string2784 = new GraceString(") is not an integer");
              var opresult2785 = callmethod(opresult2783, "++(1)", [1], string2784);
              var opresult2786 = callmethod(opresult2778, "++(1)", [1], opresult2785);
              // call case 6: other requests
              setLineNumber(2054);    // compilenode member
              // call case 2: outer request
              var call2787 = selfRequest(this.outer_standardGraceClass_2050, "RequestError", []);
              var call2774 = callmethod(call2787, "raise(1)", [1], opresult2786);
              return call2774;
            };
            cases2769.push(block2772);
            setLineNumber(2052);    // compilematchcase
            var matchres2769 = matchCase(var_lower,cases2769,false);
            setModuleName("standardGraceClass");
            setLineNumber(2056);    // compilenode member
            // call case 6: other requests
            var call2788 = callmethod(var_lower, "truncated", []);
            var var_start = call2788;
            var if2789 = GraceDone;
            setLineNumber(2057);    // compilenode identifier
            var opresult2790 = callmethod(var_start, "\u2260(1)", [1], var_lower);
            if (Grace_isTrue(opresult2790)) {
              setLineNumber(2058);    // compilenode string
              var string2792 = new GraceString("lower bound ");
              var opresult2793 = callmethod(string2792, "++(1)", [1], var_lower);
              var string2794 = new GraceString("");
              var opresult2795 = callmethod(opresult2793, "++(1)", [1], string2794);
              setLineNumber(2059);    // compilenode string
              var string2796 = new GraceString(" in range.from(");
              var opresult2797 = callmethod(string2796, "++(1)", [1], var_lower);
              var string2798 = new GraceString(")to(");
              var opresult2799 = callmethod(opresult2797, "++(1)", [1], string2798);
              var opresult2800 = callmethod(opresult2799, "++(1)", [1], var_upper);
              var string2801 = new GraceString(") is not an integer");
              var opresult2802 = callmethod(opresult2800, "++(1)", [1], string2801);
              var opresult2803 = callmethod(opresult2795, "++(1)", [1], opresult2802);
              // call case 6: other requests
              setLineNumber(2058);    // compilenode member
              // call case 2: outer request
              var call2804 = selfRequest(this.outer_standardGraceClass_2050, "RequestError", []);
              var call2791 = callmethod(call2804, "raise(1)", [1], opresult2803);
              if2789 = call2791;
            }
            setLineNumber(2061);    // compilenode identifier
            var cases2805 = [];
            setLineNumber(2062);    // compilenode block
            var block2806 = new GraceBlock(this, 2062, 1);
            block2806.paramTypes = [var_Number];
            var matches2807 = function(var___95____95__31) {
              setModuleName("standardGraceClass");
              if (!Grace_isTrue(callmethod(var_Number, "match(1)", [1], var___95____95__31)))
                  return false;
              return true;
            };
            block2806.guard = matches2807;
            block2806.real = function(var___95____95__31) {
              return GraceDone;
            };
            cases2805.push(block2806);
            setLineNumber(2063);    // compilenode block
            var block2808 = new GraceBlock(this, 2063, 1);
            setLineNumber(1);    // compilenode identifier
            var matches2809 = function(var___95____95__32) {
              setModuleName("standardGraceClass");
              setLineNumber(2063);    // block matches function
              return true;
            };
            block2808.guard = matches2809;
            block2808.real = function(var___95____95__32) {
              var string2811 = new GraceString("upper bound ");
              var opresult2812 = callmethod(string2811, "++(1)", [1], var_upper);
              var string2813 = new GraceString("");
              var opresult2814 = callmethod(opresult2812, "++(1)", [1], string2813);
              setLineNumber(2064);    // compilenode string
              var string2815 = new GraceString(" in range.from(");
              var opresult2816 = callmethod(string2815, "++(1)", [1], var_lower);
              var string2817 = new GraceString(")to(");
              var opresult2818 = callmethod(opresult2816, "++(1)", [1], string2817);
              var opresult2819 = callmethod(opresult2818, "++(1)", [1], var_upper);
              var string2820 = new GraceString(") is not an integer");
              var opresult2821 = callmethod(opresult2819, "++(1)", [1], string2820);
              var opresult2822 = callmethod(opresult2814, "++(1)", [1], opresult2821);
              // call case 6: other requests
              setLineNumber(2063);    // compilenode member
              // call case 2: outer request
              var call2823 = selfRequest(this.outer_standardGraceClass_2050, "RequestError", []);
              var call2810 = callmethod(call2823, "raise(1)", [1], opresult2822);
              return call2810;
            };
            cases2805.push(block2808);
            setLineNumber(2061);    // compilematchcase
            var matchres2805 = matchCase(var_upper,cases2805,false);
            setModuleName("standardGraceClass");
            setLineNumber(2065);    // compilenode member
            // call case 6: other requests
            var call2824 = callmethod(var_upper, "truncated", []);
            var var_stop = call2824;
            var if2825 = GraceDone;
            setLineNumber(2066);    // compilenode identifier
            var opresult2826 = callmethod(var_stop, "\u2260(1)", [1], var_upper);
            if (Grace_isTrue(opresult2826)) {
              setLineNumber(2067);    // compilenode string
              var string2828 = new GraceString("upper bound ");
              var opresult2829 = callmethod(string2828, "++(1)", [1], var_upper);
              var string2830 = new GraceString("");
              var opresult2831 = callmethod(opresult2829, "++(1)", [1], string2830);
              setLineNumber(2068);    // compilenode string
              var string2832 = new GraceString(" in range.from()to() is not an integer");
              var opresult2833 = callmethod(opresult2831, "++(1)", [1], string2832);
              // call case 6: other requests
              setLineNumber(2067);    // compilenode member
              // call case 2: outer request
              var call2834 = selfRequest(this.outer_standardGraceClass_2050, "RequestError", []);
              var call2827 = callmethod(call2834, "raise(1)", [1], opresult2833);
              if2825 = call2827;
            }
            setLineNumber(2071);    // compilenode identifier
            // call case 4: self request
            var call2835 = selfRequest(this, "uncheckedFrom(1)to(1)", [1, 1], var_lower, var_upper);
            setLineNumber(2051);    // compilenode member
            // call case 2: outer request
            var call2836 = selfRequest(this.outer_standardGraceClass_2050, "Sequence", []);
            setLineNumber(2071);    // return value
            if (!Grace_isTrue(callmethod(call2836, "match(1)", [1], call2835)))
                raiseTypeError(
                    "result of method from(_)to(_) does not have type" + 
                    "Sequence⟦Number⟧.", call2836, call2835);
            return call2835;
          };    // end of method from(_)to(_)
          this.methods["from(1)to(1)"] = func2768;
          func2768.paramCounts = [1, 1];
          func2768.paramNames = ["lower", "upper"];
          func2768.typeParamNames = [];
          func2768.definitionLine = 2051;
          func2768.definitionModule = "standardGraceClass";
          var func2837 = function(argcv, var_lower, var_upper) {    // method uncheckedFrom(_)to(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("range.uncheckedFrom(_)to(_)", "standardGraceClass", 2074);
            var ouc_init = this.methods["uncheckedFrom(1)to(1)$build(3)"].call(this, null, var_lower, var_upper, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method uncheckedFrom(_)to(_)
          this.methods["uncheckedFrom(1)to(1)"] = func2837;
          func2837.paramCounts = [1, 1];
          func2837.paramNames = ["lower", "upper"];
          func2837.typeParamNames = [];
          func2837.definitionLine = 2074;
          func2837.definitionModule = "standardGraceClass";
          var func2838 = function(argcv, var_lower, var_upper, inheritingObject, aliases, exclusions) {    // method uncheckedFrom(_)to(_)$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj2839_build = function(ignore, var_lower, var_upper, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_2074");
              this.outer_standardGraceClass_2074 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              setLineNumber(2075);    // compilenode identifier
              var initFun2840 = callmethod(var_traits, "indexable$build(3)", [null], this, [], []);  // compileReuseCall
              this.data.start = undefined;
              var reader_start2841 = function() {  // reader method start
                  return this.data.start;
              };
              reader_start2841.isDef = true;
              reader_start2841.confidential = true;
              this.methods["start"] = reader_start2841;
              this.data.stop = undefined;
              var reader_stop2842 = function() {  // reader method stop
                  return this.data.stop;
              };
              reader_stop2842.isDef = true;
              reader_stop2842.confidential = true;
              this.methods["stop"] = reader_stop2842;
              this.data.size = undefined;
              var reader_size2843 = function() {  // reader method size
                  return this.data.size;
              };
              reader_size2843.isDef = true;
              this.methods["size"] = reader_size2843;
              this.data.hash = undefined;
              var reader_hash2844 = function() {  // reader method hash
                  return this.data.hash;
              };
              reader_hash2844.isDef = true;
              this.methods["hash"] = reader_hash2844;
              var func2845 = function(argcv) {    // method iterator
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var ouc = emptyGraceObject("range.uncheckedFrom(_)to(_).iterator", "standardGraceClass", 2083);
                var ouc_init = this.methods["iterator$build(3)"].call(this, null, ouc, [], []);
                ouc_init.call(ouc);
                return ouc;
              };    // end of method iterator
              this.methods["iterator"] = func2845;
              func2845.paramCounts = [0];
              func2845.paramNames = [];
              func2845.typeParamNames = [];
              func2845.definitionLine = 2083;
              func2845.definitionModule = "standardGraceClass";
              var func2846 = function(argcv, inheritingObject, aliases, exclusions) {    // method iterator$build(_,_,_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var obj2847_build = function(ignore, outerObj, aliases, exclusions) {
                  this.closureKeys = this.closureKeys || [];
                  this.closureKeys.push("outer_standardGraceClass_2084");
                  this.outer_standardGraceClass_2084 = outerObj;
                  var inheritedExclusions = { };
                  for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                      var exMeth = exclusions[eix];
                      inheritedExclusions[exMeth] = this.methods[exMeth];
                  }
                  this.data.val = undefined;
                  var reader_val2848 = function() {  // reader method val
                      return this.data.val;
                  };
                  reader_val2848.isVar = true;
                  reader_val2848.confidential = true;
                  this.methods["val"] = reader_val2848;
                  var writer_val2848 = function(argcv, n) {   // writer method val:=(_)
                      this.data.val = n;
                      return GraceDone;
                  };
                  writer_val2848.confidential = true;
                  this.methods["val:=(1)"] = writer_val2848;
                  var func2849 = function(argcv) {    // method hasNext
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    setLineNumber(2086);    // compilenode member
                    // call case 4: self request
                    var call2850 = selfRequest(this, "val", []);
                    // call case 2: outer request
                    var call2851 = selfRequest(this.outer_standardGraceClass_2084, "stop", []);
                    var opresult2852 = callmethod(call2850, "\u2264(1)", [1], call2851);
                    return opresult2852;
                  };    // end of method hasNext
                  this.methods["hasNext"] = func2849;
                  func2849.paramCounts = [0];
                  func2849.paramNames = [];
                  func2849.typeParamNames = [];
                  func2849.definitionLine = 2086;
                  func2849.definitionModule = "standardGraceClass";
                  var func2853 = function(argcv) {    // method next
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    var if2854 = GraceDone;
                    setLineNumber(2088);    // compilenode member
                    // call case 4: self request
                    var call2855 = selfRequest(this, "val", []);
                    // call case 2: outer request
                    var call2856 = selfRequest(this.outer_standardGraceClass_2084, "stop", []);
                    var opresult2857 = callmethod(call2855, ">(1)", [1], call2856);
                    if (Grace_isTrue(opresult2857)) {
                      setLineNumber(2089);    // compilenode string
                      var string2859 = new GraceString("over ");
                      // call case 2: outer request
                      var call2860 = selfRequest(this.outer_standardGraceClass_2084, "asString", []);
                      var opresult2861 = callmethod(string2859, "++(1)", [1], call2860);
                      var string2862 = new GraceString("");
                      var opresult2863 = callmethod(opresult2861, "++(1)", [1], string2862);
                      // call case 6: other requests
                      // call case 2: outer request
                      var call2864 = selfRequest(this.outer_standardGraceClass_2084.outer_standardGraceClass_2074.outer_standardGraceClass_2050, "IteratorExhausted", []);
                      var call2858 = callmethod(call2864, "raise(1)", [1], opresult2863);
                      if2854 = call2858;
                    }
                    setLineNumber(2091);    // compilenode member
                    // call case 4: self request
                    var call2866 = selfRequest(this, "val", []);
                    var sum2867 = callmethod(call2866, "+(1)", [1], new GraceNum(1));
                    // call case 4: self request
                    var call2865 = selfRequest(this, "val:=(1)", [1], sum2867);
                    setLineNumber(2092);    // compilenode member
                    // call case 4: self request
                    var call2868 = selfRequest(this, "val", []);
                    var diff2869 = callmethod(call2868, "-(1)", [1], new GraceNum(1));
                    return diff2869;
                    return undefined;
                  };    // end of method next
                  this.methods["next"] = func2853;
                  func2853.paramCounts = [0];
                  func2853.paramNames = [];
                  func2853.typeParamNames = [];
                  func2853.definitionLine = 2087;
                  func2853.definitionModule = "standardGraceClass";
                  var func2870 = function(argcv) {    // method asString
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    setLineNumber(2094);    // compilenode string
                    var string2871 = new GraceString("iterator over ");
                    // call case 2: outer request
                    var call2872 = selfRequest(this.outer_standardGraceClass_2084, "asString", []);
                    var opresult2873 = callmethod(string2871, "++(1)", [1], call2872);
                    var string2874 = new GraceString(" at ");
                    var opresult2875 = callmethod(opresult2873, "++(1)", [1], string2874);
                    // call case 4: self request
                    var call2876 = selfRequest(this, "val", []);
                    var opresult2877 = callmethod(opresult2875, "++(1)", [1], call2876);
                    var string2878 = new GraceString("");
                    var opresult2879 = callmethod(opresult2877, "++(1)", [1], string2878);
                    return opresult2879;
                  };    // end of method asString
                  this.methods["asString"] = func2870;
                  func2870.paramCounts = [0];
                  func2870.paramNames = [];
                  func2870.typeParamNames = [];
                  func2870.definitionLine = 2094;
                  func2870.definitionModule = "standardGraceClass";
                  this.mutable = true;
                  for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                      var oneAlias = aliases[aix];
                      this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
                  }
                  for (var exName in inheritedExclusions) {
                      if (inheritedExclusions.hasOwnProperty(exName)) {
                          if (inheritedExclusions[exName]) {
                              this.methods[exName] = inheritedExclusions[exName];
                          } else {
                              delete this.methods[exName];
                          }
                      }
                  }
                  var obj2847_init = function() {    // init of object on line 2084
                    setLineNumber(2085);    // compilenode member
                    // call case 2: outer request
                    var call2880 = selfRequest(this.outer_standardGraceClass_2084, "start", []);
                    this.data.val = call2880;
                  };
                  return obj2847_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
                };
                var obj2847_init = obj2847_build.call(inheritingObject, null, this, aliases, exclusions);
                return obj2847_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
              };    // end of method iterator$build(_,_,_)
              this.methods["iterator$build(3)"] = func2846;
              func2846.paramCounts = [0];
              func2846.paramNames = [];
              func2846.typeParamNames = [];
              func2846.definitionLine = 2083;
              func2846.definitionModule = "standardGraceClass";
              var func2881 = function(argcv, var_ix) {    // method at(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                // Start argument type-checks
                setLineNumber(2097);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], var_ix)))
                    raiseTypeError("in request of `at(_)`, " +
                      "argument 1 is not of type " +
                      "Number", var_Number, var_ix);
                // End argument type-checks
                var if2882 = GraceDone;
                setLineNumber(2098);    // compilenode call
                // call case 6: other requests
                // call case 4: self request
                var call2884 = selfRequest(this, "size", []);
                var opresult2885 = callmethod(var_ix, "\u2264(1)", [1], call2884);
                var call2883 = callmethod(opresult2885, "prefix!", [0]);
                if (Grace_isTrue(call2883)) {
                  setLineNumber(2099);    // compilenode string
                  var string2887 = new GraceString("requested range.at(");
                  var opresult2888 = callmethod(string2887, "++(1)", [1], var_ix);
                  var string2889 = new GraceString("), but upper bound is ");
                  var opresult2890 = callmethod(opresult2888, "++(1)", [1], string2889);
                  // call case 4: self request
                  var call2891 = selfRequest(this, "size", []);
                  var opresult2892 = callmethod(opresult2890, "++(1)", [1], call2891);
                  var string2893 = new GraceString("");
                  var opresult2894 = callmethod(opresult2892, "++(1)", [1], string2893);
                  // call case 6: other requests
                  // call case 2: outer request
                  var call2895 = selfRequest(this.outer_standardGraceClass_2074.outer_standardGraceClass_2050, "BoundsError", []);
                  var call2886 = callmethod(call2895, "raise(1)", [1], opresult2894);
                  if2882 = call2886;
                }
                var if2896 = GraceDone;
                setLineNumber(2101);    // compilenode call
                // call case 6: other requests
                var opresult2898 = callmethod(var_ix, "\u2265(1)", [1], new GraceNum(1));
                var call2897 = callmethod(opresult2898, "prefix!", [0]);
                if (Grace_isTrue(call2897)) {
                  setLineNumber(2102);    // compilenode string
                  var string2900 = new GraceString("requested range.at(");
                  var opresult2901 = callmethod(string2900, "++(1)", [1], var_ix);
                  var string2902 = new GraceString("), but lower bound is 1");
                  var opresult2903 = callmethod(opresult2901, "++(1)", [1], string2902);
                  // call case 6: other requests
                  // call case 2: outer request
                  var call2904 = selfRequest(this.outer_standardGraceClass_2074.outer_standardGraceClass_2050, "BoundsError", []);
                  var call2899 = callmethod(call2904, "raise(1)", [1], opresult2903);
                  if2896 = call2899;
                }
                setLineNumber(2104);    // compilenode member
                // call case 4: self request
                var call2905 = selfRequest(this, "start", []);
                var diff2906 = callmethod(var_ix, "-(1)", [1], new GraceNum(1));
                var sum2907 = callmethod(call2905, "+(1)", [1], diff2906);
                return sum2907;
                return undefined;
              };    // end of method at(_)
              func2881.paramTypes = [];
              func2881.paramTypes.push([type_Number, "ix"]);
              this.methods["at(1)"] = func2881;
              func2881.paramCounts = [1];
              func2881.paramNames = ["ix"];
              func2881.typeParamNames = [];
              func2881.definitionLine = 2097;
              func2881.definitionModule = "standardGraceClass";
              var func2908 = function(argcv, var_elem) {    // method contains(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2107);    // compilenode block
                var block2910 = new GraceBlock(this, 2107, 0);
                var matches2911 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block2910.guard = matches2911;
                block2910.real = function() {
                  setLineNumber(2108);    // compilenode member
                  // call case 6: other requests
                  var call2912 = callmethod(var_elem, "truncated", []);
                  var var_intElem = call2912;
                  var if2913 = GraceDone;
                  setLineNumber(2109);    // compilenode identifier
                  var opresult2914 = callmethod(var_intElem, "\u2260(1)", [1], var_elem);
                  if (Grace_isTrue(opresult2914)) {
                    throw new ReturnException(GraceFalse, returnTarget);
                  }
                  var if2915 = GraceDone;
                  setLineNumber(2110);    // compilenode member
                  // call case 4: self request
                  var call2916 = selfRequest(this, "start", []);
                  var opresult2917 = callmethod(var_intElem, "<(1)", [1], call2916);
                  if (Grace_isTrue(opresult2917)) {
                    throw new ReturnException(GraceFalse, returnTarget);
                  }
                  var if2918 = GraceDone;
                  setLineNumber(2111);    // compilenode member
                  // call case 4: self request
                  var call2919 = selfRequest(this, "stop", []);
                  var opresult2920 = callmethod(var_intElem, ">(1)", [1], call2919);
                  if (Grace_isTrue(opresult2920)) {
                    throw new ReturnException(GraceFalse, returnTarget);
                  }
                  return if2918;
                };
                var cases2909 = [];
                setLineNumber(2112);    // compilenode block
                var block2921 = new GraceBlock(this, 2112, 1);
                // call case 6: other requests
                var call2922 = callmethod(var___95__prelude, "Exception", []);
                block2921.paramTypes = [call2922];
                var matches2923 = function(var_ex) {
                  setModuleName("standardGraceClass");
                  // call case 6: other requests
                  var call2924 = callmethod(var___95__prelude, "Exception", []);
                  if (!Grace_isTrue(callmethod(call2924, "match(1)", [1], var_ex)))
                      return false;
                  return true;
                };
                block2921.guard = matches2923;
                block2921.real = function(var_ex) {
                  throw new ReturnException(GraceFalse, returnTarget);
                  return undefined;
                };
                cases2909.push(block2921);
                setLineNumber(2107);    // compiletrycatch
                var catchres2909 = tryCatch(block2910,cases2909,false);
                setModuleName("standardGraceClass");
                setLineNumber(2113);    // compilenode identifier
                return GraceTrue;
                if (!Grace_isTrue(callmethod(var_Boolean, "match(1)", [1], undefined)))
                    raiseTypeError(
                        "result of method contains(_) does not have type" + 
                        "Boolean.", var_Boolean, undefined);
                return undefined;
              };    // end of method contains(_)
              this.methods["contains(1)"] = func2908;
              func2908.paramCounts = [1];
              func2908.paramNames = ["elem"];
              func2908.typeParamNames = [];
              func2908.definitionLine = 2106;
              func2908.definitionModule = "standardGraceClass";
              var func2925 = function(argcv, var_block1) {    // method do(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2116);    // compilenode member
                // call case 4: self request
                var call2926 = selfRequest(this, "start", []);
                var var_val = call2926;
                setLineNumber(2117);    // compilenode block
                var block2928 = new GraceBlock(this, 2117, 0);
                var matches2929 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block2928.guard = matches2929;
                block2928.real = function() {
                  // call case 4: self request
                  var call2930 = selfRequest(this, "stop", []);
                  var opresult2931 = callmethod(var_val, "\u2264(1)", [1], call2930);
                  return opresult2931;
                };
                var block2932 = new GraceBlock(this, 2117, 0);
                var matches2933 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block2932.guard = matches2933;
                block2932.real = function() {
                  setLineNumber(2118);    // compilenode call
                  if (var_val === undefined) raiseUninitializedVariable("val");
                  // call case 6: other requests
                  var call2934 = callmethod(var_block1, "apply(1)", [1], var_val);
                  setLineNumber(2119);    // compilenode num
                  var sum2935 = callmethod(var_val, "+(1)", [1], new GraceNum(1));
                  var_val = sum2935;
                  return GraceDone;
                };
                // call case 5: prelude request
                var call2927 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block2928, block2932);
                return call2927;
              };    // end of method do(_)
              this.methods["do(1)"] = func2925;
              func2925.paramCounts = [1];
              func2925.paramNames = ["block1"];
              func2925.typeParamNames = [];
              func2925.definitionLine = 2115;
              func2925.definitionModule = "standardGraceClass";
              var func2936 = function(argcv, var_block2) {    // method keysAndValuesDo(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2123);    // compilenode num
                var var_key = new GraceNum(1);
                setLineNumber(2124);    // compilenode member
                // call case 4: self request
                var call2937 = selfRequest(this, "start", []);
                var var_val = call2937;
                setLineNumber(2125);    // compilenode block
                var block2939 = new GraceBlock(this, 2125, 0);
                var matches2940 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block2939.guard = matches2940;
                block2939.real = function() {
                  // call case 4: self request
                  var call2941 = selfRequest(this, "stop", []);
                  var opresult2942 = callmethod(var_val, "\u2264(1)", [1], call2941);
                  return opresult2942;
                };
                var block2943 = new GraceBlock(this, 2125, 0);
                var matches2944 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block2943.guard = matches2944;
                block2943.real = function() {
                  setLineNumber(2126);    // compilenode call
                  if (var_key === undefined) raiseUninitializedVariable("key");
                  if (var_val === undefined) raiseUninitializedVariable("val");
                  // call case 6: other requests
                  var call2945 = callmethod(var_block2, "apply(2)", [2], var_key, var_val);
                  setLineNumber(2127);    // compilenode num
                  var sum2946 = callmethod(var_key, "+(1)", [1], new GraceNum(1));
                  var_key = sum2946;
                  setLineNumber(2128);    // compilenode num
                  var sum2947 = callmethod(var_val, "+(1)", [1], new GraceNum(1));
                  var_val = sum2947;
                  return GraceDone;
                };
                // call case 5: prelude request
                var call2938 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block2939, block2943);
                return call2938;
              };    // end of method keysAndValuesDo(_)
              this.methods["keysAndValuesDo(1)"] = func2936;
              func2936.paramCounts = [1];
              func2936.paramNames = ["block2"];
              func2936.typeParamNames = [];
              func2936.definitionLine = 2122;
              func2936.definitionModule = "standardGraceClass";
              var func2948 = function(argcv) {    // method reversed
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2132);    // compilenode identifier
                // call case 2: outer request
                var call2949 = selfRequest(this.outer_standardGraceClass_2074, "from(1)downTo(1)", [1, 1], var_upper, var_lower);
                return call2949;
              };    // end of method reversed
              this.methods["reversed"] = func2948;
              func2948.paramCounts = [0];
              func2948.paramNames = [];
              func2948.typeParamNames = [];
              func2948.definitionLine = 2131;
              func2948.definitionModule = "standardGraceClass";
              var func2950 = function(argcv, var_other) {    // method ++(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2135);    // compilenode identifier
                // call case 2: outer request
                var call2952 = selfRequest(this.outer_standardGraceClass_2074.outer_standardGraceClass_2050, "lazyConcatenation(2)", [2], this, var_other);
                // call case 6: other requests
                // call case 2: outer request
                var call2953 = selfRequest(this.outer_standardGraceClass_2074.outer_standardGraceClass_2050, "sequence", []);
                var call2951 = callmethod(call2953, "withAll(1)", [1], call2952);
                return call2951;
              };    // end of method ++(_)
              this.methods["++(1)"] = func2950;
              func2950.paramCounts = [1];
              func2950.paramNames = ["other"];
              func2950.typeParamNames = [];
              func2950.definitionLine = 2134;
              func2950.definitionModule = "standardGraceClass";
              var func2954 = function(argcv, var_other) {    // method ==(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2138);    // compilenode identifier
                // call case 2: outer request
                var call2955 = selfRequest(this.outer_standardGraceClass_2074.outer_standardGraceClass_2050, "isEqual(1)toIterable(1)", [1, 1], this, var_other);
                return call2955;
              };    // end of method ==(_)
              this.methods["==(1)"] = func2954;
              func2954.paramCounts = [1];
              func2954.paramNames = ["other"];
              func2954.typeParamNames = [];
              func2954.definitionLine = 2137;
              func2954.definitionModule = "standardGraceClass";
              var func2956 = function(argcv) {     // accessor method sorted
                return this;
              };    // end of method sorted
              this.methods["sorted"] = func2956;
              func2956.paramCounts = [0];
              func2956.paramNames = [];
              func2956.typeParamNames = [];
              func2956.definitionLine = 2140;
              func2956.definitionModule = "standardGraceClass";
              setLineNumber(2140);    // compilenode identifier
              var func2957 = function(argcv, var_c) {    // method sortedBy(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2142);    // compilenode identifier
                // call case 6: other requests
                // call case 6: other requests
                // call case 2: outer request
                var call2960 = selfRequest(this.outer_standardGraceClass_2074.outer_standardGraceClass_2050, "list", []);
                var call2959 = callmethod(call2960, "withAll(1)", [1], this);
                var call2958 = callmethod(call2959, "sortBy(1)", [1], var_c);
                return call2958;
              };    // end of method sortedBy(_)
              this.methods["sortedBy(1)"] = func2957;
              func2957.paramCounts = [1];
              func2957.paramNames = ["c"];
              func2957.typeParamNames = [];
              func2957.definitionLine = 2142;
              func2957.definitionModule = "standardGraceClass";
              var func2961 = function(argcv) {    // method keys
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2144);    // compilenode member
                // call case 4: self request
                var call2962 = selfRequest(this, "size", []);
                var opresult2963 = callmethod(new GraceNum(1), "..(1)", [1], call2962);
                return opresult2963;
              };    // end of method keys
              this.methods["keys"] = func2961;
              func2961.paramCounts = [0];
              func2961.paramNames = [];
              func2961.typeParamNames = [];
              func2961.definitionLine = 2144;
              func2961.definitionModule = "standardGraceClass";
              var func2964 = function(argcv) {     // accessor method values
                return this;
              };    // end of method values
              this.methods["values"] = func2964;
              func2964.paramCounts = [0];
              func2964.paramNames = [];
              func2964.typeParamNames = [];
              func2964.definitionLine = 2146;
              func2964.definitionModule = "standardGraceClass";
              setLineNumber(2146);    // compilenode identifier
              var func2965 = function(argcv) {    // method asString
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2149);    // compilenode string
                var string2966 = new GraceString("range.from(");
                var opresult2967 = callmethod(string2966, "++(1)", [1], var_lower);
                var string2968 = new GraceString(")to(");
                var opresult2969 = callmethod(opresult2967, "++(1)", [1], string2968);
                var opresult2970 = callmethod(opresult2969, "++(1)", [1], var_upper);
                var string2971 = new GraceString(")");
                var opresult2972 = callmethod(opresult2970, "++(1)", [1], string2971);
                if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], opresult2972)))
                    raiseTypeError(
                        "result of method asString does not have type" + 
                        "String.", var_String, opresult2972);
                return opresult2972;
              };    // end of method asString
              this.methods["asString"] = func2965;
              func2965.paramCounts = [0];
              func2965.paramNames = [];
              func2965.typeParamNames = [];
              func2965.definitionLine = 2148;
              func2965.definitionModule = "standardGraceClass";
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj2839_init = function() {    // init of object on line 2074
                initFun2840.call(this);
                setLineNumber(2076);    // compilenode identifier
                this.data.start = var_lower;
                setLineNumber(2077);    // compilenode identifier
                this.data.stop = var_upper;
                var if2973 = GraceDone;
                setLineNumber(2079);    // compilenode identifier
                var diff2974 = callmethod(var_upper, "-(1)", [1], var_lower);
                var sum2975 = callmethod(diff2974, "+(1)", [1], new GraceNum(1));
                var opresult2976 = callmethod(sum2975, "<(1)", [1], new GraceNum(0));
                if (Grace_isTrue(opresult2976)) {
                  if2973 = new GraceNum(0);
                } else {
                  var diff2977 = callmethod(var_upper, "-(1)", [1], var_lower);
                  var sum2978 = callmethod(diff2977, "+(1)", [1], new GraceNum(1));
                  if2973 = sum2978;
                }
                this.data.size = if2973;
                setLineNumber(2081);    // compilenode block
                var block2979 = new GraceBlock(this, 2081, 0);
                var matches2980 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block2979.guard = matches2980;
                block2979.real = function() {
                  // call case 6: other requests
                  // call case 4: self request
                  var call2982 = selfRequest(this, "start", []);
                  var call2981 = callmethod(call2982, "hash", []);
                  var prod2983 = callmethod(call2981, "*(1)", [1], new GraceNum(1021));
                  // call case 6: other requests
                  // call case 4: self request
                  var call2985 = selfRequest(this, "stop", []);
                  var call2984 = callmethod(call2985, "hash", []);
                  var sum2986 = callmethod(prod2983, "+(1)", [1], call2984);
                  var prod2987 = callmethod(sum2986, "*(1)", [1], new GraceNum(3));
                  return prod2987;
                };
                this.data.hash = block2979;
              };
              return obj2839_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj2839_init = obj2839_build.call(inheritingObject, null, var_lower, var_upper, this, aliases, exclusions);
            return obj2839_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method uncheckedFrom(_)to(_)$build(_,_,_)
          this.methods["uncheckedFrom(1)to(1)$build(3)"] = func2838;
          func2838.paramCounts = [1, 1];
          func2838.paramNames = ["lower", "upper"];
          func2838.typeParamNames = [];
          func2838.definitionLine = 2074;
          func2838.definitionModule = "standardGraceClass";
          var func2988 = function(argcv, var_upper, var_lower) {    // method from(_)downTo(_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var ouc = emptyGraceObject("range.from(_)downTo(_)", "standardGraceClass", 2153);
            var ouc_init = this.methods["from(1)downTo(1)$build(3)"].call(this, null, var_upper, var_lower, ouc, [], []);
            ouc_init.call(ouc);
            return ouc;
          };    // end of method from(_)downTo(_)
          this.methods["from(1)downTo(1)"] = func2988;
          func2988.paramCounts = [1, 1];
          func2988.paramNames = ["upper", "lower"];
          func2988.typeParamNames = [];
          func2988.definitionLine = 2153;
          func2988.definitionModule = "standardGraceClass";
          var func2989 = function(argcv, var_upper, var_lower, inheritingObject, aliases, exclusions) {    // method from(_)downTo(_)$build(_,_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            setModuleName("standardGraceClass");
            var obj2990_build = function(ignore, var_upper, var_lower, outerObj, aliases, exclusions) {
              this.closureKeys = this.closureKeys || [];
              this.closureKeys.push("outer_standardGraceClass_2153");
              this.outer_standardGraceClass_2153 = outerObj;
              var inheritedExclusions = { };
              for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                  var exMeth = exclusions[eix];
                  inheritedExclusions[exMeth] = this.methods[exMeth];
              }
              setLineNumber(2154);    // compilenode identifier
              var initFun2991 = callmethod(var_traits, "indexable$build(3)", [null], this, [], []);  // compileReuseCall
              this.data.start = undefined;
              var reader_start2992 = function() {  // reader method start
                  return this.data.start;
              };
              reader_start2992.isDef = true;
              reader_start2992.confidential = true;
              this.methods["start"] = reader_start2992;
              this.data.stop = undefined;
              var reader_stop2993 = function() {  // reader method stop
                  return this.data.stop;
              };
              reader_stop2993.isDef = true;
              reader_stop2993.confidential = true;
              this.methods["stop"] = reader_stop2993;
              this.data.size = undefined;
              var reader_size2994 = function() {  // reader method size
                  return this.data.size;
              };
              reader_size2994.isDef = true;
              this.methods["size"] = reader_size2994;
              var func2995 = function(argcv) {    // method iterator
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var ouc = emptyGraceObject("range.from(_)downTo(_).iterator", "standardGraceClass", 2175);
                var ouc_init = this.methods["iterator$build(3)"].call(this, null, ouc, [], []);
                ouc_init.call(ouc);
                return ouc;
              };    // end of method iterator
              this.methods["iterator"] = func2995;
              func2995.paramCounts = [0];
              func2995.paramNames = [];
              func2995.typeParamNames = [];
              func2995.definitionLine = 2175;
              func2995.definitionModule = "standardGraceClass";
              var func2996 = function(argcv, inheritingObject, aliases, exclusions) {    // method iterator$build(_,_,_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                var obj2997_build = function(ignore, outerObj, aliases, exclusions) {
                  this.closureKeys = this.closureKeys || [];
                  this.closureKeys.push("outer_standardGraceClass_2176");
                  this.outer_standardGraceClass_2176 = outerObj;
                  var inheritedExclusions = { };
                  for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
                      var exMeth = exclusions[eix];
                      inheritedExclusions[exMeth] = this.methods[exMeth];
                  }
                  this.data.val = undefined;
                  var reader_val2998 = function() {  // reader method val
                      return this.data.val;
                  };
                  reader_val2998.isVar = true;
                  reader_val2998.confidential = true;
                  this.methods["val"] = reader_val2998;
                  var writer_val2998 = function(argcv, n) {   // writer method val:=(_)
                      this.data.val = n;
                      return GraceDone;
                  };
                  writer_val2998.confidential = true;
                  this.methods["val:=(1)"] = writer_val2998;
                  var func2999 = function(argcv) {    // method hasNext
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    setLineNumber(2178);    // compilenode member
                    // call case 4: self request
                    var call3000 = selfRequest(this, "val", []);
                    // call case 2: outer request
                    var call3001 = selfRequest(this.outer_standardGraceClass_2176, "stop", []);
                    var opresult3002 = callmethod(call3000, "\u2265(1)", [1], call3001);
                    return opresult3002;
                  };    // end of method hasNext
                  this.methods["hasNext"] = func2999;
                  func2999.paramCounts = [0];
                  func2999.paramNames = [];
                  func2999.typeParamNames = [];
                  func2999.definitionLine = 2178;
                  func2999.definitionModule = "standardGraceClass";
                  var func3003 = function(argcv) {    // method next
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    var if3004 = GraceDone;
                    setLineNumber(2180);    // compilenode member
                    // call case 4: self request
                    var call3005 = selfRequest(this, "val", []);
                    // call case 2: outer request
                    var call3006 = selfRequest(this.outer_standardGraceClass_2176, "stop", []);
                    var opresult3007 = callmethod(call3005, "<(1)", [1], call3006);
                    if (Grace_isTrue(opresult3007)) {
                      var string3009 = new GraceString("over ");
                      // call case 2: outer request
                      var call3010 = selfRequest(this.outer_standardGraceClass_2176, "asString", []);
                      var opresult3011 = callmethod(string3009, "++(1)", [1], call3010);
                      var string3012 = new GraceString("");
                      var opresult3013 = callmethod(opresult3011, "++(1)", [1], string3012);
                      // call case 6: other requests
                      // call case 2: outer request
                      var call3014 = selfRequest(this.outer_standardGraceClass_2176.outer_standardGraceClass_2153.outer_standardGraceClass_2050, "IteratorExhausted", []);
                      var call3008 = callmethod(call3014, "raise(1)", [1], opresult3013);
                      if3004 = call3008;
                    }
                    setLineNumber(2181);    // compilenode member
                    // call case 4: self request
                    var call3016 = selfRequest(this, "val", []);
                    var diff3017 = callmethod(call3016, "-(1)", [1], new GraceNum(1));
                    // call case 4: self request
                    var call3015 = selfRequest(this, "val:=(1)", [1], diff3017);
                    setLineNumber(2182);    // compilenode member
                    // call case 4: self request
                    var call3018 = selfRequest(this, "val", []);
                    var sum3019 = callmethod(call3018, "+(1)", [1], new GraceNum(1));
                    return sum3019;
                    return undefined;
                  };    // end of method next
                  this.methods["next"] = func3003;
                  func3003.paramCounts = [0];
                  func3003.paramNames = [];
                  func3003.typeParamNames = [];
                  func3003.definitionLine = 2179;
                  func3003.definitionModule = "standardGraceClass";
                  var func3020 = function(argcv) {    // method asString
                    var returnTarget = invocationCount;
                    invocationCount++;
                    setModuleName("standardGraceClass");
                    setLineNumber(2184);    // compilenode string
                    var string3021 = new GraceString("anIterator over ");
                    // call case 2: outer request
                    var call3022 = selfRequest(this.outer_standardGraceClass_2176, "asString", []);
                    var opresult3023 = callmethod(string3021, "++(1)", [1], call3022);
                    var string3024 = new GraceString(" at ");
                    var opresult3025 = callmethod(opresult3023, "++(1)", [1], string3024);
                    // call case 4: self request
                    var call3026 = selfRequest(this, "val", []);
                    var opresult3027 = callmethod(opresult3025, "++(1)", [1], call3026);
                    var string3028 = new GraceString("");
                    var opresult3029 = callmethod(opresult3027, "++(1)", [1], string3028);
                    return opresult3029;
                  };    // end of method asString
                  this.methods["asString"] = func3020;
                  func3020.paramCounts = [0];
                  func3020.paramNames = [];
                  func3020.typeParamNames = [];
                  func3020.definitionLine = 2184;
                  func3020.definitionModule = "standardGraceClass";
                  this.mutable = true;
                  for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                      var oneAlias = aliases[aix];
                      this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
                  }
                  for (var exName in inheritedExclusions) {
                      if (inheritedExclusions.hasOwnProperty(exName)) {
                          if (inheritedExclusions[exName]) {
                              this.methods[exName] = inheritedExclusions[exName];
                          } else {
                              delete this.methods[exName];
                          }
                      }
                  }
                  var obj2997_init = function() {    // init of object on line 2176
                    setLineNumber(2177);    // compilenode member
                    // call case 2: outer request
                    var call3030 = selfRequest(this.outer_standardGraceClass_2176, "start", []);
                    this.data.val = call3030;
                  };
                  return obj2997_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
                };
                var obj2997_init = obj2997_build.call(inheritingObject, null, this, aliases, exclusions);
                return obj2997_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
              };    // end of method iterator$build(_,_,_)
              this.methods["iterator$build(3)"] = func2996;
              func2996.paramCounts = [0];
              func2996.paramNames = [];
              func2996.typeParamNames = [];
              func2996.definitionLine = 2175;
              func2996.definitionModule = "standardGraceClass";
              var func3031 = function(argcv, var_ix) {    // method at(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                // Start argument type-checks
                setLineNumber(2187);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], var_ix)))
                    raiseTypeError("in request of `at(_)`, " +
                      "argument 1 is not of type " +
                      "Number", var_Number, var_ix);
                // End argument type-checks
                var if3032 = GraceDone;
                setLineNumber(2188);    // compilenode call
                // call case 6: other requests
                // call case 4: self request
                var call3034 = selfRequest(this, "size", []);
                var opresult3035 = callmethod(var_ix, "\u2264(1)", [1], call3034);
                var call3033 = callmethod(opresult3035, "prefix!", [0]);
                if (Grace_isTrue(call3033)) {
                  setLineNumber(2189);    // compilenode string
                  var string3037 = new GraceString("requested range.at(");
                  var opresult3038 = callmethod(string3037, "++(1)", [1], var_ix);
                  var string3039 = new GraceString(") but upper bound is ");
                  var opresult3040 = callmethod(opresult3038, "++(1)", [1], string3039);
                  // call case 4: self request
                  var call3041 = selfRequest(this, "size", []);
                  var opresult3042 = callmethod(opresult3040, "++(1)", [1], call3041);
                  var string3043 = new GraceString("");
                  var opresult3044 = callmethod(opresult3042, "++(1)", [1], string3043);
                  // call case 6: other requests
                  // call case 2: outer request
                  var call3045 = selfRequest(this.outer_standardGraceClass_2153.outer_standardGraceClass_2050, "BoundsError", []);
                  var call3036 = callmethod(call3045, "raise(1)", [1], opresult3044);
                  if3032 = call3036;
                }
                var if3046 = GraceDone;
                setLineNumber(2191);    // compilenode call
                // call case 6: other requests
                var opresult3048 = callmethod(var_ix, "\u2265(1)", [1], new GraceNum(1));
                var call3047 = callmethod(opresult3048, "prefix!", [0]);
                if (Grace_isTrue(call3047)) {
                  setLineNumber(2192);    // compilenode string
                  var string3050 = new GraceString("requested range.at(");
                  var opresult3051 = callmethod(string3050, "++(1)", [1], var_ix);
                  var string3052 = new GraceString(") but lower bound is 1");
                  var opresult3053 = callmethod(opresult3051, "++(1)", [1], string3052);
                  // call case 6: other requests
                  // call case 2: outer request
                  var call3054 = selfRequest(this.outer_standardGraceClass_2153.outer_standardGraceClass_2050, "BoundsError", []);
                  var call3049 = callmethod(call3054, "raise(1)", [1], opresult3053);
                  if3046 = call3049;
                }
                setLineNumber(2194);    // compilenode member
                // call case 4: self request
                var call3055 = selfRequest(this, "start", []);
                var diff3056 = callmethod(var_ix, "-(1)", [1], new GraceNum(1));
                var diff3057 = callmethod(call3055, "-(1)", [1], diff3056);
                return diff3057;
                return undefined;
              };    // end of method at(_)
              func3031.paramTypes = [];
              func3031.paramTypes.push([type_Number, "ix"]);
              this.methods["at(1)"] = func3031;
              func3031.paramCounts = [1];
              func3031.paramNames = ["ix"];
              func3031.typeParamNames = [];
              func3031.definitionLine = 2187;
              func3031.definitionModule = "standardGraceClass";
              var func3058 = function(argcv, var_elem) {    // method contains(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2197);    // compilenode block
                var block3060 = new GraceBlock(this, 2197, 0);
                var matches3061 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block3060.guard = matches3061;
                block3060.real = function() {
                  setLineNumber(2198);    // compilenode member
                  // call case 6: other requests
                  var call3062 = callmethod(var_elem, "truncated", []);
                  var var_intElem = call3062;
                  var if3063 = GraceDone;
                  setLineNumber(2199);    // compilenode identifier
                  var opresult3064 = callmethod(var_intElem, "\u2260(1)", [1], var_elem);
                  if (Grace_isTrue(opresult3064)) {
                    throw new ReturnException(GraceFalse, returnTarget);
                  }
                  var if3065 = GraceDone;
                  setLineNumber(2200);    // compilenode member
                  // call case 4: self request
                  var call3066 = selfRequest(this, "start", []);
                  var opresult3067 = callmethod(var_intElem, ">(1)", [1], call3066);
                  if (Grace_isTrue(opresult3067)) {
                    throw new ReturnException(GraceFalse, returnTarget);
                  }
                  var if3068 = GraceDone;
                  setLineNumber(2201);    // compilenode member
                  // call case 4: self request
                  var call3069 = selfRequest(this, "stop", []);
                  var opresult3070 = callmethod(var_intElem, "<(1)", [1], call3069);
                  if (Grace_isTrue(opresult3070)) {
                    throw new ReturnException(GraceFalse, returnTarget);
                  }
                  return if3068;
                };
                var cases3059 = [];
                setLineNumber(2202);    // compilenode block
                var block3071 = new GraceBlock(this, 2202, 1);
                // call case 6: other requests
                var call3072 = callmethod(var___95__prelude, "Exception", []);
                block3071.paramTypes = [call3072];
                var matches3073 = function(var_ex) {
                  setModuleName("standardGraceClass");
                  // call case 6: other requests
                  var call3074 = callmethod(var___95__prelude, "Exception", []);
                  if (!Grace_isTrue(callmethod(call3074, "match(1)", [1], var_ex)))
                      return false;
                  return true;
                };
                block3071.guard = matches3073;
                block3071.real = function(var_ex) {
                  throw new ReturnException(GraceFalse, returnTarget);
                  return undefined;
                };
                cases3059.push(block3071);
                setLineNumber(2197);    // compiletrycatch
                var catchres3059 = tryCatch(block3060,cases3059,false);
                setModuleName("standardGraceClass");
                setLineNumber(2203);    // compilenode identifier
                return GraceTrue;
                if (!Grace_isTrue(callmethod(var_Boolean, "match(1)", [1], undefined)))
                    raiseTypeError(
                        "result of method contains(_) does not have type" + 
                        "Boolean.", var_Boolean, undefined);
                return undefined;
              };    // end of method contains(_)
              this.methods["contains(1)"] = func3058;
              func3058.paramCounts = [1];
              func3058.paramNames = ["elem"];
              func3058.typeParamNames = [];
              func3058.definitionLine = 2196;
              func3058.definitionModule = "standardGraceClass";
              var func3075 = function(argcv, var_block1) {    // method do(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2206);    // compilenode member
                // call case 4: self request
                var call3076 = selfRequest(this, "start", []);
                var var_val = call3076;
                setLineNumber(2207);    // compilenode block
                var block3078 = new GraceBlock(this, 2207, 0);
                var matches3079 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block3078.guard = matches3079;
                block3078.real = function() {
                  // call case 4: self request
                  var call3080 = selfRequest(this, "stop", []);
                  var opresult3081 = callmethod(var_val, "\u2265(1)", [1], call3080);
                  return opresult3081;
                };
                var block3082 = new GraceBlock(this, 2207, 0);
                var matches3083 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block3082.guard = matches3083;
                block3082.real = function() {
                  setLineNumber(2208);    // compilenode call
                  if (var_val === undefined) raiseUninitializedVariable("val");
                  // call case 6: other requests
                  var call3084 = callmethod(var_block1, "apply(1)", [1], var_val);
                  setLineNumber(2209);    // compilenode num
                  var diff3085 = callmethod(var_val, "-(1)", [1], new GraceNum(1));
                  var_val = diff3085;
                  return GraceDone;
                };
                // call case 5: prelude request
                var call3077 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block3078, block3082);
                return call3077;
              };    // end of method do(_)
              this.methods["do(1)"] = func3075;
              func3075.paramCounts = [1];
              func3075.paramNames = ["block1"];
              func3075.typeParamNames = [];
              func3075.definitionLine = 2205;
              func3075.definitionModule = "standardGraceClass";
              var func3086 = function(argcv, var_block2) {    // method keysAndValuesDo(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2213);    // compilenode num
                var var_key = new GraceNum(1);
                setLineNumber(2214);    // compilenode member
                // call case 4: self request
                var call3087 = selfRequest(this, "start", []);
                var var_val = call3087;
                setLineNumber(2215);    // compilenode block
                var block3089 = new GraceBlock(this, 2215, 0);
                var matches3090 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block3089.guard = matches3090;
                block3089.real = function() {
                  // call case 4: self request
                  var call3091 = selfRequest(this, "stop", []);
                  var opresult3092 = callmethod(var_val, "\u2265(1)", [1], call3091);
                  return opresult3092;
                };
                var block3093 = new GraceBlock(this, 2215, 0);
                var matches3094 = function() {
                  setModuleName("standardGraceClass");
                  return true;
                };
                block3093.guard = matches3094;
                block3093.real = function() {
                  setLineNumber(2216);    // compilenode call
                  if (var_key === undefined) raiseUninitializedVariable("key");
                  if (var_val === undefined) raiseUninitializedVariable("val");
                  // call case 6: other requests
                  var call3095 = callmethod(var_block2, "apply(2)", [2], var_key, var_val);
                  setLineNumber(2217);    // compilenode num
                  var sum3096 = callmethod(var_key, "+(1)", [1], new GraceNum(1));
                  var_key = sum3096;
                  setLineNumber(2218);    // compilenode num
                  var diff3097 = callmethod(var_val, "-(1)", [1], new GraceNum(1));
                  var_val = diff3097;
                  return GraceDone;
                };
                // call case 5: prelude request
                var call3088 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block3089, block3093);
                return call3088;
              };    // end of method keysAndValuesDo(_)
              this.methods["keysAndValuesDo(1)"] = func3086;
              func3086.paramCounts = [1];
              func3086.paramNames = ["block2"];
              func3086.typeParamNames = [];
              func3086.definitionLine = 2212;
              func3086.definitionModule = "standardGraceClass";
              var func3098 = function(argcv) {    // method reversed
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2222);    // compilenode identifier
                // call case 2: outer request
                var call3099 = selfRequest(this.outer_standardGraceClass_2153, "from(1)to(1)", [1, 1], var_lower, var_upper);
                return call3099;
              };    // end of method reversed
              this.methods["reversed"] = func3098;
              func3098.paramCounts = [0];
              func3098.paramNames = [];
              func3098.typeParamNames = [];
              func3098.definitionLine = 2221;
              func3098.definitionModule = "standardGraceClass";
              var func3100 = function(argcv, var_other) {    // method ++(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2225);    // compilenode identifier
                // call case 2: outer request
                var call3102 = selfRequest(this.outer_standardGraceClass_2153.outer_standardGraceClass_2050, "lazyConcatenation(2)", [2], this, var_other);
                // call case 6: other requests
                // call case 2: outer request
                var call3103 = selfRequest(this.outer_standardGraceClass_2153.outer_standardGraceClass_2050, "sequence", []);
                var call3101 = callmethod(call3103, "withAll(1)", [1], call3102);
                return call3101;
              };    // end of method ++(_)
              this.methods["++(1)"] = func3100;
              func3100.paramCounts = [1];
              func3100.paramNames = ["other"];
              func3100.typeParamNames = [];
              func3100.definitionLine = 2224;
              func3100.definitionModule = "standardGraceClass";
              var func3104 = function(argcv, var_other) {    // method ==(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2228);    // compilenode identifier
                // call case 2: outer request
                var call3105 = selfRequest(this.outer_standardGraceClass_2153.outer_standardGraceClass_2050, "isEqual(1)toIterable(1)", [1, 1], this, var_other);
                return call3105;
              };    // end of method ==(_)
              this.methods["==(1)"] = func3104;
              func3104.paramCounts = [1];
              func3104.paramNames = ["other"];
              func3104.typeParamNames = [];
              func3104.definitionLine = 2227;
              func3104.definitionModule = "standardGraceClass";
              var func3106 = function(argcv) {    // method sorted
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2230);    // compilenode member
                // call case 4: self request
                var call3107 = selfRequest(this, "reversed", []);
                return call3107;
              };    // end of method sorted
              this.methods["sorted"] = func3106;
              func3106.paramCounts = [0];
              func3106.paramNames = [];
              func3106.typeParamNames = [];
              func3106.definitionLine = 2230;
              func3106.definitionModule = "standardGraceClass";
              var func3108 = function(argcv, var_c) {    // method sortedBy(_)
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2232);    // compilenode identifier
                // call case 6: other requests
                // call case 6: other requests
                // call case 2: outer request
                var call3111 = selfRequest(this.outer_standardGraceClass_2153.outer_standardGraceClass_2050, "list", []);
                var call3110 = callmethod(call3111, "withAll(1)", [1], this);
                var call3109 = callmethod(call3110, "sortBy(1)", [1], var_c);
                return call3109;
              };    // end of method sortedBy(_)
              this.methods["sortedBy(1)"] = func3108;
              func3108.paramCounts = [1];
              func3108.paramNames = ["c"];
              func3108.typeParamNames = [];
              func3108.definitionLine = 2232;
              func3108.definitionModule = "standardGraceClass";
              var func3112 = function(argcv) {    // method keys
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2234);    // compilenode member
                // call case 4: self request
                var call3113 = selfRequest(this, "size", []);
                var opresult3114 = callmethod(new GraceNum(1), "..(1)", [1], call3113);
                return opresult3114;
              };    // end of method keys
              this.methods["keys"] = func3112;
              func3112.paramCounts = [0];
              func3112.paramNames = [];
              func3112.typeParamNames = [];
              func3112.definitionLine = 2234;
              func3112.definitionModule = "standardGraceClass";
              var func3115 = function(argcv) {     // accessor method values
                return this;
              };    // end of method values
              this.methods["values"] = func3115;
              func3115.paramCounts = [0];
              func3115.paramNames = [];
              func3115.typeParamNames = [];
              func3115.definitionLine = 2236;
              func3115.definitionModule = "standardGraceClass";
              setLineNumber(2236);    // compilenode identifier
              var func3116 = function(argcv) {    // method asString
                var returnTarget = invocationCount;
                invocationCount++;
                setModuleName("standardGraceClass");
                setLineNumber(2239);    // compilenode string
                var string3117 = new GraceString("range.from ");
                var opresult3118 = callmethod(string3117, "++(1)", [1], var_upper);
                var string3119 = new GraceString(" downTo ");
                var opresult3120 = callmethod(opresult3118, "++(1)", [1], string3119);
                var opresult3121 = callmethod(opresult3120, "++(1)", [1], var_lower);
                var string3122 = new GraceString("");
                var opresult3123 = callmethod(opresult3121, "++(1)", [1], string3122);
                if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], opresult3123)))
                    raiseTypeError(
                        "result of method asString does not have type" + 
                        "String.", var_String, opresult3123);
                return opresult3123;
              };    // end of method asString
              this.methods["asString"] = func3116;
              func3116.paramCounts = [0];
              func3116.paramNames = [];
              func3116.typeParamNames = [];
              func3116.definitionLine = 2238;
              func3116.definitionModule = "standardGraceClass";
              for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
                  var oneAlias = aliases[aix];
                  this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
              }
              for (var exName in inheritedExclusions) {
                  if (inheritedExclusions.hasOwnProperty(exName)) {
                      if (inheritedExclusions[exName]) {
                          this.methods[exName] = inheritedExclusions[exName];
                      } else {
                          delete this.methods[exName];
                      }
                  }
              }
              var obj2990_init = function() {    // init of object on line 2153
                initFun2991.call(this);
                setLineNumber(2155);    // compilenode identifier
                var cases3124 = [];
                setLineNumber(2156);    // compilenode block
                var block3125 = new GraceBlock(this, 2156, 1);
                block3125.paramTypes = [var_Number];
                var matches3126 = function(var___95____95__33) {
                  setModuleName("standardGraceClass");
                  if (!Grace_isTrue(callmethod(var_Number, "match(1)", [1], var___95____95__33)))
                      return false;
                  return true;
                };
                block3125.guard = matches3126;
                block3125.real = function(var___95____95__33) {
                  return GraceDone;
                };
                cases3124.push(block3125);
                setLineNumber(2157);    // compilenode block
                var block3127 = new GraceBlock(this, 2157, 1);
                setLineNumber(1);    // compilenode identifier
                var matches3128 = function(var___95____95__34) {
                  setModuleName("standardGraceClass");
                  setLineNumber(2157);    // block matches function
                  return true;
                };
                block3127.guard = matches3128;
                block3127.real = function(var___95____95__34) {
                  var string3130 = new GraceString("upper bound ");
                  var opresult3131 = callmethod(string3130, "++(1)", [1], var_upper);
                  var string3132 = new GraceString("");
                  var opresult3133 = callmethod(opresult3131, "++(1)", [1], string3132);
                  setLineNumber(2158);    // compilenode string
                  var string3134 = new GraceString(" in range.from(");
                  var opresult3135 = callmethod(string3134, "++(1)", [1], var_upper);
                  var string3136 = new GraceString(")downTo(");
                  var opresult3137 = callmethod(opresult3135, "++(1)", [1], string3136);
                  var opresult3138 = callmethod(opresult3137, "++(1)", [1], var_lower);
                  var string3139 = new GraceString(") is not an integer");
                  var opresult3140 = callmethod(opresult3138, "++(1)", [1], string3139);
                  var opresult3141 = callmethod(opresult3133, "++(1)", [1], opresult3140);
                  // call case 6: other requests
                  setLineNumber(2157);    // compilenode member
                  // call case 2: outer request
                  var call3142 = selfRequest(this.outer_standardGraceClass_2153.outer_standardGraceClass_2050, "RequestError", []);
                  var call3129 = callmethod(call3142, "raise(1)", [1], opresult3141);
                  return call3129;
                };
                cases3124.push(block3127);
                setLineNumber(2155);    // compilematchcase
                var matchres3124 = matchCase(var_upper,cases3124,false);
                setModuleName("standardGraceClass");
                setLineNumber(2159);    // compilenode member
                // call case 6: other requests
                var call3143 = callmethod(var_upper, "truncated", []);
                this.data.start = call3143;
                var if3144 = GraceDone;
                setLineNumber(2160);    // compilenode member
                // call case 4: self request
                var call3145 = selfRequest(this, "start", []);
                var opresult3146 = callmethod(call3145, "\u2260(1)", [1], var_upper);
                if (Grace_isTrue(opresult3146)) {
                  setLineNumber(2161);    // compilenode string
                  var string3148 = new GraceString("upper bound ");
                  var opresult3149 = callmethod(string3148, "++(1)", [1], var_upper);
                  var string3150 = new GraceString("");
                  var opresult3151 = callmethod(opresult3149, "++(1)", [1], string3150);
                  setLineNumber(2162);    // compilenode string
                  var string3152 = new GraceString(" in range.from(");
                  var opresult3153 = callmethod(string3152, "++(1)", [1], var_upper);
                  var string3154 = new GraceString(")downTo(");
                  var opresult3155 = callmethod(opresult3153, "++(1)", [1], string3154);
                  var opresult3156 = callmethod(opresult3155, "++(1)", [1], var_lower);
                  var string3157 = new GraceString(") is not an integer");
                  var opresult3158 = callmethod(opresult3156, "++(1)", [1], string3157);
                  var opresult3159 = callmethod(opresult3151, "++(1)", [1], opresult3158);
                  // call case 6: other requests
                  setLineNumber(2161);    // compilenode member
                  // call case 2: outer request
                  var call3160 = selfRequest(this.outer_standardGraceClass_2153.outer_standardGraceClass_2050, "RequestError", []);
                  var call3147 = callmethod(call3160, "raise(1)", [1], opresult3159);
                  if3144 = call3147;
                }
                setLineNumber(2164);    // compilenode identifier
                var cases3161 = [];
                setLineNumber(2165);    // compilenode block
                var block3162 = new GraceBlock(this, 2165, 1);
                block3162.paramTypes = [var_Number];
                var matches3163 = function(var___95____95__35) {
                  setModuleName("standardGraceClass");
                  if (!Grace_isTrue(callmethod(var_Number, "match(1)", [1], var___95____95__35)))
                      return false;
                  return true;
                };
                block3162.guard = matches3163;
                block3162.real = function(var___95____95__35) {
                  return GraceDone;
                };
                cases3161.push(block3162);
                setLineNumber(2166);    // compilenode block
                var block3164 = new GraceBlock(this, 2166, 1);
                setLineNumber(1);    // compilenode identifier
                var matches3165 = function(var___95____95__36) {
                  setModuleName("standardGraceClass");
                  setLineNumber(2166);    // block matches function
                  return true;
                };
                block3164.guard = matches3165;
                block3164.real = function(var___95____95__36) {
                  var string3167 = new GraceString("lower bound ");
                  var opresult3168 = callmethod(string3167, "++(1)", [1], var_lower);
                  var string3169 = new GraceString("");
                  var opresult3170 = callmethod(opresult3168, "++(1)", [1], string3169);
                  setLineNumber(2167);    // compilenode string
                  var string3171 = new GraceString(" in range.from(");
                  var opresult3172 = callmethod(string3171, "++(1)", [1], var_upper);
                  var string3173 = new GraceString(")downTo(");
                  var opresult3174 = callmethod(opresult3172, "++(1)", [1], string3173);
                  var opresult3175 = callmethod(opresult3174, "++(1)", [1], var_lower);
                  var string3176 = new GraceString(") is not an integer");
                  var opresult3177 = callmethod(opresult3175, "++(1)", [1], string3176);
                  var opresult3178 = callmethod(opresult3170, "++(1)", [1], opresult3177);
                  // call case 6: other requests
                  setLineNumber(2166);    // compilenode member
                  // call case 2: outer request
                  var call3179 = selfRequest(this.outer_standardGraceClass_2153.outer_standardGraceClass_2050, "RequestError", []);
                  var call3166 = callmethod(call3179, "raise(1)", [1], opresult3178);
                  return call3166;
                };
                cases3161.push(block3164);
                setLineNumber(2164);    // compilematchcase
                var matchres3161 = matchCase(var_lower,cases3161,false);
                setModuleName("standardGraceClass");
                setLineNumber(2168);    // compilenode member
                // call case 6: other requests
                var call3180 = callmethod(var_lower, "truncated", []);
                this.data.stop = call3180;
                var if3181 = GraceDone;
                setLineNumber(2169);    // compilenode member
                // call case 4: self request
                var call3182 = selfRequest(this, "stop", []);
                var opresult3183 = callmethod(call3182, "\u2260(1)", [1], var_lower);
                if (Grace_isTrue(opresult3183)) {
                  setLineNumber(2170);    // compilenode string
                  var string3185 = new GraceString("lower bound ");
                  var opresult3186 = callmethod(string3185, "++(1)", [1], var_lower);
                  var string3187 = new GraceString("");
                  var opresult3188 = callmethod(opresult3186, "++(1)", [1], string3187);
                  setLineNumber(2171);    // compilenode string
                  var string3189 = new GraceString(" in range.from(");
                  var opresult3190 = callmethod(string3189, "++(1)", [1], var_upper);
                  var string3191 = new GraceString(")downTo(");
                  var opresult3192 = callmethod(opresult3190, "++(1)", [1], string3191);
                  var opresult3193 = callmethod(opresult3192, "++(1)", [1], var_lower);
                  var string3194 = new GraceString(") is not an integer");
                  var opresult3195 = callmethod(opresult3193, "++(1)", [1], string3194);
                  var opresult3196 = callmethod(opresult3188, "++(1)", [1], opresult3195);
                  // call case 6: other requests
                  setLineNumber(2170);    // compilenode member
                  // call case 2: outer request
                  var call3197 = selfRequest(this.outer_standardGraceClass_2153.outer_standardGraceClass_2050, "RequestError", []);
                  var call3184 = callmethod(call3197, "raise(1)", [1], opresult3196);
                  if3181 = call3184;
                }
                var if3198 = GraceDone;
                setLineNumber(2174);    // compilenode identifier
                var diff3199 = callmethod(var_upper, "-(1)", [1], var_lower);
                var sum3200 = callmethod(diff3199, "+(1)", [1], new GraceNum(1));
                var opresult3201 = callmethod(sum3200, "<(1)", [1], new GraceNum(0));
                if (Grace_isTrue(opresult3201)) {
                  if3198 = new GraceNum(0);
                } else {
                  var diff3202 = callmethod(var_upper, "-(1)", [1], var_lower);
                  var sum3203 = callmethod(diff3202, "+(1)", [1], new GraceNum(1));
                  if3198 = sum3203;
                }
                this.data.size = if3198;
              };
              return obj2990_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
            };
            var obj2990_init = obj2990_build.call(inheritingObject, null, var_upper, var_lower, this, aliases, exclusions);
            return obj2990_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
          };    // end of method from(_)downTo(_)$build(_,_,_)
          this.methods["from(1)downTo(1)$build(3)"] = func2989;
          func2989.paramCounts = [1, 1];
          func2989.paramNames = ["upper", "lower"];
          func2989.typeParamNames = [];
          func2989.definitionLine = 2153;
          func2989.definitionModule = "standardGraceClass";
          for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
              var oneAlias = aliases[aix];
              this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
          }
          for (var exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj2767_init = function() {    // init of object on line 2050
          };
          return obj2767_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj2767 = emptyGraceObject("range", "standardGraceClass", 2050);
        var obj2767_init = obj2767_build.call(obj2767, null, this, [], []);
        obj2767_init.call(obj2767);  // end of compileobject
        this.data.range = obj2767;
      };
      return obj2_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
    };
    var obj2_init = obj2_build.call(inheritingObject, null, this, aliases, exclusions);
    return obj2_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
  };    // end of method standardGrace$build(_,_,_)
  this.methods["standardGrace$build(3)"] = func1;
  func1.paramCounts = [0];
  func1.paramNames = [];
  func1.typeParamNames = [];
  func1.definitionLine = 196;
  func1.definitionModule = "standardGraceClass";
  setLineNumber(4);    // compilenode object
  var obj3204_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_standardGraceClass_4");
    this.outer_standardGraceClass_4 = outerObj;
    var inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        var exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth];
    }
    this.data.Block1 = undefined;
    var reader_Block13205 = function() {  // reader method Block1
        return this.data.Block1;
    };
    reader_Block13205.isType = true;
    this.methods["Block1"] = reader_Block13205;
    this.data.Block2 = undefined;
    var reader_Block23206 = function() {  // reader method Block2
        return this.data.Block2;
    };
    reader_Block23206.isType = true;
    this.methods["Block2"] = reader_Block23206;
    var func3207 = function(argcv, var_T) {    // method collection
      var returnTarget = invocationCount;
      invocationCount++;
      // Start type parameters
      if (var_T === undefined) var_T = var_Unknown;
      var numArgs = arguments.length - 1 - 0;
      if ((numArgs > 0) && (numArgs < 1)) {
          throw new GraceExceptionPacket(RequestErrorObject, 
              new GraceString("method collection expects 1 type parameter, but was given " + (numArgs - 0)));
      }
      // End type parameters
      setModuleName("standardGraceClass");
      var ouc = emptyGraceObject("traits.collection", "standardGraceClass", 16);
      var ouc_init = this.methods["collection$build(3)"].call(this, null, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method collection
    this.methods["collection"] = func3207;
    func3207.paramCounts = [0];
    func3207.paramNames = [];
    func3207.typeParamNames = ["T"];
    func3207.definitionLine = 16;
    func3207.definitionModule = "standardGraceClass";
    var func3208 = function(argcv, inheritingObject, aliases, exclusions, var_T) {    // method collection$build(_,_,_)
      var returnTarget = invocationCount;
      invocationCount++;
      // Start type parameters
      if (var_T === undefined) var_T = var_Unknown;
      var numArgs = arguments.length - 1 - 3;
      if ((numArgs > 0) && (numArgs < 1)) {
          throw new GraceExceptionPacket(RequestErrorObject, 
              new GraceString("method collection expects 1 type parameter, but was given " + (numArgs - 0)));
      }
      // End type parameters
      setModuleName("standardGraceClass");
      var obj3209_build = function(ignore, outerObj, aliases, exclusions, var_T) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_standardGraceClass_16");
        this.outer_standardGraceClass_16 = outerObj;
        var inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            var exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth];
        }
        var func3210 = function(argcv) {    // method asString
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(18);    // compilenode string
          var string3211 = new GraceString("a collection trait");
          return string3211;
        };    // end of method asString
        this.methods["asString"] = func3210;
        func3210.paramCounts = [0];
        func3210.paramNames = [];
        func3210.typeParamNames = [];
        func3210.definitionLine = 18;
        func3210.definitionModule = "standardGraceClass";
        var func3212 = function(argcv, var_action) {    // method sizeIfUnknown(_)
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(20);    // compilenode member
          // call case 6: other requests
          var call3213 = callmethod(var_action, "apply", []);
          return call3213;
        };    // end of method sizeIfUnknown(_)
        this.methods["sizeIfUnknown(1)"] = func3212;
        func3212.paramCounts = [1];
        func3212.paramNames = ["action"];
        func3212.typeParamNames = [];
        func3212.definitionLine = 19;
        func3212.definitionModule = "standardGraceClass";
        var func3214 = function(argcv) {    // method size
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(23);    // compilenode string
          var string3216 = new GraceString("this collection does not know its size");
          // call case 6: other requests
          // call case 6: other requests
          // call case 6: other requests
          setLineNumber(0);    // compilenode identifier
          var call3218 = selfRequest(importedModules["standardGraceClass"], "standardGrace", []);
          var call3217 = callmethod(call3218, "SizeUnknown", []);
          var call3215 = callmethod(call3217, "raise(1)", [1], string3216);
          return call3215;
        };    // end of method size
        this.methods["size"] = func3214;
        func3214.paramCounts = [0];
        func3214.paramNames = [];
        func3214.typeParamNames = [];
        func3214.definitionLine = 22;
        func3214.definitionModule = "standardGraceClass";
        var func3219 = function(argcv) {    // method do
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(25);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          setLineNumber(0);    // compilenode identifier
          var call3221 = selfRequest(importedModules["standardGraceClass"], "standardGrace", []);
          var call3220 = callmethod(call3221, "abstract", []);
          return call3220;
        };    // end of method do
        this.methods["do"] = func3219;
        func3219.paramCounts = [0];
        func3219.paramNames = [];
        func3219.typeParamNames = [];
        func3219.definitionLine = 25;
        func3219.definitionModule = "standardGraceClass";
        var func3222 = function(argcv) {    // method iterator
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(26);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          setLineNumber(0);    // compilenode identifier
          var call3224 = selfRequest(importedModules["standardGraceClass"], "standardGrace", []);
          var call3223 = callmethod(call3224, "abstract", []);
          return call3223;
        };    // end of method iterator
        this.methods["iterator"] = func3222;
        func3222.paramCounts = [0];
        func3222.paramNames = [];
        func3222.typeParamNames = [];
        func3222.definitionLine = 26;
        func3222.definitionModule = "standardGraceClass";
        var func3225 = function(argcv) {    // method isEmpty
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(29);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request
          var call3228 = selfRequest(this, "iterator", []);
          var call3227 = callmethod(call3228, "hasNext", []);
          var call3226 = callmethod(call3227, "not", []);
          return call3226;
        };    // end of method isEmpty
        this.methods["isEmpty"] = func3225;
        func3225.paramCounts = [0];
        func3225.paramNames = [];
        func3225.typeParamNames = [];
        func3225.definitionLine = 27;
        func3225.definitionModule = "standardGraceClass";
        var func3229 = function(argcv) {    // method first
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(32);    // compilenode member
          // call case 4: self request
          var call3230 = selfRequest(this, "iterator", []);
          var var_it = call3230;
          var if3231 = GraceDone;
          setLineNumber(33);    // compilenode member
          // call case 6: other requests
          var call3232 = callmethod(var_it, "hasNext", []);
          if (Grace_isTrue(call3232)) {
            setLineNumber(34);    // compilenode member
            // call case 6: other requests
            var call3233 = callmethod(var_it, "next", []);
            if3231 = call3233;
          } else {
            setLineNumber(36);    // compilenode string
            var string3235 = new GraceString("no first element in ");
            var opresult3236 = callmethod(string3235, "++(1)", [1], this);
            var string3237 = new GraceString("");
            var opresult3238 = callmethod(opresult3236, "++(1)", [1], string3237);
            // call case 6: other requests
            // call case 6: other requests
            // call case 6: other requests
            setLineNumber(0);    // compilenode identifier
            var call3240 = selfRequest(importedModules["standardGraceClass"], "standardGrace", []);
            var call3239 = callmethod(call3240, "BoundsError", []);
            var call3234 = callmethod(call3239, "raise(1)", [1], opresult3238);
            if3231 = call3234;
          }
          return if3231;
        };    // end of method first
        this.methods["first"] = func3229;
        func3229.paramCounts = [0];
        func3229.paramNames = [];
        func3229.typeParamNames = [];
        func3229.definitionLine = 31;
        func3229.definitionModule = "standardGraceClass";
        var func3241 = function(argcv, var_block1, var_block0) {    // method do(_)separatedBy(_)
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(40);    // compilenode identifier
          var var_firstTime = GraceTrue;
          setLineNumber(41);    // compilenode num
          var var_i = new GraceNum(0);
          setLineNumber(42);    // compilenode block
          var block3243 = new GraceBlock(this, 42, 1);
          setLineNumber(1);    // compilenode identifier
          var matches3244 = function(var_each) {
            setModuleName("standardGraceClass");
            setLineNumber(42);    // block matches function
            return true;
          };
          block3243.guard = matches3244;
          block3243.real = function(var_each) {
            var if3245 = GraceDone;
            setLineNumber(43);    // compilenode identifier
            if (Grace_isTrue(var_firstTime)) {
              setLineNumber(44);    // compilenode identifier
              var_firstTime = GraceFalse;
              if3245 = GraceDone;
            } else {
              setLineNumber(46);    // compilenode member
              // call case 6: other requests
              var call3246 = callmethod(var_block0, "apply", []);
              if3245 = call3246;
            }
            setLineNumber(48);    // compilenode identifier
            // call case 6: other requests
            var call3247 = callmethod(var_block1, "apply(1)", [1], var_each);
            return call3247;
          };
          // call case 4: self request
          var call3242 = selfRequest(this, "do(1)", [1], block3243);
          setLineNumber(50);    // compilenode identifier
          return this;
          return undefined;
        };    // end of method do(_)separatedBy(_)
        this.methods["do(1)separatedBy(1)"] = func3241;
        func3241.paramCounts = [1, 1];
        func3241.paramNames = ["block1", "block0"];
        func3241.typeParamNames = [];
        func3241.definitionLine = 39;
        func3241.definitionModule = "standardGraceClass";
        var func3248 = function(argcv, var_initial, var_blk) {    // method reduce(_,_)
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(54);    // compilenode identifier
          // call case 4: self request
          var call3249 = selfRequest(this, "fold(1)startingWith(1)", [1, 1], var_blk, var_initial);
          return call3249;
        };    // end of method reduce(_,_)
        this.methods["reduce(2)"] = func3248;
        func3248.paramCounts = [2];
        func3248.paramNames = ["initial", "blk"];
        func3248.typeParamNames = [];
        func3248.definitionLine = 52;
        func3248.definitionModule = "standardGraceClass";
        var func3250 = function(argcv, var_blk, var_initial) {    // method fold(_)startingWith(_)
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(57);    // compilenode identifier
          var var_result = var_initial;
          setLineNumber(58);    // compilenode block
          var block3252 = new GraceBlock(this, 58, 1);
          setLineNumber(1);    // compilenode identifier
          var matches3253 = function(var_it) {
            setModuleName("standardGraceClass");
            setLineNumber(58);    // block matches function
            return true;
          };
          block3252.guard = matches3253;
          block3252.real = function(var_it) {
            setLineNumber(59);    // compilenode call
            if (var_result === undefined) raiseUninitializedVariable("result");
            // call case 6: other requests
            var call3254 = callmethod(var_blk, "apply(2)", [2], var_result, var_it);
            var_result = call3254;
            return GraceDone;
          };
          // call case 4: self request
          var call3251 = selfRequest(this, "do(1)", [1], block3252);
          setLineNumber(61);    // compilenode identifier
          return var_result;
          return undefined;
        };    // end of method fold(_)startingWith(_)
        this.methods["fold(1)startingWith(1)"] = func3250;
        func3250.paramCounts = [1, 1];
        func3250.paramNames = ["blk", "initial"];
        func3250.typeParamNames = [];
        func3250.definitionLine = 56;
        func3250.definitionModule = "standardGraceClass";
        var func3255 = function(argcv, var_block1, var_R) {    // method map(_)
          var returnTarget = invocationCount;
          invocationCount++;
          // Start type parameters
          if (var_R === undefined) var_R = var_Unknown;
          var numArgs = arguments.length - 1 - 0;
          if ((numArgs > 1) && (numArgs < 2)) {
              throw new GraceExceptionPacket(RequestErrorObject, 
                  new GraceString("method map(_) expects 1 type parameter, but was given " + (numArgs - 1)));
          }
          // End type parameters
          setModuleName("standardGraceClass");
          // Start argument type-checks
          setLineNumber(63);    // compilenode member
          // call case 2: outer request
          var call3256 = selfRequest(this.outer_standardGraceClass_16, "Block1", []);
          if (!Grace_isTrue(callmethod(call3256, "match(1)",  [1], var_block1)))
              raiseTypeError("in request of `map(_)`, " +
                "argument 1 is not of type " +
                "Block1⟦T, R⟧", call3256, var_block1);
          // End argument type-checks
          setLineNumber(65);    // compilenode identifier
          // call case 6: other requests
          // call case 6: other requests
          setLineNumber(0);    // compilenode identifier
          var call3258 = selfRequest(importedModules["standardGraceClass"], "standardGrace", []);
          var call3257 = callmethod(call3258, "lazySequenceOver(1)mappedBy(1)", [1, 1, 2], this, var_block1, var_T, var_R);
          return call3257;
        };    // end of method map(_)
        this.methods["map(1)"] = func3255;
        func3255.paramCounts = [1];
        func3255.paramNames = ["block1"];
        func3255.typeParamNames = ["R"];
        func3255.definitionLine = 63;
        func3255.definitionModule = "standardGraceClass";
        var func3259 = function(argcv, var_selectionCondition) {    // method filter(_)
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          // Start argument type-checks
          setLineNumber(67);    // compilenode member
          // call case 2: outer request
          var call3260 = selfRequest(this.outer_standardGraceClass_16, "Block1", []);
          if (!Grace_isTrue(callmethod(call3260, "match(1)",  [1], var_selectionCondition)))
              raiseTypeError("in request of `filter(_)`, " +
                "argument 1 is not of type " +
                "Block1⟦T, Boolean⟧", call3260, var_selectionCondition);
          // End argument type-checks
          setLineNumber(69);    // compilenode identifier
          // call case 6: other requests
          // call case 6: other requests
          setLineNumber(0);    // compilenode identifier
          var call3262 = selfRequest(importedModules["standardGraceClass"], "standardGrace", []);
          var call3261 = callmethod(call3262, "lazySequenceOver(1)filteredBy(1)", [1, 1, 1], this, var_selectionCondition, var_T);
          return call3261;
        };    // end of method filter(_)
        this.methods["filter(1)"] = func3259;
        func3259.paramCounts = [1];
        func3259.paramNames = ["selectionCondition"];
        func3259.typeParamNames = [];
        func3259.definitionLine = 67;
        func3259.definitionModule = "standardGraceClass";
        var func3263 = function(argcv, var_collFactory) {    // method >>(_)
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(72);    // compilenode identifier
          // call case 6: other requests
          var call3264 = callmethod(var_collFactory, "withAll(1)", [1], this);
          return call3264;
        };    // end of method >>(_)
        this.methods[">>(1)"] = func3263;
        func3263.paramCounts = [1];
        func3263.paramNames = ["collFactory"];
        func3263.typeParamNames = [];
        func3263.definitionLine = 71;
        func3263.definitionModule = "standardGraceClass";
        for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
            var oneAlias = aliases[aix];
            this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
        }
        for (var exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj3209_init = function() {    // init of object on line 16
        };
        return obj3209_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj3209_init = obj3209_build.call(inheritingObject, null, this, aliases, exclusions, var_T);
      return obj3209_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method collection$build(_,_,_)
    this.methods["collection$build(3)"] = func3208;
    func3208.paramCounts = [0];
    func3208.paramNames = [];
    func3208.typeParamNames = ["T"];
    func3208.definitionLine = 16;
    func3208.definitionModule = "standardGraceClass";
    var func3265 = function(argcv, var_T) {    // method enumerable
      var returnTarget = invocationCount;
      invocationCount++;
      // Start type parameters
      if (var_T === undefined) var_T = var_Unknown;
      var numArgs = arguments.length - 1 - 0;
      if ((numArgs > 0) && (numArgs < 1)) {
          throw new GraceExceptionPacket(RequestErrorObject, 
              new GraceString("method enumerable expects 1 type parameter, but was given " + (numArgs - 0)));
      }
      // End type parameters
      setModuleName("standardGraceClass");
      var ouc = emptyGraceObject("traits.enumerable", "standardGraceClass", 76);
      var ouc_init = this.methods["enumerable$build(3)"].call(this, null, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method enumerable
    this.methods["enumerable"] = func3265;
    func3265.paramCounts = [0];
    func3265.paramNames = [];
    func3265.typeParamNames = ["T"];
    func3265.definitionLine = 76;
    func3265.definitionModule = "standardGraceClass";
    var func3266 = function(argcv, inheritingObject, aliases, exclusions, var_T) {    // method enumerable$build(_,_,_)
      var returnTarget = invocationCount;
      invocationCount++;
      // Start type parameters
      if (var_T === undefined) var_T = var_Unknown;
      var numArgs = arguments.length - 1 - 3;
      if ((numArgs > 0) && (numArgs < 1)) {
          throw new GraceExceptionPacket(RequestErrorObject, 
              new GraceString("method enumerable expects 1 type parameter, but was given " + (numArgs - 0)));
      }
      // End type parameters
      setModuleName("standardGraceClass");
      var obj3267_build = function(ignore, outerObj, aliases, exclusions, var_T) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_standardGraceClass_76");
        this.outer_standardGraceClass_76 = outerObj;
        var inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            var exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth];
        }
        setLineNumber(77);    // compilenode identifier
        var initFun3268 = callmethod(var_traits, "collection$build(3)", [null], this, [], []);  // compileReuseCall
        var func3269 = function(argcv) {    // method iterator
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(78);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          setLineNumber(0);    // compilenode identifier
          var call3271 = selfRequest(importedModules["standardGraceClass"], "standardGrace", []);
          var call3270 = callmethod(call3271, "abstract", []);
          return call3270;
        };    // end of method iterator
        this.methods["iterator"] = func3269;
        func3269.paramCounts = [0];
        func3269.paramNames = [];
        func3269.typeParamNames = [];
        func3269.definitionLine = 78;
        func3269.definitionModule = "standardGraceClass";
        var func3272 = function(argcv) {    // method size
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(81);    // compilenode string
          var string3274 = new GraceString("size requested on ");
          // call case 4: self request
          var call3275 = selfRequest(this, "asDebugString", []);
          var opresult3276 = callmethod(string3274, "++(1)", [1], call3275);
          var string3277 = new GraceString("");
          var opresult3278 = callmethod(opresult3276, "++(1)", [1], string3277);
          // call case 6: other requests
          // call case 6: other requests
          // call case 6: other requests
          setLineNumber(0);    // compilenode identifier
          var call3280 = selfRequest(importedModules["standardGraceClass"], "standardGrace", []);
          var call3279 = callmethod(call3280, "SizeUnknown", []);
          var call3273 = callmethod(call3279, "raise(1)", [1], opresult3278);
          return call3273;
        };    // end of method size
        this.methods["size"] = func3272;
        func3272.paramCounts = [0];
        func3272.paramNames = [];
        func3272.typeParamNames = [];
        func3272.definitionLine = 79;
        func3272.definitionModule = "standardGraceClass";
        var func3281 = function(argcv) {    // method asDictionary
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(84);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 6: other requests
          setLineNumber(0);    // compilenode identifier
          var call3284 = selfRequest(importedModules["standardGraceClass"], "standardGrace", []);
          var call3283 = callmethod(call3284, "dictionary", []);
          var call3282 = callmethod(call3283, "empty", []);
          var var_result = call3282;
          setLineNumber(85);    // compilenode block
          var block3286 = new GraceBlock(this, 85, 2);
          setLineNumber(1);    // compilenode identifier
          var matches3287 = function(var_k, var_v) {
            setModuleName("standardGraceClass");
            setLineNumber(85);    // block matches function
            return true;
          };
          block3286.guard = matches3287;
          block3286.real = function(var_k, var_v) {
            setLineNumber(86);    // compilenode identifier
            // call case 6: other requests
            var call3288 = callmethod(var_result, "at(1)put(1)", [1, 1], var_k, var_v);
            return call3288;
          };
          // call case 4: self request
          var call3285 = selfRequest(this, "keysAndValuesDo(1)", [1], block3286);
          setLineNumber(88);    // compilenode identifier
          return var_result;
          return undefined;
        };    // end of method asDictionary
        this.methods["asDictionary"] = func3281;
        func3281.paramCounts = [0];
        func3281.paramNames = [];
        func3281.typeParamNames = [];
        func3281.definitionLine = 83;
        func3281.definitionModule = "standardGraceClass";
        var func3289 = function(argcv, var_existing) {    // method into(_)
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(92);    // compilenode member
          // call case 4: self request
          var call3290 = selfRequest(this, "iterator", []);
          var var_selfIterator = call3290;
          setLineNumber(93);    // compilenode block
          var block3292 = new GraceBlock(this, 93, 0);
          var matches3293 = function() {
            setModuleName("standardGraceClass");
            return true;
          };
          block3292.guard = matches3293;
          block3292.real = function() {
            // call case 6: other requests
            var call3294 = callmethod(var_selfIterator, "hasNext", []);
            return call3294;
          };
          var block3295 = new GraceBlock(this, 93, 0);
          var matches3296 = function() {
            setModuleName("standardGraceClass");
            return true;
          };
          block3295.guard = matches3296;
          block3295.real = function() {
            setLineNumber(94);    // compilenode member
            // call case 6: other requests
            var call3298 = callmethod(var_selfIterator, "next", []);
            // call case 6: other requests
            var call3297 = callmethod(var_existing, "add(1)", [1], call3298);
            return call3297;
          };
          // call case 5: prelude request
          var call3291 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block3292, block3295);
          setLineNumber(96);    // compilenode identifier
          return var_existing;
        };    // end of method into(_)
        this.methods["into(1)"] = func3289;
        func3289.paramCounts = [1];
        func3289.paramNames = ["existing"];
        func3289.typeParamNames = [];
        func3289.definitionLine = 90;
        func3289.definitionModule = "standardGraceClass";
        var func3299 = function(argcv, var_other) {    // method ==(_)
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(99);    // compilenode identifier
          // call case 6: other requests
          // call case 6: other requests
          setLineNumber(0);    // compilenode identifier
          var call3301 = selfRequest(importedModules["standardGraceClass"], "standardGrace", []);
          var call3300 = callmethod(call3301, "isEqual(1)toIterable(1)", [1, 1], this, var_other);
          return call3300;
        };    // end of method ==(_)
        this.methods["==(1)"] = func3299;
        func3299.paramCounts = [1];
        func3299.paramNames = ["other"];
        func3299.typeParamNames = [];
        func3299.definitionLine = 98;
        func3299.definitionModule = "standardGraceClass";
        var func3302 = function(argcv, var_block1) {    // method do(_)
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          // Start argument type-checks
          setLineNumber(101);    // compilenode member
          // call case 2: outer request
          var call3303 = selfRequest(this.outer_standardGraceClass_76, "Block1", []);
          if (!Grace_isTrue(callmethod(call3303, "match(1)",  [1], var_block1)))
              raiseTypeError("in request of `do(_)`, " +
                "argument 1 is not of type " +
                "Block1⟦T, Done⟧", call3303, var_block1);
          // End argument type-checks
          setLineNumber(102);    // compilenode member
          // call case 4: self request
          var call3304 = selfRequest(this, "iterator", []);
          var var_selfIterator = call3304;
          setLineNumber(103);    // compilenode block
          var block3306 = new GraceBlock(this, 103, 0);
          var matches3307 = function() {
            setModuleName("standardGraceClass");
            return true;
          };
          block3306.guard = matches3307;
          block3306.real = function() {
            // call case 6: other requests
            var call3308 = callmethod(var_selfIterator, "hasNext", []);
            return call3308;
          };
          var block3309 = new GraceBlock(this, 103, 0);
          var matches3310 = function() {
            setModuleName("standardGraceClass");
            return true;
          };
          block3309.guard = matches3310;
          block3309.real = function() {
            setLineNumber(104);    // compilenode member
            // call case 6: other requests
            var call3312 = callmethod(var_selfIterator, "next", []);
            // call case 6: other requests
            var call3311 = callmethod(var_block1, "apply(1)", [1], call3312);
            return call3311;
          };
          // call case 5: prelude request
          var call3305 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block3306, block3309);
          setLineNumber(103);    // return value
          if (!Grace_isTrue(callmethod(var_Done, "match(1)", [1], call3305)))
              raiseTypeError(
                  "result of method do(_) does not have type" + 
                  "Done.", var_Done, call3305);
          return call3305;
        };    // end of method do(_)
        this.methods["do(1)"] = func3302;
        func3302.paramCounts = [1];
        func3302.paramNames = ["block1"];
        func3302.typeParamNames = [];
        func3302.definitionLine = 101;
        func3302.definitionModule = "standardGraceClass";
        var func3313 = function(argcv, var_block2) {    // method keysAndValuesDo(_)
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          // Start argument type-checks
          setLineNumber(107);    // compilenode member
          // call case 2: outer request
          var call3314 = selfRequest(this.outer_standardGraceClass_76, "Block2", []);
          if (!Grace_isTrue(callmethod(call3314, "match(1)",  [1], var_block2)))
              raiseTypeError("in request of `keysAndValuesDo(_)`, " +
                "argument 1 is not of type " +
                "Block2⟦Number, T, Done⟧", call3314, var_block2);
          // End argument type-checks
          setLineNumber(108);    // compilenode num
          var var_ix = new GraceNum(0);
          setLineNumber(109);    // compilenode member
          // call case 4: self request
          var call3315 = selfRequest(this, "iterator", []);
          var var_selfIterator = call3315;
          setLineNumber(110);    // compilenode block
          var block3317 = new GraceBlock(this, 110, 0);
          var matches3318 = function() {
            setModuleName("standardGraceClass");
            return true;
          };
          block3317.guard = matches3318;
          block3317.real = function() {
            // call case 6: other requests
            var call3319 = callmethod(var_selfIterator, "hasNext", []);
            return call3319;
          };
          var block3320 = new GraceBlock(this, 110, 0);
          var matches3321 = function() {
            setModuleName("standardGraceClass");
            return true;
          };
          block3320.guard = matches3321;
          block3320.real = function() {
            setLineNumber(111);    // compilenode num
            var sum3322 = callmethod(var_ix, "+(1)", [1], new GraceNum(1));
            var_ix = sum3322;
            setLineNumber(112);    // compilenode call
            if (var_ix === undefined) raiseUninitializedVariable("ix");
            // call case 6: other requests
            var call3324 = callmethod(var_selfIterator, "next", []);
            // call case 6: other requests
            var call3323 = callmethod(var_block2, "apply(2)", [2], var_ix, call3324);
            return call3323;
          };
          // call case 5: prelude request
          var call3316 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block3317, block3320);
          setLineNumber(110);    // return value
          if (!Grace_isTrue(callmethod(var_Done, "match(1)", [1], call3316)))
              raiseTypeError(
                  "result of method keysAndValuesDo(_) does not have type" + 
                  "Done.", var_Done, call3316);
          return call3316;
        };    // end of method keysAndValuesDo(_)
        this.methods["keysAndValuesDo(1)"] = func3313;
        func3313.paramCounts = [1];
        func3313.paramNames = ["block2"];
        func3313.typeParamNames = [];
        func3313.definitionLine = 107;
        func3313.definitionModule = "standardGraceClass";
        var func3325 = function(argcv) {     // accessor method values
          return this;
        };    // end of method values
        this.methods["values"] = func3325;
        func3325.paramCounts = [0];
        func3325.paramNames = [];
        func3325.typeParamNames = [];
        func3325.definitionLine = 115;
        func3325.definitionModule = "standardGraceClass";
        setLineNumber(117);    // compilenode identifier
        var func3326 = function(argcv, var_block2, var_initial, var_R) {    // method fold(_)startingWith(_)
          var returnTarget = invocationCount;
          invocationCount++;
          // Start type parameters
          if (var_R === undefined) var_R = var_Unknown;
          var numArgs = arguments.length - 1 - 0;
          if ((numArgs > 2) && (numArgs < 3)) {
              throw new GraceExceptionPacket(RequestErrorObject, 
                  new GraceString("method fold(_)startingWith(_) expects 1 type parameter, but was given " + (numArgs - 2)));
          }
          // End type parameters
          setModuleName("standardGraceClass");
          setLineNumber(120);    // compilenode identifier
          var var_res = var_initial;
          setLineNumber(121);    // compilenode member
          // call case 4: self request
          var call3327 = selfRequest(this, "iterator", []);
          var var_selfIterator = call3327;
          setLineNumber(122);    // compilenode block
          var block3329 = new GraceBlock(this, 122, 0);
          var matches3330 = function() {
            setModuleName("standardGraceClass");
            return true;
          };
          block3329.guard = matches3330;
          block3329.real = function() {
            // call case 6: other requests
            var call3331 = callmethod(var_selfIterator, "hasNext", []);
            return call3331;
          };
          var block3332 = new GraceBlock(this, 122, 0);
          var matches3333 = function() {
            setModuleName("standardGraceClass");
            return true;
          };
          block3332.guard = matches3333;
          block3332.real = function() {
            setLineNumber(123);    // compilenode call
            if (var_res === undefined) raiseUninitializedVariable("res");
            // call case 6: other requests
            var call3335 = callmethod(var_selfIterator, "next", []);
            // call case 6: other requests
            var call3334 = callmethod(var_block2, "apply(2)", [2], var_res, call3335);
            var_res = call3334;
            return GraceDone;
          };
          // call case 5: prelude request
          var call3328 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block3329, block3332);
          setLineNumber(125);    // compilenode identifier
          return var_res;
          if (!Grace_isTrue(callmethod(var_R, "match(1)", [1], undefined)))
              raiseTypeError(
                  "result of method fold(_)startingWith(_) does not have type" + 
                  "R.", var_R, undefined);
          return undefined;
        };    // end of method fold(_)startingWith(_)
        this.methods["fold(1)startingWith(1)"] = func3326;
        func3326.paramCounts = [1, 1];
        func3326.paramNames = ["block2", "initial"];
        func3326.typeParamNames = ["R"];
        func3326.definitionLine = 119;
        func3326.definitionModule = "standardGraceClass";
        var func3336 = function(argcv, var_other) {    // method ++(_)
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(129);    // compilenode identifier
          // call case 6: other requests
          // call case 6: other requests
          setLineNumber(0);    // compilenode identifier
          var call3338 = selfRequest(importedModules["standardGraceClass"], "standardGrace", []);
          var call3337 = callmethod(call3338, "lazyConcatenation(2)", [2], this, var_other);
          return call3337;
        };    // end of method ++(_)
        this.methods["++(1)"] = func3336;
        func3336.paramCounts = [1];
        func3336.paramNames = ["other"];
        func3336.typeParamNames = [];
        func3336.definitionLine = 127;
        func3336.definitionModule = "standardGraceClass";
        var func3339 = function(argcv, var_sortBlock) {    // method sortedBy(_)
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          // Start argument type-checks
          setLineNumber(131);    // compilenode member
          // call case 2: outer request
          var call3340 = selfRequest(this.outer_standardGraceClass_76, "Block2", []);
          if (!Grace_isTrue(callmethod(call3340, "match(1)",  [1], var_sortBlock)))
              raiseTypeError("in request of `sortedBy(_)`, " +
                "argument 1 is not of type " +
                "outer.Block2", call3340, var_sortBlock);
          // End argument type-checks
          setLineNumber(133);    // compilenode identifier
          // call case 6: other requests
          // call case 6: other requests
          // call case 6: other requests
          // call case 6: other requests
          setLineNumber(0);    // compilenode identifier
          var call3344 = selfRequest(importedModules["standardGraceClass"], "standardGrace", []);
          var call3343 = callmethod(call3344, "list", []);
          var call3342 = callmethod(call3343, "withAll(1)", [1], this);
          var call3341 = callmethod(call3342, "sortBy(1)", [1], var_sortBlock);
          return call3341;
        };    // end of method sortedBy(_)
        this.methods["sortedBy(1)"] = func3339;
        func3339.paramCounts = [1];
        func3339.paramNames = ["sortBlock"];
        func3339.typeParamNames = [];
        func3339.definitionLine = 131;
        func3339.definitionModule = "standardGraceClass";
        var func3345 = function(argcv) {    // method sorted
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(137);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 6: other requests
          // call case 6: other requests
          setLineNumber(0);    // compilenode identifier
          var call3349 = selfRequest(importedModules["standardGraceClass"], "standardGrace", []);
          var call3348 = callmethod(call3349, "list", []);
          var call3347 = callmethod(call3348, "withAll(1)", [1], this);
          var call3346 = callmethod(call3347, "sort", []);
          return call3346;
        };    // end of method sorted
        this.methods["sorted"] = func3345;
        func3345.paramCounts = [0];
        func3345.paramNames = [];
        func3345.typeParamNames = [];
        func3345.definitionLine = 135;
        func3345.definitionModule = "standardGraceClass";
        var func3350 = function(argcv) {    // method asString
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(140);    // compilenode string
          var string3351 = new GraceString("\u27e8");
          var var_s = string3351;
          setLineNumber(141);    // compilenode block
          var block3353 = new GraceBlock(this, 141, 1);
          setLineNumber(1);    // compilenode identifier
          var matches3354 = function(var_each) {
            setModuleName("standardGraceClass");
            setLineNumber(141);    // block matches function
            return true;
          };
          block3353.guard = matches3354;
          block3353.real = function(var_each) {
            // call case 6: other requests
            var call3355 = callmethod(var_each, "asString", []);
            var opresult3356 = callmethod(var_s, "++(1)", [1], call3355);
            var_s = opresult3356;
            return GraceDone;
          };
          var block3357 = new GraceBlock(this, 141, 0);
          var matches3358 = function() {
            setModuleName("standardGraceClass");
            return true;
          };
          block3357.guard = matches3358;
          block3357.real = function() {
            var string3359 = new GraceString(", ");
            var opresult3360 = callmethod(var_s, "++(1)", [1], string3359);
            var_s = opresult3360;
            return GraceDone;
          };
          // call case 4: self request
          var call3352 = selfRequest(this, "do(1)separatedBy(1)", [1, 1], block3353, block3357);
          setLineNumber(142);    // compilenode string
          var string3361 = new GraceString("\u27e9");
          var opresult3362 = callmethod(var_s, "++(1)", [1], string3361);
          return opresult3362;
        };    // end of method asString
        this.methods["asString"] = func3350;
        func3350.paramCounts = [0];
        func3350.paramNames = [];
        func3350.typeParamNames = [];
        func3350.definitionLine = 139;
        func3350.definitionModule = "standardGraceClass";
        for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
            var oneAlias = aliases[aix];
            this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
        }
        for (var exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj3267_init = function() {    // init of object on line 76
          initFun3268.call(this);
        };
        return obj3267_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj3267_init = obj3267_build.call(inheritingObject, null, this, aliases, exclusions, var_T);
      return obj3267_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method enumerable$build(_,_,_)
    this.methods["enumerable$build(3)"] = func3266;
    func3266.paramCounts = [0];
    func3266.paramNames = [];
    func3266.typeParamNames = ["T"];
    func3266.definitionLine = 76;
    func3266.definitionModule = "standardGraceClass";
    var func3363 = function(argcv, var_T) {    // method indexable
      var returnTarget = invocationCount;
      invocationCount++;
      // Start type parameters
      if (var_T === undefined) var_T = var_Unknown;
      var numArgs = arguments.length - 1 - 0;
      if ((numArgs > 0) && (numArgs < 1)) {
          throw new GraceExceptionPacket(RequestErrorObject, 
              new GraceString("method indexable expects 1 type parameter, but was given " + (numArgs - 0)));
      }
      // End type parameters
      setModuleName("standardGraceClass");
      var ouc = emptyGraceObject("traits.indexable", "standardGraceClass", 146);
      var ouc_init = this.methods["indexable$build(3)"].call(this, null, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method indexable
    this.methods["indexable"] = func3363;
    func3363.paramCounts = [0];
    func3363.paramNames = [];
    func3363.typeParamNames = ["T"];
    func3363.definitionLine = 146;
    func3363.definitionModule = "standardGraceClass";
    var func3364 = function(argcv, inheritingObject, aliases, exclusions, var_T) {    // method indexable$build(_,_,_)
      var returnTarget = invocationCount;
      invocationCount++;
      // Start type parameters
      if (var_T === undefined) var_T = var_Unknown;
      var numArgs = arguments.length - 1 - 3;
      if ((numArgs > 0) && (numArgs < 1)) {
          throw new GraceExceptionPacket(RequestErrorObject, 
              new GraceString("method indexable expects 1 type parameter, but was given " + (numArgs - 0)));
      }
      // End type parameters
      setModuleName("standardGraceClass");
      var obj3365_build = function(ignore, outerObj, aliases, exclusions, var_T) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_standardGraceClass_146");
        this.outer_standardGraceClass_146 = outerObj;
        var inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            var exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth];
        }
        setLineNumber(147);    // compilenode identifier
        var initFun3366 = callmethod(var_traits, "collection$build(3)", [null], this, [], []);  // compileReuseCall
        var func3367 = function(argcv, var_index) {    // method at(_)
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(148);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          setLineNumber(0);    // compilenode identifier
          var call3369 = selfRequest(importedModules["standardGraceClass"], "standardGrace", []);
          var call3368 = callmethod(call3369, "abstract", []);
          return call3368;
        };    // end of method at(_)
        this.methods["at(1)"] = func3367;
        func3367.paramCounts = [1];
        func3367.paramNames = ["index"];
        func3367.typeParamNames = [];
        func3367.definitionLine = 148;
        func3367.definitionModule = "standardGraceClass";
        var func3370 = function(argcv) {    // method size
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(149);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          setLineNumber(0);    // compilenode identifier
          var call3372 = selfRequest(importedModules["standardGraceClass"], "standardGrace", []);
          var call3371 = callmethod(call3372, "abstract", []);
          return call3371;
        };    // end of method size
        this.methods["size"] = func3370;
        func3370.paramCounts = [0];
        func3370.paramNames = [];
        func3370.typeParamNames = [];
        func3370.definitionLine = 149;
        func3370.definitionModule = "standardGraceClass";
        var func3373 = function(argcv) {    // method isEmpty
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(150);    // compilenode member
          // call case 4: self request
          var call3374 = selfRequest(this, "size", []);
          var opresult3375 = callmethod(call3374, "==(1)", [1], new GraceNum(0));
          return opresult3375;
        };    // end of method isEmpty
        this.methods["isEmpty"] = func3373;
        func3373.paramCounts = [0];
        func3373.paramNames = [];
        func3373.typeParamNames = [];
        func3373.definitionLine = 150;
        func3373.definitionModule = "standardGraceClass";
        var func3376 = function(argcv, var_action) {    // method keysAndValuesDo(_)
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          // Start argument type-checks
          setLineNumber(151);    // compilenode member
          // call case 2: outer request
          var call3377 = selfRequest(this.outer_standardGraceClass_146, "Block2", []);
          if (!Grace_isTrue(callmethod(call3377, "match(1)",  [1], var_action)))
              raiseTypeError("in request of `keysAndValuesDo(_)`, " +
                "argument 1 is not of type " +
                "Block2⟦Number, T, Done⟧", call3377, var_action);
          // End argument type-checks
          setLineNumber(152);    // compilenode member
          // call case 4: self request
          var call3378 = selfRequest(this, "size", []);
          var var_curSize = call3378;
          setLineNumber(153);    // compilenode num
          var var_i = new GraceNum(1);
          setLineNumber(154);    // compilenode block
          var block3380 = new GraceBlock(this, 154, 0);
          var matches3381 = function() {
            setModuleName("standardGraceClass");
            return true;
          };
          block3380.guard = matches3381;
          block3380.real = function() {
            var opresult3382 = callmethod(var_i, "\u2264(1)", [1], var_curSize);
            return opresult3382;
          };
          var block3383 = new GraceBlock(this, 154, 0);
          var matches3384 = function() {
            setModuleName("standardGraceClass");
            return true;
          };
          block3383.guard = matches3384;
          block3383.real = function() {
            setLineNumber(155);    // compilenode call
            if (var_i === undefined) raiseUninitializedVariable("i");
            if (var_i === undefined) raiseUninitializedVariable("i");
            // call case 4: self request
            var call3386 = selfRequest(this, "at(1)", [1], var_i);
            // call case 6: other requests
            var call3385 = callmethod(var_action, "apply(2)", [2], var_i, call3386);
            setLineNumber(156);    // compilenode num
            var sum3387 = callmethod(var_i, "+(1)", [1], new GraceNum(1));
            var_i = sum3387;
            return GraceDone;
          };
          // call case 5: prelude request
          var call3379 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block3380, block3383);
          setLineNumber(154);    // return value
          if (!Grace_isTrue(callmethod(var_Done, "match(1)", [1], call3379)))
              raiseTypeError(
                  "result of method keysAndValuesDo(_) does not have type" + 
                  "Done.", var_Done, call3379);
          return call3379;
        };    // end of method keysAndValuesDo(_)
        this.methods["keysAndValuesDo(1)"] = func3376;
        func3376.paramCounts = [1];
        func3376.paramNames = ["action"];
        func3376.typeParamNames = [];
        func3376.definitionLine = 151;
        func3376.definitionModule = "standardGraceClass";
        var func3388 = function(argcv) {    // method first
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(159);    // compilenode num
          // call case 4: self request
          var call3389 = selfRequest(this, "at(1)", [1], new GraceNum(1));
          return call3389;
        };    // end of method first
        this.methods["first"] = func3388;
        func3388.paramCounts = [0];
        func3388.paramNames = [];
        func3388.typeParamNames = [];
        func3388.definitionLine = 159;
        func3388.definitionModule = "standardGraceClass";
        var func3390 = function(argcv) {    // method second
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(160);    // compilenode num
          // call case 4: self request
          var call3391 = selfRequest(this, "at(1)", [1], new GraceNum(2));
          return call3391;
        };    // end of method second
        this.methods["second"] = func3390;
        func3390.paramCounts = [0];
        func3390.paramNames = [];
        func3390.typeParamNames = [];
        func3390.definitionLine = 160;
        func3390.definitionModule = "standardGraceClass";
        var func3392 = function(argcv) {    // method third
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(161);    // compilenode num
          // call case 4: self request
          var call3393 = selfRequest(this, "at(1)", [1], new GraceNum(3));
          return call3393;
        };    // end of method third
        this.methods["third"] = func3392;
        func3392.paramCounts = [0];
        func3392.paramNames = [];
        func3392.typeParamNames = [];
        func3392.definitionLine = 161;
        func3392.definitionModule = "standardGraceClass";
        var func3394 = function(argcv) {    // method fourth
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(162);    // compilenode num
          // call case 4: self request
          var call3395 = selfRequest(this, "at(1)", [1], new GraceNum(4));
          return call3395;
        };    // end of method fourth
        this.methods["fourth"] = func3394;
        func3394.paramCounts = [0];
        func3394.paramNames = [];
        func3394.typeParamNames = [];
        func3394.definitionLine = 162;
        func3394.definitionModule = "standardGraceClass";
        var func3396 = function(argcv) {    // method fifth
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(163);    // compilenode num
          // call case 4: self request
          var call3397 = selfRequest(this, "at(1)", [1], new GraceNum(5));
          return call3397;
        };    // end of method fifth
        this.methods["fifth"] = func3396;
        func3396.paramCounts = [0];
        func3396.paramNames = [];
        func3396.typeParamNames = [];
        func3396.definitionLine = 163;
        func3396.definitionModule = "standardGraceClass";
        var func3398 = function(argcv) {    // method last
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(164);    // compilenode member
          // call case 4: self request
          var call3400 = selfRequest(this, "size", []);
          // call case 4: self request
          var call3399 = selfRequest(this, "at(1)", [1], call3400);
          return call3399;
        };    // end of method last
        this.methods["last"] = func3398;
        func3398.paramCounts = [0];
        func3398.paramNames = [];
        func3398.typeParamNames = [];
        func3398.definitionLine = 164;
        func3398.definitionModule = "standardGraceClass";
        var func3401 = function(argcv) {    // method indices
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(165);    // compilenode member
          // call case 4: self request
          var call3403 = selfRequest(this, "size", []);
          // call case 6: other requests
          // call case 6: other requests
          // call case 6: other requests
          setLineNumber(0);    // compilenode identifier
          var call3405 = selfRequest(importedModules["standardGraceClass"], "standardGrace", []);
          var call3404 = callmethod(call3405, "range", []);
          var call3402 = callmethod(call3404, "from(1)to(1)", [1, 1], new GraceNum(1), call3403);
          return call3402;
        };    // end of method indices
        this.methods["indices"] = func3401;
        func3401.paramCounts = [0];
        func3401.paramNames = [];
        func3401.typeParamNames = [];
        func3401.definitionLine = 165;
        func3401.definitionModule = "standardGraceClass";
        var func3406 = function(argcv, var_sought) {    // method indexOf(_)
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          // Start argument type-checks
          setLineNumber(166);    // compilenode identifier
          if (!Grace_isTrue(callmethod(var_T, "match(1)",  [1], var_sought)))
              raiseTypeError("in request of `indexOf(_)`, " +
                "argument 1 is not of type " +
                "T", var_T, var_sought);
          // End argument type-checks
          setLineNumber(167);    // compilenode block
          var block3408 = new GraceBlock(this, 167, 0);
          var matches3409 = function() {
            setModuleName("standardGraceClass");
            return true;
          };
          block3408.guard = matches3409;
          block3408.real = function() {
            setLineNumber(168);    // compilenode string
            var string3411 = new GraceString("collection does not contain ");
            var opresult3412 = callmethod(string3411, "++(1)", [1], var_sought);
            var string3413 = new GraceString("");
            var opresult3414 = callmethod(opresult3412, "++(1)", [1], string3413);
            // call case 6: other requests
            // call case 6: other requests
            // call case 6: other requests
            setLineNumber(0);    // compilenode identifier
            var call3416 = selfRequest(importedModules["standardGraceClass"], "standardGrace", []);
            var call3415 = callmethod(call3416, "NoSuchObject", []);
            var call3410 = callmethod(call3415, "raise(1)", [1], opresult3414);
            return call3410;
          };
          // call case 4: self request
          var call3407 = selfRequest(this, "indexOf(1)ifAbsent(1)", [1, 1], var_sought, block3408);
          return call3407;
        };    // end of method indexOf(_)
        func3406.paramTypes = [];
        func3406.paramTypes.push([]);
        this.methods["indexOf(1)"] = func3406;
        func3406.paramCounts = [1];
        func3406.paramNames = ["sought"];
        func3406.typeParamNames = [];
        func3406.definitionLine = 166;
        func3406.definitionModule = "standardGraceClass";
        var func3417 = function(argcv, var_sought, var_action) {    // method indexOf(_)ifAbsent(_)
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          // Start argument type-checks
          setLineNumber(171);    // compilenode identifier
          if (!Grace_isTrue(callmethod(var_T, "match(1)",  [1], var_sought)))
              raiseTypeError("in request of `indexOf(_)ifAbsent(_)`, " +
                "argument 1 to `indexOf`  is not of type " +
                "T", var_T, var_sought);
          // End argument type-checks
          setLineNumber(172);    // compilenode block
          var block3419 = new GraceBlock(this, 172, 2);
          setLineNumber(1);    // compilenode identifier
          var matches3420 = function(var_ix, var_v) {
            setModuleName("standardGraceClass");
            setLineNumber(172);    // block matches function
            return true;
          };
          block3419.guard = matches3420;
          block3419.real = function(var_ix, var_v) {
            var if3421 = GraceDone;
            setLineNumber(173);    // compilenode identifier
            var opresult3422 = callmethod(var_v, "==(1)", [1], var_sought);
            if (Grace_isTrue(opresult3422)) {
              throw new ReturnException(var_ix, returnTarget);
            }
            return if3421;
          };
          // call case 4: self request
          var call3418 = selfRequest(this, "keysAndValuesDo(1)", [1], block3419);
          setLineNumber(175);    // compilenode member
          // call case 6: other requests
          var call3423 = callmethod(var_action, "apply", []);
          return call3423;
        };    // end of method indexOf(_)ifAbsent(_)
        func3417.paramTypes = [];
        func3417.paramTypes.push([]);
        func3417.paramTypes.push([]);
        this.methods["indexOf(1)ifAbsent(1)"] = func3417;
        func3417.paramCounts = [1, 1];
        func3417.paramNames = ["sought", "action"];
        func3417.typeParamNames = [];
        func3417.definitionLine = 171;
        func3417.definitionModule = "standardGraceClass";
        var func3424 = function(argcv) {    // method asDictionary
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(178);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 6: other requests
          setLineNumber(0);    // compilenode identifier
          var call3427 = selfRequest(importedModules["standardGraceClass"], "standardGrace", []);
          var call3426 = callmethod(call3427, "dictionary", []);
          var call3425 = callmethod(call3426, "empty", []);
          var var_result = call3425;
          setLineNumber(179);    // compilenode block
          var block3429 = new GraceBlock(this, 179, 2);
          setLineNumber(1);    // compilenode identifier
          var matches3430 = function(var_k, var_v) {
            setModuleName("standardGraceClass");
            setLineNumber(179);    // block matches function
            return true;
          };
          block3429.guard = matches3430;
          block3429.real = function(var_k, var_v) {
            setLineNumber(180);    // compilenode identifier
            // call case 6: other requests
            var call3431 = callmethod(var_result, "at(1)put(1)", [1, 1], var_k, var_v);
            return call3431;
          };
          // call case 4: self request
          var call3428 = selfRequest(this, "keysAndValuesDo(1)", [1], block3429);
          setLineNumber(182);    // compilenode identifier
          return var_result;
          return undefined;
        };    // end of method asDictionary
        this.methods["asDictionary"] = func3424;
        func3424.paramCounts = [0];
        func3424.paramNames = [];
        func3424.typeParamNames = [];
        func3424.definitionLine = 177;
        func3424.definitionModule = "standardGraceClass";
        var func3432 = function(argcv, var_existing) {    // method into(_)
          var returnTarget = invocationCount;
          invocationCount++;
          setModuleName("standardGraceClass");
          setLineNumber(186);    // compilenode member
          // call case 4: self request
          var call3433 = selfRequest(this, "iterator", []);
          var var_selfIterator = call3433;
          setLineNumber(187);    // compilenode block
          var block3435 = new GraceBlock(this, 187, 0);
          var matches3436 = function() {
            setModuleName("standardGraceClass");
            return true;
          };
          block3435.guard = matches3436;
          block3435.real = function() {
            // call case 6: other requests
            var call3437 = callmethod(var_selfIterator, "hasNext", []);
            return call3437;
          };
          var block3438 = new GraceBlock(this, 187, 0);
          var matches3439 = function() {
            setModuleName("standardGraceClass");
            return true;
          };
          block3438.guard = matches3439;
          block3438.real = function() {
            setLineNumber(188);    // compilenode member
            // call case 6: other requests
            var call3441 = callmethod(var_selfIterator, "next", []);
            // call case 6: other requests
            var call3440 = callmethod(var_existing, "add(1)", [1], call3441);
            return call3440;
          };
          // call case 5: prelude request
          var call3434 = callmethod(var_prelude, "while(1)do(1)", [1, 1], block3435, block3438);
          setLineNumber(190);    // compilenode identifier
          return var_existing;
        };    // end of method into(_)
        this.methods["into(1)"] = func3432;
        func3432.paramCounts = [1];
        func3432.paramNames = ["existing"];
        func3432.typeParamNames = [];
        func3432.definitionLine = 184;
        func3432.definitionModule = "standardGraceClass";
        for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
            var oneAlias = aliases[aix];
            this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
        }
        for (var exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj3365_init = function() {    // init of object on line 146
          initFun3366.call(this);
        };
        return obj3365_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj3365_init = obj3365_build.call(inheritingObject, null, this, aliases, exclusions, var_T);
      return obj3365_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method indexable$build(_,_,_)
    this.methods["indexable$build(3)"] = func3364;
    func3364.paramCounts = [0];
    func3364.paramNames = [];
    func3364.typeParamNames = ["T"];
    func3364.definitionLine = 146;
    func3364.definitionModule = "standardGraceClass";
    for (var aix = 0, aLen = aliases.length; aix < aLen; aix++) {
        var oneAlias = aliases[aix];
        this.methods[oneAlias.newName] = this.methods[oneAlias.oldName];
    }
    for (var exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj3204_init = function() {    // init of object on line 4
      setLineNumber(8);    // compilenode typeliteral
      //   Type literal 
      var type3442 = new GraceType("Block1");
      type3442.typeMethods.push("apply(1)");
      this.data.Block1 = type3442;
      setLineNumber(12);    // compilenode typeliteral
      //   Type literal 
      var type3443 = new GraceType("Block2");
      type3443.typeMethods.push("apply(2)");
      this.data.Block2 = type3443;
    };
    return obj3204_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj3204 = emptyGraceObject("traits", "standardGraceClass", 4);
  var obj3204_init = obj3204_build.call(obj3204, null, this, [], []);
  obj3204_init.call(obj3204);  // end of compileobject
  var var_traits = obj3204;
  return this;
}
gracecode_standardGraceClass.imports = [];
if (typeof gctCache !== "undefined")
  gctCache["standardGraceClass"] = "classes:\n traits\nconfidential:\nconstructors-of:traits:\n collection\n enumerable\n indexable\ndialect:\nfresh-methods:\n standardGrace\nfresh:standardGrace:\n AndPattern\n BaseType\n BasicPattern\n Binding\n BindingPattern\n Block0\n Block1\n Block2\n Block3\n BoundsError\n Cmd\n Collection\n ComparableToDictionary\n ConcurrentModification\n Dictionary\n Enumerable\n EnvironmentException\n Exception\n ExceptionKind\n Expandable\n Extractable\n FailedMatch\n Fun\n Fun2\n Fun3\n Iterable\n Iterator\n IteratorExhausted\n List\n MatchAndDestructuringPattern\n MatchResult\n MinimalyIterable\n NoSuchMethod\n NoSuchObject\n OrPattern\n Pattern\n Point\n Proc\n Proc2\n Proc3\n ProgrammingError\n RequestError\n ResourceException\n RuntimeError\n SelfType\n Sequence\n Set\n Singleton\n SizeUnknown\n SubobjectResponsibility\n SuccessfulMatch\n TypeError\n TypeIntersection\n TypeSubtraction\n TypeUnion\n TypeVariant\n UninitializedVariable\n VariablePattern\n WildcardPattern\n abstract\n alwaysEqual\n binding\n dictionary\n dictionary(1)\n do(1)while(1)\n emptyDictionary\n emptyList\n emptySequence\n emptySet\n for(1)and(1)do(1)\n isEqual(1)toIterable(1)\n iteratorConcat(2)\n lazyConcatenation(2)\n lazySequenceOver(1)filteredBy(1)\n lazySequenceOver(1)mappedBy(1)\n list\n list(1)\n max(2)\n min(2)\n point2Dx(1)y(1)\n range\n removed\n repeat(1)times(1)\n required\n sequence\n sequence(1)\n set\n set(1)\n unused\n valueOf(1)\nmethods-of:traits.collection:\n >>(1)\n asString\n do\n do(1)separatedBy(1)\n filter(1)\n first\n fold(1)startingWith(1)\n isEmpty\n iterator\n map(1)\n reduce(2)\n size\n sizeIfUnknown(1)\nmethods-of:traits.enumerable:\n ++(1)\n ::(1)\n ==(1)\n >>(1)\n asDebugString\n asDictionary\n asString\n basicAsString\n do\n do(1)\n do(1)separatedBy(1)\n filter(1)\n first\n fold(1)startingWith(1)\n into(1)\n isEmpty\n isMe(1)\n iterator\n keysAndValuesDo(1)\n map(1)\n reduce(2)\n size\n sizeIfUnknown(1)\n sorted\n sortedBy(1)\n values\n \u2260(1)\nmethods-of:traits.indexable:\n ::(1)\n >>(1)\n asDebugString\n asDictionary\n asString\n at(1)\n basicAsString\n do\n do(1)separatedBy(1)\n fifth\n filter(1)\n first\n fold(1)startingWith(1)\n fourth\n indexOf(1)\n indexOf(1)ifAbsent(1)\n indices\n into(1)\n isEmpty\n isMe(1)\n iterator\n keysAndValuesDo(1)\n last\n map(1)\n reduce(2)\n second\n size\n sizeIfUnknown(1)\n third\n \u2260(1)\nmodules:\npath:\n /Users/Dmitri/LocalMinigrace/standardGraceClass.grace\npublic:\n standardGrace\ntypes:\n";
if (typeof originalSourceLines !== "undefined") {
  originalSourceLines["standardGraceClass"] = [
    "#pragma ExtendedLineups",
    "dialect \"none\"",
    "",
    "def traits = object {",
    "    // these definitions are at module-level to avoid problems with outer",
    "    // and the c-backend",
    "",
    "    type Block1⟦Arg, Res⟧ = type {",
    "        apply(a:Arg) -> Res",
    "    }",
    "",
    "    type Block2⟦Arg1, Arg2, Res⟧ = type {",
    "        apply(a:Arg1, b:Arg2) -> Res",
    "    }",
    "",
    "    class collection⟦T⟧ {",
    "",
    "        method asString { \"a collection trait\" }",
    "        method sizeIfUnknown(action) {",
    "            action.apply",
    "        }",
    "        method size {",
    "            standardGrace.SizeUnknown.raise \"this collection does not know its size\"",
    "        }",
    "        method do { standardGrace.abstract }",
    "        method iterator { standardGrace.abstract }",
    "        method isEmpty {",
    "            // override if size is known",
    "            iterator.hasNext.not",
    "        }",
    "        method first {",
    "            def it = self.iterator",
    "            if (it.hasNext) then { ",
    "                it.next",
    "            } else {",
    "                standardGrace.BoundsError.raise \"no first element in {self}\"",
    "            }",
    "        }",
    "        method do(block1) separatedBy(block0) {",
    "            var firstTime := true",
    "            var i := 0",
    "            self.do { each ->",
    "                if (firstTime) then {",
    "                    firstTime := false",
    "                } else {",
    "                    block0.apply",
    "                }",
    "                block1.apply(each)",
    "            }",
    "            return self",
    "        }",
    "        method reduce(initial, blk) {",
    "        // deprecated; for compatibility with builtInList",
    "            fold(blk)startingWith(initial)",
    "        }",
    "        method fold(blk)startingWith(initial) {",
    "            var result := initial",
    "            self.do {it ->",
    "                result := blk.apply(result, it)",
    "            }",
    "            return result",
    "        }",
    "        method map⟦R⟧(block1:Block1⟦T,R⟧) // -> Enumerable⟦R⟧",
    "        {",
    "            standardGrace.lazySequenceOver⟦T,R⟧(self) mappedBy(block1)",
    "        }",
    "        method filter(selectionCondition:Block1⟦T,Boolean⟧) // -> Enumerable⟦T⟧",
    "        {",
    "            standardGrace.lazySequenceOver⟦T⟧(self) filteredBy(selectionCondition)",
    "        }",
    "        method >> (collFactory) {",
    "            collFactory.withAll(self)",
    "        }",
    "    }",
    "",
    "    class enumerable⟦T⟧ {",
    "        inherit traits.collection⟦T⟧",
    "        method iterator { standardGrace.abstract }",
    "        method size {",
    "            // override if size is known",
    "            standardGrace.SizeUnknown.raise \"size requested on {asDebugString}\"",
    "        }",
    "        method asDictionary {",
    "            def result = standardGrace.dictionary.empty",
    "            keysAndValuesDo { k, v ->",
    "                result.at(k) put(v)",
    "            }",
    "            return result",
    "        }",
    "        method into(existing) // -> Collection⟦T⟧",
    "        {",
    "            def selfIterator = self.iterator",
    "            while {selfIterator.hasNext} do {",
    "                existing.add(selfIterator.next)",
    "            }",
    "            existing",
    "        }",
    "        method ==(other) {",
    "            standardGrace.isEqual (self) toIterable (other)",
    "        }",
    "        method do(block1:Block1⟦T,Done⟧) -> Done {",
    "            def selfIterator = self.iterator",
    "            while {selfIterator.hasNext} do {",
    "                block1.apply(selfIterator.next)",
    "            }",
    "        }",
    "        method keysAndValuesDo(block2:Block2⟦Number,T,Done⟧) -> Done {",
    "            var ix := 0",
    "            def selfIterator = self.iterator",
    "            while {selfIterator.hasNext} do {",
    "                ix := ix + 1",
    "                block2.apply(ix, selfIterator.next)",
    "            }",
    "        }",
    "        method values // -> Collection⟦T⟧",
    "        {",
    "            self",
    "        }",
    "        method fold⟦R⟧(block2)startingWith(initial) -> R {",
    "            var res := initial",
    "            def selfIterator = self.iterator",
    "            while { selfIterator.hasNext } do {",
    "                res := block2.apply(res, selfIterator.next)",
    "            }",
    "            return res",
    "        }",
    "        method ++ (other) // -> Enumerable⟦T⟧",
    "        {",
    "            standardGrace.lazyConcatenation(self, other)",
    "        }",
    "        method sortedBy(sortBlock:Block2) // -> List⟦T⟧",
    "        {",
    "            standardGrace.list.withAll(self).sortBy(sortBlock)",
    "        }",
    "        method sorted  // -> List⟦T⟧",
    "        {",
    "            standardGrace.list.withAll(self).sort",
    "        }",
    "        method asString {",
    "            var s := \"⟨\"",
    "            do { each -> s := s ++ each.asString } separatedBy { s := s ++ \", \" }",
    "            s ++ \"⟩\"",
    "        }",
    "    }",
    "",
    "    class indexable⟦T⟧ {",
    "        inherit traits.collection⟦T⟧",
    "        method at(index) { standardGrace.abstract }",
    "        method size { standardGrace.abstract }",
    "        method isEmpty { size == 0 }",
    "        method keysAndValuesDo(action:Block2⟦Number,T,Done⟧) -> Done {",
    "            def curSize = size",
    "            var i := 1",
    "            while {i <= curSize} do {",
    "                action.apply(i, self.at(i))",
    "                i := i + 1",
    "            }",
    "        }",
    "        method first { at(1) }",
    "        method second { at(2) }",
    "        method third { at(3) }",
    "        method fourth { at(4) }",
    "        method fifth { at(5) }",
    "        method last { at(size) }",
    "        method indices { standardGrace.range.from 1 to(size) }",
    "        method indexOf(sought:T)  {",
    "            indexOf(sought) ifAbsent {",
    "                standardGrace.NoSuchObject.raise \"collection does not contain {sought}\"",
    "            }",
    "        }",
    "        method indexOf(sought:T) ifAbsent(action)  {",
    "            keysAndValuesDo { ix, v ->",
    "                if (v == sought) then { return ix }",
    "            }",
    "            action.apply",
    "        }",
    "        method asDictionary {",
    "            def result = standardGrace.dictionary.empty",
    "            keysAndValuesDo { k, v ->",
    "                result.at(k) put(v)",
    "            }",
    "            return result",
    "        }",
    "        method into(existing) // -> Collection⟦T⟧",
    "        {",
    "            def selfIterator = self.iterator",
    "            while {selfIterator.hasNext} do {",
    "                existing.add(selfIterator.next)",
    "            }",
    "            existing",
    "        }",
    "    }",
    "}",
    "",
    "",
    "class standardGrace {",
    "",
    "    def BoundsError is public = _prelude.BoundsError",
    "    def EnvironmentException is public = _prelude.EnvironmentException",
    "    def Exception is public = _prelude.Exception",
    "    def NoSuchMethod is public = _prelude.NoSuchMethod",
    "    def ProgrammingError is public = _prelude.ProgrammingError",
    "    def RequestError is public = _prelude.RequestError",
    "    def ResourceException is public = _prelude.ResourceException",
    "    def RuntimeError is public = _prelude.RuntimeError",
    "    def TypeError is public = _prelude.TypeError",
    "    def UninitializedVariable is public = _prelude.UninitializedVariable",
    "",
    "    def ConcurrentModification is public = ProgrammingError.refine \"ConcurrentModification\"",
    "    def IteratorExhausted is public = ProgrammingError.refine \"IteratorExhausted\"",
    "    def NoSuchObject is public = ProgrammingError.refine \"NoSuchObject\"",
    "    def SizeUnknown is public = Exception.refine \"SizeUnknown\"",
    "    def SubobjectResponsibility is public = ProgrammingError.refine \"SubobjectResponsibility\"",
    "",
    "    class SuccessfulMatch.new(result', bindings') {",
    "        inherit true",
    "        method result { result' }",
    "        method bindings { bindings' }",
    "        method asString {",
    "            \"SuccessfulMatch(result = {result}, bindings = {bindings})\"",
    "        }",
    "    }",
    "",
    "    class FailedMatch.new(result') {",
    "        inherit false",
    "        method result { result' }",
    "        method bindings { emptySequence }",
    "        method asString {",
    "            \"FailedMatch(result = {result})\"",
    "        }",
    "    }",
    "",
    "    method abstract {",
    "        SubobjectResponsibility.raise \"abstract method not overriden by subobject\"",
    "    }",
    "",
    "",
    "    method required {",
    "        SubobjectResponsibility.raise \"required method not overriden by subobject\"",
    "    }",
    "",
    "    method do (action) while (condition) {",
    "        while {",
    "            action.apply",
    "            condition.apply",
    "        } do { }",
    "    }",
    "",
    "    method repeat (n) times (action) {",
    "        var ix := n",
    "        while {ix > 0} do {",
    "            ix := ix - 1",
    "            action.apply",
    "        }",
    "    }",
    "",
    "    method for (cs) and (ds) do (action) -> Done {",
    "        def dIter = ds.iterator",
    "        cs.do { c -> ",
    "            if (dIter.hasNext) then {",
    "                action.apply(c, dIter.next)",
    "            } else {",
    "                return",
    "            }",
    "        }",
    "    }",
    "",
    "    method min(a, b) {",
    "        if (a < b) then { a } else { b }",
    "    }",
    "",
    "    method max(a, b) {",
    "        if (a > b) then { a } else { b }",
    "    }",
    "",
    "    method valueOf (nullaryBlock) {",
    "        nullaryBlock.apply",
    "    }",
    "",
    "    class BasicPattern.new {",
    "        method &(o) {",
    "            AndPattern.new(self, o)",
    "        }",
    "        method |(o) {",
    "            OrPattern.new(self, o)",
    "        }",
    "    }",
    "    class MatchAndDestructuringPattern.new(pat, items') {",
    "        inherit BasicPattern.new",
    "        def pattern = pat",
    "        def items = items'",
    "        method match(o) {",
    "            def m = pat.match(o)",
    "            if (m) then{",
    "                var mbindings := m.bindings",
    "                def bindings = []",
    "                if (mbindings.size < items.size) then {",
    "                    if (Extractable.match(o)) then {",
    "                        mbindings := o.extract",
    "                    } else {",
    "                        return FailedMatch.new(o)",
    "                    }",
    "                }",
    "                for (items.indices) do {i->",
    "                    def b = items.at(i).match(mbindings.at(i))",
    "                    if (!b) then {",
    "                        return FailedMatch.new(o)",
    "                    }",
    "                    for (b.bindings) do {bb->",
    "                        bindings.push(bb)",
    "                    }",
    "                }",
    "                SuccessfulMatch.new(o, bindings)",
    "            } else {",
    "                FailedMatch.new(o)",
    "            }",
    "        }",
    "    }",
    "",
    "    class VariablePattern.new(nm) {",
    "        inherit BasicPattern.new",
    "        method match(o) {",
    "            SuccessfulMatch.new(o, [o])",
    "        }",
    "    }",
    "",
    "    class BindingPattern.new(pat) {",
    "        inherit BasicPattern.new",
    "        method match(o) {",
    "            def bindings = [o]",
    "            def m = pat.match(o)",
    "            if (!m) then {",
    "                return m",
    "            }",
    "            for (m.bindings) do {b->",
    "                bindings.push(b)",
    "            }",
    "            SuccessfulMatch.new(o, bindings)",
    "        }",
    "    }",
    "",
    "    class WildcardPattern.new {",
    "        inherit BasicPattern.new",
    "        method match(o) {",
    "            SuccessfulMatch.new(done, [])",
    "        }",
    "    }",
    "",
    "    class AndPattern.new(p1, p2) {",
    "        inherit BasicPattern.new",
    "        method match(o) {",
    "            def m1 = p1.match(o)",
    "            if (!m1) then {",
    "                return m1",
    "            }",
    "            def m2 = p2.match(o)",
    "            if (!m2) then {",
    "                return m2",
    "            }",
    "            def bindings = []",
    "            for (m1.bindings) do {b->",
    "                bindings.push(b)",
    "            }",
    "            for (m2.bindings) do {b->",
    "                bindings.push(b)",
    "            }",
    "            SuccessfulMatch.new(o, bindings)",
    "        }",
    "    }",
    "",
    "    class OrPattern.new(p1, p2) {",
    "        inherit BasicPattern.new",
    "        method match(o) {",
    "            if (p1.match(o)) then {",
    "                return SuccessfulMatch.new(o, [])",
    "            }",
    "            if (p2.match(o)) then {",
    "                return SuccessfulMatch.new(o, [])",
    "            }",
    "            FailedMatch.new(o)",
    "        }",
    "    }",
    "",
    "    def Singleton is public = object {",
    "        class new {",
    "            inherit BasicPattern.new",
    "            method match(other) {",
    "                if (self.isMe(other)) then {",
    "                    SuccessfulMatch.new(other, [])",
    "                } else {",
    "                    FailedMatch.new(other)",
    "                }",
    "            }",
    "            method ==(other) { self.isMe(other) }",
    "        }",
    "        class named(printString) {",
    "            inherit Singleton.new",
    "            method asString { printString }",
    "        }",
    "    }",
    "",
    "    class BaseType.new(name) {",
    "        method &(o) {",
    "            TypeIntersection.new(self, o)",
    "        }",
    "        method |(o) {",
    "            TypeVariant.new(self, o)",
    "        }",
    "        method +(o) {",
    "            TypeUnion.new(self, o)",
    "        }",
    "        method -(o) {",
    "            TypeSubtraction.new(self, o)",
    "        }",
    "        method asString {",
    "            if (name == \"\") then { \"type ‹anon›\" }",
    "                            else { \"type {name}\" }",
    "        }",
    "    }",
    "",
    "    class TypeIntersection.new(t1, t2) {",
    "        inherit AndPattern.new(t1, t2)",
    "        // inherit BaseType.new",
    "        method &(o) {",
    "            TypeIntersection.new(self, o)",
    "        }",
    "        method |(o) {",
    "            TypeVariant.new(self, o)",
    "        }",
    "        method +(o) {",
    "            TypeUnion.new(self, o)",
    "        }",
    "        method -(o) {",
    "            TypeSubtraction.new(self, o)",
    "        }",
    "        method methodNames {",
    "            t1.methodNames.addAll(t2.methodNames)",
    "        }",
    "        method asString { \"({t1} & {t2})\" }",
    "    }",
    "",
    "    class TypeVariant.new(t1, t2) {",
    "        inherit OrPattern.new(t1, t2)",
    "        // inherit BaseType.new",
    "        method &(o) {",
    "            TypeIntersection.new(self, o)",
    "        }",
    "        method |(o) {",
    "            TypeVariant.new(self, o)",
    "        }",
    "        method +(o) {",
    "            TypeUnion.new(self, o)",
    "        }",
    "        method -(o) {",
    "            TypeSubtraction.new(self, o)",
    "        }",
    "        method methodNames {",
    "            self.TypeVariantsCannotBeCharacterizedByASetOfMethods",
    "        }",
    "        method asString { \"({t1} | {t2})\" }",
    "    }",
    "",
    "    class TypeUnion.new(t1, t2) {",
    "        inherit BasicPattern.new",
    "    //    inherit BaseType.new",
    "        method &(o) {",
    "            TypeIntersection.new(self, o)",
    "        }",
    "        method |(o) {",
    "            TypeVariant.new(self, o)",
    "        }",
    "        method +(o) {",
    "            TypeUnion.new(self, o)",
    "        }",
    "        method -(o) {",
    "            TypeSubtraction.new(self, o)",
    "        }",
    "        method methodNames {",
    "            t1.methodNames ** t2.methodNames",
    "        }",
    "        method match(o) {",
    "            ResourceException.raise \"matching against a TypeUnion not yet implemented\"",
    "            // Why not?  Becuase it requires reflection, which",
    "            // requires the mirror module, which requires this module.",
    "            def mirror = ...",
    "            def oMethodNames = mirror.reflect(o).methodNames",
    "            for (self.methodNames) do { each ->",
    "                if (! oMethodNames.contains(each)) then {",
    "                    return FailedMatch.new(o)",
    "                }",
    "            }",
    "            return SuccessfulMatch.new(o, [])",
    "        }",
    "        method asString { \"({t1} + {t2})\" }",
    "    }",
    "",
    "    class TypeSubtraction.new(t1, t2) {",
    "        inherit BasicPattern.new",
    "        method &(o) {",
    "            TypeIntersection.new(self, o)",
    "        }",
    "        method |(o) {",
    "            TypeVariant.new(self, o)",
    "        }",
    "        method +(o) {",
    "            TypeUnion.new(self, o)",
    "        }",
    "        method -(o) {",
    "            TypeSubtraction.new(self, o)",
    "        }",
    "        method methodNames {",
    "            t1.methodNames.removeAll(t2.methodNames)",
    "        }",
    "        method asString { \"({t1} - {t2})\" }",
    "    }",
    "",
    "    // Now define the types.  Because some of the types are defined using &,",
    "    // TypeIntersection must be defined first.",
    "",
    "    type Extractable = {",
    "        extract",
    "    }",
    "",
    "    type MatchResult = Boolean & type {",
    "        result -> Unknown",
    "        bindings -> List⟦Unknown⟧",
    "    }",
    "",
    "    type Pattern = {",
    "        & (other:Pattern) -> Pattern",
    "        | (other:Pattern) -> Pattern",
    "        match(value:Object) -> MatchResult",
    "    }",
    "",
    "    type ExceptionKind = Pattern & type {",
    "        refine (parentKind:ExceptionKind) -> ExceptionKind",
    "        parent -> ExceptionKind",
    "        raise (message:String) -> Done",
    "        raise (message:String) with (argument:Object) -> Done",
    "    }",
    "",
    "    type Point =  {",
    "",
    "        x -> Number",
    "        // the x-coordinates of self",
    "",
    "        y -> Number",
    "        // the y-coordinate of self",
    "",
    "        == (other:Object) -> Boolean",
    "        // true if other is a Point with the same x and y coordinates as self.",
    "",
    "        + (other:Point) -> Point",
    "        // the Point that is the vector sum of self and other, i.e. (self.x+other.x) @ (self.y+other.y)",
    "",
    "        - (other:Point) -> Point",
    "        // the Point that is the vector difference of self and other, i.e. (self.x-other.x) @ (self.y-other.y)",
    "",
    "        prefix- -> Point",
    "        // the negation of self",
    "        ",
    "        * (factor:Number) -> Point",
    "        // this point scaled by factor, i.e. (self.x*factor) @ (self.y*factor)",
    "        ",
    "        / (factor:Number) -> Point",
    "        // this point scaled by 1/factor, i.e. (self.x/factor) @ (self.y/factor)",
    "",
    "        length -> Number",
    "        // distance from self to the origin",
    "",
    "        distanceTo(other:Point) -> Number",
    "        // distance from self to other",
    "",
    "        dot (other:Point) -> Number",
    "        ⋅ (other:Point) -> Number",
    "        // dot product of self and other",
    "",
    "        norm -> Point",
    "        // the unit vector (vecor of length 1) in same direction as self",
    "    }",
    "",
    "    class alwaysEqual {     // a trait",
    "        method == (other) {",
    "            self.isMe(other)",
    "        }",
    "    }",
    "",
    "    class point2Dx (x') y (y') {",
    "        def x is readable = x'",
    "        def y is readable = y'",
    "        method asString { \"({x}@{y})\" }",
    "        method asDebugString { self.asString }",
    "        method distanceTo(other:Point) { (((x - other.x)^2) + ((y - other.y)^2))^(0.5) }",
    "        method -(other:Point) { point2Dx (x - other.x) y (y - other.y) }",
    "        method +(other:Point) { point2Dx (x + other.x) y (y + other.y) }",
    "        method /(other:Number) { point2Dx (x / other) y (y / other) }",
    "        method *(other:Number) { point2Dx (x * other) y (y * other) }",
    "        method length {((x^2) + (y^2))^0.5}",
    "        method ==(other) {",
    "            match (other)",
    "                case {o:Point -> (x == o.x) && (y == o.y)}",
    "                case {_ -> false}",
    "        }",
    "        method prefix- { point2Dx (-x) y (-y) }",
    "        method dot (other:Point) -> Number {",
    "            // dot product",
    "            (x * other.x) + (y * other.y)",
    "        }",
    "        method ⋅ (other:Point) -> Number {",
    "            // dot product",
    "            (x * other.x) + (y * other.y)",
    "        }",
    "        method reverseTimesNumber(n) { point2Dx (n * x) y (n * x) }",
    "        method reversePlusNumber(n) { point2Dx (n + x) y (n + x) }",
    "        method reverseDivideNumber(n) { point2Dx (n / x) y (n / x) }",
    "        method reverseMinusNumber(n) { point2Dx (n - x) y (n - x) }",
    "        method norm { self / self.length }",
    "    }",
    "",
    "    //",
    "    // useful types",
    "    //",
    "",
    "    type Block0⟦R⟧ = type {",
    "        apply -> R",
    "    }",
    "",
    "    type Block1⟦T,R⟧ = type {",
    "        apply(a:T) -> R",
    "    }",
    "",
    "    type Block2⟦S,T,R⟧ = type {",
    "        apply(a:S, b:T) -> R",
    "    }",
    "",
    "    type Block3⟦S,T,U,R⟧ = type {",
    "        apply(a:S, b:T, c:U) -> R",
    "    }",
    "",
    "    type Cmd = Block0⟦Done⟧",
    "    type Fun⟦T,R⟧ = Block1⟦T,R⟧",
    "    type Fun2⟦T,U,R⟧ = Block2⟦T,U,R⟧",
    "    type Fun3⟦T,U,W,R⟧ = Block3⟦T,U,W,R⟧",
    "    type Proc⟦T⟧ = Block1⟦T,Done⟧",
    "    type Proc2⟦T,U⟧ = Block2⟦T,U,Done⟧",
    "    type Proc3⟦T,U,W⟧ = Block3⟦T,U,W,Done⟧",
    "",
    "    type SelfType = Unknown     // becuase it's not yet in the language",
    "",
    "    //",
    "    // start collections",
    "    //",
    "",
    "    type Iterable⟦T⟧ = Object & type {",
    "        iterator -> Iterator⟦T⟧",
    "            // the iterator on which I am based",
    "        isEmpty -> Boolean",
    "            // true if I have no elements",
    "        size -> Number",
    "            // my size (the number of elements that I contain);",
    "            // may raise SizeUnknown.",
    "        sizeIfUnknown(action: Block0⟦Number⟧)",
    "            // my size; if not known, then the result of applying action",
    "        first -> T",
    "            // my first element; raises BoundsError if I have none.",
    "        do(body: Block1⟦T, Done⟧) -> Done",
    "            // an internal iterator; applies body to each of my elements",
    "        do(body:Block1⟦T, Done⟧) separatedBy(separator:Block0⟦Done⟧) -> Done",
    "            // an internal iterator; applies body to each of my elements, and applies separator in between",
    "        ++(other: Iterable⟦T⟧) -> Iterable⟦T⟧",
    "            // returns a new Iterable over the concatenation of self and other",
    "        fold(binaryFunction:Block2⟦T, T, T⟧) startingWith(initial:T) -> T",
    "            // the left-associative fold of binaryFunction over self, starting with initial",
    "        map⟦U⟧(function:Block1⟦T, U⟧) -> Iterable⟦U⟧",
    "            // returns a new iterator that yields my elements mapped by function",
    "        filter(condition:Block1⟦T,Boolean⟧) -> Iterable⟦T⟧",
    "            // returns a new iterator that yields those of my elements for which condition holds",
    "    }",
    "",
    "    type Expandable⟦T⟧ = Iterable⟦T⟧ & type {",
    "        add(x: T) -> SelfType",
    "        addAll(xs: Iterable⟦T⟧) -> SelfType",
    "    }",
    "",
    "    type Collection⟦T⟧ = Iterable⟦T⟧",
    "",
    "    type Enumerable⟦T⟧ = Collection⟦T⟧ & type {",
    "        values -> Collection⟦T⟧",
    "        asDictionary -> Dictionary⟦Number,T⟧",
    "        keysAndValuesDo(action:Block2⟦Number,T,Object⟧) -> Done",
    "        into(existing: Expandable⟦Unknown⟧) -> Collection⟦Unknown⟧",
    "        sortedBy(comparison:Block2⟦T,T,Number⟧) -> SelfType",
    "        sorted -> SelfType",
    "    }",
    "",
    "    type Sequence⟦T⟧ = Enumerable⟦T⟧ & type {",
    "        size -> Number",
    "        at(n:Number) -> T",
    "        indices -> Sequence⟦Number⟧",
    "        keys -> Sequence⟦Number⟧",
    "        second -> T",
    "        third -> T",
    "        fourth -> T",
    "        fifth -> T",
    "        last -> T",
    "        indexOf⟦W⟧(elem:T)ifAbsent(action:Block0⟦W⟧) -> Number | W",
    "        indexOf(elem:T) -> Number",
    "        contains(elem:T) -> Boolean",
    "        reversed -> Sequence⟦T⟧",
    "    }",
    "",
    "    type List⟦T⟧ = Sequence⟦T⟧ & type {",
    "        add(x: T) -> List⟦T⟧",
    "        addAll(xs: Iterable⟦T⟧) -> List⟦T⟧",
    "        addFirst(x: T) -> List⟦T⟧",
    "        addAllFirst(xs: Iterable⟦T⟧) -> List⟦T⟧",
    "        addLast(x: T) -> List⟦T⟧    // same as add",
    "        at(ix:Number) put(v:T) -> List⟦T⟧",
    "        clear -> List⟦T⟧",
    "        removeFirst -> T",
    "        removeAt(n: Number) -> T",
    "        removeLast -> T",
    "        remove(v:T)",
    "        remove(v:T) ifAbsent(action:Block0⟦Done⟧)",
    "        removeAll(vs: Iterable⟦T⟧)",
    "        removeAll(vs: Iterable⟦T⟧) ifAbsent(action:Block0⟦Unknown⟧)",
    "        pop -> T",
    "        ++(o: List⟦T⟧) -> List⟦T⟧",
    "        addAll(l: Iterable⟦T⟧) -> List⟦T⟧",
    "        copy -> List⟦T⟧",
    "        sort -> List⟦T⟧",
    "        sortBy(sortBlock:Block2⟦T,T,Number⟧) -> List⟦T⟧",
    "        reverse -> List⟦T⟧",
    "        reversed -> List⟦T⟧",
    "    }",
    "",
    "    type Set⟦T⟧ = Collection⟦T⟧ & type {",
    "        size -> Number",
    "        add(x:T) -> SelfType",
    "        addAll(elements: Iterable⟦T⟧) -> SelfType",
    "        remove(x: T) -> Set⟦T⟧",
    "        remove(x: T) ifAbsent(block: Block0⟦Done⟧) -> Set⟦T⟧",
    "        clear -> Set⟦T⟧",
    "        includes(booleanBlock: Block1⟦T,Boolean⟧) -> Boolean",
    "        find(booleanBlock: Block1⟦T,Boolean⟧) ifNone(notFoundBlock: Block0⟦T⟧) -> T",
    "        copy -> Set⟦T⟧",
    "        contains(elem:T) -> Boolean",
    "        ** (other:Set⟦T⟧) -> Set⟦T⟧",
    "        -- (other:Set⟦T⟧) -> Set⟦T⟧",
    "        ++ (other:Set⟦T⟧) -> Set⟦T⟧",
    "        isSubset(s2: Set⟦T⟧) -> Boolean",
    "        isSuperset(s2: Iterable⟦T⟧) -> Boolean",
    "        removeAll(elems: Iterable⟦T⟧)",
    "        removeAll(elems: Iterable⟦T⟧)ifAbsent(action:Block0⟦Done⟧) -> Set⟦T⟧",
    "        into(existing: Expandable⟦Unknown⟧) -> Collection⟦Unknown⟧",
    "    }",
    "",
    "    type Dictionary⟦K,T⟧ = Collection⟦T⟧ & type {",
    "        size -> Number",
    "        containsKey(k:K) -> Boolean",
    "        containsValue(v:T) -> Boolean",
    "        contains(elem:T) -> Boolean",
    "        at(key:K)ifAbsent(action:Block0⟦Unknown⟧) -> Unknown",
    "        at(key:K)put(value:T) -> Dictionary⟦K,T⟧",
    "        at(k:K) -> T",
    "        removeAllKeys(keys: Iterable⟦K⟧) -> Dictionary⟦K,T⟧",
    "        removeKey(key:K) -> Dictionary⟦K,T⟧",
    "        removeAllValues(removals: Iterable⟦T⟧) -> Dictionary⟦K,T⟧",
    "        removeValue(v:T) -> Dictionary⟦K,T⟧",
    "        clear -> Dictionary⟦K,T⟧",
    "        keys -> Enumerable⟦K⟧",
    "        values -> Enumerable⟦T⟧",
    "        bindings -> Enumerable⟦Binding⟦K,T⟧⟧",
    "        keysAndValuesDo(action:Block2⟦K,T,Done⟧) -> Done",
    "        keysDo(action:Block1⟦K,Done⟧) -> Done",
    "        valuesDo(action:Block1⟦T,Done⟧) -> Done",
    "        == (other:Object) -> Boolean",
    "        copy -> Dictionary⟦K,T⟧",
    "        ++ (other:Dictionary⟦K, T⟧) -> Dictionary⟦K, T⟧",
    "        -- (other:Dictionary⟦K, T⟧) -> Dictionary⟦K, T⟧",
    "        asDictionary -> Dictionary⟦K, T⟧",
    "    }",
    "",
    "    type Iterator⟦T⟧ = type {",
    "        hasNext -> Boolean",
    "        next -> T",
    "    }",
    "",
    "    class lazySequenceOver⟦T,R⟧ (source: Iterable⟦T⟧)",
    "            mappedBy (function:Block1⟦T,R⟧) -> Enumerable⟦R⟧ {",
    "        inherit traits.enumerable⟦T⟧",
    "        class iterator {",
    "            def sourceIterator = source.iterator",
    "            method asString { \"an iterator over a lazy map sequence\" }",
    "            method hasNext { sourceIterator.hasNext }",
    "            method next { function.apply(sourceIterator.next) }",
    "        }",
    "        method size { source.size }",
    "        method isEmpty { source.isEmpty }",
    "        method asDebugString { \"a lazy sequence mapping over {source}\" }",
    "    }",
    "",
    "    class lazySequenceOver⟦T⟧ (source: Iterable⟦T⟧)",
    "            filteredBy(predicate:Block1⟦T,Boolean⟧) -> Enumerable⟦T⟧ {",
    "        inherit traits.enumerable⟦T⟧",
    "        class iterator {",
    "            var cache",
    "            var cacheLoaded := false",
    "            def sourceIterator = source.iterator",
    "            method asString { \"an iterator over filtered {source}\" }",
    "            method hasNext {",
    "            // To determine if this iterator has a next element, we have to find",
    "            // an acceptable element; this is then cached, for the use of next",
    "                if (cacheLoaded) then { true } else { hasNextAcceptableElement }",
    "            }",
    "            method next {",
    "                if (cacheLoaded.not) then { cache := nextAcceptableElement }",
    "                cacheLoaded := false",
    "                return cache",
    "            }",
    "            method nextAcceptableElement is confidential {",
    "            // return the next element of the underlying iterator satisfying",
    "            // predicate; if there is none, raises IteratorExhausted.",
    "                while { true } do {",
    "                    def outerNext = sourceIterator.next",
    "                    def isAcceptable = predicate.apply(outerNext)",
    "                    if (isAcceptable) then { return outerNext }",
    "                }",
    "            }",
    "            method hasNextAcceptableElement is confidential {",
    "            // returns true is there is another element in the underlying iterator",
    "            // satisfying predicate, otherwise false",
    "                while { true } do {",
    "                    if (sourceIterator.hasNext.not) then { return false }",
    "                    def outerNext = sourceIterator.next",
    "                    def isAcceptable = predicate.apply(outerNext)",
    "                    if (isAcceptable) then {",
    "                        cacheLoaded := true",
    "                        cache := outerNext",
    "                        return true",
    "                    }",
    "                }",
    "            }",
    "        }",
    "        method asDebugString { \"a lazy sequence filtering {source}\" }",
    "    }",
    "",
    "    class iteratorConcat⟦T⟧(left:Iterator⟦T⟧, right:Iterator⟦T⟧) {",
    "        method next {",
    "            if (left.hasNext) then {",
    "                left.next",
    "            } else {",
    "                right.next",
    "            }",
    "        }",
    "        method hasNext {",
    "            if (left.hasNext) then { return true }",
    "            return right.hasNext",
    "        }",
    "        method asDebugString { \"iteratorConcat of {left} and {right}\" }",
    "        method asString { \"an iterator over a concatenation\" }",
    "    }",
    "",
    "    class lazyConcatenation⟦T⟧(left, right) -> Enumerable⟦T⟧ {",
    "        inherit traits.enumerable⟦T⟧",
    "        method iterator {",
    "            iteratorConcat(left.iterator, right.iterator)",
    "        }",
    "        method asDebugString { \"lazy concatenation of {left} and {right}\" }",
    "        method size { left.size + right.size }  // may raise SizeUnknown",
    "    }",
    "",
    "    def emptySequence is confidential = object {",
    "        inherit traits.indexable",
    "        method size { 0 }",
    "        method isEmpty { true }",
    "        method at(n) { BoundsError.raise \"index {n} of empty sequence\" }",
    "        method keys { self }",
    "        method values { self }",
    "        method keysAndValuesDo(block2) { done }",
    "        method reversed { self }",
    "        method ++(other: Iterable) { sequence.withAll(other) }",
    "        method asString { \"⟨⟩\" }",
    "        method contains(element) { false }",
    "        method do(block1) { done }",
    "        method ==(other) {",
    "            match (other)",
    "                case {o: Iterable ->",
    "                    o.isEmpty",
    "                }",
    "                case {_ ->",
    "                    false",
    "                }",
    "        }",
    "        class iterator {",
    "            method asString { \"emptySequenceIterator\" }",
    "            method hasNext { false }",
    "            method next { IteratorExhausted.raise \"on empty sequence\" }",
    "        }",
    "        method sorted { self }",
    "        method sortedBy(sortBlock:Block2){ self }",
    "    }",
    "",
    "    class sequence⟦T⟧ {",
    "",
    "        method asString { \"a sequence factory\" }",
    "",
    "        method empty {",
    "            // this is an optimization: there need be just one empty sequence",
    "            emptySequence",
    "        }",
    "",
    "        method withAll(arg: Iterable⟦T⟧) {",
    "            var sizeCertain := true",
    "            // size might be uncertain if arg is a lazy collection.",
    "            def forecastSize = arg.sizeIfUnknown {",
    "                sizeCertain := false",
    "                8",
    "            }",
    "            var inner := _prelude.primitiveArray.new(forecastSize)",
    "            var innerSize := inner.size",
    "            var ix := 0",
    "            if (sizeCertain) then {",
    "                // common, fast path",
    "                for (arg) do { elt ->",
    "                    inner.at(ix)put(elt)",
    "                    ix := ix + 1",
    "                }",
    "            } else {",
    "                // less-than-optimal path",
    "                for (arg) do { elt ->",
    "                    if (innerSize <= ix) then {",
    "                        def newInner = _prelude.primitiveArray.new(innerSize * 2)",
    "                        for (0..(innerSize-1)) do { i ->",
    "                            newInner.at(i)put(inner.at(i))",
    "                        }",
    "                        inner := newInner",
    "                        innerSize := inner.size",
    "                    }",
    "                    inner.at(ix)put(elt)",
    "                    ix := ix + 1",
    "                }",
    "            }",
    "            if (ix == 0) then { return emptySequence }",
    "            self.fromprimitiveArray(inner, ix)",
    "        }",
    "",
    "        method fromprimitiveArray(pArray, sz) is confidential {",
    "            // constructs a sequence from the first sz elements of pArray",
    "",
    "            object {",
    "                inherit traits.indexable⟦T⟧",
    "                def size is public = sz",
    "                def inner = pArray",
    "",
    "                method boundsCheck(n) is confidential {",
    "                    if (!(n >= 1) || !(n <= size)) then {",
    "                        // the condition is written this way because NaN always",
    "                        // compares false",
    "                        BoundsError.raise \"index {n} out of bounds 1..{size}\"",
    "                    }",
    "                }",
    "                method at(n) {",
    "                    boundsCheck(n)",
    "                    inner.at(n-1)",
    "                }",
    "                method keys {",
    "                    range.from(1)to(size)",
    "                }",
    "                method values {",
    "                    self",
    "                }",
    "                method keysAndValuesDo(block2) {",
    "                    var i := 0",
    "                    while {i < size} do {",
    "                        block2.apply(i+1, inner.at(i))",
    "                        i := i + 1",
    "                    }",
    "                }",
    "                method reversed {",
    "                    def freshArray = _prelude.primitiveArray.new(size)",
    "                    var ix := size - 1",
    "                    do { each ->",
    "                        freshArray.at (ix) put(each)",
    "                        ix := ix - 1",
    "                    }",
    "                    outer.fromprimitiveArray(freshArray, size)",
    "                }",
    "                method ++(other: Iterable) {",
    "                    sequence.withAll(lazyConcatenation(self, other))",
    "                }",
    "                method asString {",
    "                    var s := \"⟨\"",
    "                    for (0..(size-1)) do {i->",
    "                        s := s ++ inner.at(i).asString",
    "                        if (i < (size-1)) then { s := s ++ \", \" }",
    "                    }",
    "                    s ++ \"⟩\"",
    "                }",
    "                method contains(element) {",
    "                    do { each -> if (each == element) then { return true } }",
    "                    return false",
    "                }",
    "                method do(block1) {",
    "                    var i := 0",
    "                    while {i < size} do {",
    "                        block1.apply(inner.at(i))",
    "                        i := i + 1",
    "                    }",
    "                }",
    "                method ==(other) {",
    "                    isEqual (self) toIterable (other)",
    "                }",
    "                method iterator {",
    "                    object {",
    "                        var idx := 1",
    "                        method asDebugString { \"{asString}⟪{idx}⟫\" }",
    "                        method asString { \"aSequenceIterator\" }",
    "                        method hasNext { idx <= sz }",
    "                        method next {",
    "                            if (idx > sz) then { IteratorExhausted.raise \"on sequence {outer}⟪{idx}⟫\" }",
    "                            def ret = at(idx)",
    "                            idx := idx + 1",
    "                            ret",
    "                        }",
    "                    }",
    "                }",
    "                method sorted {",
    "                    sequence.withAll(list.withAll(self).sortBy { l, r ->",
    "                        if (l == r) then {0}",
    "                            elseif {l < r} then {-1}",
    "                            else {1}",
    "                    })",
    "                }",
    "                method sortedBy(sortBlock:Block2){",
    "                    sequence.withAll(list.withAll(self).sortBy(sortBlock))",
    "                }",
    "            }",
    "        }",
    "    }",
    "",
    "    type MinimalyIterable = type {",
    "        iterator -> Iterator",
    "    }",
    "",
    "    method isEqual(left) toIterable(right) {",
    "        if (MinimalyIterable.match(right)) then {",
    "            def leftIter = left.iterator",
    "            def rightIter = right.iterator",
    "            while {leftIter.hasNext && rightIter.hasNext} do {",
    "                if (leftIter.next != rightIter.next) then {",
    "                    return false",
    "                }",
    "            }",
    "            leftIter.hasNext == rightIter.hasNext",
    "        } else { ",
    "            false",
    "        }",
    "    }",
    "",
    "    class list⟦T⟧ {",
    "        ",
    "        method asString { \"a list factory\" }",
    "        ",
    "        method empty -> List⟦T⟧ {",
    "            withAll(emptySequence)",
    "        }",
    "",
    "        class withAll(a: Iterable⟦T⟧) -> List⟦T⟧ {",
    "            inherit traits.indexable⟦T⟧",
    "",
    "            var mods is readable := 0",
    "            var sizeCertain := true",
    "            // size might be uncertain if a is a lazy collection.",
    "            def initialSize = a.sizeIfUnknown{ sizeCertain := false ; 4 } * 2 + 1",
    "            var inner := _prelude.primitiveArray.new(initialSize)",
    "            var size is readable := 0",
    "            if (sizeCertain) then {",
    "                // common, fast path",
    "                for (a) do { x ->",
    "                    inner.at(size)put(x)",
    "                    size := size + 1",
    "                }",
    "            } else {",
    "                // less-than-optimal path",
    "                var innerSize := initialSize",
    "                for (a) do { x ->",
    "                    if (innerSize <= size) then {",
    "                        def newInner = _prelude.primitiveArray.new(innerSize * 2)",
    "                        for (0..(innerSize-1)) do { i ->",
    "                            newInner.at (i) put (inner.at(i) )",
    "                        }",
    "                        inner := newInner",
    "                        innerSize := inner.size",
    "                    }",
    "                    inner.at(size)put(x)",
    "                    size := size + 1",
    "                }",
    "            }",
    "            method boundsCheck(n) is confidential {",
    "                if ( !(n >= 1) || !(n <= size)) then {",
    "                    BoundsError.raise \"index {n} out of bounds 1..{size}\"",
    "                }",
    "            }",
    "            method at(n) {",
    "                boundsCheck(n)",
    "                inner.at(n-1)",
    "            }",
    "            method at(n)put(x) {",
    "                mods := mods + 1",
    "                if (n == (size+1)) then {",
    "                    addLast(x)",
    "                } else {",
    "                    boundsCheck(n)",
    "                    inner.at(n-1)put(x)",
    "                }",
    "                self",
    "            }",
    "            method add(x) {",
    "                mods := mods + 1",
    "                if (size == inner.size) then { expandTo(inner.size * 2) }",
    "                inner.at(size)put(x)",
    "                size := size + 1",
    "                self",
    "            }",
    "            method addAll(l) {",
    "                mods := mods + 1",
    "                if ((size + l.size) > inner.size) then {",
    "                    expandTo(max(size + l.size, size * 2))",
    "                }",
    "                for (l) do {each ->",
    "                    inner.at(size)put(each)",
    "                    size := size + 1",
    "                }",
    "                self",
    "            }",
    "            method push(x) {",
    "                mods := mods + 1",
    "                if (size == inner.size) then { expandTo(inner.size * 2) }",
    "                inner.at(size)put(x)",
    "                size := size + 1",
    "                self",
    "            }",
    "            method addLast(x) { push(x) }    // compatibility",
    "            method removeLast {",
    "                mods := mods + 1",
    "                def result = inner.at(size - 1)",
    "                size := size - 1",
    "                result",
    "            }",
    "            method addAllFirst(l) {",
    "                mods := mods + 1",
    "                def increase = l.size",
    "                if ((size + increase) > inner.size) then {",
    "                    expandTo(max(size + increase, size * 2))",
    "                }",
    "                for (range.from(size-1)downTo(0)) do {i->",
    "                    inner.at(i+increase)put(inner.at(i))",
    "                }",
    "                var insertionIndex := 0",
    "                for (l) do {each ->",
    "                    inner.at(insertionIndex)put(each)",
    "                    insertionIndex := insertionIndex + 1",
    "                }",
    "                size := size + increase",
    "                self",
    "            }",
    "            method addFirst(elt:T) {",
    "                mods := mods + 1",
    "                if ((size + 1) > inner.size) then {",
    "                    expandTo(size * 2)",
    "                }",
    "                for (range.from (size-1) downTo 0) do {i->",
    "                    inner.at (i+1) put (inner.at(i) )",
    "                }",
    "                inner.at(0)put(elt)",
    "                size := size + 1",
    "                self",
    "            }",
    "            method clear {",
    "                mods := mods + 1",
    "                inner := _prelude.primitiveArray.new(initialSize)",
    "                size := 0",
    "                self",
    "            }",
    "            method removeFirst {",
    "                removeAt(1)",
    "            }",
    "            method removeAt(n) {",
    "                mods := mods + 1",
    "                boundsCheck(n)",
    "                def removed = inner.at(n-1)",
    "                for (n..(size-1)) do {i->",
    "                    inner.at(i-1)put(inner.at(i))",
    "                }",
    "                size := size - 1",
    "                return removed",
    "            }",
    "",
    "            method remove(elt:T) {",
    "                def ix = self.indexOf(elt) ifAbsent {",
    "                    NoSuchObject.raise \"list does not contain {elt}\"",
    "                }",
    "                removeAt(ix)",
    "                self",
    "            }",
    "",
    "            method remove(elt:T) ifAbsent(action:Block0⟦Done⟧) {",
    "                def ix = self.indexOf(elt) ifAbsent {",
    "                    action.apply",
    "                    return self",
    "                }",
    "                removeAt(ix)",
    "                self",
    "            }",
    "",
    "            method removeAll(vs: Iterable⟦T⟧) {",
    "                removeAll(vs) ifAbsent { NoSuchObject.raise \"list does not contain object\" }",
    "                self",
    "            }",
    "            method removeAll(vs: Iterable⟦T⟧) ifAbsent(action:Block0⟦Done⟧)  {",
    "                for (vs) do { each ->",
    "                    def ix = indexOf(each) ifAbsent { 0 }",
    "                    if (ix ≠ 0) then {",
    "                        removeAt(ix)",
    "                    } else {",
    "                        action.apply",
    "                    }",
    "                }",
    "                self",
    "            }",
    "            method pop { removeLast }",
    "            method reversed {",
    "                def result = list.empty",
    "                do { each -> result.addFirst(each) }",
    "                result",
    "            }",
    "            method reverse {",
    "                mods := mods + 1",
    "                var hiIx := size",
    "                var loIx := 1",
    "                while {loIx < hiIx} do {",
    "                    def hiVal = self.at(hiIx)",
    "                    self.at(hiIx) put (self.at(loIx))",
    "                    self.at(loIx) put (hiVal)",
    "                    hiIx := hiIx - 1",
    "                    loIx := loIx + 1",
    "                }",
    "                self",
    "            }",
    "            method ++(o) {",
    "                def l = list.withAll(self)",
    "                l.addAll(o)",
    "            }",
    "            method asString {",
    "                var s := \"[\"",
    "                for (0..(size-1)) do {i->",
    "                    s := s ++ inner.at(i).asString",
    "                    if (i < (size-1)) then { s := s ++ \", \" }",
    "                }",
    "                s ++ \"]\"",
    "            }",
    "            method asDebugString {",
    "                var s := \"[\"",
    "                for (0..(size-1)) do {i->",
    "                    s := s ++ inner.at(i).asDebugString",
    "                    if (i < (size-1)) then { s := s ++ \", \" }",
    "                }",
    "                s ++ \"]\"",
    "            }",
    "            method contains(element) {",
    "                do { each -> if (each == element) then { return true } }",
    "                return false",
    "            }",
    "            method do(block1) {",
    "                var i := 0",
    "                while {i < size} do {",
    "                    block1.apply(inner.at(i))",
    "                    i := i + 1",
    "                }",
    "            }",
    "",
    "            method ==(other) {",
    "                isEqual (self) toIterable (other)",
    "            }",
    "            method iterator {",
    "                object {",
    "                    var imods := mods",
    "                    var idx := 1",
    "                    method asDebugString { \"{asString}⟪{idx}⟫\" }",
    "                    method asString { \"aListIterator\" }",
    "                    method hasNext { idx <= size }",
    "                    method next {",
    "                        if (imods != mods) then {",
    "                            ConcurrentModification.raise (asDebugString)",
    "                        }",
    "                        if (idx > size) then { IteratorExhausted.raise \"on list\" }",
    "                        def ret = at(idx)",
    "                        idx := idx + 1",
    "                        ret",
    "                    }",
    "                }",
    "            }",
    "            method values {",
    "                self",
    "            }",
    "            method keys {",
    "                self.indices",
    "            }",
    "            method expandTo(newSize) is confidential {",
    "                def newInner = _prelude.primitiveArray.new(newSize)",
    "                for (0..(size-1)) do {i->",
    "                    newInner.at(i)put(inner.at(i))",
    "                }",
    "                inner := newInner",
    "            }",
    "            method sortBy(sortBlock:Block2) {",
    "                mods := mods + 1",
    "                inner.sortInitial(size) by(sortBlock)",
    "                self",
    "            }",
    "            method sort {",
    "                sortBy { l, r ->",
    "                    if (l == r) then {0}",
    "                        elseif {l < r} then {-1}",
    "                        else {1}",
    "                }",
    "            }",
    "            method sortedBy(sortBlock:Block2) {",
    "                copy.sortBy(sortBlock)",
    "            }",
    "            method sorted {",
    "                copy.sort",
    "            }",
    "            method copy {",
    "                outer.withAll(self)",
    "            }",
    "        }",
    "    }",
    "",
    "",
    "    def unused = object {",
    "        var unused := true",
    "        def key is public = self",
    "        def value is public = self",
    "        method asString { \"unused\" }",
    "        method == (other) { self.isMe(other) }",
    "    }",
    "",
    "    def removed = object {",
    "        var removed := true",
    "        def key is public = self",
    "        def value is public = self",
    "        method asString { \"removed\" }",
    "        method == (other) { self.isMe(other) }",
    "    }",
    "",
    "    class set⟦T⟧ {",
    "",
    "        method asString { \"a set factory\" }",
    "",
    "        method withAll(a: Iterable⟦T⟧) -> Set⟦T⟧ {",
    "            def cap = max (a.sizeIfUnknown{2} * 3 + 1, 8)",
    "            def result = ofCapacity (cap)",
    "            a.do { x -> result.add(x) }",
    "            result",
    "        }",
    "        ",
    "        method empty -> Set⟦T⟧ {",
    "            ofCapacity 8",
    "        }",
    "",
    "        class ofCapacity(cap) -> Set⟦T⟧ is confidential {",
    "            inherit traits.collection⟦T⟧",
    "            var mods is readable := 0",
    "            var inner := _prelude.primitiveArray.new(cap)",
    "            var size is readable := 0",
    "            (0..(cap - 1)).do { i ->",
    "                inner.at (i) put (unused)",
    "            }",
    "",
    "            method addAll(elements) {",
    "                mods := mods + 1",
    "                for (elements) do { x ->",
    "                    if (! contains(x)) then {",
    "                        def t = findPositionForAdd(x)",
    "                        inner.at(t)put(x)",
    "                        size := size + 1",
    "                        if (size > (inner.size / 2)) then {",
    "                            expand",
    "                        }",
    "                    }",
    "                }",
    "                self    // for chaining",
    "            }",
    "",
    "            method add(x:T) {",
    "                if (! contains(x)) then {",
    "                    mods := mods + 1",
    "                    def t = findPositionForAdd(x)",
    "                    inner.at(t)put(x)",
    "                    size := size + 1",
    "                    if (size > (inner.size / 2)) then {",
    "                        expand",
    "                    }",
    "                }",
    "                self    // for chaining",
    "            }",
    "",
    "            method removeAll(elements) {",
    "                for (elements) do { x ->",
    "                    remove (x) ifAbsent {",
    "                        NoSuchObject.raise \"set does not contain {x}\"",
    "                    }",
    "                }",
    "                self    // for chaining",
    "            }",
    "            method removeAll(elements)ifAbsent(block:Block1⟦T,Done⟧) {",
    "                mods := mods + 1",
    "                for (elements) do { x ->",
    "                    var t := findPosition(x)",
    "                    if (inner.at(t) == x) then {",
    "                        inner.at(t) put (removed)",
    "                        size := size - 1",
    "                    } else {",
    "                        block.apply(x)",
    "                    }",
    "                }",
    "                self    // for chaining",
    "            }",
    "            method clear {",
    "                mods := mods + 1",
    "                inner := _prelude.primitiveArray.new(cap)",
    "                size := 0",
    "                self",
    "            }",
    "",
    "            method remove (elt:T) ifAbsent (block) {",
    "                var t := findPosition(elt)",
    "                if (inner.at(t) == elt) then {",
    "                    inner.at(t) put (removed)",
    "                    mods := mods + 1",
    "                    size := size - 1",
    "                } else {",
    "                    block.apply",
    "                }",
    "                self    // for chaining",
    "            }",
    "",
    "            method remove(elt:T) {",
    "                remove (elt) ifAbsent {",
    "                    NoSuchObject.raise \"set does not contain {elt}\"",
    "                }",
    "                self    // for chaining",
    "            }",
    "",
    "            method contains(x) {",
    "                var t := findPosition(x)",
    "                if (inner.at(t) == x) then {",
    "                    return true",
    "                }",
    "                return false",
    "            }",
    "            method includes(booleanBlock) {",
    "                self.do { each ->",
    "                    if (booleanBlock.apply(each)) then { return true }",
    "                }",
    "                return false",
    "            }",
    "            method find(booleanBlock)ifNone(notFoundBlock) {",
    "                self.do { each ->",
    "                    if (booleanBlock.apply(each)) then { return each }",
    "                }",
    "                return notFoundBlock.apply",
    "            }",
    "            method findPosition(x) is confidential {",
    "                def h = x.hash",
    "                def s = inner.size",
    "                var t := h % s",
    "                var jump := 5",
    "                var candidate",
    "                while {",
    "                    candidate := inner.at(t)",
    "                    unused ≠ candidate",
    "                } do {",
    "                    if (candidate == x) then {",
    "                        return t",
    "                    }",
    "                    if (jump != 0) then {",
    "                        t := (t * 3 + 1) % s",
    "                        jump := jump - 1",
    "                    } else {",
    "                        t := (t + 1) % s",
    "                    }",
    "                }",
    "                return t",
    "            }",
    "            method findPositionForAdd(x) is confidential {",
    "                def h = x.hash",
    "                def s = inner.size",
    "                var t := h % s",
    "                var jump := 5",
    "                var candidate",
    "                while {",
    "                    candidate := inner.at(t)",
    "                    (unused != candidate) && (removed != candidate)",
    "                } do {",
    "                    if (candidate == x) then {",
    "                        return t",
    "                    }",
    "                    if (jump != 0) then {",
    "                        t := (t * 3 + 1) % s",
    "                        jump := jump - 1",
    "                    } else {",
    "                        t := (t + 1) % s",
    "                    }",
    "                }",
    "                return t",
    "            }",
    "",
    "            method asString {",
    "                var s := \"set\\{\"",
    "                do {each -> s := s ++ each.asString }",
    "                    separatedBy { s := s ++ \", \" }",
    "                s ++ \"\\}\"",
    "            }",
    "            method asDebugString {",
    "                var s := \"set\\{\"",
    "                do {each -> s := s ++ each.asDebugString }",
    "                    separatedBy { s := s ++ \", \" }",
    "                s ++ \"\\}\"",
    "            }",
    "            method extend(l) {",
    "                for (l) do {i->",
    "                    add(i)",
    "                }",
    "            }",
    "            method do(block1) {",
    "                var i := 0",
    "                var found := 0",
    "                var candidate",
    "                while {found < size} do {",
    "                    candidate := inner.at(i)",
    "                    if ((unused != candidate) && (removed != candidate)) then {",
    "                        found := found + 1",
    "                        block1.apply(candidate)",
    "                    }",
    "                    i := i + 1",
    "                }",
    "            }",
    "            method iterator {",
    "                object {",
    "                    var imods:Number := mods",
    "                    var count := 1",
    "                    var idx := -1",
    "                    method hasNext { size >= count }",
    "                    method next {",
    "                        var candidate",
    "                        def innerSize = inner.size",
    "                        while {",
    "                            idx := idx + 1",
    "                            if (imods != mods) then {",
    "                                ConcurrentModification.raise (outer.asString)",
    "                            }",
    "                            if (idx >= innerSize) then {",
    "                                IteratorExhausted.raise \"iterator over {outer.asString}\"",
    "                            }",
    "                            candidate := inner.at(idx)",
    "                            (unused == candidate) || (removed == candidate)",
    "                        } do { }",
    "                        count := count + 1",
    "                        candidate",
    "                    }",
    "                }",
    "            }",
    "",
    "            method expand is confidential {",
    "                def c = inner.size",
    "                def n = c * 2",
    "                def oldInner = inner",
    "                size := 0",
    "                inner := _prelude.primitiveArray.new(n)",
    "                for (0..(inner.size-1)) do {i->",
    "                    inner.at(i)put(unused)",
    "                }",
    "                for (0..(oldInner.size-1)) do {i->",
    "                    if ((unused != oldInner.at(i)) && (removed != oldInner.at(i))) then {",
    "                        add(oldInner.at(i))",
    "                    }",
    "                }",
    "            }",
    "            method ==(other) {",
    "                if (Iterable.match(other)) then {",
    "                    var otherSize := 0",
    "                    other.do { each ->",
    "                        otherSize := otherSize + 1",
    "                        if (! self.contains(each)) then {",
    "                            return false",
    "                        }",
    "                    }",
    "                    otherSize == self.size",
    "                } else { ",
    "                    false",
    "                }",
    "            }",
    "            method copy {",
    "                outer.withAll(self)",
    "            }",
    "            method ++ (other) {",
    "            // set union",
    "                copy.addAll(other)",
    "            }",
    "            method -- (other) {",
    "            // set difference",
    "                def result = set.empty",
    "                for (self) do {v->",
    "                    if (!other.contains(v)) then {",
    "                        result.add(v)",
    "                    }",
    "                }",
    "                result",
    "            }",
    "            method ** (other) {",
    "            // set intersection",
    "                set.withAll(filter {each -> other.contains(each)})",
    "            }",
    "            method isSubset(s2: Set⟦T⟧) {",
    "                self.do{ each ->",
    "                    if (s2.contains(each).not) then { return false }",
    "                }",
    "                return true",
    "            }",
    "",
    "            method isSuperset(s2: Iterable⟦T⟧) {",
    "                s2.do{ each ->",
    "                    if (self.contains(each).not) then { return false }",
    "                }",
    "                return true",
    "            }",
    "            method into(existing: Expandable⟦T⟧) -> Collection⟦T⟧ {",
    "                do { each -> existing.add(each) }",
    "                existing",
    "            }",
    "        }",
    "    }",
    "",
    "    type Binding⟦K,T⟧ = {",
    "        key -> K",
    "        value -> T",
    "        hash -> Number",
    "        ==(other) -> Boolean",
    "    }",
    "",
    "    def binding is public = object {",
    "        method asString { \"binding class\" }",
    "",
    "        class key(k)value(v) {",
    "            method key {k}",
    "            method value {v}",
    "            method asString { \"{k}::{v}\" }",
    "            method hashcode { (k.hashcode * 1021) + v.hashcode }",
    "            method hash { (k.hash * 1021) + v.hash }",
    "            method == (other) {",
    "                match (other)",
    "                    case {o:Binding -> (k == o.key) && (v == o.value) }",
    "                    case {_ -> return false }",
    "            }",
    "        }",
    "    }",
    "",
    "    type ComparableToDictionary⟦K,T⟧ = type {",
    "        size -> Number",
    "        at(_:K)ifAbsent(_) -> T",
    "    }",
    "",
    "    class dictionary⟦K,T⟧ {",
    "",
    "        method asString { \"a dictionary factory\" }",
    "",
    "        method withAll(initialBindings: Iterable⟦Binding⟦K,T⟧⟧) -> Dictionary⟦K,T⟧ {",
    "            def result = empty",
    "            for (initialBindings) do { b -> result.add(b) }",
    "            result",
    "        }",
    "",
    "        class empty -> Dictionary⟦K,T⟧ {",
    "            inherit traits.collection⟦T⟧",
    "            var mods is readable := 0",
    "            var numBindings := 0",
    "            var inner := _prelude.primitiveArray.new(8)",
    "            for (0..(inner.size-1)) do { i ->",
    "                inner.at(i)put(unused)",
    "            }",
    "            method size { numBindings }",
    "            method at(key')put(value') {",
    "                mods := mods + 1",
    "                var t := findPositionForAdd(key')",
    "                if ((unused == inner.at(t)) || (removed == inner.at(t))) then {",
    "                    numBindings := numBindings + 1",
    "                }",
    "                inner.at(t)put(binding.key(key')value(value'))",
    "                if ((size * 2) > inner.size) then { expand }",
    "                self    // for chaining",
    "            }",
    "            method add(aBinding) {",
    "                mods := mods + 1",
    "                var t := findPositionForAdd (aBinding.key)",
    "                if ((unused == inner.at(t)) || (removed == inner.at(t))) then {",
    "                    numBindings := numBindings + 1",
    "                }",
    "                inner.at(t)put(aBinding)",
    "                if ((size * 2) > inner.size) then { expand }",
    "                self    // for chaining",
    "            }",
    "            method at(k) {",
    "                var b := inner.at(findPosition(k))",
    "                if (b.key == k) then {",
    "                    return b.value",
    "                }",
    "                NoSuchObject.raise \"dictionary does not contain entry with key {k}\"",
    "            }",
    "            method at(k) ifAbsent(action) {",
    "                var b := inner.at(findPosition(k))",
    "                if (b.key == k) then {",
    "                    return b.value",
    "                }",
    "                action.apply",
    "            }",
    "            method containsKey(k) {",
    "                var t := findPosition(k)",
    "                if (inner.at(t).key == k) then {",
    "                    return true",
    "                }",
    "                false",
    "            }",
    "            method removeAllKeys(keys) {",
    "                mods := mods + 1",
    "                for (keys) do { k ->",
    "                    var t := findPosition(k)",
    "                    if (inner.at(t).key == k) then {",
    "                        inner.at(t)put(removed)",
    "                        numBindings := numBindings - 1",
    "                    } else {",
    "                        NoSuchObject.raise \"dictionary does not contain entry with key {k}\"",
    "                    }",
    "                }",
    "                self",
    "            }",
    "            method removeKey(k:K) {",
    "                mods := mods + 1",
    "                var t := findPosition(k)",
    "                if (inner.at(t).key == k) then {",
    "                    inner.at(t)put(removed)",
    "                    numBindings := numBindings - 1",
    "                } else {",
    "                    NoSuchObject.raise \"dictionary does not contain entry with key {k}\"",
    "                }",
    "                self",
    "            }",
    "            method removeAllValues(removals) {",
    "                mods := mods + 1",
    "                for (0..(inner.size-1)) do {i->",
    "                    def a = inner.at(i)",
    "                    if (removals.contains(a.value)) then {",
    "                        inner.at(i)put(removed)",
    "                        numBindings := numBindings - 1",
    "                    }",
    "                }",
    "                self",
    "            }",
    "            method removeValue(v) {",
    "                // remove all bindings with value v",
    "                mods := mods + 1",
    "                def initialNumBindings = numBindings",
    "                for (0..(inner.size-1)) do {i->",
    "                    def a = inner.at(i)",
    "                    if (v == a.value) then {",
    "                        inner.at (i) put (removed)",
    "                        numBindings := numBindings - 1",
    "                    }",
    "                }",
    "                if (numBindings == initialNumBindings) then {",
    "                    NoSuchObject.raise \"dictionary does not contain entry with value {v}\"",
    "                }",
    "                self",
    "            }",
    "            method removeValue(v) ifAbsent (action:Block0⟦Unknown⟧) {",
    "                // remove all bindings with value v",
    "                mods := mods + 1",
    "                def initialNumBindings = numBindings",
    "                for (0..(inner.size-1)) do {i->",
    "                    def a = inner.at(i)",
    "                    if (v == a.value) then {",
    "                        inner.at (i) put (removed)",
    "                        numBindings := numBindings - 1",
    "                    }",
    "                }",
    "                if (numBindings == initialNumBindings) then {",
    "                    action.apply",
    "                }",
    "                self",
    "            }",
    "            method clear {",
    "                inner := _prelude.primitiveArray.new(8)",
    "                numBindings := 0",
    "                mods := mods + 1",
    "                for (0..(inner.size-1)) do { i ->",
    "                    inner.at(i)put(unused)",
    "                }",
    "                self",
    "            }",
    "            method containsValue(v) {",
    "                self.valuesDo{ each ->",
    "                    if (v == each) then { return true }",
    "                }",
    "                false",
    "            }",
    "            method contains(v) { containsValue(v) }",
    "",
    "            method findPosition(x) is confidential {",
    "                def h = x.hash",
    "                def s = inner.size",
    "                var t := h % s",
    "                var jump := 5",
    "                while { unused ≠ inner.at(t) } do {",
    "                    if (inner.at(t).key == x) then {",
    "                        return t",
    "                    }",
    "                    if (jump != 0) then {",
    "                        t := (t * 3 + 1) % s",
    "                        jump := jump - 1",
    "                    } else {",
    "                        t := (t + 1) % s",
    "                    }",
    "                }",
    "                return t",
    "            }",
    "            method findPositionForAdd(x) is confidential {",
    "                def h = x.hash",
    "                def s = inner.size",
    "                var t := h % s",
    "                var jump := 5",
    "                while { (unused ≠ inner.at(t)) && (removed ≠ inner.at(t)) } do {",
    "                    if (inner.at(t).key == x) then {",
    "                        return t",
    "                    }",
    "                    if (jump != 0) then {",
    "                        t := (t * 3 + 1) % s",
    "                        jump := jump - 1",
    "                    } else {",
    "                        t := (t + 1) % s",
    "                    }",
    "                }",
    "                return t",
    "            }",
    "            method asString {",
    "                // do()separatedBy won't work, because it iterates over values,",
    "                // and we need an iterator over bindings.",
    "                var s := \"dict⟬\"",
    "                var firstElement := true",
    "                for (0..(inner.size-1)) do {i->",
    "                    def a = inner.at(i)",
    "                    if ((unused ≠ a) && (removed ≠ a)) then {",
    "                        if (! firstElement) then {",
    "                            s := s ++ \", \"",
    "                        } else {",
    "                            firstElement := false",
    "                        }",
    "                        s := s ++ \"{a.key}::{a.value}\"",
    "                    }",
    "                }",
    "                s ++ \"⟭\"",
    "            }",
    "            method asDebugString {",
    "                var s := \"dict⟬\"",
    "                for (0..(inner.size-1)) do {i->",
    "                    if (i > 0) then { s := s ++ \", \" }",
    "                    def a = inner.at(i)",
    "                    if ((unused ≠ a) && (removed ≠ a)) then {",
    "                        s := s ++ \"{i}→{a.key}::{a.value}\"",
    "                    } else {",
    "                        s := s ++ \"{i}→{a.asDebugString}\"",
    "                    }",
    "                }",
    "                s ++ \"⟭\"",
    "            }",
    "            method keys -> Enumerable⟦K⟧ {",
    "                def sourceDictionary = self",
    "                object {",
    "                    inherit traits.enumerable⟦K⟧",
    "                    class iterator {",
    "                        def sourceIterator = sourceDictionary.bindingsIterator",
    "                        method hasNext { sourceIterator.hasNext }",
    "                        method next { sourceIterator.next.key }",
    "                        method asString {",
    "                            \"an iterator over keys of {sourceDictionary}\"",
    "                        }",
    "                    }",
    "                    def size is public = sourceDictionary.size",
    "                    method asDebugString {",
    "                        \"a lazy sequence over keys of {sourceDictionary}\"",
    "                    }",
    "                }",
    "            }",
    "            method values -> Enumerable⟦T⟧ {",
    "                def sourceDictionary = self",
    "                object {",
    "                    inherit traits.enumerable⟦T⟧",
    "                    class iterator {",
    "                        def sourceIterator = sourceDictionary.bindingsIterator",
    "                        // should be request on outer",
    "                        method hasNext { sourceIterator.hasNext }",
    "                        method next { sourceIterator.next.value }",
    "                        method asString {",
    "                            \"an iterator over values of {sourceDictionary}\"",
    "                        }",
    "                    }",
    "                    def size is public = sourceDictionary.size",
    "                    method asDebugString {",
    "                        \"a lazy sequence over values of {sourceDictionary}\"",
    "                    }",
    "                }",
    "            }",
    "            method bindings -> Enumerable⟦T⟧ {",
    "                def sourceDictionary = self",
    "                object {",
    "                    inherit traits.enumerable⟦T⟧",
    "                    method iterator { sourceDictionary.bindingsIterator }",
    "                    // should be request on outer",
    "                    def size is public = sourceDictionary.size",
    "                    method asDebugString {",
    "                        \"a lazy sequence over bindings of {sourceDictionary}\"",
    "                    }",
    "                }",
    "            }",
    "            method iterator -> Iterator⟦T⟧ { values.iterator }",
    "            class bindingsIterator -> Iterator⟦Binding⟦K, T⟧⟧ {",
    "                // this should be confidential, but can't be until `outer` is fixed.",
    "                def imods:Number = mods",
    "                var count := 1",
    "                var idx := 0",
    "                var elt",
    "                method hasNext { size >= count }",
    "                method next {",
    "                    if (imods != mods) then {",
    "                        ConcurrentModification.raise (outer.asString)",
    "                    }",
    "                    if (size < count) then { IteratorExhausted.raise \"over {outer.asString}\" }",
    "                    while {",
    "                        elt := inner.at(idx)",
    "                        (unused == elt) || (removed == elt)",
    "                    } do {",
    "                        idx := idx + 1",
    "                    }",
    "                    count := count + 1",
    "                    idx := idx + 1",
    "                    elt",
    "                }",
    "            }",
    "            method expand is confidential {",
    "                def c = inner.size",
    "                def n = c * 2",
    "                def oldInner = inner",
    "                inner := _prelude.primitiveArray.new(n)",
    "                for (0..(n - 1)) do {i->",
    "                    inner.at(i)put(unused)",
    "                }",
    "                numBindings := 0",
    "                for (0..(c - 1)) do {i->",
    "                    def a = oldInner.at(i)",
    "                    if ((unused ≠ a) && (removed ≠ a)) then {",
    "                        self.at(a.key)put(a.value)",
    "                    }",
    "                }",
    "            }",
    "            method keysAndValuesDo(block2) {",
    "                for (0..(inner.size-1)) do {i->",
    "                    def a = inner.at(i)",
    "                    if ((unused ≠ a) && (removed ≠ a)) then {",
    "                        block2.apply(a.key, a.value)",
    "                    }",
    "                }",
    "            }",
    "            method keysDo(block1) {",
    "                for (0..(inner.size-1)) do {i->",
    "                    def a = inner.at(i)",
    "                    if ((unused ≠ a) && (removed ≠ a)) then {",
    "                        block1.apply(a.key)",
    "                    }",
    "                }",
    "            }",
    "            method valuesDo(block1) {",
    "                for (0..(inner.size-1)) do {i->",
    "                    def a = inner.at(i)",
    "                    if ((unused ≠ a) && (removed ≠ a)) then {",
    "                        block1.apply(a.value)",
    "                    }",
    "                }",
    "            }",
    "            method do(block1) { valuesDo(block1) }",
    "",
    "            method ==(other) {",
    "                match (other)",
    "                    case {o:ComparableToDictionary⟦K,V⟧ ->",
    "                        if (self.size != o.size) then {return false}",
    "                        self.keysAndValuesDo { k, v ->",
    "                            if (o.at(k)ifAbsent{return false} != v) then {",
    "                                return false",
    "                            }",
    "                        }",
    "                        return true",
    "                    }",
    "                    case {_ ->",
    "                        return false",
    "                    }",
    "            }",
    "",
    "            method copy {",
    "                def newCopy = dictionary.empty",
    "                self.keysAndValuesDo{ k, v ->",
    "                    newCopy.at(k)put(v)",
    "                }",
    "                newCopy",
    "            }",
    "",
    "            method asDictionary {",
    "                self",
    "            }",
    "",
    "            method ++(other) {",
    "                def newDict = self.copy",
    "                other.keysAndValuesDo {k, v ->",
    "                    newDict.at(k) put(v)",
    "                }",
    "                return newDict",
    "            }",
    "",
    "            method --(other) {",
    "                def newDict = dictionary.empty",
    "                keysAndValuesDo { k, v ->",
    "                    if (! other.containsKey(k)) then {",
    "                        newDict.at(k) put(v)",
    "                    }",
    "                }",
    "                return newDict",
    "            }",
    "        }",
    "    }",
    "",
    "    def range is public = object {",
    "        method from(lower)to(upper) -> Sequence⟦Number⟧ {",
    "            match (lower)",
    "                case {_:Number -> }",
    "                case {_ -> RequestError.raise (\"lower bound {lower}\" ++",
    "                    \" in range.from({lower})to({upper}) is not an integer\") }",
    "            def start = lower.truncated",
    "            if (start != lower) then {",
    "                RequestError.raise (\"lower bound {lower}\" ++",
    "                    \" in range.from({lower})to({upper}) is not an integer\") }",
    "",
    "            match (upper)",
    "                case {_:Number -> }",
    "                case {_ -> RequestError.raise (\"upper bound {upper}\" ++",
    "                    \" in range.from({lower})to({upper}) is not an integer\") }",
    "            def stop = upper.truncated",
    "            if (stop != upper) then {",
    "                RequestError.raise (\"upper bound {upper}\" ++",
    "                    \" in range.from()to() is not an integer\")",
    "            }",
    "",
    "            uncheckedFrom (lower) to (upper)",
    "        }",
    "",
    "        class uncheckedFrom (lower) to (upper) -> Sequence⟦Number⟧ {",
    "            inherit traits.indexable⟦Number⟧",
    "            def start = lower",
    "            def stop = upper",
    "            def size is public =",
    "                if ((upper-lower+1) < 0) then { 0 } else {upper-lower+1}",
    "",
    "            def hash is public = { ((start.hash * 1021) + stop.hash) * 3 }",
    "",
    "            method iterator -> Iterator {",
    "                object {",
    "                    var val := start",
    "                    method hasNext { val <= stop }",
    "                    method next {",
    "                        if (val > stop) then {",
    "                            IteratorExhausted.raise \"over {outer.asString}\"",
    "                        }",
    "                        val := val + 1",
    "                        return (val - 1)",
    "                    }",
    "                    method asString { \"iterator over {outer.asString} at {val}\" }",
    "                }",
    "            }",
    "            method at(ix:Number) {",
    "                if (!(ix <= self.size)) then {",
    "                    BoundsError.raise \"requested range.at({ix}), but upper bound is {size}\"",
    "                }",
    "                if (!(ix >= 1)) then {",
    "                    BoundsError.raise \"requested range.at({ix}), but lower bound is 1\"",
    "                }",
    "                return start + (ix - 1)",
    "            }",
    "            method contains(elem) -> Boolean {",
    "                try {",
    "                    def intElem = elem.truncated",
    "                    if (intElem != elem) then {return false}",
    "                    if (intElem < start) then {return false}",
    "                    if (intElem > stop) then {return false}",
    "                } catch { ex:_prelude.Exception -> return false }",
    "                return true",
    "            }",
    "            method do(block1) {",
    "                var val := start",
    "                while {val <= stop} do {",
    "                    block1.apply(val)",
    "                    val := val + 1",
    "                }",
    "            }",
    "            method keysAndValuesDo(block2) {",
    "                var key := 1",
    "                var val := start",
    "                while {val <= stop} do {",
    "                    block2.apply(key, val)",
    "                    key := key + 1",
    "                    val := val + 1",
    "                }",
    "            }",
    "            method reversed {",
    "                from(upper)downTo(lower)",
    "            }",
    "            method ++(other) {",
    "                sequence.withAll(lazyConcatenation(self, other))",
    "            }",
    "            method ==(other) {",
    "                isEqual (self) toIterable (other)",
    "            }",
    "            method sorted { self }",
    "",
    "            method sortedBy(c) { list.withAll(self).sortBy(c) }",
    "",
    "            method keys { 1..self.size }",
    "",
    "            method values { self }",
    "",
    "            method asString -> String{",
    "                \"range.from({lower})to({upper})\"",
    "            }",
    "        }",
    "",
    "        class from(upper)downTo(lower) -> Sequence⟦Number⟧ {",
    "            inherit traits.indexable⟦Number⟧",
    "            match (upper)",
    "                case {_:Number -> }",
    "                case {_ -> RequestError.raise (\"upper bound {upper}\" ++",
    "                    \" in range.from({upper})downTo({lower}) is not an integer\") }",
    "            def start = upper.truncated",
    "            if (start != upper) then {",
    "                RequestError.raise (\"upper bound {upper}\" ++",
    "                    \" in range.from({upper})downTo({lower}) is not an integer\")",
    "            }",
    "            match (lower)",
    "                case {_:Number -> }",
    "                case {_ -> RequestError.raise (\"lower bound {lower}\" ++",
    "                    \" in range.from({upper})downTo({lower}) is not an integer\") }",
    "            def stop = lower.truncated",
    "            if (stop != lower) then {",
    "                RequestError.raise (\"lower bound {lower}\" ++",
    "                    \" in range.from({upper})downTo({lower}) is not an integer\")",
    "            }",
    "            def size is public =",
    "                if ((upper-lower+1) < 0) then { 0 } else {upper-lower+1}",
    "            method iterator {",
    "                object {",
    "                    var val := start",
    "                    method hasNext { val >= stop }",
    "                    method next {",
    "                        if (val < stop) then { IteratorExhausted.raise \"over {outer.asString}\" }",
    "                        val := val - 1",
    "                        return (val + 1)",
    "                    }",
    "                    method asString { \"anIterator over {outer.asString} at {val}\" }",
    "                }",
    "            }",
    "            method at(ix:Number) {",
    "                if (!(ix <= self.size)) then {",
    "                    BoundsError.raise \"requested range.at({ix}) but upper bound is {size}\"",
    "                }",
    "                if (!(ix >= 1)) then {",
    "                    BoundsError.raise \"requested range.at({ix}) but lower bound is 1\"",
    "                }",
    "                return start - (ix - 1)",
    "            }",
    "            method contains(elem) -> Boolean {",
    "                try {",
    "                    def intElem = elem.truncated",
    "                    if (intElem != elem) then {return false}",
    "                    if (intElem > start) then {return false}",
    "                    if (intElem < stop) then {return false}",
    "                } catch { ex:_prelude.Exception -> return false }",
    "                return true",
    "            }",
    "            method do(block1) {",
    "                var val := start",
    "                while {val >= stop} do {",
    "                    block1.apply(val)",
    "                    val := val - 1",
    "                }",
    "            }",
    "            method keysAndValuesDo(block2) {",
    "                var key := 1",
    "                var val := start",
    "                while {val >= stop} do {",
    "                    block2.apply(key, val)",
    "                    key := key + 1",
    "                    val := val - 1",
    "                }",
    "            }",
    "            method reversed {",
    "                from(lower)to(upper)",
    "            }",
    "            method ++(other) {",
    "                sequence.withAll(lazyConcatenation(self, other))",
    "            }",
    "            method ==(other) {",
    "                isEqual (self) toIterable (other)",
    "            }",
    "            method sorted { self.reversed }",
    "",
    "            method sortedBy(c) { list.withAll(self).sortBy(c) }",
    "",
    "            method keys { 1..self.size }",
    "",
    "            method values { self }",
    "",
    "            method asString -> String {",
    "                \"range.from {upper} downTo {lower}\"",
    "            }",
    "        }",
    "    }",
    "",
    "    //",
    "    // end collections",
    "    //",
    "",
    "    method sequence⟦T⟧(arg) { sequence⟦T⟧.withAll(arg) }",
    "    method list⟦T⟧(arg) { list⟦T⟧.withAll(arg) }",
    "    method emptyList⟦T⟧ { list⟦T⟧.empty }",
    "    method set⟦T⟧(arg) { set⟦T⟧.withAll(arg) }",
    "    method emptySet⟦T⟧ { set⟦T⟧.empty }",
    "    method dictionary⟦K, T⟧(arg) { dictionary⟦K, T⟧.withAll(arg) }",
    "    method emptyDictionary⟦K, T⟧ { dictionary⟦K, T⟧.empty }",
    "}" ];
}
if (typeof global !== "undefined")
  global.gracecode_standardGraceClass = gracecode_standardGraceClass;
if (typeof window !== "undefined")
  window.gracecode_standardGraceClass = gracecode_standardGraceClass;
