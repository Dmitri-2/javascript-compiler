"use strict";
var___95__prelude = do_import("StandardPrelude", gracecode_StandardPrelude);
function gracecode_gracedocMD() {
  setModuleName("gracedocMD");
  this.definitionModule = "gracedocMD";
  this.definitionLine = 0;
  var var_prelude = var___95__prelude;
  this.outer = var_prelude;
  var reader_gracedocMD_outer0 = function() {
    return this.outer;
  };
  this.methods["outer"] = reader_gracedocMD_outer0;
  setLineNumber(1);    // compilenode import
  // Import of ast as ast
  if (typeof gracecode_ast == 'undefined')
    throw new GraceExceptionPacket(EnvironmentExceptionObject, 
      new GraceString('could not find module ast'));
  var var_ast = do_import("ast", gracecode_ast);
  var func1 = function(argcv) {    // method ast
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    if (argcv[0] !== 0)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ast"));
    setModuleName("gracedocMD");
    // ast is a simple accessor - elide try ... catch
    return var_ast;
  };
  func1.paramCounts = [0];
  this.methods["ast"] = func1;
  func1.definitionLine = 1;
  func1.definitionModule = "gracedocMD";
  func1.debug = "import";
  func1.confidential = true;
  setModuleName("gracedocMD");
  setLineNumber(2);    // compilenode import
  // Import of parser as parser
  if (typeof gracecode_parser == 'undefined')
    throw new GraceExceptionPacket(EnvironmentExceptionObject, 
      new GraceString('could not find module parser'));
  var var_parser = do_import("parser", gracecode_parser);
  var func2 = function(argcv) {    // method parser
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    if (argcv[0] !== 0)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for parser"));
    setModuleName("gracedocMD");
    // parser is a simple accessor - elide try ... catch
    return var_parser;
  };
  func2.paramCounts = [0];
  this.methods["parser"] = func2;
  func2.definitionLine = 2;
  func2.definitionModule = "gracedocMD";
  func2.debug = "import";
  func2.confidential = true;
  setModuleName("gracedocMD");
  setLineNumber(3);    // compilenode import
  // Import of lexer as lexer
  if (typeof gracecode_lexer == 'undefined')
    throw new GraceExceptionPacket(EnvironmentExceptionObject, 
      new GraceString('could not find module lexer'));
  var var_lexer = do_import("lexer", gracecode_lexer);
  var func3 = function(argcv) {    // method lexer
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    if (argcv[0] !== 0)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for lexer"));
    setModuleName("gracedocMD");
    // lexer is a simple accessor - elide try ... catch
    return var_lexer;
  };
  func3.paramCounts = [0];
  this.methods["lexer"] = func3;
  func3.definitionLine = 3;
  func3.definitionModule = "gracedocMD";
  func3.debug = "import";
  func3.confidential = true;
  setModuleName("gracedocMD");
  setLineNumber(4);    // compilenode import
  // Import of io as io
  if (typeof gracecode_io == 'undefined')
    throw new GraceExceptionPacket(EnvironmentExceptionObject, 
      new GraceString('could not find module io'));
  var var_io = do_import("io", gracecode_io);
  var func4 = function(argcv) {    // method io
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    if (argcv[0] !== 0)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for io"));
    setModuleName("gracedocMD");
    // io is a simple accessor - elide try ... catch
    return var_io;
  };
  func4.paramCounts = [0];
  this.methods["io"] = func4;
  func4.definitionLine = 4;
  func4.definitionModule = "gracedocMD";
  func4.debug = "import";
  func4.confidential = true;
  setModuleName("gracedocMD");
  setLineNumber(5);    // compilenode import
  // Import of sys as sys
  if (typeof gracecode_sys == 'undefined')
    throw new GraceExceptionPacket(EnvironmentExceptionObject, 
      new GraceString('could not find module sys'));
  var var_sys = do_import("sys", gracecode_sys);
  var func5 = function(argcv) {    // method sys
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    if (argcv[0] !== 0)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sys"));
    setModuleName("gracedocMD");
    // sys is a simple accessor - elide try ... catch
    return var_sys;
  };
  func5.paramCounts = [0];
  this.methods["sys"] = func5;
  func5.definitionLine = 5;
  func5.definitionModule = "gracedocMD";
  func5.debug = "import";
  func5.confidential = true;
  setModuleName("gracedocMD");
  setLineNumber(27);    // compilenode method
  var func6 = function(argcv) {    // method parseArguments
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    if (argcv[0] !== 0)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for parseArguments"));
    setModuleName("gracedocMD");
    setLineNumber(28);    // compilenode identifier
    var call7 = callmethodChecked(var_sys, "argv", [0]);
    var var_args = call7;
    var if8 = GraceDone;
    setLineNumber(29);    // compilenode identifier
    var call10 = callmethodChecked(var_args, "size", [0]);
    var opresult12 = callmethodChecked(call10, ">", [1], new GraceNum(1));
    if (Grace_isTrue(opresult12)) {
      setLineNumber(30);    // compilenode identifier
      var call13 = callmethodChecked(var_args, "indices", [0]);
      var var_indices = call13;
      setLineNumber(31);    // compilenode identifier
      var var_skip = GraceTrue;
      setLineNumber(32);    // compilenode block
      var block14 = new GraceBlock(this, 32, 1);
      setLineNumber(1);    // compilenode identifier
      block14.real = function(var_i) {
        setLineNumber(33);    // compilenode identifier
        var call15 = callmethodChecked(var_args, "at", [1], var_i);
        var var_arg = call15;
        var if16 = GraceDone;
        setLineNumber(34);    // compilenode string
        var string17 = new GraceString("-");
        var call19 = callmethodChecked(var_arg, "at", [1], new GraceNum(1));
        var opresult21 = callmethodChecked(call19, "==", [1], string17);
        if (Grace_isTrue(opresult21)) {
          setLineNumber(35);    // compilenode identifier
          var cases22 = [];
          setLineNumber(36);    // compilenode block
          var block23 = new GraceBlock(this, 36, 0);
          var string24 = new GraceString("-i");
          block23.pattern = string24;
          block23.real = function() {
            var if25 = GraceDone;
            setLineNumber(37);    // compilenode identifier
            var opresult28 = callmethodChecked(var_i, "+", [1], new GraceNum(1));
            var call30 = callmethodChecked(var_args, "size", [0]);
            var opresult32 = callmethodChecked(call30, "<", [1], opresult28);
            if (Grace_isTrue(opresult32)) {
              setLineNumber(38);    // compilenode string
              var string33 = new GraceString("gracedoc: -i requires an argument.\n");
              var call34 = callmethodChecked(var_io, "error", [0]);
              var call35 = callmethodChecked(call34, "write", [1], string33);
              setLineNumber(39);    // compilenode identifier
              var call36 = callmethodChecked(var_sys, "exit", [1], new GraceNum(1));
              if25 = call36;
            }
            setLineNumber(41);    // compilenode identifier
            var_skip = GraceTrue;
            setLineNumber(42);    // compilenode identifier
            var opresult39 = callmethodChecked(var_i, "+", [1], new GraceNum(1));
            var call40 = callmethodChecked(var_args, "at", [1], opresult39);
            var call41 = callmethodChecked(var_settings, "inputdir:=", [1], call40);
            return call41;
          };
          cases22.push(block23);
          setLineNumber(43);    // compilenode block
          var block42 = new GraceBlock(this, 43, 0);
          var string43 = new GraceString("-o");
          block42.pattern = string43;
          block42.real = function() {
            var if44 = GraceDone;
            setLineNumber(44);    // compilenode identifier
            var opresult47 = callmethodChecked(var_i, "+", [1], new GraceNum(1));
            var call49 = callmethodChecked(var_args, "size", [0]);
            var opresult51 = callmethodChecked(call49, "<", [1], opresult47);
            if (Grace_isTrue(opresult51)) {
              setLineNumber(45);    // compilenode string
              var string52 = new GraceString("gracedoc: -o requires an argument.\n");
              var call53 = callmethodChecked(var_io, "error", [0]);
              var call54 = callmethodChecked(call53, "write", [1], string52);
              setLineNumber(46);    // compilenode identifier
              var call55 = callmethodChecked(var_sys, "exit", [1], new GraceNum(1));
              if44 = call55;
            }
            setLineNumber(48);    // compilenode identifier
            var_skip = GraceTrue;
            setLineNumber(49);    // compilenode identifier
            var opresult58 = callmethodChecked(var_i, "+", [1], new GraceNum(1));
            var call59 = callmethodChecked(var_args, "at", [1], opresult58);
            var call60 = callmethodChecked(var_settings, "outputdir:=", [1], call59);
            return call60;
          };
          cases22.push(block42);
          setLineNumber(50);    // compilenode block
          var block61 = new GraceBlock(this, 50, 0);
          var string62 = new GraceString("-v");
          block61.pattern = string62;
          block61.real = function() {
            var if63 = GraceDone;
            setLineNumber(51);    // compilenode identifier
            var opresult66 = callmethodChecked(var_i, "+", [1], new GraceNum(1));
            var call68 = callmethodChecked(var_args, "size", [0]);
            var opresult70 = callmethodChecked(call68, "<", [1], opresult66);
            if (Grace_isTrue(opresult70)) {
              setLineNumber(52);    // compilenode string
              var string71 = new GraceString("gracedoc: -v requires an argument.\n");
              var call72 = callmethodChecked(var_io, "error", [0]);
              var call73 = callmethodChecked(call72, "write", [1], string71);
              setLineNumber(53);    // compilenode identifier
              var call74 = callmethodChecked(var_sys, "exit", [1], new GraceNum(1));
              if63 = call74;
            }
            setLineNumber(55);    // compilenode identifier
            var_skip = GraceTrue;
            setLineNumber(56);    // compilenode identifier
            var opresult77 = callmethodChecked(var_i, "+", [1], new GraceNum(1));
            var call78 = callmethodChecked(var_args, "at", [1], opresult77);
            var call79 = callmethodChecked(call78, "asNumber", [0]);
            var call80 = callmethodChecked(var_settings, "verbosity:=", [1], call79);
            return call80;
          };
          cases22.push(block61);
          setLineNumber(57);    // compilenode block
          var block81 = new GraceBlock(this, 57, 0);
          var string82 = new GraceString("--publiconly");
          block81.pattern = string82;
          block81.real = function() {
            setLineNumber(58);    // compilenode identifier
            var call83 = callmethodChecked(var_settings, "publicOnly:=", [1], GraceTrue);
            return call83;
          };
          cases22.push(block81);
          setLineNumber(59);    // compilenode block
          var block84 = new GraceBlock(this, 59, 0);
          var string85 = new GraceString("--help");
          block84.pattern = string85;
          block84.real = function() {
            setLineNumber(60);    // compilenode string
            var string86 = new GraceString(" -i <path> -o <path> [-v <level>] [--help] [--publiconly]");
            var call88 = callmethodChecked(var_args, "at", [1], new GraceNum(1));
            var string90 = new GraceString("Usage: ");
            var opresult92 = callmethodChecked(string90, "++", [1], call88);
            var opresult94 = callmethodChecked(opresult92, "++", [1], string86);
            var call95 = Grace_print(opresult94);
            setLineNumber(61);    // compilenode string
            var string96 = new GraceString("  -i <path>      The directory to process (contains .grace files)");
            var call97 = Grace_print(string96);
            setLineNumber(62);    // compilenode string
            var string98 = new GraceString("  -o <path>      The directory to contain the generated HTML files");
            var call99 = Grace_print(string98);
            setLineNumber(63);    // compilenode string
            var string100 = new GraceString("  [-v <level>]   Optional. Level of detail in output (0 = none, 1 = some, 2 = all); default is 0");
            var call101 = Grace_print(string100);
            setLineNumber(64);    // compilenode string
            var string102 = new GraceString("  [--publiconly] Optional. If set, only public methods are documented and public ");
            var call103 = Grace_print(string102);
            setLineNumber(65);    // compilenode string
            var string104 = new GraceString("                 variables are listed as methods. Default is off.");
            var call105 = Grace_print(string104);
            setLineNumber(66);    // compilenode string
            var string106 = new GraceString("  [--help]       Optional. Print this usage information.");
            var call107 = Grace_print(string106);
            return call107;
          };
          cases22.push(block84);
          setLineNumber(67);    // compilenode block
          var block108 = new GraceBlock(this, 67, 1);
          setLineNumber(1);    // compilenode identifier
          block108.real = function(var___95____95__0) {
            setLineNumber(68);    // compilenode string
            var string109 = new GraceString(".\n");
            var string112 = new GraceString("gracedoc: Invalid argument ");
            var opresult114 = callmethodChecked(string112, "++", [1], var_arg);
            var opresult116 = callmethodChecked(opresult114, "++", [1], string109);
            var call117 = callmethodChecked(var_io, "error", [0]);
            var call118 = callmethodChecked(call117, "write", [1], opresult116);
            return call118;
          };
          cases22.push(block108);
          setLineNumber(35);    // compilematchcase
          var matchres22 = matchCase(var_arg,cases22,false);
          setModuleName("gracedocMD");
          if16 = matchres22;
        } else {
          var if119 = GraceDone;
          setLineNumber(71);    // compilenode identifier
          var opresult122 = callmethodChecked(var_skip, "==", [1], GraceTrue);
          if (Grace_isTrue(opresult122)) {
            setLineNumber(72);    // compilenode identifier
            var_skip = GraceFalse;
            if119 = GraceDone;
          } else {
            setLineNumber(74);    // compilenode string
            var string123 = new GraceString(". Arguments must start with a -.\n");
            var string126 = new GraceString("gracedoc: Invalid argument ");
            var opresult128 = callmethodChecked(string126, "++", [1], var_arg);
            var opresult130 = callmethodChecked(opresult128, "++", [1], string123);
            var call131 = callmethodChecked(var_io, "error", [0]);
            var call132 = callmethodChecked(call131, "write", [1], opresult130);
            setLineNumber(75);    // compilenode identifier
            var call133 = callmethodChecked(var_sys, "exit", [1], new GraceNum(1));
            if119 = call133;
          }
          if16 = if119;
        }
        return if16;
      };
      var call134 = callmethodChecked(var_prelude, "for()do", [1, 1], var_indices, block14);
      var if135 = GraceDone;
      setLineNumber(79);    // compilenode string
      var string136 = new GraceString("");
      var call138 = callmethodChecked(var_settings, "outputdir", [0]);
      var opresult140 = callmethodChecked(call138, "==", [1], string136);
      var string142 = new GraceString("");
      var call144 = callmethodChecked(var_settings, "inputdir", [0]);
      var opresult146 = callmethodChecked(call144, "==", [1], string142);
      var opresult148 = callmethodChecked(opresult146, "||", [1], opresult140);
      if (Grace_isTrue(opresult148)) {
        setLineNumber(80);    // compilenode string
        var string149 = new GraceString("gracedoc: Both the -i and -o arguments are required.\n");
        var call150 = callmethodChecked(var_io, "error", [0]);
        var call151 = callmethodChecked(call150, "write", [1], string149);
        setLineNumber(81);    // compilenode identifier
        var call152 = callmethodChecked(var_sys, "exit", [1], new GraceNum(1));
        if135 = call152;
      }
      if8 = if135;
    } else {
      setLineNumber(84);    // compilenode string
      var string153 = new GraceString("gracedoc: Both the -i and -o arguments are required.\n");
      var call154 = callmethodChecked(var_io, "error", [0]);
      var call155 = callmethodChecked(call154, "write", [1], string153);
      setLineNumber(85);    // compilenode identifier
      var call156 = callmethodChecked(var_sys, "exit", [1], new GraceNum(1));
      if8 = call156;
    }
    return if8;
  };
  func6.paramCounts = [0];
  this.methods["parseArguments"] = func6;
  func6.definitionLine = 27;
  func6.definitionModule = "gracedocMD";
  setLineNumber(164);    // compilenode method
  var func157 = function(argcv) {    // method Parameter
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    if (argcv[0] !== 0)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Parameter"));
    setModuleName("gracedocMD");
    var obj158 = Grace_allocObject(GraceObject, "gracedocMD.Parameter");
    obj158.definitionModule = "gracedocMD";
    obj158.definitionLine = 164;
    obj158.outer = this;
    var reader_gracedocMD_outer159 = function() {
      return this.outer;
    };
    obj158.methods["outer"] = reader_gracedocMD_outer159;
    var obj_init_158 = function() {
      var origSuperDepth = superDepth;
      superDepth = obj158;
      var func160 = function(argcv) {    // method insertName(1)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_text = arguments[curarg];
        curarg++;
        if (argcv[0] !== 1)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for insertName(1)"));
        // Start argument checking
        curarg = 1;
        setLineNumber(168);    // compilenode identifier
        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("argument 1 in insertName (arg list 1), which corresponds to parameter text, does not have " + 
                    callmethod(var_String, "asString", [0])._value + "."));
        curarg++;
        // End argument checking
        setModuleName("gracedocMD");
        onSelf = true;
        var call162 = callmethodChecked(this, "name", [0]);
        var opresult164 = callmethodChecked(call162, "++", [1], var_text);
        onSelf = true;
        var call165 = callmethodChecked(this, "name:=", [1], opresult164);
        return call165;
      };
      func160.paramTypes = [];
      func160.paramTypes.push([type_String, "text"]);
      func160.paramCounts = [1];
      obj158.methods["insertName"] = func160;
      func160.definitionLine = 168;
      func160.definitionModule = "gracedocMD";
      var func166 = function(argcv) {    // method insertArg(1)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_text = arguments[curarg];
        curarg++;
        if (argcv[0] !== 1)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for insertArg(1)"));
        // Start argument checking
        curarg = 1;
        setLineNumber(169);    // compilenode identifier
        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("argument 1 in insertArg (arg list 1), which corresponds to parameter text, does not have " + 
                    callmethod(var_String, "asString", [0])._value + "."));
        curarg++;
        // End argument checking
        setModuleName("gracedocMD");
        onSelf = true;
        var call168 = callmethodChecked(this, "args", [0]);
        var opresult170 = callmethodChecked(call168, "++", [1], var_text);
        onSelf = true;
        var call171 = callmethodChecked(this, "args:=", [1], opresult170);
        return call171;
      };
      func166.paramTypes = [];
      func166.paramTypes.push([type_String, "text"]);
      func166.paramCounts = [1];
      obj158.methods["insertArg"] = func166;
      func166.definitionLine = 169;
      func166.definitionModule = "gracedocMD";
      setLineNumber(165);    // compilenode string
      var string172 = new GraceString("");
      obj158.data["name"] = string172;
      var reader_gracedocMD_name173 = function() {
        return this.data["name"];
      };
      obj158.methods["name"] = reader_gracedocMD_name173;
      obj158.data["name"] = string172;
      var writer_gracedocMD_name173 = function(argcv, o) {
        this.data["name"] = o;
        return GraceDone;
      };
      obj158.methods["name:="] = writer_gracedocMD_name173;
      if (!Grace_isTrue(callmethod(var_String, "match", [1], string172)))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("initial value of var 'name' is not of type String"));
      obj158.mutable = true;
      setLineNumber(166);    // compilenode string
      var string174 = new GraceString("");
      obj158.data["args"] = string174;
      var reader_gracedocMD_args175 = function() {
        return this.data["args"];
      };
      obj158.methods["args"] = reader_gracedocMD_args175;
      obj158.data["args"] = string174;
      var writer_gracedocMD_args175 = function(argcv, o) {
        this.data["args"] = o;
        return GraceDone;
      };
      obj158.methods["args:="] = writer_gracedocMD_args175;
      if (!Grace_isTrue(callmethod(var_String, "match", [1], string174)))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("initial value of var 'args' is not of type String"));
      obj158.mutable = true;
      superDepth = origSuperDepth;
    };
    obj_init_158.apply(obj158, []);
    return obj158;
  };
  func157.paramCounts = [0];
  this.methods["Parameter"] = func157;
  func157.definitionLine = 164;
  func157.definitionModule = "gracedocMD";
    var func176 = function(argcv) {    // method Parameter()object
      var curarg = 1;
      var inheritingObject = arguments[curarg++];
      // Start argument processing
      curarg = 1;
      // End argument processing
      setModuleName("gracedocMD");
      var returnTarget = invocationCount;
      invocationCount++;
      var obj177 = Grace_allocObject(GraceObject, "Parameter");
      obj177.definitionModule = "gracedocMD";
      obj177.definitionLine = 164;
      var inho177 = inheritingObject;
      while (inho177.superobj) inho177 = inho177.superobj;
      inho177.superobj = obj177;
      obj177.data = inheritingObject.data;
      if (inheritingObject.hasOwnProperty('_value'))
        obj177._value = inheritingObject._value;
      obj177.outer = this;
      var reader_gracedocMD_outer178 = function() {
        return this.outer;
      };
      obj177.methods["outer"] = reader_gracedocMD_outer178;
      var obj_init_177 = function() {
        var origSuperDepth = superDepth;
        superDepth = obj177;
        var func179 = function(argcv) {    // method insertName(1)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_text = arguments[curarg];
          curarg++;
          if (argcv[0] !== 1)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for insertName(1)"));
          // Start argument checking
          curarg = 1;
          setLineNumber(168);    // compilenode identifier
          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
              throw new GraceExceptionPacket(TypeErrorObject,
                  new GraceString("argument 1 in insertName (arg list 1), which corresponds to parameter text, does not have " + 
                      callmethod(var_String, "asString", [0])._value + "."));
          curarg++;
          // End argument checking
          setModuleName("gracedocMD");
          onSelf = true;
          var call181 = callmethodChecked(this, "name", [0]);
          var opresult183 = callmethodChecked(call181, "++", [1], var_text);
          onSelf = true;
          var call184 = callmethodChecked(this, "name:=", [1], opresult183);
          return call184;
        };
        func179.paramTypes = [];
        func179.paramTypes.push([type_String, "text"]);
        func179.paramCounts = [1];
        obj177.methods["insertName"] = func179;
        func179.definitionLine = 168;
        func179.definitionModule = "gracedocMD";
        var func185 = function(argcv) {    // method insertArg(1)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_text = arguments[curarg];
          curarg++;
          if (argcv[0] !== 1)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for insertArg(1)"));
          // Start argument checking
          curarg = 1;
          setLineNumber(169);    // compilenode identifier
          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
              throw new GraceExceptionPacket(TypeErrorObject,
                  new GraceString("argument 1 in insertArg (arg list 1), which corresponds to parameter text, does not have " + 
                      callmethod(var_String, "asString", [0])._value + "."));
          curarg++;
          // End argument checking
          setModuleName("gracedocMD");
          onSelf = true;
          var call187 = callmethodChecked(this, "args", [0]);
          var opresult189 = callmethodChecked(call187, "++", [1], var_text);
          onSelf = true;
          var call190 = callmethodChecked(this, "args:=", [1], opresult189);
          return call190;
        };
        func185.paramTypes = [];
        func185.paramTypes.push([type_String, "text"]);
        func185.paramCounts = [1];
        obj177.methods["insertArg"] = func185;
        func185.definitionLine = 169;
        func185.definitionModule = "gracedocMD";
        setLineNumber(165);    // compilenode string
        var string191 = new GraceString("");
        obj177.data["name"] = string191;
        var reader_gracedocMD_name192 = function() {
          return this.data["name"];
        };
        obj177.methods["name"] = reader_gracedocMD_name192;
        obj177.data["name"] = string191;
        var writer_gracedocMD_name192 = function(argcv, o) {
          this.data["name"] = o;
          return GraceDone;
        };
        obj177.methods["name:="] = writer_gracedocMD_name192;
        if (!Grace_isTrue(callmethod(var_String, "match", [1], string191)))
          throw new GraceExceptionPacket(TypeErrorObject,
              new GraceString("initial value of var 'name' is not of type String"));
        obj177.mutable = true;
        setLineNumber(166);    // compilenode string
        var string193 = new GraceString("");
        obj177.data["args"] = string193;
        var reader_gracedocMD_args194 = function() {
          return this.data["args"];
        };
        obj177.methods["args"] = reader_gracedocMD_args194;
        obj177.data["args"] = string193;
        var writer_gracedocMD_args194 = function(argcv, o) {
          this.data["args"] = o;
          return GraceDone;
        };
        obj177.methods["args:="] = writer_gracedocMD_args194;
        if (!Grace_isTrue(callmethod(var_String, "match", [1], string193)))
          throw new GraceExceptionPacket(TypeErrorObject,
              new GraceString("initial value of var 'args' is not of type String"));
        obj177.mutable = true;
        superDepth = origSuperDepth;
      };
      obj_init_177.apply(inheritingObject, []);
      return obj177;
      };
      this.methods["Parameter()object"] = func176;
    setLineNumber(175);    // compilenode method
    var func195 = function(argcv) {    // method Property
      var returnTarget = invocationCount;
      invocationCount++;
      var curarg = 1;
      if (argcv[0] !== 0)
        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Property"));
      setModuleName("gracedocMD");
      var obj196 = Grace_allocObject(GraceObject, "gracedocMD.Property");
      obj196.definitionModule = "gracedocMD";
      obj196.definitionLine = 175;
      obj196.outer = this;
      var reader_gracedocMD_outer197 = function() {
        return this.outer;
      };
      obj196.methods["outer"] = reader_gracedocMD_outer197;
      var obj_init_196 = function() {
        var origSuperDepth = superDepth;
        superDepth = obj196;
        var func198 = function(argcv) {    // method addParam(1)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_param = arguments[curarg];
          curarg++;
          if (argcv[0] !== 1)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addParam(1)"));
          // Start argument checking
          curarg = 1;
          setLineNumber(180);    // compilenode call
          var call199 = callmethodChecked(superDepth, "outer", [0]);
          onOuter = true;
          onSelf = true;
          var call200 = callmethodChecked(call199, "Parameter", [0]);
          if (!Grace_isTrue(callmethod(call200, "match",  [1], arguments[curarg])))
              throw new GraceExceptionPacket(TypeErrorObject,
                  new GraceString("argument 1 in addParam (arg list 1), which corresponds to parameter param, does not have " + 
                      callmethod(call200, "asString", [0])._value + "."));
          curarg++;
          // End argument checking
          setModuleName("gracedocMD");
          onSelf = true;
          var call201 = callmethodChecked(this, "params", [0]);
          var call202 = callmethodChecked(call201, "add", [1], var_param);
          return call202;
        };
        func198.paramCounts = [1];
        obj196.methods["addParam"] = func198;
        func198.definitionLine = 180;
        func198.definitionModule = "gracedocMD";
        setLineNumber(176);    // compilenode string
        var string203 = new GraceString("");
        obj196.data["name"] = string203;
        var reader_gracedocMD_name204 = function() {
          return this.data["name"];
        };
        obj196.methods["name"] = reader_gracedocMD_name204;
        obj196.data["name"] = string203;
        var writer_gracedocMD_name204 = function(argcv, o) {
          this.data["name"] = o;
          return GraceDone;
        };
        obj196.methods["name:="] = writer_gracedocMD_name204;
        if (!Grace_isTrue(callmethod(var_String, "match", [1], string203)))
          throw new GraceExceptionPacket(TypeErrorObject,
              new GraceString("initial value of var 'name' is not of type String"));
        obj196.mutable = true;
        setLineNumber(177);    // compilenode array
        var array205 = new Lineup([]);
        var call206 = callmethodChecked(var_prelude, "set", [1], array205);
        obj196.data["params"] = call206;
        var reader_gracedocMD_params207 = function() {
          return this.data["params"];
        };
        obj196.methods["params"] = reader_gracedocMD_params207;
        obj196.data["params"] = call206;
        var writer_gracedocMD_params207 = function(argcv, o) {
          this.data["params"] = o;
          return GraceDone;
        };
        obj196.methods["params:="] = writer_gracedocMD_params207;
        writer_gracedocMD_params207.confidential = true;
        var call208 = callmethodChecked(var_prelude, "Set", [0]);
        if (!Grace_isTrue(callmethod(call208, "match", [1], call206)))
          throw new GraceExceptionPacket(TypeErrorObject,
              new GraceString("initial value of var 'params' is not of type Set<self.outer.Parameter>"));
        obj196.mutable = true;
        setLineNumber(178);    // compilenode string
        var string209 = new GraceString("");
        obj196.data["comments"] = string209;
        var reader_gracedocMD_comments210 = function() {
          return this.data["comments"];
        };
        obj196.methods["comments"] = reader_gracedocMD_comments210;
        obj196.data["comments"] = string209;
        var writer_gracedocMD_comments210 = function(argcv, o) {
          this.data["comments"] = o;
          return GraceDone;
        };
        obj196.methods["comments:="] = writer_gracedocMD_comments210;
        if (!Grace_isTrue(callmethod(var_String, "match", [1], string209)))
          throw new GraceExceptionPacket(TypeErrorObject,
              new GraceString("initial value of var 'comments' is not of type String"));
        obj196.mutable = true;
        superDepth = origSuperDepth;
      };
      obj_init_196.apply(obj196, []);
      return obj196;
    };
    func195.paramCounts = [0];
    this.methods["Property"] = func195;
    func195.definitionLine = 175;
    func195.definitionModule = "gracedocMD";
      var func211 = function(argcv) {    // method Property()object
        var curarg = 1;
        var inheritingObject = arguments[curarg++];
        // Start argument processing
        curarg = 1;
        // End argument processing
        setModuleName("gracedocMD");
        var returnTarget = invocationCount;
        invocationCount++;
        var obj212 = Grace_allocObject(GraceObject, "Property");
        obj212.definitionModule = "gracedocMD";
        obj212.definitionLine = 175;
        var inho212 = inheritingObject;
        while (inho212.superobj) inho212 = inho212.superobj;
        inho212.superobj = obj212;
        obj212.data = inheritingObject.data;
        if (inheritingObject.hasOwnProperty('_value'))
          obj212._value = inheritingObject._value;
        obj212.outer = this;
        var reader_gracedocMD_outer213 = function() {
          return this.outer;
        };
        obj212.methods["outer"] = reader_gracedocMD_outer213;
        var obj_init_212 = function() {
          var origSuperDepth = superDepth;
          superDepth = obj212;
          var func214 = function(argcv) {    // method addParam(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_param = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addParam(1)"));
            // Start argument checking
            curarg = 1;
            setLineNumber(180);    // compilenode call
            var call215 = callmethodChecked(superDepth, "outer", [0]);
            onOuter = true;
            onSelf = true;
            var call216 = callmethodChecked(call215, "Parameter", [0]);
            if (!Grace_isTrue(callmethod(call216, "match",  [1], arguments[curarg])))
                throw new GraceExceptionPacket(TypeErrorObject,
                    new GraceString("argument 1 in addParam (arg list 1), which corresponds to parameter param, does not have " + 
                        callmethod(call216, "asString", [0])._value + "."));
            curarg++;
            // End argument checking
            setModuleName("gracedocMD");
            onSelf = true;
            var call217 = callmethodChecked(this, "params", [0]);
            var call218 = callmethodChecked(call217, "add", [1], var_param);
            return call218;
          };
          func214.paramCounts = [1];
          obj212.methods["addParam"] = func214;
          func214.definitionLine = 180;
          func214.definitionModule = "gracedocMD";
          setLineNumber(176);    // compilenode string
          var string219 = new GraceString("");
          obj212.data["name"] = string219;
          var reader_gracedocMD_name220 = function() {
            return this.data["name"];
          };
          obj212.methods["name"] = reader_gracedocMD_name220;
          obj212.data["name"] = string219;
          var writer_gracedocMD_name220 = function(argcv, o) {
            this.data["name"] = o;
            return GraceDone;
          };
          obj212.methods["name:="] = writer_gracedocMD_name220;
          if (!Grace_isTrue(callmethod(var_String, "match", [1], string219)))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("initial value of var 'name' is not of type String"));
          obj212.mutable = true;
          setLineNumber(177);    // compilenode array
          var array221 = new Lineup([]);
          var call222 = callmethodChecked(var_prelude, "set", [1], array221);
          obj212.data["params"] = call222;
          var reader_gracedocMD_params223 = function() {
            return this.data["params"];
          };
          obj212.methods["params"] = reader_gracedocMD_params223;
          obj212.data["params"] = call222;
          var writer_gracedocMD_params223 = function(argcv, o) {
            this.data["params"] = o;
            return GraceDone;
          };
          obj212.methods["params:="] = writer_gracedocMD_params223;
          writer_gracedocMD_params223.confidential = true;
          var call224 = callmethodChecked(var_prelude, "Set", [0]);
          if (!Grace_isTrue(callmethod(call224, "match", [1], call222)))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("initial value of var 'params' is not of type Set<self.outer.Parameter>"));
          obj212.mutable = true;
          setLineNumber(178);    // compilenode string
          var string225 = new GraceString("");
          obj212.data["comments"] = string225;
          var reader_gracedocMD_comments226 = function() {
            return this.data["comments"];
          };
          obj212.methods["comments"] = reader_gracedocMD_comments226;
          obj212.data["comments"] = string225;
          var writer_gracedocMD_comments226 = function(argcv, o) {
            this.data["comments"] = o;
            return GraceDone;
          };
          obj212.methods["comments:="] = writer_gracedocMD_comments226;
          if (!Grace_isTrue(callmethod(var_String, "match", [1], string225)))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("initial value of var 'comments' is not of type String"));
          obj212.mutable = true;
          superDepth = origSuperDepth;
        };
        obj_init_212.apply(inheritingObject, []);
        return obj212;
        };
        this.methods["Property()object"] = func211;
      setLineNumber(183);    // compilenode method
      var func227 = function(argcv) {    // method sidebarModule
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sidebarModule"));
        setModuleName("gracedocMD");
        var obj228 = Grace_allocObject(GraceObject, "gracedocMD.sidebarModule");
        obj228.definitionModule = "gracedocMD";
        obj228.definitionLine = 183;
        obj228.outer = this;
        var reader_gracedocMD_outer229 = function() {
          return this.outer;
        };
        obj228.methods["outer"] = reader_gracedocMD_outer229;
        var obj_init_228 = function() {
          var origSuperDepth = superDepth;
          superDepth = obj228;
          setLineNumber(184);    // compilenode string
          var string230 = new GraceString("");
          obj228.data["name"] = string230;
          var reader_gracedocMD_name231 = function() {
            return this.data["name"];
          };
          obj228.methods["name"] = reader_gracedocMD_name231;
          obj228.data["name"] = string230;
          var writer_gracedocMD_name231 = function(argcv, o) {
            this.data["name"] = o;
            return GraceDone;
          };
          obj228.methods["name:="] = writer_gracedocMD_name231;
          obj228.mutable = true;
          setLineNumber(185);    // compilenode string
          var string232 = new GraceString("");
          obj228.data["classFiles"] = string232;
          var reader_gracedocMD_classFiles233 = function() {
            return this.data["classFiles"];
          };
          obj228.methods["classFiles"] = reader_gracedocMD_classFiles233;
          obj228.data["classFiles"] = string232;
          var writer_gracedocMD_classFiles233 = function(argcv, o) {
            this.data["classFiles"] = o;
            return GraceDone;
          };
          obj228.methods["classFiles:="] = writer_gracedocMD_classFiles233;
          obj228.mutable = true;
          setLineNumber(186);    // compilenode string
          var string234 = new GraceString("");
          obj228.data["typeFiles"] = string234;
          var reader_gracedocMD_typeFiles235 = function() {
            return this.data["typeFiles"];
          };
          obj228.methods["typeFiles"] = reader_gracedocMD_typeFiles235;
          obj228.data["typeFiles"] = string234;
          var writer_gracedocMD_typeFiles235 = function(argcv, o) {
            this.data["typeFiles"] = o;
            return GraceDone;
          };
          obj228.methods["typeFiles:="] = writer_gracedocMD_typeFiles235;
          obj228.mutable = true;
          superDepth = origSuperDepth;
        };
        obj_init_228.apply(obj228, []);
        return obj228;
      };
      func227.paramCounts = [0];
      this.methods["sidebarModule"] = func227;
      func227.definitionLine = 183;
      func227.definitionModule = "gracedocMD";
        var func236 = function(argcv) {    // method sidebarModule()object
          var curarg = 1;
          var inheritingObject = arguments[curarg++];
          // Start argument processing
          curarg = 1;
          // End argument processing
          setModuleName("gracedocMD");
          var returnTarget = invocationCount;
          invocationCount++;
          var obj237 = Grace_allocObject(GraceObject, "sidebarModule");
          obj237.definitionModule = "gracedocMD";
          obj237.definitionLine = 183;
          var inho237 = inheritingObject;
          while (inho237.superobj) inho237 = inho237.superobj;
          inho237.superobj = obj237;
          obj237.data = inheritingObject.data;
          if (inheritingObject.hasOwnProperty('_value'))
            obj237._value = inheritingObject._value;
          obj237.outer = this;
          var reader_gracedocMD_outer238 = function() {
            return this.outer;
          };
          obj237.methods["outer"] = reader_gracedocMD_outer238;
          var obj_init_237 = function() {
            var origSuperDepth = superDepth;
            superDepth = obj237;
            setLineNumber(184);    // compilenode string
            var string239 = new GraceString("");
            obj237.data["name"] = string239;
            var reader_gracedocMD_name240 = function() {
              return this.data["name"];
            };
            obj237.methods["name"] = reader_gracedocMD_name240;
            obj237.data["name"] = string239;
            var writer_gracedocMD_name240 = function(argcv, o) {
              this.data["name"] = o;
              return GraceDone;
            };
            obj237.methods["name:="] = writer_gracedocMD_name240;
            obj237.mutable = true;
            setLineNumber(185);    // compilenode string
            var string241 = new GraceString("");
            obj237.data["classFiles"] = string241;
            var reader_gracedocMD_classFiles242 = function() {
              return this.data["classFiles"];
            };
            obj237.methods["classFiles"] = reader_gracedocMD_classFiles242;
            obj237.data["classFiles"] = string241;
            var writer_gracedocMD_classFiles242 = function(argcv, o) {
              this.data["classFiles"] = o;
              return GraceDone;
            };
            obj237.methods["classFiles:="] = writer_gracedocMD_classFiles242;
            obj237.mutable = true;
            setLineNumber(186);    // compilenode string
            var string243 = new GraceString("");
            obj237.data["typeFiles"] = string243;
            var reader_gracedocMD_typeFiles244 = function() {
              return this.data["typeFiles"];
            };
            obj237.methods["typeFiles"] = reader_gracedocMD_typeFiles244;
            obj237.data["typeFiles"] = string243;
            var writer_gracedocMD_typeFiles244 = function(argcv, o) {
              this.data["typeFiles"] = o;
              return GraceDone;
            };
            obj237.methods["typeFiles:="] = writer_gracedocMD_typeFiles244;
            obj237.mutable = true;
            superDepth = origSuperDepth;
          };
          obj_init_237.apply(inheritingObject, []);
          return obj237;
          };
          this.methods["sidebarModule()object"] = func236;
        setLineNumber(190);    // compilenode method
        var func245 = function(argcv) {    // method sidebarFileGenerator
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sidebarFileGenerator"));
          setModuleName("gracedocMD");
          var obj246 = Grace_allocObject(GraceObject, "gracedocMD.sidebarFileGenerator");
          obj246.definitionModule = "gracedocMD";
          obj246.definitionLine = 190;
          obj246.outer = this;
          var reader_gracedocMD_outer247 = function() {
            return this.outer;
          };
          obj246.methods["outer"] = reader_gracedocMD_outer247;
          var obj_init_246 = function() {
            var origSuperDepth = superDepth;
            superDepth = obj246;
            var func248 = function(argcv) {    // method add(1)toList(1)inModule(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_string = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for add (arg list 1) of add(1)toList(1)inModule(1)"));
              var var_aList = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toList (arg list 2) of add(1)toList(1)inModule(1)"));
              var var_modName = arguments[curarg];
              curarg++;
              if (argcv[2] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inModule (arg list 3) of add(1)toList(1)inModule(1)"));
              // Start argument checking
              curarg = 1;
              setLineNumber(204);    // compilenode identifier
              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in add (arg list 1), which corresponds to parameter string, does not have " + 
                          callmethod(var_String, "asString", [0])._value + "."));
              curarg++;
              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in toList (arg list 2), which corresponds to parameter aList, does not have " + 
                          callmethod(var_String, "asString", [0])._value + "."));
              curarg++;
              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in inModule (arg list 3), which corresponds to parameter modName, does not have " + 
                          callmethod(var_String, "asString", [0])._value + "."));
              curarg++;
              // End argument checking
              setModuleName("gracedocMD");
              setLineNumber(206);    // compilenode vardec
              var var_mod;
              var if249 = GraceDone;
              setLineNumber(209);    // compilenode call
              onSelf = true;
              var call250 = callmethodChecked(this, "moduleList", [0]);
              var call251 = callmethodChecked(call250, "containsKey", [1], var_modName);
              if (Grace_isTrue(call251)) {
                setLineNumber(210);    // compilenode call
                onSelf = true;
                var call252 = callmethodChecked(this, "moduleList", [0]);
                var call253 = callmethodChecked(call252, "at", [1], var_modName);
                var_mod = call253;
                if249 = GraceDone;
              } else {
                setLineNumber(213);    // compilenode call
                var call254 = callmethodChecked(superDepth, "outer", [0]);
                onOuter = true;
                onSelf = true;
                var call255 = callmethodChecked(call254, "sidebarModule", [0]);
                var_mod = call255;
                setLineNumber(214);    // compilenode identifier
                var call256 = callmethodChecked(var_mod, "name:=", [1], var_modName);
                setLineNumber(217);    // compilenode call
                onSelf = true;
                var call257 = callmethodChecked(this, "moduleList", [0]);
                var call258 = callmethodChecked(call257, "at()put", [1, 1], var_modName, var_mod);
                if249 = call258;
              }
              var if259 = GraceDone;
              setLineNumber(221);    // compilenode identifier
              var opresult262 = callmethodChecked(var_aList, "==", [1], var_classList);
              if (Grace_isTrue(opresult262)) {
                setLineNumber(223);    // compilenode identifier
                var call264 = callmethodChecked(var_mod, "classFiles", [0]);
                var opresult266 = callmethodChecked(call264, "++", [1], var_string);
                var call267 = callmethodChecked(var_mod, "classFiles:=", [1], opresult266);
                if259 = call267;
              } else {
                var if268 = GraceDone;
                setLineNumber(226);    // compilenode identifier
                var opresult271 = callmethodChecked(var_aList, "==", [1], var_typeList);
                if (Grace_isTrue(opresult271)) {
                  setLineNumber(228);    // compilenode identifier
                  var call273 = callmethodChecked(var_mod, "typeFiles", [0]);
                  var opresult275 = callmethodChecked(call273, "++", [1], var_string);
                  var call276 = callmethodChecked(var_mod, "typeFiles:=", [1], opresult275);
                  if268 = call276;
                } else {
                  setLineNumber(233);    // compilenode call
                  onSelf = true;
                  var call278 = callmethodChecked(this, "fileOut", [0]);
                  var opresult280 = callmethodChecked(call278, "++", [1], var_string);
                  onSelf = true;
                  var call281 = callmethodChecked(this, "fileOut:=", [1], opresult280);
                  if268 = call281;
                }
                if259 = if268;
              }
              return if259;
            };
            func248.paramTypes = [];
            func248.paramTypes.push([type_String, "string"]);
            func248.paramTypes.push([type_String, "aList"]);
            func248.paramTypes.push([type_String, "modName"]);
            func248.paramCounts = [1, 1, 1];
            obj246.methods["add()toList()inModule"] = func248;
            func248.definitionLine = 204;
            func248.definitionModule = "gracedocMD";
            var func282 = function(argcv) {    // method setModule(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_name = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for setModule(1)"));
              // Start argument checking
              curarg = 1;
              setLineNumber(238);    // compilenode identifier
              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in setModule (arg list 1), which corresponds to parameter name, does not have " + 
                          callmethod(var_String, "asString", [0])._value + "."));
              curarg++;
              // End argument checking
              setModuleName("gracedocMD");
              setLineNumber(241);    // compilenode identifier
              onSelf = true;
              var call283 = callmethodChecked(this, "addFolder", [1], var_name);
              setLineNumber(244);    // compilenode identifier
              onSelf = true;
              var call284 = callmethodChecked(this, "modSet:=", [1], GraceTrue);
              return call284;
            };
            func282.paramTypes = [];
            func282.paramTypes.push([type_String, "name"]);
            func282.paramCounts = [1];
            obj246.methods["setModule"] = func282;
            func282.definitionLine = 238;
            func282.definitionModule = "gracedocMD";
            var func285 = function(argcv) {    // method add(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_string = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for add(1)"));
              // Start argument checking
              curarg = 1;
              setLineNumber(248);    // compilenode identifier
              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in add (arg list 1), which corresponds to parameter string, does not have " + 
                          callmethod(var_String, "asString", [0])._value + "."));
              curarg++;
              // End argument checking
              setModuleName("gracedocMD");
              setLineNumber(250);    // compilenode call
              onSelf = true;
              var call287 = callmethodChecked(this, "fileOut", [0]);
              var opresult289 = callmethodChecked(call287, "++", [1], var_string);
              onSelf = true;
              var call290 = callmethodChecked(this, "fileOut:=", [1], opresult289);
              return call290;
            };
            func285.paramTypes = [];
            func285.paramTypes.push([type_String, "string"]);
            func285.paramCounts = [1];
            obj246.methods["add"] = func285;
            func285.definitionLine = 248;
            func285.definitionModule = "gracedocMD";
            var func291 = function(argcv) {    // method addFolder(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_title = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addFolder(1)"));
              // Start argument checking
              curarg = 1;
              setLineNumber(254);    // compilenode identifier
              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in addFolder (arg list 1), which corresponds to parameter title, does not have " + 
                          callmethod(var_String, "asString", [0])._value + "."));
              curarg++;
              // End argument checking
              setModuleName("gracedocMD");
              setLineNumber(256);    // compilenode string
              var string292 = new GraceString("\n");
              onSelf = true;
              var call293 = callmethodChecked(this, "add", [1], string292);
              setLineNumber(257);    // compilenode string
              var string294 = new GraceString("\"\n");
              var string297 = new GraceString("  - title: \"");
              var opresult299 = callmethodChecked(string297, "++", [1], var_title);
              var opresult301 = callmethodChecked(opresult299, "++", [1], string294);
              onSelf = true;
              var call302 = callmethodChecked(this, "add", [1], opresult301);
              setLineNumber(258);    // compilenode string
              var string303 = new GraceString("    output: web, pdf\n");
              onSelf = true;
              var call304 = callmethodChecked(this, "add", [1], string303);
              setLineNumber(259);    // compilenode string
              var string305 = new GraceString("    folderitems:\n");
              onSelf = true;
              var call306 = callmethodChecked(this, "add", [1], string305);
              setLineNumber(262);    // compilenode identifier
              onSelf = true;
              var call307 = callmethodChecked(this, "inSubFolder:=", [1], GraceFalse);
              setLineNumber(263);    // compilenode identifier
              onSelf = true;
              var call308 = callmethodChecked(this, "contentExistsInFolder:=", [1], GraceFalse);
              return call308;
            };
            func291.paramTypes = [];
            func291.paramTypes.push([type_String, "title"]);
            func291.paramCounts = [1];
            obj246.methods["addFolder"] = func291;
            func291.definitionLine = 254;
            func291.definitionModule = "gracedocMD";
            var func309 = function(argcv) {    // method signalSubfolders
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              if (argcv[0] !== 0)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for signalSubfolders"));
              setModuleName("gracedocMD");
              var if310 = GraceDone;
              setLineNumber(270);    // compilenode call
              onSelf = true;
              var call311 = callmethodChecked(this, "contentExistsInFolder", [0]);
              var call312 = callmethodChecked(call311, "prefix!", [0]);
              if (Grace_isTrue(call312)) {
                var string313 = new GraceString("");
                var string314 = new GraceString("404");
                var string315 = new GraceString("---");
                var string316 = new GraceString("-none-");
                onSelf = true;
                var call317 = callmethodChecked(this, "addFile()withLink()toList()inModule", [1, 1, 1, 1], string313, string314, string315, string316);
                if310 = call317;
              }
              setLineNumber(273);    // compilenode string
              var string318 = new GraceString("      subfolders:\n");
              onSelf = true;
              var call319 = callmethodChecked(this, "add", [1], string318);
              return call319;
            };
            func309.paramCounts = [0];
            obj246.methods["signalSubfolders"] = func309;
            func309.definitionLine = 267;
            func309.definitionModule = "gracedocMD";
            var func320 = function(argcv) {    // method addSubFolder(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_title = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addSubFolder(1)"));
              // Start argument checking
              curarg = 1;
              setLineNumber(277);    // compilenode identifier
              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in addSubFolder (arg list 1), which corresponds to parameter title, does not have " + 
                          callmethod(var_String, "asString", [0])._value + "."));
              curarg++;
              // End argument checking
              setModuleName("gracedocMD");
              var if321 = GraceDone;
              setLineNumber(280);    // compilenode call
              onSelf = true;
              var call322 = callmethodChecked(this, "inSubFolder", [0]);
              var call323 = callmethodChecked(call322, "prefix!", [0]);
              if (Grace_isTrue(call323)) {
                onSelf = true;
                var call324 = callmethodChecked(this, "signalSubfolders", [0]);
                if321 = call324;
              }
              setLineNumber(282);    // compilenode string
              var string325 = new GraceString("\n");
              onSelf = true;
              var call326 = callmethodChecked(this, "add", [1], string325);
              setLineNumber(283);    // compilenode string
              var string327 = new GraceString("\"\n");
              var string330 = new GraceString("      - title: \"");
              var opresult332 = callmethodChecked(string330, "++", [1], var_title);
              var opresult334 = callmethodChecked(opresult332, "++", [1], string327);
              onSelf = true;
              var call335 = callmethodChecked(this, "add", [1], opresult334);
              setLineNumber(284);    // compilenode string
              var string336 = new GraceString("        output: web, pdf\n");
              onSelf = true;
              var call337 = callmethodChecked(this, "add", [1], string336);
              setLineNumber(285);    // compilenode string
              var string338 = new GraceString("        subfolderitems:\n");
              onSelf = true;
              var call339 = callmethodChecked(this, "add", [1], string338);
              setLineNumber(288);    // compilenode identifier
              onSelf = true;
              var call340 = callmethodChecked(this, "inSubFolder:=", [1], GraceTrue);
              setLineNumber(289);    // compilenode identifier
              onSelf = true;
              var call341 = callmethodChecked(this, "contentExistsInFolder:=", [1], GraceFalse);
              return call341;
            };
            func320.paramTypes = [];
            func320.paramTypes.push([type_String, "title"]);
            func320.paramCounts = [1];
            obj246.methods["addSubFolder"] = func320;
            func320.definitionLine = 277;
            func320.definitionModule = "gracedocMD";
            var func342 = function(argcv) {    // method addFile(1)withLink(1)toList(1)inModule(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_title = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addFile (arg list 1) of addFile(1)withLink(1)toList(1)inModule(1)"));
              var var_link = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for withLink (arg list 2) of addFile(1)withLink(1)toList(1)inModule(1)"));
              var var_aList = arguments[curarg];
              curarg++;
              if (argcv[2] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toList (arg list 3) of addFile(1)withLink(1)toList(1)inModule(1)"));
              var var_modName = arguments[curarg];
              curarg++;
              if (argcv[3] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inModule (arg list 4) of addFile(1)withLink(1)toList(1)inModule(1)"));
              // Start argument checking
              curarg = 1;
              setLineNumber(293);    // compilenode identifier
              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in addFile (arg list 1), which corresponds to parameter title, does not have " + 
                          callmethod(var_String, "asString", [0])._value + "."));
              curarg++;
              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in withLink (arg list 2), which corresponds to parameter link, does not have " + 
                          callmethod(var_String, "asString", [0])._value + "."));
              curarg++;
              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in toList (arg list 3), which corresponds to parameter aList, does not have " + 
                          callmethod(var_String, "asString", [0])._value + "."));
              curarg++;
              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in inModule (arg list 4), which corresponds to parameter modName, does not have " + 
                          callmethod(var_String, "asString", [0])._value + "."));
              curarg++;
              // End argument checking
              setModuleName("gracedocMD");
              var if343 = GraceDone;
              setLineNumber(295);    // compilenode call
              onSelf = true;
              var call344 = callmethodChecked(this, "inSubFolder", [0]);
              if (Grace_isTrue(call344)) {
                setLineNumber(297);    // compilenode string
                var string345 = new GraceString("\n");
                onSelf = true;
                var call346 = callmethodChecked(this, "add()toList()inModule", [1, 1, 1], string345, var_aList, var_modName);
                setLineNumber(298);    // compilenode string
                var string347 = new GraceString("\"\n");
                var string350 = new GraceString("        - title: \"");
                var opresult352 = callmethodChecked(string350, "++", [1], var_title);
                var opresult354 = callmethodChecked(opresult352, "++", [1], string347);
                onSelf = true;
                var call355 = callmethodChecked(this, "add()toList()inModule", [1, 1, 1], opresult354, var_aList, var_modName);
                setLineNumber(299);    // compilenode string
                var string356 = new GraceString("/\n");
                var string359 = new GraceString("          url: /");
                var opresult361 = callmethodChecked(string359, "++", [1], var_link);
                var opresult363 = callmethodChecked(opresult361, "++", [1], string356);
                onSelf = true;
                var call364 = callmethodChecked(this, "add()toList()inModule", [1, 1, 1], opresult363, var_aList, var_modName);
                setLineNumber(300);    // compilenode string
                var string365 = new GraceString("          output: web \n");
                onSelf = true;
                var call366 = callmethodChecked(this, "add()toList()inModule", [1, 1, 1], string365, var_aList, var_modName);
                if343 = call366;
              } else {
                setLineNumber(304);    // compilenode string
                var string367 = new GraceString("\n");
                onSelf = true;
                var call368 = callmethodChecked(this, "add()toList()inModule", [1, 1, 1], string367, var_aList, var_modName);
                setLineNumber(305);    // compilenode string
                var string369 = new GraceString("\"\n");
                var string372 = new GraceString("    - title: \"");
                var opresult374 = callmethodChecked(string372, "++", [1], var_title);
                var opresult376 = callmethodChecked(opresult374, "++", [1], string369);
                onSelf = true;
                var call377 = callmethodChecked(this, "add()toList()inModule", [1, 1, 1], opresult376, var_aList, var_modName);
                setLineNumber(306);    // compilenode string
                var string378 = new GraceString("/\n");
                var string381 = new GraceString("      url: /");
                var opresult383 = callmethodChecked(string381, "++", [1], var_link);
                var opresult385 = callmethodChecked(opresult383, "++", [1], string378);
                onSelf = true;
                var call386 = callmethodChecked(this, "add()toList()inModule", [1, 1, 1], opresult385, var_aList, var_modName);
                setLineNumber(307);    // compilenode string
                var string387 = new GraceString("      output: web \n");
                onSelf = true;
                var call388 = callmethodChecked(this, "add()toList()inModule", [1, 1, 1], string387, var_aList, var_modName);
                if343 = call388;
              }
              setLineNumber(310);    // compilenode identifier
              onSelf = true;
              var call389 = callmethodChecked(this, "contentExistsInFolder:=", [1], GraceTrue);
              return call389;
            };
            func342.paramTypes = [];
            func342.paramTypes.push([type_String, "title"]);
            func342.paramTypes.push([type_String, "link"]);
            func342.paramTypes.push([type_String, "aList"]);
            func342.paramTypes.push([type_String, "modName"]);
            func342.paramCounts = [1, 1, 1, 1];
            obj246.methods["addFile()withLink()toList()inModule"] = func342;
            func342.definitionLine = 293;
            func342.definitionModule = "gracedocMD";
            var func390 = function(argcv) {    // method generate(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_module = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for generate(1)"));
              // Start argument checking
              curarg = 1;
              setLineNumber(313);    // compilenode identifier
              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in generate (arg list 1), which corresponds to parameter module, does not have " + 
                          callmethod(var_String, "asString", [0])._value + "."));
              curarg++;
              // End argument checking
              setModuleName("gracedocMD");
              setLineNumber(315);    // compilenode string
              var string391 = new GraceString("\nGenerating Sidebar... ");
              var call392 = Grace_print(string391);
              var if393 = GraceDone;
              setLineNumber(316);    // compilenode call
              onSelf = true;
              var call394 = callmethodChecked(this, "modSet", [0]);
              var call395 = callmethodChecked(call394, "prefix!", [0]);
              if (Grace_isTrue(call395)) {
                var string396 = new GraceString("Main-1");
                onSelf = true;
                var call397 = callmethodChecked(this, "setModule", [1], string396);
                if393 = call397;
              }
              setLineNumber(319);    // compilenode call
              onSelf = true;
              var call398 = callmethodChecked(this, "moduleList", [0]);
              var call399 = callmethodChecked(call398, "at", [1], var_module);
              var var_mod = call399;
              var call400 = callmethodChecked(superDepth, "outer", [0]);
              onOuter = true;
              onSelf = true;
              var call401 = callmethodChecked(call400, "sidebarModule", [0]);
              if (!Grace_isTrue(callmethod(call401, "match", [1], var_mod)))
                throw new GraceExceptionPacket(TypeErrorObject,
                    new GraceString("initial value of var 'mod' is not of type self.outer.sidebarModule"));
              setLineNumber(324);    // compilenode string
              var string402 = new GraceString("Classes");
              onSelf = true;
              var call403 = callmethodChecked(this, "addSubFolder", [1], string402);
              setLineNumber(325);    // compilenode identifier
              var call404 = callmethodChecked(var_mod, "classFiles", [0]);
              onSelf = true;
              var call406 = callmethodChecked(this, "fileOut", [0]);
              var opresult408 = callmethodChecked(call406, "++", [1], call404);
              onSelf = true;
              var call409 = callmethodChecked(this, "fileOut:=", [1], opresult408);
              setLineNumber(328);    // compilenode string
              var string410 = new GraceString("Types");
              onSelf = true;
              var call411 = callmethodChecked(this, "addSubFolder", [1], string410);
              setLineNumber(329);    // compilenode identifier
              var call412 = callmethodChecked(var_mod, "typeFiles", [0]);
              onSelf = true;
              var call414 = callmethodChecked(this, "fileOut", [0]);
              var opresult416 = callmethodChecked(call414, "++", [1], call412);
              onSelf = true;
              var call417 = callmethodChecked(this, "fileOut:=", [1], opresult416);
              setLineNumber(332);    // compilenode string
              var string418 = new GraceString("/grace-doc-sidebar.yml");
              var call420 = callmethodChecked(var_settings, "outputdir", [0]);
              var string422 = new GraceString("");
              var opresult424 = callmethodChecked(string422, "++", [1], call420);
              var opresult426 = callmethodChecked(opresult424, "++", [1], string418);
              var string427 = new GraceString("w");
              var call428 = callmethodChecked(var_io, "open", [2], opresult426, string427);
              var var_out = call428;
              setLineNumber(333);    // compilenode call
              onSelf = true;
              var call429 = callmethodChecked(this, "fileOut", [0]);
              var call430 = callmethodChecked(var_out, "write", [1], call429);
              setLineNumber(334);    // compilenode identifier
              var call431 = callmethodChecked(var_out, "close", [0]);
              return call431;
            };
            func390.paramTypes = [];
            func390.paramTypes.push([type_String, "module"]);
            func390.paramCounts = [1];
            obj246.methods["generate"] = func390;
            func390.definitionLine = 313;
            func390.definitionModule = "gracedocMD";
            setLineNumber(192);    // compilenode string
            var string432 = new GraceString("entries:\n- title: Sidebar\n  product: Grace Documentation\n  version: 1.0\n  folders:\n\n");
            obj246.data["fileOut"] = string432;
            var reader_gracedocMD_fileOut433 = function() {
              return this.data["fileOut"];
            };
            obj246.methods["fileOut"] = reader_gracedocMD_fileOut433;
            obj246.data["fileOut"] = string432;
            var writer_gracedocMD_fileOut433 = function(argcv, o) {
              this.data["fileOut"] = o;
              return GraceDone;
            };
            obj246.methods["fileOut:="] = writer_gracedocMD_fileOut433;
            reader_gracedocMD_fileOut433.confidential = true;
            writer_gracedocMD_fileOut433.confidential = true;
            if (!Grace_isTrue(callmethod(var_String, "match", [1], string432)))
              throw new GraceExceptionPacket(TypeErrorObject,
                  new GraceString("initial value of var 'fileOut' is not of type String"));
            obj246.mutable = true;
            setLineNumber(193);    // compilenode num
            obj246.data["folderIndent"] = new GraceNum(2);
            var reader_gracedocMD_folderIndent434 = function() {
              return this.data["folderIndent"];
            };
            obj246.methods["folderIndent"] = reader_gracedocMD_folderIndent434;
            obj246.data["folderIndent"] = new GraceNum(2);
            var writer_gracedocMD_folderIndent434 = function(argcv, o) {
              this.data["folderIndent"] = o;
              return GraceDone;
            };
            obj246.methods["folderIndent:="] = writer_gracedocMD_folderIndent434;
            reader_gracedocMD_folderIndent434.confidential = true;
            writer_gracedocMD_folderIndent434.confidential = true;
            obj246.mutable = true;
            setLineNumber(194);    // compilenode num
            obj246.data["fileIndent"] = new GraceNum(4);
            var reader_gracedocMD_fileIndent435 = function() {
              return this.data["fileIndent"];
            };
            obj246.methods["fileIndent"] = reader_gracedocMD_fileIndent435;
            obj246.data["fileIndent"] = new GraceNum(4);
            var writer_gracedocMD_fileIndent435 = function(argcv, o) {
              this.data["fileIndent"] = o;
              return GraceDone;
            };
            obj246.methods["fileIndent:="] = writer_gracedocMD_fileIndent435;
            reader_gracedocMD_fileIndent435.confidential = true;
            writer_gracedocMD_fileIndent435.confidential = true;
            obj246.mutable = true;
            setLineNumber(195);    // compilenode string
            var string436 = new GraceString("");
            obj246.data["classFiles"] = string436;
            var reader_gracedocMD_classFiles437 = function() {
              return this.data["classFiles"];
            };
            obj246.methods["classFiles"] = reader_gracedocMD_classFiles437;
            obj246.data["classFiles"] = string436;
            var writer_gracedocMD_classFiles437 = function(argcv, o) {
              this.data["classFiles"] = o;
              return GraceDone;
            };
            obj246.methods["classFiles:="] = writer_gracedocMD_classFiles437;
            reader_gracedocMD_classFiles437.confidential = true;
            writer_gracedocMD_classFiles437.confidential = true;
            if (!Grace_isTrue(callmethod(var_String, "match", [1], string436)))
              throw new GraceExceptionPacket(TypeErrorObject,
                  new GraceString("initial value of var 'classFiles' is not of type String"));
            obj246.mutable = true;
            setLineNumber(196);    // compilenode string
            var string438 = new GraceString("");
            obj246.data["typeFiles"] = string438;
            var reader_gracedocMD_typeFiles439 = function() {
              return this.data["typeFiles"];
            };
            obj246.methods["typeFiles"] = reader_gracedocMD_typeFiles439;
            obj246.data["typeFiles"] = string438;
            var writer_gracedocMD_typeFiles439 = function(argcv, o) {
              this.data["typeFiles"] = o;
              return GraceDone;
            };
            obj246.methods["typeFiles:="] = writer_gracedocMD_typeFiles439;
            reader_gracedocMD_typeFiles439.confidential = true;
            writer_gracedocMD_typeFiles439.confidential = true;
            if (!Grace_isTrue(callmethod(var_String, "match", [1], string438)))
              throw new GraceExceptionPacket(TypeErrorObject,
                  new GraceString("initial value of var 'typeFiles' is not of type String"));
            obj246.mutable = true;
            setLineNumber(197);    // compilenode identifier
            obj246.data["modSet"] = GraceFalse;
            var reader_gracedocMD_modSet440 = function() {
              return this.data["modSet"];
            };
            obj246.methods["modSet"] = reader_gracedocMD_modSet440;
            obj246.data["modSet"] = GraceFalse;
            var writer_gracedocMD_modSet440 = function(argcv, o) {
              this.data["modSet"] = o;
              return GraceDone;
            };
            obj246.methods["modSet:="] = writer_gracedocMD_modSet440;
            reader_gracedocMD_modSet440.confidential = true;
            writer_gracedocMD_modSet440.confidential = true;
            obj246.mutable = true;
            setLineNumber(198);    // compilenode identifier
            obj246.data["inSubFolder"] = GraceTrue;
            var reader_gracedocMD_inSubFolder441 = function() {
              return this.data["inSubFolder"];
            };
            obj246.methods["inSubFolder"] = reader_gracedocMD_inSubFolder441;
            obj246.data["inSubFolder"] = GraceTrue;
            var writer_gracedocMD_inSubFolder441 = function(argcv, o) {
              this.data["inSubFolder"] = o;
              return GraceDone;
            };
            obj246.methods["inSubFolder:="] = writer_gracedocMD_inSubFolder441;
            reader_gracedocMD_inSubFolder441.confidential = true;
            writer_gracedocMD_inSubFolder441.confidential = true;
            obj246.mutable = true;
            setLineNumber(199);    // compilenode identifier
            obj246.data["contentExistsInFolder"] = GraceFalse;
            var reader_gracedocMD_contentExistsInFolder442 = function() {
              return this.data["contentExistsInFolder"];
            };
            obj246.methods["contentExistsInFolder"] = reader_gracedocMD_contentExistsInFolder442;
            obj246.data["contentExistsInFolder"] = GraceFalse;
            var writer_gracedocMD_contentExistsInFolder442 = function(argcv, o) {
              this.data["contentExistsInFolder"] = o;
              return GraceDone;
            };
            obj246.methods["contentExistsInFolder:="] = writer_gracedocMD_contentExistsInFolder442;
            reader_gracedocMD_contentExistsInFolder442.confidential = true;
            writer_gracedocMD_contentExistsInFolder442.confidential = true;
            obj246.mutable = true;
            setLineNumber(200);    // compilenode array
            var array443 = new Lineup([]);
            var call444 = callmethodChecked(var_prelude, "dictionary", [1], array443);
            obj246.data["moduleList"] = call444;
            var reader_gracedocMD_moduleList445 = function() {
              return this.data["moduleList"];
            };
            obj246.methods["moduleList"] = reader_gracedocMD_moduleList445;
            obj246.data["moduleList"] = call444;
            var writer_gracedocMD_moduleList445 = function(argcv, o) {
              this.data["moduleList"] = o;
              return GraceDone;
            };
            obj246.methods["moduleList:="] = writer_gracedocMD_moduleList445;
            reader_gracedocMD_moduleList445.confidential = true;
            writer_gracedocMD_moduleList445.confidential = true;
            var call446 = callmethodChecked(var_prelude, "dictionary", [0]);
            if (!Grace_isTrue(callmethod(call446, "match", [1], call444)))
              throw new GraceExceptionPacket(TypeErrorObject,
                  new GraceString("initial value of var 'moduleList' is not of type dictionary<self.outer.sidebarModule>"));
            obj246.mutable = true;
            superDepth = origSuperDepth;
          };
          obj_init_246.apply(obj246, []);
          return obj246;
        };
        func245.paramCounts = [0];
        this.methods["sidebarFileGenerator"] = func245;
        func245.definitionLine = 190;
        func245.definitionModule = "gracedocMD";
          var func447 = function(argcv) {    // method sidebarFileGenerator()object
            var curarg = 1;
            var inheritingObject = arguments[curarg++];
            // Start argument processing
            curarg = 1;
            // End argument processing
            setModuleName("gracedocMD");
            var returnTarget = invocationCount;
            invocationCount++;
            var obj448 = Grace_allocObject(GraceObject, "sidebarFileGenerator");
            obj448.definitionModule = "gracedocMD";
            obj448.definitionLine = 190;
            var inho448 = inheritingObject;
            while (inho448.superobj) inho448 = inho448.superobj;
            inho448.superobj = obj448;
            obj448.data = inheritingObject.data;
            if (inheritingObject.hasOwnProperty('_value'))
              obj448._value = inheritingObject._value;
            obj448.outer = this;
            var reader_gracedocMD_outer449 = function() {
              return this.outer;
            };
            obj448.methods["outer"] = reader_gracedocMD_outer449;
            var obj_init_448 = function() {
              var origSuperDepth = superDepth;
              superDepth = obj448;
              var func450 = function(argcv) {    // method add(1)toList(1)inModule(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_string = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for add (arg list 1) of add(1)toList(1)inModule(1)"));
                var var_aList = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toList (arg list 2) of add(1)toList(1)inModule(1)"));
                var var_modName = arguments[curarg];
                curarg++;
                if (argcv[2] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inModule (arg list 3) of add(1)toList(1)inModule(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(204);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in add (arg list 1), which corresponds to parameter string, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in toList (arg list 2), which corresponds to parameter aList, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in inModule (arg list 3), which corresponds to parameter modName, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("gracedocMD");
                setLineNumber(206);    // compilenode vardec
                var var_mod;
                var if451 = GraceDone;
                setLineNumber(209);    // compilenode call
                onSelf = true;
                var call452 = callmethodChecked(this, "moduleList", [0]);
                var call453 = callmethodChecked(call452, "containsKey", [1], var_modName);
                if (Grace_isTrue(call453)) {
                  setLineNumber(210);    // compilenode call
                  onSelf = true;
                  var call454 = callmethodChecked(this, "moduleList", [0]);
                  var call455 = callmethodChecked(call454, "at", [1], var_modName);
                  var_mod = call455;
                  if451 = GraceDone;
                } else {
                  setLineNumber(213);    // compilenode call
                  var call456 = callmethodChecked(superDepth, "outer", [0]);
                  onOuter = true;
                  onSelf = true;
                  var call457 = callmethodChecked(call456, "sidebarModule", [0]);
                  var_mod = call457;
                  setLineNumber(214);    // compilenode identifier
                  var call458 = callmethodChecked(var_mod, "name:=", [1], var_modName);
                  setLineNumber(217);    // compilenode call
                  onSelf = true;
                  var call459 = callmethodChecked(this, "moduleList", [0]);
                  var call460 = callmethodChecked(call459, "at()put", [1, 1], var_modName, var_mod);
                  if451 = call460;
                }
                var if461 = GraceDone;
                setLineNumber(221);    // compilenode identifier
                var opresult464 = callmethodChecked(var_aList, "==", [1], var_classList);
                if (Grace_isTrue(opresult464)) {
                  setLineNumber(223);    // compilenode identifier
                  var call466 = callmethodChecked(var_mod, "classFiles", [0]);
                  var opresult468 = callmethodChecked(call466, "++", [1], var_string);
                  var call469 = callmethodChecked(var_mod, "classFiles:=", [1], opresult468);
                  if461 = call469;
                } else {
                  var if470 = GraceDone;
                  setLineNumber(226);    // compilenode identifier
                  var opresult473 = callmethodChecked(var_aList, "==", [1], var_typeList);
                  if (Grace_isTrue(opresult473)) {
                    setLineNumber(228);    // compilenode identifier
                    var call475 = callmethodChecked(var_mod, "typeFiles", [0]);
                    var opresult477 = callmethodChecked(call475, "++", [1], var_string);
                    var call478 = callmethodChecked(var_mod, "typeFiles:=", [1], opresult477);
                    if470 = call478;
                  } else {
                    setLineNumber(233);    // compilenode call
                    onSelf = true;
                    var call480 = callmethodChecked(this, "fileOut", [0]);
                    var opresult482 = callmethodChecked(call480, "++", [1], var_string);
                    onSelf = true;
                    var call483 = callmethodChecked(this, "fileOut:=", [1], opresult482);
                    if470 = call483;
                  }
                  if461 = if470;
                }
                return if461;
              };
              func450.paramTypes = [];
              func450.paramTypes.push([type_String, "string"]);
              func450.paramTypes.push([type_String, "aList"]);
              func450.paramTypes.push([type_String, "modName"]);
              func450.paramCounts = [1, 1, 1];
              obj448.methods["add()toList()inModule"] = func450;
              func450.definitionLine = 204;
              func450.definitionModule = "gracedocMD";
              var func484 = function(argcv) {    // method setModule(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_name = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for setModule(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(238);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in setModule (arg list 1), which corresponds to parameter name, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("gracedocMD");
                setLineNumber(241);    // compilenode identifier
                onSelf = true;
                var call485 = callmethodChecked(this, "addFolder", [1], var_name);
                setLineNumber(244);    // compilenode identifier
                onSelf = true;
                var call486 = callmethodChecked(this, "modSet:=", [1], GraceTrue);
                return call486;
              };
              func484.paramTypes = [];
              func484.paramTypes.push([type_String, "name"]);
              func484.paramCounts = [1];
              obj448.methods["setModule"] = func484;
              func484.definitionLine = 238;
              func484.definitionModule = "gracedocMD";
              var func487 = function(argcv) {    // method add(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_string = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for add(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(248);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in add (arg list 1), which corresponds to parameter string, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("gracedocMD");
                setLineNumber(250);    // compilenode call
                onSelf = true;
                var call489 = callmethodChecked(this, "fileOut", [0]);
                var opresult491 = callmethodChecked(call489, "++", [1], var_string);
                onSelf = true;
                var call492 = callmethodChecked(this, "fileOut:=", [1], opresult491);
                return call492;
              };
              func487.paramTypes = [];
              func487.paramTypes.push([type_String, "string"]);
              func487.paramCounts = [1];
              obj448.methods["add"] = func487;
              func487.definitionLine = 248;
              func487.definitionModule = "gracedocMD";
              var func493 = function(argcv) {    // method addFolder(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_title = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addFolder(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(254);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in addFolder (arg list 1), which corresponds to parameter title, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("gracedocMD");
                setLineNumber(256);    // compilenode string
                var string494 = new GraceString("\n");
                onSelf = true;
                var call495 = callmethodChecked(this, "add", [1], string494);
                setLineNumber(257);    // compilenode string
                var string496 = new GraceString("\"\n");
                var string499 = new GraceString("  - title: \"");
                var opresult501 = callmethodChecked(string499, "++", [1], var_title);
                var opresult503 = callmethodChecked(opresult501, "++", [1], string496);
                onSelf = true;
                var call504 = callmethodChecked(this, "add", [1], opresult503);
                setLineNumber(258);    // compilenode string
                var string505 = new GraceString("    output: web, pdf\n");
                onSelf = true;
                var call506 = callmethodChecked(this, "add", [1], string505);
                setLineNumber(259);    // compilenode string
                var string507 = new GraceString("    folderitems:\n");
                onSelf = true;
                var call508 = callmethodChecked(this, "add", [1], string507);
                setLineNumber(262);    // compilenode identifier
                onSelf = true;
                var call509 = callmethodChecked(this, "inSubFolder:=", [1], GraceFalse);
                setLineNumber(263);    // compilenode identifier
                onSelf = true;
                var call510 = callmethodChecked(this, "contentExistsInFolder:=", [1], GraceFalse);
                return call510;
              };
              func493.paramTypes = [];
              func493.paramTypes.push([type_String, "title"]);
              func493.paramCounts = [1];
              obj448.methods["addFolder"] = func493;
              func493.definitionLine = 254;
              func493.definitionModule = "gracedocMD";
              var func511 = function(argcv) {    // method signalSubfolders
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for signalSubfolders"));
                setModuleName("gracedocMD");
                var if512 = GraceDone;
                setLineNumber(270);    // compilenode call
                onSelf = true;
                var call513 = callmethodChecked(this, "contentExistsInFolder", [0]);
                var call514 = callmethodChecked(call513, "prefix!", [0]);
                if (Grace_isTrue(call514)) {
                  var string515 = new GraceString("");
                  var string516 = new GraceString("404");
                  var string517 = new GraceString("---");
                  var string518 = new GraceString("-none-");
                  onSelf = true;
                  var call519 = callmethodChecked(this, "addFile()withLink()toList()inModule", [1, 1, 1, 1], string515, string516, string517, string518);
                  if512 = call519;
                }
                setLineNumber(273);    // compilenode string
                var string520 = new GraceString("      subfolders:\n");
                onSelf = true;
                var call521 = callmethodChecked(this, "add", [1], string520);
                return call521;
              };
              func511.paramCounts = [0];
              obj448.methods["signalSubfolders"] = func511;
              func511.definitionLine = 267;
              func511.definitionModule = "gracedocMD";
              var func522 = function(argcv) {    // method addSubFolder(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_title = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addSubFolder(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(277);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in addSubFolder (arg list 1), which corresponds to parameter title, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("gracedocMD");
                var if523 = GraceDone;
                setLineNumber(280);    // compilenode call
                onSelf = true;
                var call524 = callmethodChecked(this, "inSubFolder", [0]);
                var call525 = callmethodChecked(call524, "prefix!", [0]);
                if (Grace_isTrue(call525)) {
                  onSelf = true;
                  var call526 = callmethodChecked(this, "signalSubfolders", [0]);
                  if523 = call526;
                }
                setLineNumber(282);    // compilenode string
                var string527 = new GraceString("\n");
                onSelf = true;
                var call528 = callmethodChecked(this, "add", [1], string527);
                setLineNumber(283);    // compilenode string
                var string529 = new GraceString("\"\n");
                var string532 = new GraceString("      - title: \"");
                var opresult534 = callmethodChecked(string532, "++", [1], var_title);
                var opresult536 = callmethodChecked(opresult534, "++", [1], string529);
                onSelf = true;
                var call537 = callmethodChecked(this, "add", [1], opresult536);
                setLineNumber(284);    // compilenode string
                var string538 = new GraceString("        output: web, pdf\n");
                onSelf = true;
                var call539 = callmethodChecked(this, "add", [1], string538);
                setLineNumber(285);    // compilenode string
                var string540 = new GraceString("        subfolderitems:\n");
                onSelf = true;
                var call541 = callmethodChecked(this, "add", [1], string540);
                setLineNumber(288);    // compilenode identifier
                onSelf = true;
                var call542 = callmethodChecked(this, "inSubFolder:=", [1], GraceTrue);
                setLineNumber(289);    // compilenode identifier
                onSelf = true;
                var call543 = callmethodChecked(this, "contentExistsInFolder:=", [1], GraceFalse);
                return call543;
              };
              func522.paramTypes = [];
              func522.paramTypes.push([type_String, "title"]);
              func522.paramCounts = [1];
              obj448.methods["addSubFolder"] = func522;
              func522.definitionLine = 277;
              func522.definitionModule = "gracedocMD";
              var func544 = function(argcv) {    // method addFile(1)withLink(1)toList(1)inModule(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_title = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addFile (arg list 1) of addFile(1)withLink(1)toList(1)inModule(1)"));
                var var_link = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for withLink (arg list 2) of addFile(1)withLink(1)toList(1)inModule(1)"));
                var var_aList = arguments[curarg];
                curarg++;
                if (argcv[2] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toList (arg list 3) of addFile(1)withLink(1)toList(1)inModule(1)"));
                var var_modName = arguments[curarg];
                curarg++;
                if (argcv[3] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inModule (arg list 4) of addFile(1)withLink(1)toList(1)inModule(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(293);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in addFile (arg list 1), which corresponds to parameter title, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in withLink (arg list 2), which corresponds to parameter link, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in toList (arg list 3), which corresponds to parameter aList, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in inModule (arg list 4), which corresponds to parameter modName, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("gracedocMD");
                var if545 = GraceDone;
                setLineNumber(295);    // compilenode call
                onSelf = true;
                var call546 = callmethodChecked(this, "inSubFolder", [0]);
                if (Grace_isTrue(call546)) {
                  setLineNumber(297);    // compilenode string
                  var string547 = new GraceString("\n");
                  onSelf = true;
                  var call548 = callmethodChecked(this, "add()toList()inModule", [1, 1, 1], string547, var_aList, var_modName);
                  setLineNumber(298);    // compilenode string
                  var string549 = new GraceString("\"\n");
                  var string552 = new GraceString("        - title: \"");
                  var opresult554 = callmethodChecked(string552, "++", [1], var_title);
                  var opresult556 = callmethodChecked(opresult554, "++", [1], string549);
                  onSelf = true;
                  var call557 = callmethodChecked(this, "add()toList()inModule", [1, 1, 1], opresult556, var_aList, var_modName);
                  setLineNumber(299);    // compilenode string
                  var string558 = new GraceString("/\n");
                  var string561 = new GraceString("          url: /");
                  var opresult563 = callmethodChecked(string561, "++", [1], var_link);
                  var opresult565 = callmethodChecked(opresult563, "++", [1], string558);
                  onSelf = true;
                  var call566 = callmethodChecked(this, "add()toList()inModule", [1, 1, 1], opresult565, var_aList, var_modName);
                  setLineNumber(300);    // compilenode string
                  var string567 = new GraceString("          output: web \n");
                  onSelf = true;
                  var call568 = callmethodChecked(this, "add()toList()inModule", [1, 1, 1], string567, var_aList, var_modName);
                  if545 = call568;
                } else {
                  setLineNumber(304);    // compilenode string
                  var string569 = new GraceString("\n");
                  onSelf = true;
                  var call570 = callmethodChecked(this, "add()toList()inModule", [1, 1, 1], string569, var_aList, var_modName);
                  setLineNumber(305);    // compilenode string
                  var string571 = new GraceString("\"\n");
                  var string574 = new GraceString("    - title: \"");
                  var opresult576 = callmethodChecked(string574, "++", [1], var_title);
                  var opresult578 = callmethodChecked(opresult576, "++", [1], string571);
                  onSelf = true;
                  var call579 = callmethodChecked(this, "add()toList()inModule", [1, 1, 1], opresult578, var_aList, var_modName);
                  setLineNumber(306);    // compilenode string
                  var string580 = new GraceString("/\n");
                  var string583 = new GraceString("      url: /");
                  var opresult585 = callmethodChecked(string583, "++", [1], var_link);
                  var opresult587 = callmethodChecked(opresult585, "++", [1], string580);
                  onSelf = true;
                  var call588 = callmethodChecked(this, "add()toList()inModule", [1, 1, 1], opresult587, var_aList, var_modName);
                  setLineNumber(307);    // compilenode string
                  var string589 = new GraceString("      output: web \n");
                  onSelf = true;
                  var call590 = callmethodChecked(this, "add()toList()inModule", [1, 1, 1], string589, var_aList, var_modName);
                  if545 = call590;
                }
                setLineNumber(310);    // compilenode identifier
                onSelf = true;
                var call591 = callmethodChecked(this, "contentExistsInFolder:=", [1], GraceTrue);
                return call591;
              };
              func544.paramTypes = [];
              func544.paramTypes.push([type_String, "title"]);
              func544.paramTypes.push([type_String, "link"]);
              func544.paramTypes.push([type_String, "aList"]);
              func544.paramTypes.push([type_String, "modName"]);
              func544.paramCounts = [1, 1, 1, 1];
              obj448.methods["addFile()withLink()toList()inModule"] = func544;
              func544.definitionLine = 293;
              func544.definitionModule = "gracedocMD";
              var func592 = function(argcv) {    // method generate(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_module = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for generate(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(313);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in generate (arg list 1), which corresponds to parameter module, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("gracedocMD");
                setLineNumber(315);    // compilenode string
                var string593 = new GraceString("\nGenerating Sidebar... ");
                var call594 = Grace_print(string593);
                var if595 = GraceDone;
                setLineNumber(316);    // compilenode call
                onSelf = true;
                var call596 = callmethodChecked(this, "modSet", [0]);
                var call597 = callmethodChecked(call596, "prefix!", [0]);
                if (Grace_isTrue(call597)) {
                  var string598 = new GraceString("Main-1");
                  onSelf = true;
                  var call599 = callmethodChecked(this, "setModule", [1], string598);
                  if595 = call599;
                }
                setLineNumber(319);    // compilenode call
                onSelf = true;
                var call600 = callmethodChecked(this, "moduleList", [0]);
                var call601 = callmethodChecked(call600, "at", [1], var_module);
                var var_mod = call601;
                var call602 = callmethodChecked(superDepth, "outer", [0]);
                onOuter = true;
                onSelf = true;
                var call603 = callmethodChecked(call602, "sidebarModule", [0]);
                if (!Grace_isTrue(callmethod(call603, "match", [1], var_mod)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("initial value of var 'mod' is not of type self.outer.sidebarModule"));
                setLineNumber(324);    // compilenode string
                var string604 = new GraceString("Classes");
                onSelf = true;
                var call605 = callmethodChecked(this, "addSubFolder", [1], string604);
                setLineNumber(325);    // compilenode identifier
                var call606 = callmethodChecked(var_mod, "classFiles", [0]);
                onSelf = true;
                var call608 = callmethodChecked(this, "fileOut", [0]);
                var opresult610 = callmethodChecked(call608, "++", [1], call606);
                onSelf = true;
                var call611 = callmethodChecked(this, "fileOut:=", [1], opresult610);
                setLineNumber(328);    // compilenode string
                var string612 = new GraceString("Types");
                onSelf = true;
                var call613 = callmethodChecked(this, "addSubFolder", [1], string612);
                setLineNumber(329);    // compilenode identifier
                var call614 = callmethodChecked(var_mod, "typeFiles", [0]);
                onSelf = true;
                var call616 = callmethodChecked(this, "fileOut", [0]);
                var opresult618 = callmethodChecked(call616, "++", [1], call614);
                onSelf = true;
                var call619 = callmethodChecked(this, "fileOut:=", [1], opresult618);
                setLineNumber(332);    // compilenode string
                var string620 = new GraceString("/grace-doc-sidebar.yml");
                var call622 = callmethodChecked(var_settings, "outputdir", [0]);
                var string624 = new GraceString("");
                var opresult626 = callmethodChecked(string624, "++", [1], call622);
                var opresult628 = callmethodChecked(opresult626, "++", [1], string620);
                var string629 = new GraceString("w");
                var call630 = callmethodChecked(var_io, "open", [2], opresult628, string629);
                var var_out = call630;
                setLineNumber(333);    // compilenode call
                onSelf = true;
                var call631 = callmethodChecked(this, "fileOut", [0]);
                var call632 = callmethodChecked(var_out, "write", [1], call631);
                setLineNumber(334);    // compilenode identifier
                var call633 = callmethodChecked(var_out, "close", [0]);
                return call633;
              };
              func592.paramTypes = [];
              func592.paramTypes.push([type_String, "module"]);
              func592.paramCounts = [1];
              obj448.methods["generate"] = func592;
              func592.definitionLine = 313;
              func592.definitionModule = "gracedocMD";
              setLineNumber(192);    // compilenode string
              var string634 = new GraceString("entries:\n- title: Sidebar\n  product: Grace Documentation\n  version: 1.0\n  folders:\n\n");
              obj448.data["fileOut"] = string634;
              var reader_gracedocMD_fileOut635 = function() {
                return this.data["fileOut"];
              };
              obj448.methods["fileOut"] = reader_gracedocMD_fileOut635;
              obj448.data["fileOut"] = string634;
              var writer_gracedocMD_fileOut635 = function(argcv, o) {
                this.data["fileOut"] = o;
                return GraceDone;
              };
              obj448.methods["fileOut:="] = writer_gracedocMD_fileOut635;
              reader_gracedocMD_fileOut635.confidential = true;
              writer_gracedocMD_fileOut635.confidential = true;
              if (!Grace_isTrue(callmethod(var_String, "match", [1], string634)))
                throw new GraceExceptionPacket(TypeErrorObject,
                    new GraceString("initial value of var 'fileOut' is not of type String"));
              obj448.mutable = true;
              setLineNumber(193);    // compilenode num
              obj448.data["folderIndent"] = new GraceNum(2);
              var reader_gracedocMD_folderIndent636 = function() {
                return this.data["folderIndent"];
              };
              obj448.methods["folderIndent"] = reader_gracedocMD_folderIndent636;
              obj448.data["folderIndent"] = new GraceNum(2);
              var writer_gracedocMD_folderIndent636 = function(argcv, o) {
                this.data["folderIndent"] = o;
                return GraceDone;
              };
              obj448.methods["folderIndent:="] = writer_gracedocMD_folderIndent636;
              reader_gracedocMD_folderIndent636.confidential = true;
              writer_gracedocMD_folderIndent636.confidential = true;
              obj448.mutable = true;
              setLineNumber(194);    // compilenode num
              obj448.data["fileIndent"] = new GraceNum(4);
              var reader_gracedocMD_fileIndent637 = function() {
                return this.data["fileIndent"];
              };
              obj448.methods["fileIndent"] = reader_gracedocMD_fileIndent637;
              obj448.data["fileIndent"] = new GraceNum(4);
              var writer_gracedocMD_fileIndent637 = function(argcv, o) {
                this.data["fileIndent"] = o;
                return GraceDone;
              };
              obj448.methods["fileIndent:="] = writer_gracedocMD_fileIndent637;
              reader_gracedocMD_fileIndent637.confidential = true;
              writer_gracedocMD_fileIndent637.confidential = true;
              obj448.mutable = true;
              setLineNumber(195);    // compilenode string
              var string638 = new GraceString("");
              obj448.data["classFiles"] = string638;
              var reader_gracedocMD_classFiles639 = function() {
                return this.data["classFiles"];
              };
              obj448.methods["classFiles"] = reader_gracedocMD_classFiles639;
              obj448.data["classFiles"] = string638;
              var writer_gracedocMD_classFiles639 = function(argcv, o) {
                this.data["classFiles"] = o;
                return GraceDone;
              };
              obj448.methods["classFiles:="] = writer_gracedocMD_classFiles639;
              reader_gracedocMD_classFiles639.confidential = true;
              writer_gracedocMD_classFiles639.confidential = true;
              if (!Grace_isTrue(callmethod(var_String, "match", [1], string638)))
                throw new GraceExceptionPacket(TypeErrorObject,
                    new GraceString("initial value of var 'classFiles' is not of type String"));
              obj448.mutable = true;
              setLineNumber(196);    // compilenode string
              var string640 = new GraceString("");
              obj448.data["typeFiles"] = string640;
              var reader_gracedocMD_typeFiles641 = function() {
                return this.data["typeFiles"];
              };
              obj448.methods["typeFiles"] = reader_gracedocMD_typeFiles641;
              obj448.data["typeFiles"] = string640;
              var writer_gracedocMD_typeFiles641 = function(argcv, o) {
                this.data["typeFiles"] = o;
                return GraceDone;
              };
              obj448.methods["typeFiles:="] = writer_gracedocMD_typeFiles641;
              reader_gracedocMD_typeFiles641.confidential = true;
              writer_gracedocMD_typeFiles641.confidential = true;
              if (!Grace_isTrue(callmethod(var_String, "match", [1], string640)))
                throw new GraceExceptionPacket(TypeErrorObject,
                    new GraceString("initial value of var 'typeFiles' is not of type String"));
              obj448.mutable = true;
              setLineNumber(197);    // compilenode identifier
              obj448.data["modSet"] = GraceFalse;
              var reader_gracedocMD_modSet642 = function() {
                return this.data["modSet"];
              };
              obj448.methods["modSet"] = reader_gracedocMD_modSet642;
              obj448.data["modSet"] = GraceFalse;
              var writer_gracedocMD_modSet642 = function(argcv, o) {
                this.data["modSet"] = o;
                return GraceDone;
              };
              obj448.methods["modSet:="] = writer_gracedocMD_modSet642;
              reader_gracedocMD_modSet642.confidential = true;
              writer_gracedocMD_modSet642.confidential = true;
              obj448.mutable = true;
              setLineNumber(198);    // compilenode identifier
              obj448.data["inSubFolder"] = GraceTrue;
              var reader_gracedocMD_inSubFolder643 = function() {
                return this.data["inSubFolder"];
              };
              obj448.methods["inSubFolder"] = reader_gracedocMD_inSubFolder643;
              obj448.data["inSubFolder"] = GraceTrue;
              var writer_gracedocMD_inSubFolder643 = function(argcv, o) {
                this.data["inSubFolder"] = o;
                return GraceDone;
              };
              obj448.methods["inSubFolder:="] = writer_gracedocMD_inSubFolder643;
              reader_gracedocMD_inSubFolder643.confidential = true;
              writer_gracedocMD_inSubFolder643.confidential = true;
              obj448.mutable = true;
              setLineNumber(199);    // compilenode identifier
              obj448.data["contentExistsInFolder"] = GraceFalse;
              var reader_gracedocMD_contentExistsInFolder644 = function() {
                return this.data["contentExistsInFolder"];
              };
              obj448.methods["contentExistsInFolder"] = reader_gracedocMD_contentExistsInFolder644;
              obj448.data["contentExistsInFolder"] = GraceFalse;
              var writer_gracedocMD_contentExistsInFolder644 = function(argcv, o) {
                this.data["contentExistsInFolder"] = o;
                return GraceDone;
              };
              obj448.methods["contentExistsInFolder:="] = writer_gracedocMD_contentExistsInFolder644;
              reader_gracedocMD_contentExistsInFolder644.confidential = true;
              writer_gracedocMD_contentExistsInFolder644.confidential = true;
              obj448.mutable = true;
              setLineNumber(200);    // compilenode array
              var array645 = new Lineup([]);
              var call646 = callmethodChecked(var_prelude, "dictionary", [1], array645);
              obj448.data["moduleList"] = call646;
              var reader_gracedocMD_moduleList647 = function() {
                return this.data["moduleList"];
              };
              obj448.methods["moduleList"] = reader_gracedocMD_moduleList647;
              obj448.data["moduleList"] = call646;
              var writer_gracedocMD_moduleList647 = function(argcv, o) {
                this.data["moduleList"] = o;
                return GraceDone;
              };
              obj448.methods["moduleList:="] = writer_gracedocMD_moduleList647;
              reader_gracedocMD_moduleList647.confidential = true;
              writer_gracedocMD_moduleList647.confidential = true;
              var call648 = callmethodChecked(var_prelude, "dictionary", [0]);
              if (!Grace_isTrue(callmethod(call648, "match", [1], call646)))
                throw new GraceExceptionPacket(TypeErrorObject,
                    new GraceString("initial value of var 'moduleList' is not of type dictionary<self.outer.sidebarModule>"));
              obj448.mutable = true;
              superDepth = origSuperDepth;
            };
            obj_init_448.apply(inheritingObject, []);
            return obj448;
            };
            this.methods["sidebarFileGenerator()object"] = func447;
          setLineNumber(340);    // compilenode method
          var func649 = function(argcv) {    // method markdownWriter
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            if (argcv[0] !== 0)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for markdownWriter"));
            setModuleName("gracedocMD");
            var obj650 = Grace_allocObject(GraceObject, "gracedocMD.markdownWriter");
            obj650.definitionModule = "gracedocMD";
            obj650.definitionLine = 340;
            obj650.outer = this;
            var reader_gracedocMD_outer651 = function() {
              return this.outer;
            };
            obj650.methods["outer"] = reader_gracedocMD_outer651;
            var obj_init_650 = function() {
              var origSuperDepth = superDepth;
              superDepth = obj650;
              var func652 = function(argcv) {    // method insertDef(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_text = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for insertDef(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(349);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in insertDef (arg list 1), which corresponds to parameter text, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("gracedocMD");
                setLineNumber(351);    // compilenode call
                onSelf = true;
                var call654 = callmethodChecked(this, "definition", [0]);
                var opresult656 = callmethodChecked(call654, "++", [1], var_text);
                onSelf = true;
                var call657 = callmethodChecked(this, "definition:=", [1], opresult656);
                setLineNumber(352);    // compilenode string
                var string658 = new GraceString("\n\n Inserted to definition");
                var call659 = Grace_print(string658);
                return call659;
              };
              func652.paramTypes = [];
              func652.paramTypes.push([type_String, "text"]);
              func652.paramCounts = [1];
              obj650.methods["insertDef"] = func652;
              func652.definitionLine = 349;
              func652.definitionModule = "gracedocMD";
              var func660 = function(argcv) {    // method insertDesc(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_text = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for insertDesc(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(356);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in insertDesc (arg list 1), which corresponds to parameter text, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("gracedocMD");
                setLineNumber(358);    // compilenode call
                onSelf = true;
                var call662 = callmethodChecked(this, "description", [0]);
                var opresult664 = callmethodChecked(call662, "++", [1], var_text);
                onSelf = true;
                var call665 = callmethodChecked(this, "description:=", [1], opresult664);
                setLineNumber(359);    // compilenode string
                var string666 = new GraceString("\n\n Inserted to description");
                var call667 = Grace_print(string666);
                return call667;
              };
              func660.paramTypes = [];
              func660.paramTypes.push([type_String, "text"]);
              func660.paramCounts = [1];
              obj650.methods["insertDesc"] = func660;
              func660.definitionLine = 356;
              func660.definitionModule = "gracedocMD";
              var func668 = function(argcv) {    // method addProp(1)withDesc(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_aTitle = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addProp (arg list 1) of addProp(1)withDesc(1)"));
                var var_desc = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for withDesc (arg list 2) of addProp(1)withDesc(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(363);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in addProp (arg list 1), which corresponds to parameter aTitle, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in withDesc (arg list 2), which corresponds to parameter desc, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("gracedocMD");
                setLineNumber(366);    // compilenode call
                var call669 = callmethodChecked(superDepth, "outer", [0]);
                onOuter = true;
                onSelf = true;
                var call670 = callmethodChecked(call669, "Property", [0]);
                var var_newProp = call670;
                setLineNumber(369);    // compilenode identifier
                var call671 = callmethodChecked(var_newProp, "title:=", [1], var_aTitle);
                setLineNumber(370);    // compilenode identifier
                var call672 = callmethodChecked(var_newProp, "description:=", [1], var_desc);
                setLineNumber(373);    // compilenode call
                onSelf = true;
                var call673 = callmethodChecked(this, "propSet", [0]);
                var call674 = callmethodChecked(call673, "add", [1], var_newProp);
                setLineNumber(375);    // compilenode string
                var string675 = new GraceString("added prop");
                var call676 = Grace_print(string675);
                return call676;
              };
              func668.paramTypes = [];
              func668.paramTypes.push([type_String, "aTitle"]);
              func668.paramTypes.push([type_String, "desc"]);
              func668.paramCounts = [1, 1];
              obj650.methods["addProp()withDesc"] = func668;
              func668.definitionLine = 363;
              func668.definitionModule = "gracedocMD";
              var func677 = function(argcv) {    // method changeMode(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_newMode = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for changeMode(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(380);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in changeMode (arg list 1), which corresponds to parameter newMode, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("gracedocMD");
                var if678 = GraceDone;
                setLineNumber(383);    // compilenode call
                onSelf = true;
                var call680 = callmethodChecked(this, "currentMode", [0]);
                var opresult682 = callmethodChecked(call680, "==", [1], var_plain);
                var opresult686 = callmethodChecked(var_newMode, "==", [1], var_code);
                var opresult688 = callmethodChecked(opresult686, "&&", [1], opresult682);
                if (Grace_isTrue(opresult688)) {
                  var string689 = new GraceString("`");
                  onSelf = true;
                  var call691 = callmethodChecked(this, "bin", [0]);
                  var opresult693 = callmethodChecked(call691, "++", [1], string689);
                  onSelf = true;
                  var call694 = callmethodChecked(this, "bin:=", [1], opresult693);
                  if678 = call694;
                }
                var if695 = GraceDone;
                setLineNumber(384);    // compilenode call
                onSelf = true;
                var call697 = callmethodChecked(this, "currentMode", [0]);
                var opresult699 = callmethodChecked(call697, "==", [1], var_heading);
                var opresult703 = callmethodChecked(var_newMode, "==", [1], var_code);
                var opresult705 = callmethodChecked(opresult703, "&&", [1], opresult699);
                if (Grace_isTrue(opresult705)) {
                  var string706 = new GraceString("`");
                  onSelf = true;
                  var call708 = callmethodChecked(this, "bin", [0]);
                  var opresult710 = callmethodChecked(call708, "++", [1], string706);
                  onSelf = true;
                  var call711 = callmethodChecked(this, "bin:=", [1], opresult710);
                  if695 = call711;
                }
                var if712 = GraceDone;
                setLineNumber(387);    // compilenode call
                onSelf = true;
                var call714 = callmethodChecked(this, "currentMode", [0]);
                var opresult716 = callmethodChecked(call714, "==", [1], var_code);
                var opresult720 = callmethodChecked(var_newMode, "==", [1], var_plain);
                var opresult722 = callmethodChecked(opresult720, "&&", [1], opresult716);
                if (Grace_isTrue(opresult722)) {
                  var string723 = new GraceString("`");
                  onSelf = true;
                  var call725 = callmethodChecked(this, "bin", [0]);
                  var opresult727 = callmethodChecked(call725, "++", [1], string723);
                  onSelf = true;
                  var call728 = callmethodChecked(this, "bin:=", [1], opresult727);
                  if712 = call728;
                }
                var if729 = GraceDone;
                setLineNumber(391);    // compilenode call
                onSelf = true;
                var call731 = callmethodChecked(this, "currentMode", [0]);
                var opresult733 = callmethodChecked(call731, "==", [1], var_code);
                var opresult737 = callmethodChecked(var_newMode, "==", [1], var_heading);
                var opresult739 = callmethodChecked(opresult737, "&&", [1], opresult733);
                if (Grace_isTrue(opresult739)) {
                  var string740 = new GraceString("`\n");
                  onSelf = true;
                  var call742 = callmethodChecked(this, "bin", [0]);
                  var opresult744 = callmethodChecked(call742, "++", [1], string740);
                  onSelf = true;
                  var call745 = callmethodChecked(this, "bin:=", [1], opresult744);
                  if729 = call745;
                }
                var if746 = GraceDone;
                setLineNumber(392);    // compilenode identifier
                var opresult749 = callmethodChecked(var_newMode, "==", [1], var_heading);
                if (Grace_isTrue(opresult749)) {
                  var string750 = new GraceString("\n### ");
                  onSelf = true;
                  var call752 = callmethodChecked(this, "bin", [0]);
                  var opresult754 = callmethodChecked(call752, "++", [1], string750);
                  onSelf = true;
                  var call755 = callmethodChecked(this, "bin:=", [1], opresult754);
                  if746 = call755;
                }
                setLineNumber(396);    // compilenode identifier
                onSelf = true;
                var call756 = callmethodChecked(this, "currentMode:=", [1], var_newMode);
                return call756;
              };
              func677.paramTypes = [];
              func677.paramTypes.push([type_String, "newMode"]);
              func677.paramCounts = [1];
              obj650.methods["changeMode"] = func677;
              func677.definitionLine = 380;
              func677.definitionModule = "gracedocMD";
              var func757 = function(argcv) {    // method addText(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_string = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addText(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(400);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in addText (arg list 1), which corresponds to parameter string, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("gracedocMD");
                onSelf = true;
                var call759 = callmethodChecked(this, "bin", [0]);
                var opresult761 = callmethodChecked(call759, "++", [1], var_string);
                onSelf = true;
                var call762 = callmethodChecked(this, "bin:=", [1], opresult761);
                return call762;
              };
              func757.paramTypes = [];
              func757.paramTypes.push([type_String, "string"]);
              func757.paramCounts = [1];
              obj650.methods["addText"] = func757;
              func757.definitionLine = 400;
              func757.definitionModule = "gracedocMD";
              var func763 = function(argcv) {    // method addText(1)inMode(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_string = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addText (arg list 1) of addText(1)inMode(1)"));
                var var_mode = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inMode (arg list 2) of addText(1)inMode(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(403);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in addText (arg list 1), which corresponds to parameter string, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in inMode (arg list 2), which corresponds to parameter mode, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("gracedocMD");
                setLineNumber(406);    // compilenode identifier
                onSelf = true;
                var call764 = callmethodChecked(this, "changeMode", [1], var_mode);
                setLineNumber(408);    // compilenode call
                onSelf = true;
                var call766 = callmethodChecked(this, "bin", [0]);
                var opresult768 = callmethodChecked(call766, "++", [1], var_string);
                onSelf = true;
                var call769 = callmethodChecked(this, "bin:=", [1], opresult768);
                var if770 = GraceDone;
                setLineNumber(411);    // compilenode identifier
                var opresult773 = callmethodChecked(var_mode, "==", [1], var_heading);
                if (Grace_isTrue(opresult773)) {
                  var string774 = new GraceString("\n");
                  onSelf = true;
                  var call776 = callmethodChecked(this, "bin", [0]);
                  var opresult778 = callmethodChecked(call776, "++", [1], string774);
                  onSelf = true;
                  var call779 = callmethodChecked(this, "bin:=", [1], opresult778);
                  if770 = call779;
                }
                return if770;
              };
              func763.paramTypes = [];
              func763.paramTypes.push([type_String, "string"]);
              func763.paramTypes.push([type_String, "mode"]);
              func763.paramCounts = [1, 1];
              obj650.methods["addText()inMode"] = func763;
              func763.definitionLine = 403;
              func763.definitionModule = "gracedocMD";
              var func780 = function(argcv) {    // method addCode(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_string = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addCode(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(414);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in addCode (arg list 1), which corresponds to parameter string, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("gracedocMD");
                setLineNumber(416);    // compilenode string
                var string781 = new GraceString("`");
                var string784 = new GraceString("`");
                onSelf = true;
                var call786 = callmethodChecked(this, "bin", [0]);
                var opresult788 = callmethodChecked(call786, "++", [1], string784);
                var opresult790 = callmethodChecked(opresult788, "++", [1], var_string);
                var opresult792 = callmethodChecked(opresult790, "++", [1], string781);
                onSelf = true;
                var call793 = callmethodChecked(this, "bin:=", [1], opresult792);
                return call793;
              };
              func780.paramTypes = [];
              func780.paramTypes.push([type_String, "string"]);
              func780.paramCounts = [1];
              obj650.methods["addCode"] = func780;
              func780.definitionLine = 414;
              func780.definitionModule = "gracedocMD";
              var func794 = function(argcv) {    // method addLink(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_string = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addLink(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(419);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in addLink (arg list 1), which corresponds to parameter string, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("gracedocMD");
                setLineNumber(421);    // compilenode call
                onSelf = true;
                var call796 = callmethodChecked(this, "bin", [0]);
                var opresult798 = callmethodChecked(call796, "++", [1], var_string);
                onSelf = true;
                var call799 = callmethodChecked(this, "bin:=", [1], opresult798);
                return call799;
              };
              func794.paramTypes = [];
              func794.paramTypes.push([type_String, "string"]);
              func794.paramCounts = [1];
              obj650.methods["addLink"] = func794;
              func794.definitionLine = 419;
              func794.definitionModule = "gracedocMD";
              var func800 = function(argcv) {    // method addHeader(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_string = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addHeader(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(424);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in addHeader (arg list 1), which corresponds to parameter string, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("gracedocMD");
                setLineNumber(426);    // compilenode string
                var string801 = new GraceString("\n");
                onSelf = true;
                var call804 = callmethodChecked(this, "bin", [0]);
                var opresult806 = callmethodChecked(call804, "++", [1], var_string);
                var opresult808 = callmethodChecked(opresult806, "++", [1], string801);
                onSelf = true;
                var call809 = callmethodChecked(this, "bin:=", [1], opresult808);
                return call809;
              };
              func800.paramTypes = [];
              func800.paramTypes.push([type_String, "string"]);
              func800.paramCounts = [1];
              obj650.methods["addHeader"] = func800;
              func800.definitionLine = 424;
              func800.definitionModule = "gracedocMD";
              var func810 = function(argcv) {    // method add(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_string = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for add(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(429);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in add (arg list 1), which corresponds to parameter string, does not have " + 
                            callmethod(var_String, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("gracedocMD");
                onSelf = true;
                var call812 = callmethodChecked(this, "bin", [0]);
                var opresult814 = callmethodChecked(call812, "++", [1], var_string);
                onSelf = true;
                var call815 = callmethodChecked(this, "bin:=", [1], opresult814);
                return call815;
              };
              func810.paramTypes = [];
              func810.paramTypes.push([type_String, "string"]);
              func810.paramCounts = [1];
              obj650.methods["add"] = func810;
              func810.definitionLine = 429;
              func810.definitionModule = "gracedocMD";
              var func816 = function(argcv) {    // method addSpace
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addSpace"));
                setModuleName("gracedocMD");
                setLineNumber(431);    // compilenode string
                var string817 = new GraceString(" ");
                onSelf = true;
                var call819 = callmethodChecked(this, "bin", [0]);
                var opresult821 = callmethodChecked(call819, "++", [1], string817);
                onSelf = true;
                var call822 = callmethodChecked(this, "bin:=", [1], opresult821);
                return call822;
              };
              func816.paramCounts = [0];
              obj650.methods["addSpace"] = func816;
              func816.definitionLine = 431;
              func816.definitionModule = "gracedocMD";
              var func823 = function(argcv) {    // method addColon
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addColon"));
                setModuleName("gracedocMD");
                setLineNumber(432);    // compilenode string
                var string824 = new GraceString(":");
                onSelf = true;
                var call826 = callmethodChecked(this, "bin", [0]);
                var opresult828 = callmethodChecked(call826, "++", [1], string824);
                onSelf = true;
                var call829 = callmethodChecked(this, "bin:=", [1], opresult828);
                return call829;
              };
              func823.paramCounts = [0];
              obj650.methods["addColon"] = func823;
              func823.definitionLine = 432;
              func823.definitionModule = "gracedocMD";
              var func830 = function(argcv) {    // method addComma
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addComma"));
                setModuleName("gracedocMD");
                setLineNumber(433);    // compilenode string
                var string831 = new GraceString(",");
                onSelf = true;
                var call833 = callmethodChecked(this, "bin", [0]);
                var opresult835 = callmethodChecked(call833, "++", [1], string831);
                onSelf = true;
                var call836 = callmethodChecked(this, "bin:=", [1], opresult835);
                return call836;
              };
              func830.paramCounts = [0];
              obj650.methods["addComma"] = func830;
              func830.definitionLine = 433;
              func830.definitionModule = "gracedocMD";
              var func837 = function(argcv) {    // method addBullet
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addBullet"));
                setModuleName("gracedocMD");
                setLineNumber(434);    // compilenode string
                var string838 = new GraceString("- ");
                onSelf = true;
                var call840 = callmethodChecked(this, "bin", [0]);
                var opresult842 = callmethodChecked(call840, "++", [1], string838);
                onSelf = true;
                var call843 = callmethodChecked(this, "bin:=", [1], opresult842);
                return call843;
              };
              func837.paramCounts = [0];
              obj650.methods["addBullet"] = func837;
              func837.definitionLine = 434;
              func837.definitionModule = "gracedocMD";
              var func844 = function(argcv) {    // method addNewline
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addNewline"));
                setModuleName("gracedocMD");
                setLineNumber(439);    // compilenode identifier
                onSelf = true;
                var call845 = callmethodChecked(this, "changeMode", [1], var_plain);
                setLineNumber(440);    // compilenode string
                var string846 = new GraceString("  \n");
                onSelf = true;
                var call848 = callmethodChecked(this, "bin", [0]);
                var opresult850 = callmethodChecked(call848, "++", [1], string846);
                onSelf = true;
                var call851 = callmethodChecked(this, "bin:=", [1], opresult850);
                return call851;
              };
              func844.paramCounts = [0];
              obj650.methods["addNewline"] = func844;
              func844.definitionLine = 437;
              func844.definitionModule = "gracedocMD";
              var func852 = function(argcv) {    // method buildMarkdown
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for buildMarkdown"));
                setModuleName("gracedocMD");
                setLineNumber(447);    // compilenode string
                var string853 = new GraceString("### Definition \n");
                var var_temp = string853;
                setLineNumber(448);    // compilenode call
                onSelf = true;
                var call854 = callmethodChecked(this, "definition", [0]);
                var opresult857 = callmethodChecked(var_temp, "++", [1], call854);
                var_temp = opresult857;
                setLineNumber(449);    // compilenode string
                var string858 = new GraceString("\n\n### Description\n");
                var opresult861 = callmethodChecked(var_temp, "++", [1], string858);
                var_temp = opresult861;
                setLineNumber(450);    // compilenode call
                onSelf = true;
                var call862 = callmethodChecked(this, "description", [0]);
                var opresult865 = callmethodChecked(var_temp, "++", [1], call862);
                var_temp = opresult865;
                setLineNumber(452);    // compilenode identifier
                var call866 = Grace_print(var_temp);
                setLineNumber(453);    // compilenode identifier
                return var_temp;
              };
              func852.paramCounts = [0];
              obj650.methods["buildMarkdown"] = func852;
              func852.definitionLine = 445;
              func852.definitionModule = "gracedocMD";
              var func867 = function(argcv) {    // method dumpBin
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for dumpBin"));
                setModuleName("gracedocMD");
                setLineNumber(461);    // compilenode identifier
                onSelf = true;
                var call868 = callmethodChecked(this, "currentMode:=", [1], var_plain);
                setLineNumber(462);    // compilenode call
                onSelf = true;
                var call869 = callmethodChecked(this, "bin", [0]);
                var var_temp = call869;
                setLineNumber(463);    // compilenode string
                var string870 = new GraceString("");
                onSelf = true;
                var call871 = callmethodChecked(this, "bin:=", [1], string870);
                setLineNumber(464);    // compilenode identifier
                return var_temp;
              };
              func867.paramCounts = [0];
              obj650.methods["dumpBin"] = func867;
              func867.definitionLine = 458;
              func867.definitionModule = "gracedocMD";
              setLineNumber(342);    // compilenode string
              var string872 = new GraceString("");
              obj650.data["definition"] = string872;
              var reader_gracedocMD_definition873 = function() {
                return this.data["definition"];
              };
              obj650.methods["definition"] = reader_gracedocMD_definition873;
              obj650.data["definition"] = string872;
              var writer_gracedocMD_definition873 = function(argcv, o) {
                this.data["definition"] = o;
                return GraceDone;
              };
              obj650.methods["definition:="] = writer_gracedocMD_definition873;
              writer_gracedocMD_definition873.confidential = true;
              if (!Grace_isTrue(callmethod(var_String, "match", [1], string872)))
                throw new GraceExceptionPacket(TypeErrorObject,
                    new GraceString("initial value of var 'definition' is not of type String"));
              obj650.mutable = true;
              setLineNumber(343);    // compilenode string
              var string874 = new GraceString("");
              obj650.data["description"] = string874;
              var reader_gracedocMD_description875 = function() {
                return this.data["description"];
              };
              obj650.methods["description"] = reader_gracedocMD_description875;
              obj650.data["description"] = string874;
              var writer_gracedocMD_description875 = function(argcv, o) {
                this.data["description"] = o;
                return GraceDone;
              };
              obj650.methods["description:="] = writer_gracedocMD_description875;
              writer_gracedocMD_description875.confidential = true;
              if (!Grace_isTrue(callmethod(var_String, "match", [1], string874)))
                throw new GraceExceptionPacket(TypeErrorObject,
                    new GraceString("initial value of var 'description' is not of type String"));
              obj650.mutable = true;
              setLineNumber(344);    // compilenode array
              var array876 = new Lineup([]);
              var call877 = callmethodChecked(var_prelude, "set", [1], array876);
              obj650.data["propSet"] = call877;
              var reader_gracedocMD_propSet878 = function() {
                return this.data["propSet"];
              };
              obj650.methods["propSet"] = reader_gracedocMD_propSet878;
              obj650.data["propSet"] = call877;
              var writer_gracedocMD_propSet878 = function(argcv, o) {
                this.data["propSet"] = o;
                return GraceDone;
              };
              obj650.methods["propSet:="] = writer_gracedocMD_propSet878;
              writer_gracedocMD_propSet878.confidential = true;
              var call879 = callmethodChecked(var_prelude, "Set", [0]);
              if (!Grace_isTrue(callmethod(call879, "match", [1], call877)))
                throw new GraceExceptionPacket(TypeErrorObject,
                    new GraceString("initial value of var 'propSet' is not of type Set<self.outer.Property>"));
              obj650.mutable = true;
              setLineNumber(345);    // compilenode string
              var string880 = new GraceString("");
              obj650.data["bin"] = string880;
              var reader_gracedocMD_bin881 = function() {
                return this.data["bin"];
              };
              obj650.methods["bin"] = reader_gracedocMD_bin881;
              obj650.data["bin"] = string880;
              var writer_gracedocMD_bin881 = function(argcv, o) {
                this.data["bin"] = o;
                return GraceDone;
              };
              obj650.methods["bin:="] = writer_gracedocMD_bin881;
              writer_gracedocMD_bin881.confidential = true;
              if (!Grace_isTrue(callmethod(var_String, "match", [1], string880)))
                throw new GraceExceptionPacket(TypeErrorObject,
                    new GraceString("initial value of var 'bin' is not of type String"));
              obj650.mutable = true;
              setLineNumber(346);    // compilenode identifier
              obj650.data["currentMode"] = var_plain;
              var reader_gracedocMD_currentMode882 = function() {
                return this.data["currentMode"];
              };
              obj650.methods["currentMode"] = reader_gracedocMD_currentMode882;
              obj650.data["currentMode"] = var_plain;
              var writer_gracedocMD_currentMode882 = function(argcv, o) {
                this.data["currentMode"] = o;
                return GraceDone;
              };
              obj650.methods["currentMode:="] = writer_gracedocMD_currentMode882;
              reader_gracedocMD_currentMode882.confidential = true;
              writer_gracedocMD_currentMode882.confidential = true;
              if (!Grace_isTrue(callmethod(var_String, "match", [1], var_plain)))
                throw new GraceExceptionPacket(TypeErrorObject,
                    new GraceString("initial value of var 'currentMode' is not of type String"));
              obj650.mutable = true;
              superDepth = origSuperDepth;
            };
            obj_init_650.apply(obj650, []);
            return obj650;
          };
          func649.paramCounts = [0];
          this.methods["markdownWriter"] = func649;
          func649.definitionLine = 340;
          func649.definitionModule = "gracedocMD";
            var func883 = function(argcv) {    // method markdownWriter()object
              var curarg = 1;
              var inheritingObject = arguments[curarg++];
              // Start argument processing
              curarg = 1;
              // End argument processing
              setModuleName("gracedocMD");
              var returnTarget = invocationCount;
              invocationCount++;
              var obj884 = Grace_allocObject(GraceObject, "markdownWriter");
              obj884.definitionModule = "gracedocMD";
              obj884.definitionLine = 340;
              var inho884 = inheritingObject;
              while (inho884.superobj) inho884 = inho884.superobj;
              inho884.superobj = obj884;
              obj884.data = inheritingObject.data;
              if (inheritingObject.hasOwnProperty('_value'))
                obj884._value = inheritingObject._value;
              obj884.outer = this;
              var reader_gracedocMD_outer885 = function() {
                return this.outer;
              };
              obj884.methods["outer"] = reader_gracedocMD_outer885;
              var obj_init_884 = function() {
                var origSuperDepth = superDepth;
                superDepth = obj884;
                var func886 = function(argcv) {    // method insertDef(1)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_text = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for insertDef(1)"));
                  // Start argument checking
                  curarg = 1;
                  setLineNumber(349);    // compilenode identifier
                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("argument 1 in insertDef (arg list 1), which corresponds to parameter text, does not have " + 
                              callmethod(var_String, "asString", [0])._value + "."));
                  curarg++;
                  // End argument checking
                  setModuleName("gracedocMD");
                  setLineNumber(351);    // compilenode call
                  onSelf = true;
                  var call888 = callmethodChecked(this, "definition", [0]);
                  var opresult890 = callmethodChecked(call888, "++", [1], var_text);
                  onSelf = true;
                  var call891 = callmethodChecked(this, "definition:=", [1], opresult890);
                  setLineNumber(352);    // compilenode string
                  var string892 = new GraceString("\n\n Inserted to definition");
                  var call893 = Grace_print(string892);
                  return call893;
                };
                func886.paramTypes = [];
                func886.paramTypes.push([type_String, "text"]);
                func886.paramCounts = [1];
                obj884.methods["insertDef"] = func886;
                func886.definitionLine = 349;
                func886.definitionModule = "gracedocMD";
                var func894 = function(argcv) {    // method insertDesc(1)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_text = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for insertDesc(1)"));
                  // Start argument checking
                  curarg = 1;
                  setLineNumber(356);    // compilenode identifier
                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("argument 1 in insertDesc (arg list 1), which corresponds to parameter text, does not have " + 
                              callmethod(var_String, "asString", [0])._value + "."));
                  curarg++;
                  // End argument checking
                  setModuleName("gracedocMD");
                  setLineNumber(358);    // compilenode call
                  onSelf = true;
                  var call896 = callmethodChecked(this, "description", [0]);
                  var opresult898 = callmethodChecked(call896, "++", [1], var_text);
                  onSelf = true;
                  var call899 = callmethodChecked(this, "description:=", [1], opresult898);
                  setLineNumber(359);    // compilenode string
                  var string900 = new GraceString("\n\n Inserted to description");
                  var call901 = Grace_print(string900);
                  return call901;
                };
                func894.paramTypes = [];
                func894.paramTypes.push([type_String, "text"]);
                func894.paramCounts = [1];
                obj884.methods["insertDesc"] = func894;
                func894.definitionLine = 356;
                func894.definitionModule = "gracedocMD";
                var func902 = function(argcv) {    // method addProp(1)withDesc(1)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_aTitle = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addProp (arg list 1) of addProp(1)withDesc(1)"));
                  var var_desc = arguments[curarg];
                  curarg++;
                  if (argcv[1] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for withDesc (arg list 2) of addProp(1)withDesc(1)"));
                  // Start argument checking
                  curarg = 1;
                  setLineNumber(363);    // compilenode identifier
                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("argument 1 in addProp (arg list 1), which corresponds to parameter aTitle, does not have " + 
                              callmethod(var_String, "asString", [0])._value + "."));
                  curarg++;
                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("argument 1 in withDesc (arg list 2), which corresponds to parameter desc, does not have " + 
                              callmethod(var_String, "asString", [0])._value + "."));
                  curarg++;
                  // End argument checking
                  setModuleName("gracedocMD");
                  setLineNumber(366);    // compilenode call
                  var call903 = callmethodChecked(superDepth, "outer", [0]);
                  onOuter = true;
                  onSelf = true;
                  var call904 = callmethodChecked(call903, "Property", [0]);
                  var var_newProp = call904;
                  setLineNumber(369);    // compilenode identifier
                  var call905 = callmethodChecked(var_newProp, "title:=", [1], var_aTitle);
                  setLineNumber(370);    // compilenode identifier
                  var call906 = callmethodChecked(var_newProp, "description:=", [1], var_desc);
                  setLineNumber(373);    // compilenode call
                  onSelf = true;
                  var call907 = callmethodChecked(this, "propSet", [0]);
                  var call908 = callmethodChecked(call907, "add", [1], var_newProp);
                  setLineNumber(375);    // compilenode string
                  var string909 = new GraceString("added prop");
                  var call910 = Grace_print(string909);
                  return call910;
                };
                func902.paramTypes = [];
                func902.paramTypes.push([type_String, "aTitle"]);
                func902.paramTypes.push([type_String, "desc"]);
                func902.paramCounts = [1, 1];
                obj884.methods["addProp()withDesc"] = func902;
                func902.definitionLine = 363;
                func902.definitionModule = "gracedocMD";
                var func911 = function(argcv) {    // method changeMode(1)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_newMode = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for changeMode(1)"));
                  // Start argument checking
                  curarg = 1;
                  setLineNumber(380);    // compilenode identifier
                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("argument 1 in changeMode (arg list 1), which corresponds to parameter newMode, does not have " + 
                              callmethod(var_String, "asString", [0])._value + "."));
                  curarg++;
                  // End argument checking
                  setModuleName("gracedocMD");
                  var if912 = GraceDone;
                  setLineNumber(383);    // compilenode call
                  onSelf = true;
                  var call914 = callmethodChecked(this, "currentMode", [0]);
                  var opresult916 = callmethodChecked(call914, "==", [1], var_plain);
                  var opresult920 = callmethodChecked(var_newMode, "==", [1], var_code);
                  var opresult922 = callmethodChecked(opresult920, "&&", [1], opresult916);
                  if (Grace_isTrue(opresult922)) {
                    var string923 = new GraceString("`");
                    onSelf = true;
                    var call925 = callmethodChecked(this, "bin", [0]);
                    var opresult927 = callmethodChecked(call925, "++", [1], string923);
                    onSelf = true;
                    var call928 = callmethodChecked(this, "bin:=", [1], opresult927);
                    if912 = call928;
                  }
                  var if929 = GraceDone;
                  setLineNumber(384);    // compilenode call
                  onSelf = true;
                  var call931 = callmethodChecked(this, "currentMode", [0]);
                  var opresult933 = callmethodChecked(call931, "==", [1], var_heading);
                  var opresult937 = callmethodChecked(var_newMode, "==", [1], var_code);
                  var opresult939 = callmethodChecked(opresult937, "&&", [1], opresult933);
                  if (Grace_isTrue(opresult939)) {
                    var string940 = new GraceString("`");
                    onSelf = true;
                    var call942 = callmethodChecked(this, "bin", [0]);
                    var opresult944 = callmethodChecked(call942, "++", [1], string940);
                    onSelf = true;
                    var call945 = callmethodChecked(this, "bin:=", [1], opresult944);
                    if929 = call945;
                  }
                  var if946 = GraceDone;
                  setLineNumber(387);    // compilenode call
                  onSelf = true;
                  var call948 = callmethodChecked(this, "currentMode", [0]);
                  var opresult950 = callmethodChecked(call948, "==", [1], var_code);
                  var opresult954 = callmethodChecked(var_newMode, "==", [1], var_plain);
                  var opresult956 = callmethodChecked(opresult954, "&&", [1], opresult950);
                  if (Grace_isTrue(opresult956)) {
                    var string957 = new GraceString("`");
                    onSelf = true;
                    var call959 = callmethodChecked(this, "bin", [0]);
                    var opresult961 = callmethodChecked(call959, "++", [1], string957);
                    onSelf = true;
                    var call962 = callmethodChecked(this, "bin:=", [1], opresult961);
                    if946 = call962;
                  }
                  var if963 = GraceDone;
                  setLineNumber(391);    // compilenode call
                  onSelf = true;
                  var call965 = callmethodChecked(this, "currentMode", [0]);
                  var opresult967 = callmethodChecked(call965, "==", [1], var_code);
                  var opresult971 = callmethodChecked(var_newMode, "==", [1], var_heading);
                  var opresult973 = callmethodChecked(opresult971, "&&", [1], opresult967);
                  if (Grace_isTrue(opresult973)) {
                    var string974 = new GraceString("`\n");
                    onSelf = true;
                    var call976 = callmethodChecked(this, "bin", [0]);
                    var opresult978 = callmethodChecked(call976, "++", [1], string974);
                    onSelf = true;
                    var call979 = callmethodChecked(this, "bin:=", [1], opresult978);
                    if963 = call979;
                  }
                  var if980 = GraceDone;
                  setLineNumber(392);    // compilenode identifier
                  var opresult983 = callmethodChecked(var_newMode, "==", [1], var_heading);
                  if (Grace_isTrue(opresult983)) {
                    var string984 = new GraceString("\n### ");
                    onSelf = true;
                    var call986 = callmethodChecked(this, "bin", [0]);
                    var opresult988 = callmethodChecked(call986, "++", [1], string984);
                    onSelf = true;
                    var call989 = callmethodChecked(this, "bin:=", [1], opresult988);
                    if980 = call989;
                  }
                  setLineNumber(396);    // compilenode identifier
                  onSelf = true;
                  var call990 = callmethodChecked(this, "currentMode:=", [1], var_newMode);
                  return call990;
                };
                func911.paramTypes = [];
                func911.paramTypes.push([type_String, "newMode"]);
                func911.paramCounts = [1];
                obj884.methods["changeMode"] = func911;
                func911.definitionLine = 380;
                func911.definitionModule = "gracedocMD";
                var func991 = function(argcv) {    // method addText(1)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_string = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addText(1)"));
                  // Start argument checking
                  curarg = 1;
                  setLineNumber(400);    // compilenode identifier
                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("argument 1 in addText (arg list 1), which corresponds to parameter string, does not have " + 
                              callmethod(var_String, "asString", [0])._value + "."));
                  curarg++;
                  // End argument checking
                  setModuleName("gracedocMD");
                  onSelf = true;
                  var call993 = callmethodChecked(this, "bin", [0]);
                  var opresult995 = callmethodChecked(call993, "++", [1], var_string);
                  onSelf = true;
                  var call996 = callmethodChecked(this, "bin:=", [1], opresult995);
                  return call996;
                };
                func991.paramTypes = [];
                func991.paramTypes.push([type_String, "string"]);
                func991.paramCounts = [1];
                obj884.methods["addText"] = func991;
                func991.definitionLine = 400;
                func991.definitionModule = "gracedocMD";
                var func997 = function(argcv) {    // method addText(1)inMode(1)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_string = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addText (arg list 1) of addText(1)inMode(1)"));
                  var var_mode = arguments[curarg];
                  curarg++;
                  if (argcv[1] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inMode (arg list 2) of addText(1)inMode(1)"));
                  // Start argument checking
                  curarg = 1;
                  setLineNumber(403);    // compilenode identifier
                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("argument 1 in addText (arg list 1), which corresponds to parameter string, does not have " + 
                              callmethod(var_String, "asString", [0])._value + "."));
                  curarg++;
                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("argument 1 in inMode (arg list 2), which corresponds to parameter mode, does not have " + 
                              callmethod(var_String, "asString", [0])._value + "."));
                  curarg++;
                  // End argument checking
                  setModuleName("gracedocMD");
                  setLineNumber(406);    // compilenode identifier
                  onSelf = true;
                  var call998 = callmethodChecked(this, "changeMode", [1], var_mode);
                  setLineNumber(408);    // compilenode call
                  onSelf = true;
                  var call1000 = callmethodChecked(this, "bin", [0]);
                  var opresult1002 = callmethodChecked(call1000, "++", [1], var_string);
                  onSelf = true;
                  var call1003 = callmethodChecked(this, "bin:=", [1], opresult1002);
                  var if1004 = GraceDone;
                  setLineNumber(411);    // compilenode identifier
                  var opresult1007 = callmethodChecked(var_mode, "==", [1], var_heading);
                  if (Grace_isTrue(opresult1007)) {
                    var string1008 = new GraceString("\n");
                    onSelf = true;
                    var call1010 = callmethodChecked(this, "bin", [0]);
                    var opresult1012 = callmethodChecked(call1010, "++", [1], string1008);
                    onSelf = true;
                    var call1013 = callmethodChecked(this, "bin:=", [1], opresult1012);
                    if1004 = call1013;
                  }
                  return if1004;
                };
                func997.paramTypes = [];
                func997.paramTypes.push([type_String, "string"]);
                func997.paramTypes.push([type_String, "mode"]);
                func997.paramCounts = [1, 1];
                obj884.methods["addText()inMode"] = func997;
                func997.definitionLine = 403;
                func997.definitionModule = "gracedocMD";
                var func1014 = function(argcv) {    // method addCode(1)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_string = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addCode(1)"));
                  // Start argument checking
                  curarg = 1;
                  setLineNumber(414);    // compilenode identifier
                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("argument 1 in addCode (arg list 1), which corresponds to parameter string, does not have " + 
                              callmethod(var_String, "asString", [0])._value + "."));
                  curarg++;
                  // End argument checking
                  setModuleName("gracedocMD");
                  setLineNumber(416);    // compilenode string
                  var string1015 = new GraceString("`");
                  var string1018 = new GraceString("`");
                  onSelf = true;
                  var call1020 = callmethodChecked(this, "bin", [0]);
                  var opresult1022 = callmethodChecked(call1020, "++", [1], string1018);
                  var opresult1024 = callmethodChecked(opresult1022, "++", [1], var_string);
                  var opresult1026 = callmethodChecked(opresult1024, "++", [1], string1015);
                  onSelf = true;
                  var call1027 = callmethodChecked(this, "bin:=", [1], opresult1026);
                  return call1027;
                };
                func1014.paramTypes = [];
                func1014.paramTypes.push([type_String, "string"]);
                func1014.paramCounts = [1];
                obj884.methods["addCode"] = func1014;
                func1014.definitionLine = 414;
                func1014.definitionModule = "gracedocMD";
                var func1028 = function(argcv) {    // method addLink(1)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_string = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addLink(1)"));
                  // Start argument checking
                  curarg = 1;
                  setLineNumber(419);    // compilenode identifier
                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("argument 1 in addLink (arg list 1), which corresponds to parameter string, does not have " + 
                              callmethod(var_String, "asString", [0])._value + "."));
                  curarg++;
                  // End argument checking
                  setModuleName("gracedocMD");
                  setLineNumber(421);    // compilenode call
                  onSelf = true;
                  var call1030 = callmethodChecked(this, "bin", [0]);
                  var opresult1032 = callmethodChecked(call1030, "++", [1], var_string);
                  onSelf = true;
                  var call1033 = callmethodChecked(this, "bin:=", [1], opresult1032);
                  return call1033;
                };
                func1028.paramTypes = [];
                func1028.paramTypes.push([type_String, "string"]);
                func1028.paramCounts = [1];
                obj884.methods["addLink"] = func1028;
                func1028.definitionLine = 419;
                func1028.definitionModule = "gracedocMD";
                var func1034 = function(argcv) {    // method addHeader(1)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_string = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addHeader(1)"));
                  // Start argument checking
                  curarg = 1;
                  setLineNumber(424);    // compilenode identifier
                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("argument 1 in addHeader (arg list 1), which corresponds to parameter string, does not have " + 
                              callmethod(var_String, "asString", [0])._value + "."));
                  curarg++;
                  // End argument checking
                  setModuleName("gracedocMD");
                  setLineNumber(426);    // compilenode string
                  var string1035 = new GraceString("\n");
                  onSelf = true;
                  var call1038 = callmethodChecked(this, "bin", [0]);
                  var opresult1040 = callmethodChecked(call1038, "++", [1], var_string);
                  var opresult1042 = callmethodChecked(opresult1040, "++", [1], string1035);
                  onSelf = true;
                  var call1043 = callmethodChecked(this, "bin:=", [1], opresult1042);
                  return call1043;
                };
                func1034.paramTypes = [];
                func1034.paramTypes.push([type_String, "string"]);
                func1034.paramCounts = [1];
                obj884.methods["addHeader"] = func1034;
                func1034.definitionLine = 424;
                func1034.definitionModule = "gracedocMD";
                var func1044 = function(argcv) {    // method add(1)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_string = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for add(1)"));
                  // Start argument checking
                  curarg = 1;
                  setLineNumber(429);    // compilenode identifier
                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("argument 1 in add (arg list 1), which corresponds to parameter string, does not have " + 
                              callmethod(var_String, "asString", [0])._value + "."));
                  curarg++;
                  // End argument checking
                  setModuleName("gracedocMD");
                  onSelf = true;
                  var call1046 = callmethodChecked(this, "bin", [0]);
                  var opresult1048 = callmethodChecked(call1046, "++", [1], var_string);
                  onSelf = true;
                  var call1049 = callmethodChecked(this, "bin:=", [1], opresult1048);
                  return call1049;
                };
                func1044.paramTypes = [];
                func1044.paramTypes.push([type_String, "string"]);
                func1044.paramCounts = [1];
                obj884.methods["add"] = func1044;
                func1044.definitionLine = 429;
                func1044.definitionModule = "gracedocMD";
                var func1050 = function(argcv) {    // method addSpace
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  if (argcv[0] !== 0)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addSpace"));
                  setModuleName("gracedocMD");
                  setLineNumber(431);    // compilenode string
                  var string1051 = new GraceString(" ");
                  onSelf = true;
                  var call1053 = callmethodChecked(this, "bin", [0]);
                  var opresult1055 = callmethodChecked(call1053, "++", [1], string1051);
                  onSelf = true;
                  var call1056 = callmethodChecked(this, "bin:=", [1], opresult1055);
                  return call1056;
                };
                func1050.paramCounts = [0];
                obj884.methods["addSpace"] = func1050;
                func1050.definitionLine = 431;
                func1050.definitionModule = "gracedocMD";
                var func1057 = function(argcv) {    // method addColon
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  if (argcv[0] !== 0)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addColon"));
                  setModuleName("gracedocMD");
                  setLineNumber(432);    // compilenode string
                  var string1058 = new GraceString(":");
                  onSelf = true;
                  var call1060 = callmethodChecked(this, "bin", [0]);
                  var opresult1062 = callmethodChecked(call1060, "++", [1], string1058);
                  onSelf = true;
                  var call1063 = callmethodChecked(this, "bin:=", [1], opresult1062);
                  return call1063;
                };
                func1057.paramCounts = [0];
                obj884.methods["addColon"] = func1057;
                func1057.definitionLine = 432;
                func1057.definitionModule = "gracedocMD";
                var func1064 = function(argcv) {    // method addComma
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  if (argcv[0] !== 0)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addComma"));
                  setModuleName("gracedocMD");
                  setLineNumber(433);    // compilenode string
                  var string1065 = new GraceString(",");
                  onSelf = true;
                  var call1067 = callmethodChecked(this, "bin", [0]);
                  var opresult1069 = callmethodChecked(call1067, "++", [1], string1065);
                  onSelf = true;
                  var call1070 = callmethodChecked(this, "bin:=", [1], opresult1069);
                  return call1070;
                };
                func1064.paramCounts = [0];
                obj884.methods["addComma"] = func1064;
                func1064.definitionLine = 433;
                func1064.definitionModule = "gracedocMD";
                var func1071 = function(argcv) {    // method addBullet
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  if (argcv[0] !== 0)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addBullet"));
                  setModuleName("gracedocMD");
                  setLineNumber(434);    // compilenode string
                  var string1072 = new GraceString("- ");
                  onSelf = true;
                  var call1074 = callmethodChecked(this, "bin", [0]);
                  var opresult1076 = callmethodChecked(call1074, "++", [1], string1072);
                  onSelf = true;
                  var call1077 = callmethodChecked(this, "bin:=", [1], opresult1076);
                  return call1077;
                };
                func1071.paramCounts = [0];
                obj884.methods["addBullet"] = func1071;
                func1071.definitionLine = 434;
                func1071.definitionModule = "gracedocMD";
                var func1078 = function(argcv) {    // method addNewline
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  if (argcv[0] !== 0)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addNewline"));
                  setModuleName("gracedocMD");
                  setLineNumber(439);    // compilenode identifier
                  onSelf = true;
                  var call1079 = callmethodChecked(this, "changeMode", [1], var_plain);
                  setLineNumber(440);    // compilenode string
                  var string1080 = new GraceString("  \n");
                  onSelf = true;
                  var call1082 = callmethodChecked(this, "bin", [0]);
                  var opresult1084 = callmethodChecked(call1082, "++", [1], string1080);
                  onSelf = true;
                  var call1085 = callmethodChecked(this, "bin:=", [1], opresult1084);
                  return call1085;
                };
                func1078.paramCounts = [0];
                obj884.methods["addNewline"] = func1078;
                func1078.definitionLine = 437;
                func1078.definitionModule = "gracedocMD";
                var func1086 = function(argcv) {    // method buildMarkdown
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  if (argcv[0] !== 0)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for buildMarkdown"));
                  setModuleName("gracedocMD");
                  setLineNumber(447);    // compilenode string
                  var string1087 = new GraceString("### Definition \n");
                  var var_temp = string1087;
                  setLineNumber(448);    // compilenode call
                  onSelf = true;
                  var call1088 = callmethodChecked(this, "definition", [0]);
                  var opresult1091 = callmethodChecked(var_temp, "++", [1], call1088);
                  var_temp = opresult1091;
                  setLineNumber(449);    // compilenode string
                  var string1092 = new GraceString("\n\n### Description\n");
                  var opresult1095 = callmethodChecked(var_temp, "++", [1], string1092);
                  var_temp = opresult1095;
                  setLineNumber(450);    // compilenode call
                  onSelf = true;
                  var call1096 = callmethodChecked(this, "description", [0]);
                  var opresult1099 = callmethodChecked(var_temp, "++", [1], call1096);
                  var_temp = opresult1099;
                  setLineNumber(452);    // compilenode identifier
                  var call1100 = Grace_print(var_temp);
                  setLineNumber(453);    // compilenode identifier
                  return var_temp;
                };
                func1086.paramCounts = [0];
                obj884.methods["buildMarkdown"] = func1086;
                func1086.definitionLine = 445;
                func1086.definitionModule = "gracedocMD";
                var func1101 = function(argcv) {    // method dumpBin
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  if (argcv[0] !== 0)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for dumpBin"));
                  setModuleName("gracedocMD");
                  setLineNumber(461);    // compilenode identifier
                  onSelf = true;
                  var call1102 = callmethodChecked(this, "currentMode:=", [1], var_plain);
                  setLineNumber(462);    // compilenode call
                  onSelf = true;
                  var call1103 = callmethodChecked(this, "bin", [0]);
                  var var_temp = call1103;
                  setLineNumber(463);    // compilenode string
                  var string1104 = new GraceString("");
                  onSelf = true;
                  var call1105 = callmethodChecked(this, "bin:=", [1], string1104);
                  setLineNumber(464);    // compilenode identifier
                  return var_temp;
                };
                func1101.paramCounts = [0];
                obj884.methods["dumpBin"] = func1101;
                func1101.definitionLine = 458;
                func1101.definitionModule = "gracedocMD";
                setLineNumber(342);    // compilenode string
                var string1106 = new GraceString("");
                obj884.data["definition"] = string1106;
                var reader_gracedocMD_definition1107 = function() {
                  return this.data["definition"];
                };
                obj884.methods["definition"] = reader_gracedocMD_definition1107;
                obj884.data["definition"] = string1106;
                var writer_gracedocMD_definition1107 = function(argcv, o) {
                  this.data["definition"] = o;
                  return GraceDone;
                };
                obj884.methods["definition:="] = writer_gracedocMD_definition1107;
                writer_gracedocMD_definition1107.confidential = true;
                if (!Grace_isTrue(callmethod(var_String, "match", [1], string1106)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("initial value of var 'definition' is not of type String"));
                obj884.mutable = true;
                setLineNumber(343);    // compilenode string
                var string1108 = new GraceString("");
                obj884.data["description"] = string1108;
                var reader_gracedocMD_description1109 = function() {
                  return this.data["description"];
                };
                obj884.methods["description"] = reader_gracedocMD_description1109;
                obj884.data["description"] = string1108;
                var writer_gracedocMD_description1109 = function(argcv, o) {
                  this.data["description"] = o;
                  return GraceDone;
                };
                obj884.methods["description:="] = writer_gracedocMD_description1109;
                writer_gracedocMD_description1109.confidential = true;
                if (!Grace_isTrue(callmethod(var_String, "match", [1], string1108)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("initial value of var 'description' is not of type String"));
                obj884.mutable = true;
                setLineNumber(344);    // compilenode array
                var array1110 = new Lineup([]);
                var call1111 = callmethodChecked(var_prelude, "set", [1], array1110);
                obj884.data["propSet"] = call1111;
                var reader_gracedocMD_propSet1112 = function() {
                  return this.data["propSet"];
                };
                obj884.methods["propSet"] = reader_gracedocMD_propSet1112;
                obj884.data["propSet"] = call1111;
                var writer_gracedocMD_propSet1112 = function(argcv, o) {
                  this.data["propSet"] = o;
                  return GraceDone;
                };
                obj884.methods["propSet:="] = writer_gracedocMD_propSet1112;
                writer_gracedocMD_propSet1112.confidential = true;
                var call1113 = callmethodChecked(var_prelude, "Set", [0]);
                if (!Grace_isTrue(callmethod(call1113, "match", [1], call1111)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("initial value of var 'propSet' is not of type Set<self.outer.Property>"));
                obj884.mutable = true;
                setLineNumber(345);    // compilenode string
                var string1114 = new GraceString("");
                obj884.data["bin"] = string1114;
                var reader_gracedocMD_bin1115 = function() {
                  return this.data["bin"];
                };
                obj884.methods["bin"] = reader_gracedocMD_bin1115;
                obj884.data["bin"] = string1114;
                var writer_gracedocMD_bin1115 = function(argcv, o) {
                  this.data["bin"] = o;
                  return GraceDone;
                };
                obj884.methods["bin:="] = writer_gracedocMD_bin1115;
                writer_gracedocMD_bin1115.confidential = true;
                if (!Grace_isTrue(callmethod(var_String, "match", [1], string1114)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("initial value of var 'bin' is not of type String"));
                obj884.mutable = true;
                setLineNumber(346);    // compilenode identifier
                obj884.data["currentMode"] = var_plain;
                var reader_gracedocMD_currentMode1116 = function() {
                  return this.data["currentMode"];
                };
                obj884.methods["currentMode"] = reader_gracedocMD_currentMode1116;
                obj884.data["currentMode"] = var_plain;
                var writer_gracedocMD_currentMode1116 = function(argcv, o) {
                  this.data["currentMode"] = o;
                  return GraceDone;
                };
                obj884.methods["currentMode:="] = writer_gracedocMD_currentMode1116;
                reader_gracedocMD_currentMode1116.confidential = true;
                writer_gracedocMD_currentMode1116.confidential = true;
                if (!Grace_isTrue(callmethod(var_String, "match", [1], var_plain)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("initial value of var 'currentMode' is not of type String"));
                obj884.mutable = true;
                superDepth = origSuperDepth;
              };
              obj_init_884.apply(inheritingObject, []);
              return obj884;
              };
              this.methods["markdownWriter()object"] = func883;
            setLineNumber(468);    // compilenode method
            var func1117 = function(argcv) {    // method trim(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_c = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for trim(1)"));
              // Start argument checking
              curarg = 1;
              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in trim (arg list 1), which corresponds to parameter c, does not have " + 
                          callmethod(var_String, "asString", [0])._value + "."));
              curarg++;
              // End argument checking
              setModuleName("gracedocMD");
              setLineNumber(469);    // compilenode num
              var var_start = new GraceNum(1);
              setLineNumber(470);    // compilenode identifier
              var call1118 = callmethodChecked(var_c, "size", [0]);
              var var_end = call1118;
              setLineNumber(471);    // compilenode block
              var block1119 = new GraceBlock(this, 471, 0);
              block1119.real = function() {
                var string1120 = new GraceString(" ");
                var call1122 = callmethodChecked(var_c, "at", [1], var_start);
                var opresult1124 = callmethodChecked(call1122, "==", [1], string1120);
                return opresult1124;
              };
              var block1125 = new GraceBlock(this, 471, 0);
              block1125.real = function() {
                var opresult1128 = callmethodChecked(var_start, "+", [1], new GraceNum(1));
                var_start = opresult1128;
                return GraceDone;
              };
              var call1129 = callmethodChecked(var_prelude, "while()do", [1, 1], block1119, block1125);
              setLineNumber(472);    // compilenode block
              var block1130 = new GraceBlock(this, 472, 0);
              block1130.real = function() {
                var string1131 = new GraceString(" ");
                var call1133 = callmethodChecked(var_c, "at", [1], var_end);
                var opresult1135 = callmethodChecked(call1133, "==", [1], string1131);
                return opresult1135;
              };
              var block1136 = new GraceBlock(this, 472, 0);
              block1136.real = function() {
                var diff1139 = callmethodChecked(var_end, "-", [1], new GraceNum(1));
                var_end = diff1139;
                return GraceDone;
              };
              var call1140 = callmethodChecked(var_prelude, "while()do", [1, 1], block1130, block1136);
              setLineNumber(473);    // compilenode identifier
              var call1141 = callmethodChecked(var_c, "substringFrom()to", [1, 1], var_start, var_end);
              return call1141;
            };
            func1117.paramTypes = [];
            func1117.paramTypes.push([type_String, "c"]);
            func1117.paramCounts = [1];
            this.methods["trim"] = func1117;
            func1117.definitionLine = 468;
            func1117.definitionModule = "gracedocMD";
            setLineNumber(476);    // compilenode method
            var func1142 = function(argcv) {    // method indent(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_n = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for indent(1)"));
              // Start argument checking
              curarg = 1;
              if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in indent (arg list 1), which corresponds to parameter n, does not have " + 
                          callmethod(var_Number, "asString", [0])._value + "."));
              curarg++;
              // End argument checking
              setModuleName("gracedocMD");
              var if1143 = GraceDone;
              setLineNumber(478);    // compilenode identifier
              var opresult1146 = callmethodChecked(var_n, "==", [1], new GraceNum(0));
              if (Grace_isTrue(opresult1146)) {
                var string1147 = new GraceString("");
                return string1147;
              } else {
                var if1148 = GraceDone;
                setLineNumber(479);    // compilenode identifier
                var opresult1151 = callmethodChecked(var_n, "==", [1], new GraceNum(1));
                if (Grace_isTrue(opresult1151)) {
                  var string1152 = new GraceString("    ");
                  return string1152;
                } else {
                  var if1153 = GraceDone;
                  setLineNumber(480);    // compilenode identifier
                  var opresult1156 = callmethodChecked(var_n, "==", [1], new GraceNum(2));
                  if (Grace_isTrue(opresult1156)) {
                    var string1157 = new GraceString("        ");
                    return string1157;
                  } else {
                    var if1158 = GraceDone;
                    setLineNumber(481);    // compilenode identifier
                    var opresult1161 = callmethodChecked(var_n, "==", [1], new GraceNum(3));
                    if (Grace_isTrue(opresult1161)) {
                      var string1162 = new GraceString("            ");
                      return string1162;
                    } else {
                      var if1163 = GraceDone;
                      setLineNumber(482);    // compilenode identifier
                      var opresult1166 = callmethodChecked(var_n, "==", [1], new GraceNum(4));
                      if (Grace_isTrue(opresult1166)) {
                        var string1167 = new GraceString("                ");
                        return string1167;
                      } else {
                        var if1168 = GraceDone;
                        setLineNumber(483);    // compilenode identifier
                        var opresult1171 = callmethodChecked(var_n, "==", [1], new GraceNum(5));
                        if (Grace_isTrue(opresult1171)) {
                          var string1172 = new GraceString("                    ");
                          return string1172;
                        } else {
                          var if1173 = GraceDone;
                          setLineNumber(484);    // compilenode identifier
                          var opresult1176 = callmethodChecked(var_n, "==", [1], new GraceNum(6));
                          if (Grace_isTrue(opresult1176)) {
                            var string1177 = new GraceString("                        ");
                            return string1177;
                          } else {
                            var if1178 = GraceDone;
                            setLineNumber(485);    // compilenode identifier
                            var opresult1181 = callmethodChecked(var_n, "==", [1], new GraceNum(7));
                            if (Grace_isTrue(opresult1181)) {
                              var string1182 = new GraceString("                            ");
                              return string1182;
                            } else {
                              var if1183 = GraceDone;
                              setLineNumber(486);    // compilenode identifier
                              var opresult1186 = callmethodChecked(var_n, "==", [1], new GraceNum(8));
                              if (Grace_isTrue(opresult1186)) {
                                var string1187 = new GraceString("                                ");
                                return string1187;
                              } else {
                                setLineNumber(487);    // compilenode string
                                var string1188 = new GraceString("                                    ");
                                return string1188;
                              }
                              if1178 = if1183;
                            }
                            if1173 = if1178;
                          }
                          if1168 = if1173;
                        }
                        if1163 = if1168;
                      }
                      if1158 = if1163;
                    }
                    if1153 = if1158;
                  }
                  if1148 = if1153;
                }
                if1143 = if1148;
              }
              setLineNumber(478);    // return value
              if (!Grace_isTrue(callmethod(var_String, "match", [1], if1143)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("result of method indent(1) does not have " + 
                          callmethod(var_String, "asString", [0])._value + "."));
              return if1143;
            };
            func1142.paramTypes = [];
            func1142.paramTypes.push([type_Number, "n"]);
            func1142.paramCounts = [1];
            this.methods["indent"] = func1142;
            func1142.definitionLine = 476;
            func1142.definitionModule = "gracedocMD";
            setLineNumber(491);    // compilenode method
            var func1189 = function(argcv) {    // method directoryBuilderForFile(1)outTo(1)as(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_in = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for directoryBuilderForFile (arg list 1) of directoryBuilderForFile(1)outTo(1)as(1)"));
              var var_dir = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for outTo (arg list 2) of directoryBuilderForFile(1)outTo(1)as(1)"));
              var var_pageType = arguments[curarg];
              curarg++;
              if (argcv[2] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for as (arg list 3) of directoryBuilderForFile(1)outTo(1)as(1)"));
              setModuleName("gracedocMD");
              var obj1190 = Grace_allocObject(null, "gracedocMD.directoryBuilderForFile()outTo()as");
              obj1190.definitionModule = "gracedocMD";
              obj1190.definitionLine = 491;
              obj1190.outer = this;
              var reader_gracedocMD_outer1191 = function() {
                return this.outer;
              };
              obj1190.methods["outer"] = reader_gracedocMD_outer1191;
              var obj_init_1190 = function() {
                var origSuperDepth = superDepth;
                superDepth = obj1190;
                var func1192 = function(argcv) {    // method generate
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  if (argcv[0] !== 0)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for generate"));
                  setModuleName("gracedocMD");
                  setLineNumber(508);    // compilenode vardec
                  var var_outfile;
                  var if1193 = GraceDone;
                  setLineNumber(509);    // compilenode string
                  var string1194 = new GraceString("");
                  var call1196 = callmethodChecked(var_settings, "outputdir", [0]);
                  var string1198 = new GraceString("");
                  var opresult1200 = callmethodChecked(string1198, "++", [1], call1196);
                  var opresult1202 = callmethodChecked(opresult1200, "++", [1], string1194);
                  var call1203 = callmethodChecked(var_io, "exists", [1], opresult1202);
                  var call1204 = callmethodChecked(call1203, "prefix!", [0]);
                  if (Grace_isTrue(call1204)) {
                    var string1205 = new GraceString("");
                    var call1207 = callmethodChecked(var_settings, "outputdir", [0]);
                    var string1209 = new GraceString("mkdir ");
                    var opresult1211 = callmethodChecked(string1209, "++", [1], call1207);
                    var opresult1213 = callmethodChecked(opresult1211, "++", [1], string1205);
                    var call1214 = callmethodChecked(var_io, "system", [1], opresult1213);
                    if1193 = call1214;
                  }
                  var if1215 = GraceDone;
                  setLineNumber(510);    // compilenode string
                  var string1216 = new GraceString("");
                  onSelf = true;
                  var call1218 = callmethodChecked(this, "outdir", [0]);
                  var string1220 = new GraceString("/");
                  var call1222 = callmethodChecked(var_settings, "outputdir", [0]);
                  var string1224 = new GraceString("");
                  var opresult1226 = callmethodChecked(string1224, "++", [1], call1222);
                  var opresult1228 = callmethodChecked(opresult1226, "++", [1], string1220);
                  var opresult1230 = callmethodChecked(opresult1228, "++", [1], call1218);
                  var opresult1232 = callmethodChecked(opresult1230, "++", [1], string1216);
                  var call1233 = callmethodChecked(var_io, "exists", [1], opresult1232);
                  var call1234 = callmethodChecked(call1233, "prefix!", [0]);
                  if (Grace_isTrue(call1234)) {
                    var string1235 = new GraceString("");
                    onSelf = true;
                    var call1237 = callmethodChecked(this, "outdir", [0]);
                    var string1239 = new GraceString("/");
                    var call1241 = callmethodChecked(var_settings, "outputdir", [0]);
                    var string1243 = new GraceString("mkdir ");
                    var opresult1245 = callmethodChecked(string1243, "++", [1], call1241);
                    var opresult1247 = callmethodChecked(opresult1245, "++", [1], string1239);
                    var opresult1249 = callmethodChecked(opresult1247, "++", [1], call1237);
                    var opresult1251 = callmethodChecked(opresult1249, "++", [1], string1235);
                    var call1252 = callmethodChecked(var_io, "system", [1], opresult1251);
                    if1215 = call1252;
                  }
                  setLineNumber(527);    // compilenode string
                  var string1253 = new GraceString(".md");
                  onSelf = true;
                  var call1255 = callmethodChecked(this, "pageName", [0]);
                  var string1257 = new GraceString("/");
                  onSelf = true;
                  var call1259 = callmethodChecked(this, "outdir", [0]);
                  var string1261 = new GraceString("/");
                  var call1263 = callmethodChecked(var_settings, "outputdir", [0]);
                  var string1265 = new GraceString("");
                  var opresult1267 = callmethodChecked(string1265, "++", [1], call1263);
                  var opresult1269 = callmethodChecked(opresult1267, "++", [1], string1261);
                  var opresult1271 = callmethodChecked(opresult1269, "++", [1], call1259);
                  var opresult1273 = callmethodChecked(opresult1271, "++", [1], string1257);
                  var opresult1275 = callmethodChecked(opresult1273, "++", [1], call1255);
                  var opresult1277 = callmethodChecked(opresult1275, "++", [1], string1253);
                  var string1278 = new GraceString("w");
                  var call1279 = callmethodChecked(var_io, "open", [2], opresult1277, string1278);
                  var_outfile = call1279;
                  setLineNumber(528);    // compilenode string
                  var string1280 = new GraceString("TEMPORARY");
                  var call1281 = callmethodChecked(var_outfile, "write", [1], string1280);
                  setLineNumber(529);    // compilenode identifier
                  var call1282 = callmethodChecked(var_outfile, "close", [0]);
                  var if1283 = GraceDone;
                  setLineNumber(531);    // compilenode call
                  onSelf = true;
                  var call1284 = callmethodChecked(this, "isOnTypePage", [0]);
                  var call1285 = callmethodChecked(call1284, "prefix!", [0]);
                  onSelf = true;
                  var call1287 = callmethodChecked(this, "isOnClassPage", [0]);
                  var call1288 = callmethodChecked(call1287, "prefix!", [0]);
                  var opresult1290 = callmethodChecked(call1288, "&&", [1], call1285);
                  if (Grace_isTrue(opresult1290)) {
                    setLineNumber(533);    // compilenode string
                    var string1291 = new GraceString("---\n");
                    var var_out = string1291;
                    setLineNumber(534);    // compilenode string
                    var string1292 = new GraceString("\"\n");
                    onSelf = true;
                    var call1294 = callmethodChecked(this, "title", [0]);
                    var string1296 = new GraceString("title: \"");
                    var opresult1298 = callmethodChecked(string1296, "++", [1], call1294);
                    var opresult1300 = callmethodChecked(opresult1298, "++", [1], string1292);
                    var opresult1303 = callmethodChecked(var_out, "++", [1], opresult1300);
                    var_out = opresult1303;
                    setLineNumber(535);    // compilenode string
                    var string1304 = new GraceString("keywords: mydoc\n");
                    var opresult1307 = callmethodChecked(var_out, "++", [1], string1304);
                    var_out = opresult1307;
                    setLineNumber(536);    // compilenode string
                    var string1308 = new GraceString("sidebar: grace-doc-sidebar\n");
                    var opresult1311 = callmethodChecked(var_out, "++", [1], string1308);
                    var_out = opresult1311;
                    setLineNumber(537);    // compilenode string
                    var string1312 = new GraceString("toc: false");
                    var opresult1315 = callmethodChecked(var_out, "++", [1], string1312);
                    var_out = opresult1315;
                    setLineNumber(538);    // compilenode string
                    var string1316 = new GraceString("permalink: /drawingCanvas/\n");
                    var opresult1319 = callmethodChecked(var_out, "++", [1], string1316);
                    var_out = opresult1319;
                    setLineNumber(539);    // compilenode string
                    var string1320 = new GraceString("folder: grace-docs\n");
                    var opresult1323 = callmethodChecked(var_out, "++", [1], string1320);
                    var_out = opresult1323;
                    setLineNumber(540);    // compilenode string
                    var string1324 = new GraceString("---\n");
                    var opresult1327 = callmethodChecked(var_out, "++", [1], string1324);
                    var_out = opresult1327;
                    setLineNumber(542);    // compilenode identifier
                    var call1328 = callmethodChecked(var_settings, "outputdir", [0]);
                    var call1329 = callmethodChecked(var_io, "listdir", [1], call1328);
                    var var_modules = call1329;
                    setLineNumber(543);    // compilenode identifier
                    var call1330 = callmethodChecked(var_modules, "iterator", [0]);
                    var var_modit = call1330;
                    setLineNumber(544);    // compilenode block
                    var block1331 = new GraceBlock(this, 544, 0);
                    block1331.real = function() {
                      var call1332 = callmethodChecked(var_modit, "hasNext", [0]);
                      return call1332;
                    };
                    var block1333 = new GraceBlock(this, 544, 0);
                    block1333.real = function() {
                      setLineNumber(545);    // compilenode identifier
                      var call1334 = callmethodChecked(var_modit, "next", [0]);
                      var var_mod = call1334;
                      var if1335 = GraceDone;
                      setLineNumber(546);    // compilenode string
                      var string1336 = new GraceString("inputs");
                      var opresult1339 = callmethodChecked(var_mod, "\u2260", [1], string1336);
                      var string1341 = new GraceString("404.md");
                      var opresult1344 = callmethodChecked(var_mod, "\u2260", [1], string1341);
                      var string1346 = new GraceString("modules.md");
                      var opresult1349 = callmethodChecked(var_mod, "\u2260", [1], string1346);
                      var string1351 = new GraceString("index.md");
                      var opresult1354 = callmethodChecked(var_mod, "\u2260", [1], string1351);
                      var string1356 = new GraceString(".js");
                      var call1357 = callmethodChecked(var_mod, "endsWith", [1], string1356);
                      var call1358 = callmethodChecked(call1357, "prefix!", [0]);
                      var string1360 = new GraceString(".css");
                      var call1361 = callmethodChecked(var_mod, "endsWith", [1], string1360);
                      var call1362 = callmethodChecked(call1361, "prefix!", [0]);
                      var string1365 = new GraceString(".");
                      var call1366 = callmethodChecked(var_mod, "startsWith", [1], string1365);
                      var opresult1368 = callmethodChecked(call1366, "==", [1], GraceFalse);
                      var opresult1370 = callmethodChecked(opresult1368, "&&", [1], call1362);
                      var opresult1372 = callmethodChecked(opresult1370, "&&", [1], call1358);
                      var opresult1374 = callmethodChecked(opresult1372, "&&", [1], opresult1354);
                      var opresult1376 = callmethodChecked(opresult1374, "&&", [1], opresult1349);
                      var opresult1378 = callmethodChecked(opresult1376, "&&", [1], opresult1344);
                      var opresult1380 = callmethodChecked(opresult1378, "&&", [1], opresult1339);
                      if (Grace_isTrue(opresult1380)) {
                        setLineNumber(547);    // compilenode string
                        var string1381 = new GraceString("</a></li>");
                        var string1384 = new GraceString(".md' target='mainFrame'>");
                        var string1387 = new GraceString("/");
                        var string1390 = new GraceString("');\">&#9654;</span><a href='");
                        var string1393 = new GraceString("' onclick=\"toggleContents('");
                        var string1396 = new GraceString("<li><span class='arrow-button-toggle' id='arrow-button-");
                        var opresult1398 = callmethodChecked(string1396, "++", [1], var_mod);
                        var opresult1400 = callmethodChecked(opresult1398, "++", [1], string1393);
                        var opresult1402 = callmethodChecked(opresult1400, "++", [1], var_mod);
                        var opresult1404 = callmethodChecked(opresult1402, "++", [1], string1390);
                        var opresult1406 = callmethodChecked(opresult1404, "++", [1], var_mod);
                        var opresult1408 = callmethodChecked(opresult1406, "++", [1], string1387);
                        var opresult1410 = callmethodChecked(opresult1408, "++", [1], var_mod);
                        var opresult1412 = callmethodChecked(opresult1410, "++", [1], string1384);
                        var opresult1414 = callmethodChecked(opresult1412, "++", [1], var_mod);
                        var opresult1416 = callmethodChecked(opresult1414, "++", [1], string1381);
                        var opresult1419 = callmethodChecked(var_out, "++", [1], opresult1416);
                        var_out = opresult1419;
                        setLineNumber(549);    // compilenode string
                        var string1420 = new GraceString("' style='display:none;'>");
                        var string1423 = new GraceString("<div class='contents-list' id='contents-");
                        var opresult1425 = callmethodChecked(string1423, "++", [1], var_mod);
                        var opresult1427 = callmethodChecked(opresult1425, "++", [1], string1420);
                        var opresult1430 = callmethodChecked(var_out, "++", [1], opresult1427);
                        var_out = opresult1430;
                        setLineNumber(551);    // compilenode string
                        var string1431 = new GraceString("<h6>Types</h6><ul>");
                        var opresult1434 = callmethodChecked(var_out, "++", [1], string1431);
                        var_out = opresult1434;
                        setLineNumber(552);    // compilenode string
                        var string1435 = new GraceString("/types");
                        var string1438 = new GraceString("/");
                        var call1440 = callmethodChecked(var_settings, "outputdir", [0]);
                        var string1442 = new GraceString("");
                        var opresult1444 = callmethodChecked(string1442, "++", [1], call1440);
                        var opresult1446 = callmethodChecked(opresult1444, "++", [1], string1438);
                        var opresult1448 = callmethodChecked(opresult1446, "++", [1], var_mod);
                        var opresult1450 = callmethodChecked(opresult1448, "++", [1], string1435);
                        var call1451 = callmethodChecked(var_io, "listdir", [1], opresult1450);
                        var var_types = call1451;
                        setLineNumber(553);    // compilenode identifier
                        var call1452 = callmethodChecked(var_types, "iterator", [0]);
                        var var_typit = call1452;
                        setLineNumber(554);    // compilenode block
                        var block1453 = new GraceBlock(this, 554, 0);
                        block1453.real = function() {
                          var call1454 = callmethodChecked(var_typit, "hasNext", [0]);
                          return call1454;
                        };
                        var block1455 = new GraceBlock(this, 554, 0);
                        block1455.real = function() {
                          setLineNumber(555);    // compilenode identifier
                          var call1456 = callmethodChecked(var_typit, "next", [0]);
                          var var_typ = call1456;
                          setLineNumber(556);    // compilenode identifier
                          var call1458 = callmethodChecked(var_typ, "size", [0]);
                          var diff1460 = callmethodChecked(call1458, "-", [1], new GraceNum(5));
                          var call1461 = callmethodChecked(var_typ, "substringFrom()to", [1, 1], new GraceNum(1), diff1460);
                          var_typ = call1461;
                          var if1462 = GraceDone;
                          setLineNumber(557);    // compilenode string
                          var string1463 = new GraceString("contents.md");
                          var opresult1466 = callmethodChecked(var_typ, "\u2260", [1], string1463);
                          var string1469 = new GraceString(".");
                          var call1470 = callmethodChecked(var_typ, "startsWith", [1], string1469);
                          var opresult1472 = callmethodChecked(call1470, "==", [1], GraceFalse);
                          var opresult1474 = callmethodChecked(opresult1472, "&&", [1], opresult1466);
                          if (Grace_isTrue(opresult1474)) {
                            setLineNumber(558);    // compilenode string
                            var string1475 = new GraceString("</a></li>");
                            var string1478 = new GraceString(".md' target='mainFrame'>");
                            var string1481 = new GraceString("/types/");
                            var string1484 = new GraceString("<li><a href='");
                            var opresult1486 = callmethodChecked(string1484, "++", [1], var_mod);
                            var opresult1488 = callmethodChecked(opresult1486, "++", [1], string1481);
                            var opresult1490 = callmethodChecked(opresult1488, "++", [1], var_typ);
                            var opresult1492 = callmethodChecked(opresult1490, "++", [1], string1478);
                            var opresult1494 = callmethodChecked(opresult1492, "++", [1], var_typ);
                            var opresult1496 = callmethodChecked(opresult1494, "++", [1], string1475);
                            var opresult1499 = callmethodChecked(var_out, "++", [1], opresult1496);
                            var_out = opresult1499;
                            if1462 = GraceDone;
                          }
                          return if1462;
                        };
                        var call1500 = callmethodChecked(var_prelude, "while()do", [1, 1], block1453, block1455);
                        setLineNumber(561);    // compilenode string
                        var string1501 = new GraceString("</ul>");
                        var opresult1504 = callmethodChecked(var_out, "++", [1], string1501);
                        var_out = opresult1504;
                        setLineNumber(563);    // compilenode string
                        var string1505 = new GraceString("<h6>Classes</h6><ul>");
                        var opresult1508 = callmethodChecked(var_out, "++", [1], string1505);
                        var_out = opresult1508;
                        setLineNumber(564);    // compilenode string
                        var string1509 = new GraceString("/classes");
                        var string1512 = new GraceString("/");
                        var call1514 = callmethodChecked(var_settings, "outputdir", [0]);
                        var string1516 = new GraceString("");
                        var opresult1518 = callmethodChecked(string1516, "++", [1], call1514);
                        var opresult1520 = callmethodChecked(opresult1518, "++", [1], string1512);
                        var opresult1522 = callmethodChecked(opresult1520, "++", [1], var_mod);
                        var opresult1524 = callmethodChecked(opresult1522, "++", [1], string1509);
                        var call1525 = callmethodChecked(var_io, "listdir", [1], opresult1524);
                        var var_clss = call1525;
                        setLineNumber(565);    // compilenode identifier
                        var call1526 = callmethodChecked(var_clss, "iterator", [0]);
                        var var_clsit = call1526;
                        setLineNumber(566);    // compilenode block
                        var block1527 = new GraceBlock(this, 566, 0);
                        block1527.real = function() {
                          var call1528 = callmethodChecked(var_clsit, "hasNext", [0]);
                          return call1528;
                        };
                        var block1529 = new GraceBlock(this, 566, 0);
                        block1529.real = function() {
                          setLineNumber(567);    // compilenode identifier
                          var call1530 = callmethodChecked(var_clsit, "next", [0]);
                          var var_cls = call1530;
                          setLineNumber(568);    // compilenode identifier
                          var call1532 = callmethodChecked(var_cls, "size", [0]);
                          var diff1534 = callmethodChecked(call1532, "-", [1], new GraceNum(5));
                          var call1535 = callmethodChecked(var_cls, "substringFrom()to", [1, 1], new GraceNum(1), diff1534);
                          var_cls = call1535;
                          var if1536 = GraceDone;
                          setLineNumber(569);    // compilenode string
                          var string1537 = new GraceString("contents.md");
                          var opresult1540 = callmethodChecked(var_cls, "\u2260", [1], string1537);
                          var string1543 = new GraceString(".");
                          var call1544 = callmethodChecked(var_cls, "startsWith", [1], string1543);
                          var opresult1546 = callmethodChecked(call1544, "==", [1], GraceFalse);
                          var opresult1548 = callmethodChecked(opresult1546, "&&", [1], opresult1540);
                          if (Grace_isTrue(opresult1548)) {
                            setLineNumber(570);    // compilenode string
                            var string1549 = new GraceString("</a></li>");
                            var string1552 = new GraceString(".md' target='mainFrame'>");
                            var string1555 = new GraceString("/classes/");
                            var string1558 = new GraceString("<li><a href='");
                            var opresult1560 = callmethodChecked(string1558, "++", [1], var_mod);
                            var opresult1562 = callmethodChecked(opresult1560, "++", [1], string1555);
                            var opresult1564 = callmethodChecked(opresult1562, "++", [1], var_cls);
                            var opresult1566 = callmethodChecked(opresult1564, "++", [1], string1552);
                            var opresult1568 = callmethodChecked(opresult1566, "++", [1], var_cls);
                            var opresult1570 = callmethodChecked(opresult1568, "++", [1], string1549);
                            var opresult1573 = callmethodChecked(var_out, "++", [1], opresult1570);
                            var_out = opresult1573;
                            if1536 = GraceDone;
                          }
                          return if1536;
                        };
                        var call1574 = callmethodChecked(var_prelude, "while()do", [1, 1], block1527, block1529);
                        setLineNumber(573);    // compilenode string
                        var string1575 = new GraceString("</ul>");
                        var opresult1578 = callmethodChecked(var_out, "++", [1], string1575);
                        var_out = opresult1578;
                        setLineNumber(575);    // compilenode string
                        var string1579 = new GraceString("</div>");
                        var opresult1582 = callmethodChecked(var_out, "++", [1], string1579);
                        var_out = opresult1582;
                        if1335 = GraceDone;
                      }
                      return if1335;
                    };
                    var call1583 = callmethodChecked(var_prelude, "while()do", [1, 1], block1331, block1333);
                    setLineNumber(578);    // compilenode string
                    var string1584 = new GraceString("</ul></div></body>");
                    var opresult1587 = callmethodChecked(var_out, "++", [1], string1584);
                    var_out = opresult1587;
                    setLineNumber(579);    // compilenode string
                    var string1588 = new GraceString("</html>");
                    var opresult1591 = callmethodChecked(var_out, "++", [1], string1588);
                    var_out = opresult1591;
                    setLineNumber(580);    // compilenode string
                    var string1592 = new GraceString("/modules.md");
                    var call1594 = callmethodChecked(var_settings, "outputdir", [0]);
                    var string1596 = new GraceString("");
                    var opresult1598 = callmethodChecked(string1596, "++", [1], call1594);
                    var opresult1600 = callmethodChecked(opresult1598, "++", [1], string1592);
                    var string1601 = new GraceString("w");
                    var call1602 = callmethodChecked(var_io, "open", [2], opresult1600, string1601);
                    var var_moduleslistfile = call1602;
                    setLineNumber(581);    // compilenode identifier
                    var call1603 = callmethodChecked(var_moduleslistfile, "write", [1], var_out);
                    setLineNumber(582);    // compilenode identifier
                    var call1604 = callmethodChecked(var_moduleslistfile, "close", [0]);
                    if1283 = call1604;
                  }
                  return if1283;
                };
                func1192.paramCounts = [0];
                obj1190.methods["generate"] = func1192;
                func1192.definitionLine = 507;
                func1192.definitionModule = "gracedocMD";
                var func1605 = function(argcv) {    // method visitTypeDec(1)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_o = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTypeDec(1)"));
                  setModuleName("gracedocMD");
                  var if1606 = GraceDone;
                  setLineNumber(587);    // compilenode call
                  onSelf = true;
                  var call1608 = callmethodChecked(this, "isOnTypePage", [0]);
                  var opresult1610 = callmethodChecked(call1608, "==", [1], GraceFalse);
                  if (Grace_isTrue(opresult1610)) {
                    setLineNumber(588);    // compilenode identifier
                    var call1611 = callmethodChecked(var_o, "name", [0]);
                    var call1612 = callmethodChecked(call1611, "value", [0]);
                    onSelf = true;
                    var call1613 = callmethodChecked(this, "outdir", [0]);
                    var string1614 = new GraceString("type");
                    var call1615 = callmethodChecked(superDepth, "outer", [0]);
                    onOuter = true;
                    onSelf = true;
                    var call1616 = callmethodChecked(call1615, "directoryBuilderForFile()outTo()as", [1, 1, 1], call1612, call1613, string1614);
                    var var_typeVis = call1616;
                    setLineNumber(589);    // compilenode identifier
                    var call1617 = callmethodChecked(var_o, "accept", [1], var_typeVis);
                    setLineNumber(590);    // compilenode identifier
                    var call1618 = callmethodChecked(var_typeVis, "generate", [0]);
                    setLineNumber(591);    // compilenode identifier
                    return GraceFalse;
                  }
                  setLineNumber(593);    // compilenode identifier
                  return GraceTrue;
                };
                func1605.paramCounts = [1];
                obj1190.methods["visitTypeDec"] = func1605;
                func1605.definitionLine = 586;
                func1605.definitionModule = "gracedocMD";
                var func1619 = function(argcv) {    // method visitMethod(1)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_m = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMethod(1)"));
                  setModuleName("gracedocMD");
                  var if1620 = GraceDone;
                  setLineNumber(597);    // compilenode identifier
                  var call1621 = callmethodChecked(var_m, "isClass", [0]);
                  var call1622 = callmethodChecked(call1621, "not", [0]);
                  if (Grace_isTrue(call1622)) {
                    return GraceFalse;
                  }
                  var if1623 = GraceDone;
                  setLineNumber(598);    // compilenode call
                  onSelf = true;
                  var call1625 = callmethodChecked(this, "isOnClassPage", [0]);
                  var opresult1627 = callmethodChecked(call1625, "==", [1], GraceFalse);
                  if (Grace_isTrue(opresult1627)) {
                    setLineNumber(599);    // compilenode identifier
                    var call1628 = callmethodChecked(var_m, "body", [0]);
                    var call1629 = callmethodChecked(call1628, "last", [0]);
                    var var_o = call1629;
                    var if1630 = GraceDone;
                    setLineNumber(600);    // compilenode identifier
                    var call1632 = callmethodChecked(var_o, "superclass", [0]);
                    var opresult1634 = callmethodChecked(call1632, "\u2260", [1], GraceFalse);
                    if (Grace_isTrue(opresult1634)) {
                      setLineNumber(601);    // compilenode identifier
                      var call1635 = callmethodChecked(var_o, "superclass", [0]);
                      var call1636 = callmethodChecked(call1635, "accept", [1], this);
                      if1630 = call1636;
                    }
                    setLineNumber(603);    // compilenode identifier
                    var call1637 = callmethodChecked(var_o, "name", [0]);
                    onSelf = true;
                    var call1638 = callmethodChecked(this, "outdir", [0]);
                    var string1639 = new GraceString("class");
                    var call1640 = callmethodChecked(superDepth, "outer", [0]);
                    onOuter = true;
                    onSelf = true;
                    var call1641 = callmethodChecked(call1640, "directoryBuilderForFile()outTo()as", [1, 1, 1], call1637, call1638, string1639);
                    var var_classVis = call1641;
                    setLineNumber(604);    // compilenode identifier
                    var call1642 = callmethodChecked(var_o, "accept", [1], var_classVis);
                    setLineNumber(605);    // compilenode identifier
                    var call1643 = callmethodChecked(var_classVis, "generate", [0]);
                    setLineNumber(606);    // compilenode identifier
                    return GraceFalse;
                  }
                  setLineNumber(608);    // compilenode identifier
                  return GraceTrue;
                };
                func1619.paramCounts = [1];
                obj1190.methods["visitMethod"] = func1619;
                func1619.definitionLine = 596;
                func1619.definitionModule = "gracedocMD";
                setLineNumber(492);    // compilenode identifier
                var call1644 = callmethodChecked(var_ast, "baseVisitor()object", [0, 1], this);
                obj1190.superobj = call1644;
                if (call1644.data) obj1190.data = call1644.data;
                if (call1644.hasOwnProperty('_value'))
                    obj1190._value = call1644._value;
                setLineNumber(494);    // compilenode identifier
                obj1190.data["isOnClassPage"] = GraceFalse;
                var reader_gracedocMD_isOnClassPage1645 = function() {
                  return this.data["isOnClassPage"];
                };
                obj1190.methods["isOnClassPage"] = reader_gracedocMD_isOnClassPage1645;
                obj1190.data["isOnClassPage"] = GraceFalse;
                var writer_gracedocMD_isOnClassPage1645 = function(argcv, o) {
                  this.data["isOnClassPage"] = o;
                  return GraceDone;
                };
                obj1190.methods["isOnClassPage:="] = writer_gracedocMD_isOnClassPage1645;
                reader_gracedocMD_isOnClassPage1645.confidential = true;
                writer_gracedocMD_isOnClassPage1645.confidential = true;
                obj1190.mutable = true;
                setLineNumber(495);    // compilenode identifier
                obj1190.data["isOnTypePage"] = GraceFalse;
                var reader_gracedocMD_isOnTypePage1646 = function() {
                  return this.data["isOnTypePage"];
                };
                obj1190.methods["isOnTypePage"] = reader_gracedocMD_isOnTypePage1646;
                obj1190.data["isOnTypePage"] = GraceFalse;
                var writer_gracedocMD_isOnTypePage1646 = function(argcv, o) {
                  this.data["isOnTypePage"] = o;
                  return GraceDone;
                };
                obj1190.methods["isOnTypePage:="] = writer_gracedocMD_isOnTypePage1646;
                reader_gracedocMD_isOnTypePage1646.confidential = true;
                writer_gracedocMD_isOnTypePage1646.confidential = true;
                obj1190.mutable = true;
                var if1647 = GraceDone;
                setLineNumber(496);    // compilenode string
                var string1648 = new GraceString("class");
                var opresult1651 = callmethodChecked(var_pageType, "==", [1], string1648);
                if (Grace_isTrue(opresult1651)) {
                  onSelf = true;
                  var call1652 = callmethodChecked(this, "isOnClassPage:=", [1], GraceTrue);
                  if1647 = call1652;
                } else {
                  var if1653 = GraceDone;
                  setLineNumber(497);    // compilenode string
                  var string1654 = new GraceString("type");
                  var opresult1657 = callmethodChecked(var_pageType, "==", [1], string1654);
                  if (Grace_isTrue(opresult1657)) {
                    onSelf = true;
                    var call1658 = callmethodChecked(this, "isOnTypePage:=", [1], GraceTrue);
                    if1653 = call1658;
                  }
                  if1647 = if1653;
                }
                var if1659 = GraceDone;
                setLineNumber(499);    // compilenode string
                var string1660 = new GraceString(".grace");
                var call1661 = callmethodChecked(var_in, "endsWith", [1], string1660);
                var call1662 = callmethodChecked(call1661, "not", [0]);
                if (Grace_isTrue(call1662)) {
                  if1659 = var_in;
                } else {
                  setLineNumber(500);    // compilenode identifier
                  var call1664 = callmethodChecked(var_in, "size", [0]);
                  var diff1666 = callmethodChecked(call1664, "-", [1], new GraceNum(6));
                  var call1667 = callmethodChecked(var_in, "substringFrom()to", [1, 1], new GraceNum(0), diff1666);
                  if1659 = call1667;
                }
                obj1190.data["pageName"] = if1659;
                var reader_gracedocMD_pageName1668 = function() {
                  return this.data["pageName"];
                };
                reader_gracedocMD_pageName1668.def = true;
                reader_gracedocMD_pageName1668.confidential = true;
                obj1190.methods["pageName"] = reader_gracedocMD_pageName1668;
                var if1669 = GraceDone;
                setLineNumber(501);    // compilenode call
                onSelf = true;
                var call1670 = callmethodChecked(this, "isOnTypePage", [0]);
                if (Grace_isTrue(call1670)) {
                  var string1671 = new GraceString("");
                  onSelf = true;
                  var call1673 = callmethodChecked(this, "pageName", [0]);
                  var string1675 = new GraceString("Type: ");
                  var opresult1677 = callmethodChecked(string1675, "++", [1], call1673);
                  var opresult1679 = callmethodChecked(opresult1677, "++", [1], string1671);
                  if1669 = opresult1679;
                } else {
                  var if1680 = GraceDone;
                  setLineNumber(502);    // compilenode call
                  onSelf = true;
                  var call1681 = callmethodChecked(this, "isOnClassPage", [0]);
                  if (Grace_isTrue(call1681)) {
                    var string1682 = new GraceString("");
                    onSelf = true;
                    var call1684 = callmethodChecked(this, "pageName", [0]);
                    var string1686 = new GraceString("Class: ");
                    var opresult1688 = callmethodChecked(string1686, "++", [1], call1684);
                    var opresult1690 = callmethodChecked(opresult1688, "++", [1], string1682);
                    if1680 = opresult1690;
                  } else {
                    setLineNumber(503);    // compilenode string
                    var string1691 = new GraceString("");
                    onSelf = true;
                    var call1693 = callmethodChecked(this, "pageName", [0]);
                    var string1695 = new GraceString("Module: ");
                    var opresult1697 = callmethodChecked(string1695, "++", [1], call1693);
                    var opresult1699 = callmethodChecked(opresult1697, "++", [1], string1691);
                    if1680 = opresult1699;
                  }
                  if1669 = if1680;
                }
                obj1190.data["title"] = if1669;
                var reader_gracedocMD_title1700 = function() {
                  return this.data["title"];
                };
                reader_gracedocMD_title1700.def = true;
                reader_gracedocMD_title1700.confidential = true;
                obj1190.methods["title"] = reader_gracedocMD_title1700;
                var if1701 = GraceDone;
                setLineNumber(505);    // compilenode call
                onSelf = true;
                var call1702 = callmethodChecked(this, "isOnTypePage", [0]);
                onSelf = true;
                var call1704 = callmethodChecked(this, "isOnClassPage", [0]);
                var opresult1706 = callmethodChecked(call1704, "||", [1], call1702);
                if (Grace_isTrue(opresult1706)) {
                  if1701 = var_dir;
                } else {
                  onSelf = true;
                  var call1707 = callmethodChecked(this, "pageName", [0]);
                  if1701 = call1707;
                }
                obj1190.data["outdir"] = if1701;
                var reader_gracedocMD_outdir1708 = function() {
                  return this.data["outdir"];
                };
                reader_gracedocMD_outdir1708.def = true;
                reader_gracedocMD_outdir1708.confidential = true;
                obj1190.methods["outdir"] = reader_gracedocMD_outdir1708;
                superDepth = origSuperDepth;
              };
              obj_init_1190.apply(obj1190, []);
              return obj1190;
            };
            func1189.paramCounts = [1, 1, 1];
            this.methods["directoryBuilderForFile()outTo()as"] = func1189;
            func1189.definitionLine = 491;
            func1189.definitionModule = "gracedocMD";
              var func1709 = function(argcv) {    // method directoryBuilderForFile(1     )outTo(1     )as(1     )()object
                var curarg = 1;
                var var_in = arguments[curarg];
                curarg++;
                var var_dir = arguments[curarg];
                curarg++;
                var var_pageType = arguments[curarg];
                curarg++;
                var inheritingObject = arguments[curarg++];
                // Start argument processing
                curarg = 1;
                curarg++;
                curarg++;
                curarg++;
                // End argument processing
                setModuleName("gracedocMD");
                var returnTarget = invocationCount;
                invocationCount++;
                var obj1710 = Grace_allocObject(null, "directoryBuilderForFile()outTo()as");
                obj1710.definitionModule = "gracedocMD";
                obj1710.definitionLine = 491;
                var inho1710 = inheritingObject;
                while (inho1710.superobj) inho1710 = inho1710.superobj;
                inho1710.superobj = obj1710;
                obj1710.data = inheritingObject.data;
                if (inheritingObject.hasOwnProperty('_value'))
                  obj1710._value = inheritingObject._value;
                obj1710.outer = this;
                var reader_gracedocMD_outer1711 = function() {
                  return this.outer;
                };
                obj1710.methods["outer"] = reader_gracedocMD_outer1711;
                var obj_init_1710 = function() {
                  var origSuperDepth = superDepth;
                  superDepth = obj1710;
                  var func1712 = function(argcv) {    // method generate
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    if (argcv[0] !== 0)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for generate"));
                    setModuleName("gracedocMD");
                    setLineNumber(508);    // compilenode vardec
                    var var_outfile;
                    var if1713 = GraceDone;
                    setLineNumber(509);    // compilenode string
                    var string1714 = new GraceString("");
                    var call1716 = callmethodChecked(var_settings, "outputdir", [0]);
                    var string1718 = new GraceString("");
                    var opresult1720 = callmethodChecked(string1718, "++", [1], call1716);
                    var opresult1722 = callmethodChecked(opresult1720, "++", [1], string1714);
                    var call1723 = callmethodChecked(var_io, "exists", [1], opresult1722);
                    var call1724 = callmethodChecked(call1723, "prefix!", [0]);
                    if (Grace_isTrue(call1724)) {
                      var string1725 = new GraceString("");
                      var call1727 = callmethodChecked(var_settings, "outputdir", [0]);
                      var string1729 = new GraceString("mkdir ");
                      var opresult1731 = callmethodChecked(string1729, "++", [1], call1727);
                      var opresult1733 = callmethodChecked(opresult1731, "++", [1], string1725);
                      var call1734 = callmethodChecked(var_io, "system", [1], opresult1733);
                      if1713 = call1734;
                    }
                    var if1735 = GraceDone;
                    setLineNumber(510);    // compilenode string
                    var string1736 = new GraceString("");
                    onSelf = true;
                    var call1738 = callmethodChecked(this, "outdir", [0]);
                    var string1740 = new GraceString("/");
                    var call1742 = callmethodChecked(var_settings, "outputdir", [0]);
                    var string1744 = new GraceString("");
                    var opresult1746 = callmethodChecked(string1744, "++", [1], call1742);
                    var opresult1748 = callmethodChecked(opresult1746, "++", [1], string1740);
                    var opresult1750 = callmethodChecked(opresult1748, "++", [1], call1738);
                    var opresult1752 = callmethodChecked(opresult1750, "++", [1], string1736);
                    var call1753 = callmethodChecked(var_io, "exists", [1], opresult1752);
                    var call1754 = callmethodChecked(call1753, "prefix!", [0]);
                    if (Grace_isTrue(call1754)) {
                      var string1755 = new GraceString("");
                      onSelf = true;
                      var call1757 = callmethodChecked(this, "outdir", [0]);
                      var string1759 = new GraceString("/");
                      var call1761 = callmethodChecked(var_settings, "outputdir", [0]);
                      var string1763 = new GraceString("mkdir ");
                      var opresult1765 = callmethodChecked(string1763, "++", [1], call1761);
                      var opresult1767 = callmethodChecked(opresult1765, "++", [1], string1759);
                      var opresult1769 = callmethodChecked(opresult1767, "++", [1], call1757);
                      var opresult1771 = callmethodChecked(opresult1769, "++", [1], string1755);
                      var call1772 = callmethodChecked(var_io, "system", [1], opresult1771);
                      if1735 = call1772;
                    }
                    setLineNumber(527);    // compilenode string
                    var string1773 = new GraceString(".md");
                    onSelf = true;
                    var call1775 = callmethodChecked(this, "pageName", [0]);
                    var string1777 = new GraceString("/");
                    onSelf = true;
                    var call1779 = callmethodChecked(this, "outdir", [0]);
                    var string1781 = new GraceString("/");
                    var call1783 = callmethodChecked(var_settings, "outputdir", [0]);
                    var string1785 = new GraceString("");
                    var opresult1787 = callmethodChecked(string1785, "++", [1], call1783);
                    var opresult1789 = callmethodChecked(opresult1787, "++", [1], string1781);
                    var opresult1791 = callmethodChecked(opresult1789, "++", [1], call1779);
                    var opresult1793 = callmethodChecked(opresult1791, "++", [1], string1777);
                    var opresult1795 = callmethodChecked(opresult1793, "++", [1], call1775);
                    var opresult1797 = callmethodChecked(opresult1795, "++", [1], string1773);
                    var string1798 = new GraceString("w");
                    var call1799 = callmethodChecked(var_io, "open", [2], opresult1797, string1798);
                    var_outfile = call1799;
                    setLineNumber(528);    // compilenode string
                    var string1800 = new GraceString("TEMPORARY");
                    var call1801 = callmethodChecked(var_outfile, "write", [1], string1800);
                    setLineNumber(529);    // compilenode identifier
                    var call1802 = callmethodChecked(var_outfile, "close", [0]);
                    var if1803 = GraceDone;
                    setLineNumber(531);    // compilenode call
                    onSelf = true;
                    var call1804 = callmethodChecked(this, "isOnTypePage", [0]);
                    var call1805 = callmethodChecked(call1804, "prefix!", [0]);
                    onSelf = true;
                    var call1807 = callmethodChecked(this, "isOnClassPage", [0]);
                    var call1808 = callmethodChecked(call1807, "prefix!", [0]);
                    var opresult1810 = callmethodChecked(call1808, "&&", [1], call1805);
                    if (Grace_isTrue(opresult1810)) {
                      setLineNumber(533);    // compilenode string
                      var string1811 = new GraceString("---\n");
                      var var_out = string1811;
                      setLineNumber(534);    // compilenode string
                      var string1812 = new GraceString("\"\n");
                      onSelf = true;
                      var call1814 = callmethodChecked(this, "title", [0]);
                      var string1816 = new GraceString("title: \"");
                      var opresult1818 = callmethodChecked(string1816, "++", [1], call1814);
                      var opresult1820 = callmethodChecked(opresult1818, "++", [1], string1812);
                      var opresult1823 = callmethodChecked(var_out, "++", [1], opresult1820);
                      var_out = opresult1823;
                      setLineNumber(535);    // compilenode string
                      var string1824 = new GraceString("keywords: mydoc\n");
                      var opresult1827 = callmethodChecked(var_out, "++", [1], string1824);
                      var_out = opresult1827;
                      setLineNumber(536);    // compilenode string
                      var string1828 = new GraceString("sidebar: grace-doc-sidebar\n");
                      var opresult1831 = callmethodChecked(var_out, "++", [1], string1828);
                      var_out = opresult1831;
                      setLineNumber(537);    // compilenode string
                      var string1832 = new GraceString("toc: false");
                      var opresult1835 = callmethodChecked(var_out, "++", [1], string1832);
                      var_out = opresult1835;
                      setLineNumber(538);    // compilenode string
                      var string1836 = new GraceString("permalink: /drawingCanvas/\n");
                      var opresult1839 = callmethodChecked(var_out, "++", [1], string1836);
                      var_out = opresult1839;
                      setLineNumber(539);    // compilenode string
                      var string1840 = new GraceString("folder: grace-docs\n");
                      var opresult1843 = callmethodChecked(var_out, "++", [1], string1840);
                      var_out = opresult1843;
                      setLineNumber(540);    // compilenode string
                      var string1844 = new GraceString("---\n");
                      var opresult1847 = callmethodChecked(var_out, "++", [1], string1844);
                      var_out = opresult1847;
                      setLineNumber(542);    // compilenode identifier
                      var call1848 = callmethodChecked(var_settings, "outputdir", [0]);
                      var call1849 = callmethodChecked(var_io, "listdir", [1], call1848);
                      var var_modules = call1849;
                      setLineNumber(543);    // compilenode identifier
                      var call1850 = callmethodChecked(var_modules, "iterator", [0]);
                      var var_modit = call1850;
                      setLineNumber(544);    // compilenode block
                      var block1851 = new GraceBlock(this, 544, 0);
                      block1851.real = function() {
                        var call1852 = callmethodChecked(var_modit, "hasNext", [0]);
                        return call1852;
                      };
                      var block1853 = new GraceBlock(this, 544, 0);
                      block1853.real = function() {
                        setLineNumber(545);    // compilenode identifier
                        var call1854 = callmethodChecked(var_modit, "next", [0]);
                        var var_mod = call1854;
                        var if1855 = GraceDone;
                        setLineNumber(546);    // compilenode string
                        var string1856 = new GraceString("inputs");
                        var opresult1859 = callmethodChecked(var_mod, "\u2260", [1], string1856);
                        var string1861 = new GraceString("404.md");
                        var opresult1864 = callmethodChecked(var_mod, "\u2260", [1], string1861);
                        var string1866 = new GraceString("modules.md");
                        var opresult1869 = callmethodChecked(var_mod, "\u2260", [1], string1866);
                        var string1871 = new GraceString("index.md");
                        var opresult1874 = callmethodChecked(var_mod, "\u2260", [1], string1871);
                        var string1876 = new GraceString(".js");
                        var call1877 = callmethodChecked(var_mod, "endsWith", [1], string1876);
                        var call1878 = callmethodChecked(call1877, "prefix!", [0]);
                        var string1880 = new GraceString(".css");
                        var call1881 = callmethodChecked(var_mod, "endsWith", [1], string1880);
                        var call1882 = callmethodChecked(call1881, "prefix!", [0]);
                        var string1885 = new GraceString(".");
                        var call1886 = callmethodChecked(var_mod, "startsWith", [1], string1885);
                        var opresult1888 = callmethodChecked(call1886, "==", [1], GraceFalse);
                        var opresult1890 = callmethodChecked(opresult1888, "&&", [1], call1882);
                        var opresult1892 = callmethodChecked(opresult1890, "&&", [1], call1878);
                        var opresult1894 = callmethodChecked(opresult1892, "&&", [1], opresult1874);
                        var opresult1896 = callmethodChecked(opresult1894, "&&", [1], opresult1869);
                        var opresult1898 = callmethodChecked(opresult1896, "&&", [1], opresult1864);
                        var opresult1900 = callmethodChecked(opresult1898, "&&", [1], opresult1859);
                        if (Grace_isTrue(opresult1900)) {
                          setLineNumber(547);    // compilenode string
                          var string1901 = new GraceString("</a></li>");
                          var string1904 = new GraceString(".md' target='mainFrame'>");
                          var string1907 = new GraceString("/");
                          var string1910 = new GraceString("');\">&#9654;</span><a href='");
                          var string1913 = new GraceString("' onclick=\"toggleContents('");
                          var string1916 = new GraceString("<li><span class='arrow-button-toggle' id='arrow-button-");
                          var opresult1918 = callmethodChecked(string1916, "++", [1], var_mod);
                          var opresult1920 = callmethodChecked(opresult1918, "++", [1], string1913);
                          var opresult1922 = callmethodChecked(opresult1920, "++", [1], var_mod);
                          var opresult1924 = callmethodChecked(opresult1922, "++", [1], string1910);
                          var opresult1926 = callmethodChecked(opresult1924, "++", [1], var_mod);
                          var opresult1928 = callmethodChecked(opresult1926, "++", [1], string1907);
                          var opresult1930 = callmethodChecked(opresult1928, "++", [1], var_mod);
                          var opresult1932 = callmethodChecked(opresult1930, "++", [1], string1904);
                          var opresult1934 = callmethodChecked(opresult1932, "++", [1], var_mod);
                          var opresult1936 = callmethodChecked(opresult1934, "++", [1], string1901);
                          var opresult1939 = callmethodChecked(var_out, "++", [1], opresult1936);
                          var_out = opresult1939;
                          setLineNumber(549);    // compilenode string
                          var string1940 = new GraceString("' style='display:none;'>");
                          var string1943 = new GraceString("<div class='contents-list' id='contents-");
                          var opresult1945 = callmethodChecked(string1943, "++", [1], var_mod);
                          var opresult1947 = callmethodChecked(opresult1945, "++", [1], string1940);
                          var opresult1950 = callmethodChecked(var_out, "++", [1], opresult1947);
                          var_out = opresult1950;
                          setLineNumber(551);    // compilenode string
                          var string1951 = new GraceString("<h6>Types</h6><ul>");
                          var opresult1954 = callmethodChecked(var_out, "++", [1], string1951);
                          var_out = opresult1954;
                          setLineNumber(552);    // compilenode string
                          var string1955 = new GraceString("/types");
                          var string1958 = new GraceString("/");
                          var call1960 = callmethodChecked(var_settings, "outputdir", [0]);
                          var string1962 = new GraceString("");
                          var opresult1964 = callmethodChecked(string1962, "++", [1], call1960);
                          var opresult1966 = callmethodChecked(opresult1964, "++", [1], string1958);
                          var opresult1968 = callmethodChecked(opresult1966, "++", [1], var_mod);
                          var opresult1970 = callmethodChecked(opresult1968, "++", [1], string1955);
                          var call1971 = callmethodChecked(var_io, "listdir", [1], opresult1970);
                          var var_types = call1971;
                          setLineNumber(553);    // compilenode identifier
                          var call1972 = callmethodChecked(var_types, "iterator", [0]);
                          var var_typit = call1972;
                          setLineNumber(554);    // compilenode block
                          var block1973 = new GraceBlock(this, 554, 0);
                          block1973.real = function() {
                            var call1974 = callmethodChecked(var_typit, "hasNext", [0]);
                            return call1974;
                          };
                          var block1975 = new GraceBlock(this, 554, 0);
                          block1975.real = function() {
                            setLineNumber(555);    // compilenode identifier
                            var call1976 = callmethodChecked(var_typit, "next", [0]);
                            var var_typ = call1976;
                            setLineNumber(556);    // compilenode identifier
                            var call1978 = callmethodChecked(var_typ, "size", [0]);
                            var diff1980 = callmethodChecked(call1978, "-", [1], new GraceNum(5));
                            var call1981 = callmethodChecked(var_typ, "substringFrom()to", [1, 1], new GraceNum(1), diff1980);
                            var_typ = call1981;
                            var if1982 = GraceDone;
                            setLineNumber(557);    // compilenode string
                            var string1983 = new GraceString("contents.md");
                            var opresult1986 = callmethodChecked(var_typ, "\u2260", [1], string1983);
                            var string1989 = new GraceString(".");
                            var call1990 = callmethodChecked(var_typ, "startsWith", [1], string1989);
                            var opresult1992 = callmethodChecked(call1990, "==", [1], GraceFalse);
                            var opresult1994 = callmethodChecked(opresult1992, "&&", [1], opresult1986);
                            if (Grace_isTrue(opresult1994)) {
                              setLineNumber(558);    // compilenode string
                              var string1995 = new GraceString("</a></li>");
                              var string1998 = new GraceString(".md' target='mainFrame'>");
                              var string2001 = new GraceString("/types/");
                              var string2004 = new GraceString("<li><a href='");
                              var opresult2006 = callmethodChecked(string2004, "++", [1], var_mod);
                              var opresult2008 = callmethodChecked(opresult2006, "++", [1], string2001);
                              var opresult2010 = callmethodChecked(opresult2008, "++", [1], var_typ);
                              var opresult2012 = callmethodChecked(opresult2010, "++", [1], string1998);
                              var opresult2014 = callmethodChecked(opresult2012, "++", [1], var_typ);
                              var opresult2016 = callmethodChecked(opresult2014, "++", [1], string1995);
                              var opresult2019 = callmethodChecked(var_out, "++", [1], opresult2016);
                              var_out = opresult2019;
                              if1982 = GraceDone;
                            }
                            return if1982;
                          };
                          var call2020 = callmethodChecked(var_prelude, "while()do", [1, 1], block1973, block1975);
                          setLineNumber(561);    // compilenode string
                          var string2021 = new GraceString("</ul>");
                          var opresult2024 = callmethodChecked(var_out, "++", [1], string2021);
                          var_out = opresult2024;
                          setLineNumber(563);    // compilenode string
                          var string2025 = new GraceString("<h6>Classes</h6><ul>");
                          var opresult2028 = callmethodChecked(var_out, "++", [1], string2025);
                          var_out = opresult2028;
                          setLineNumber(564);    // compilenode string
                          var string2029 = new GraceString("/classes");
                          var string2032 = new GraceString("/");
                          var call2034 = callmethodChecked(var_settings, "outputdir", [0]);
                          var string2036 = new GraceString("");
                          var opresult2038 = callmethodChecked(string2036, "++", [1], call2034);
                          var opresult2040 = callmethodChecked(opresult2038, "++", [1], string2032);
                          var opresult2042 = callmethodChecked(opresult2040, "++", [1], var_mod);
                          var opresult2044 = callmethodChecked(opresult2042, "++", [1], string2029);
                          var call2045 = callmethodChecked(var_io, "listdir", [1], opresult2044);
                          var var_clss = call2045;
                          setLineNumber(565);    // compilenode identifier
                          var call2046 = callmethodChecked(var_clss, "iterator", [0]);
                          var var_clsit = call2046;
                          setLineNumber(566);    // compilenode block
                          var block2047 = new GraceBlock(this, 566, 0);
                          block2047.real = function() {
                            var call2048 = callmethodChecked(var_clsit, "hasNext", [0]);
                            return call2048;
                          };
                          var block2049 = new GraceBlock(this, 566, 0);
                          block2049.real = function() {
                            setLineNumber(567);    // compilenode identifier
                            var call2050 = callmethodChecked(var_clsit, "next", [0]);
                            var var_cls = call2050;
                            setLineNumber(568);    // compilenode identifier
                            var call2052 = callmethodChecked(var_cls, "size", [0]);
                            var diff2054 = callmethodChecked(call2052, "-", [1], new GraceNum(5));
                            var call2055 = callmethodChecked(var_cls, "substringFrom()to", [1, 1], new GraceNum(1), diff2054);
                            var_cls = call2055;
                            var if2056 = GraceDone;
                            setLineNumber(569);    // compilenode string
                            var string2057 = new GraceString("contents.md");
                            var opresult2060 = callmethodChecked(var_cls, "\u2260", [1], string2057);
                            var string2063 = new GraceString(".");
                            var call2064 = callmethodChecked(var_cls, "startsWith", [1], string2063);
                            var opresult2066 = callmethodChecked(call2064, "==", [1], GraceFalse);
                            var opresult2068 = callmethodChecked(opresult2066, "&&", [1], opresult2060);
                            if (Grace_isTrue(opresult2068)) {
                              setLineNumber(570);    // compilenode string
                              var string2069 = new GraceString("</a></li>");
                              var string2072 = new GraceString(".md' target='mainFrame'>");
                              var string2075 = new GraceString("/classes/");
                              var string2078 = new GraceString("<li><a href='");
                              var opresult2080 = callmethodChecked(string2078, "++", [1], var_mod);
                              var opresult2082 = callmethodChecked(opresult2080, "++", [1], string2075);
                              var opresult2084 = callmethodChecked(opresult2082, "++", [1], var_cls);
                              var opresult2086 = callmethodChecked(opresult2084, "++", [1], string2072);
                              var opresult2088 = callmethodChecked(opresult2086, "++", [1], var_cls);
                              var opresult2090 = callmethodChecked(opresult2088, "++", [1], string2069);
                              var opresult2093 = callmethodChecked(var_out, "++", [1], opresult2090);
                              var_out = opresult2093;
                              if2056 = GraceDone;
                            }
                            return if2056;
                          };
                          var call2094 = callmethodChecked(var_prelude, "while()do", [1, 1], block2047, block2049);
                          setLineNumber(573);    // compilenode string
                          var string2095 = new GraceString("</ul>");
                          var opresult2098 = callmethodChecked(var_out, "++", [1], string2095);
                          var_out = opresult2098;
                          setLineNumber(575);    // compilenode string
                          var string2099 = new GraceString("</div>");
                          var opresult2102 = callmethodChecked(var_out, "++", [1], string2099);
                          var_out = opresult2102;
                          if1855 = GraceDone;
                        }
                        return if1855;
                      };
                      var call2103 = callmethodChecked(var_prelude, "while()do", [1, 1], block1851, block1853);
                      setLineNumber(578);    // compilenode string
                      var string2104 = new GraceString("</ul></div></body>");
                      var opresult2107 = callmethodChecked(var_out, "++", [1], string2104);
                      var_out = opresult2107;
                      setLineNumber(579);    // compilenode string
                      var string2108 = new GraceString("</html>");
                      var opresult2111 = callmethodChecked(var_out, "++", [1], string2108);
                      var_out = opresult2111;
                      setLineNumber(580);    // compilenode string
                      var string2112 = new GraceString("/modules.md");
                      var call2114 = callmethodChecked(var_settings, "outputdir", [0]);
                      var string2116 = new GraceString("");
                      var opresult2118 = callmethodChecked(string2116, "++", [1], call2114);
                      var opresult2120 = callmethodChecked(opresult2118, "++", [1], string2112);
                      var string2121 = new GraceString("w");
                      var call2122 = callmethodChecked(var_io, "open", [2], opresult2120, string2121);
                      var var_moduleslistfile = call2122;
                      setLineNumber(581);    // compilenode identifier
                      var call2123 = callmethodChecked(var_moduleslistfile, "write", [1], var_out);
                      setLineNumber(582);    // compilenode identifier
                      var call2124 = callmethodChecked(var_moduleslistfile, "close", [0]);
                      if1803 = call2124;
                    }
                    return if1803;
                  };
                  func1712.paramCounts = [0];
                  obj1710.methods["generate"] = func1712;
                  func1712.definitionLine = 507;
                  func1712.definitionModule = "gracedocMD";
                  var func2125 = function(argcv) {    // method visitTypeDec(1)
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    var var_o = arguments[curarg];
                    curarg++;
                    if (argcv[0] !== 1)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTypeDec(1)"));
                    setModuleName("gracedocMD");
                    var if2126 = GraceDone;
                    setLineNumber(587);    // compilenode call
                    onSelf = true;
                    var call2128 = callmethodChecked(this, "isOnTypePage", [0]);
                    var opresult2130 = callmethodChecked(call2128, "==", [1], GraceFalse);
                    if (Grace_isTrue(opresult2130)) {
                      setLineNumber(588);    // compilenode identifier
                      var call2131 = callmethodChecked(var_o, "name", [0]);
                      var call2132 = callmethodChecked(call2131, "value", [0]);
                      onSelf = true;
                      var call2133 = callmethodChecked(this, "outdir", [0]);
                      var string2134 = new GraceString("type");
                      var call2135 = callmethodChecked(superDepth, "outer", [0]);
                      onOuter = true;
                      onSelf = true;
                      var call2136 = callmethodChecked(call2135, "directoryBuilderForFile()outTo()as", [1, 1, 1], call2132, call2133, string2134);
                      var var_typeVis = call2136;
                      setLineNumber(589);    // compilenode identifier
                      var call2137 = callmethodChecked(var_o, "accept", [1], var_typeVis);
                      setLineNumber(590);    // compilenode identifier
                      var call2138 = callmethodChecked(var_typeVis, "generate", [0]);
                      setLineNumber(591);    // compilenode identifier
                      return GraceFalse;
                    }
                    setLineNumber(593);    // compilenode identifier
                    return GraceTrue;
                  };
                  func2125.paramCounts = [1];
                  obj1710.methods["visitTypeDec"] = func2125;
                  func2125.definitionLine = 586;
                  func2125.definitionModule = "gracedocMD";
                  var func2139 = function(argcv) {    // method visitMethod(1)
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    var var_m = arguments[curarg];
                    curarg++;
                    if (argcv[0] !== 1)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMethod(1)"));
                    setModuleName("gracedocMD");
                    var if2140 = GraceDone;
                    setLineNumber(597);    // compilenode identifier
                    var call2141 = callmethodChecked(var_m, "isClass", [0]);
                    var call2142 = callmethodChecked(call2141, "not", [0]);
                    if (Grace_isTrue(call2142)) {
                      return GraceFalse;
                    }
                    var if2143 = GraceDone;
                    setLineNumber(598);    // compilenode call
                    onSelf = true;
                    var call2145 = callmethodChecked(this, "isOnClassPage", [0]);
                    var opresult2147 = callmethodChecked(call2145, "==", [1], GraceFalse);
                    if (Grace_isTrue(opresult2147)) {
                      setLineNumber(599);    // compilenode identifier
                      var call2148 = callmethodChecked(var_m, "body", [0]);
                      var call2149 = callmethodChecked(call2148, "last", [0]);
                      var var_o = call2149;
                      var if2150 = GraceDone;
                      setLineNumber(600);    // compilenode identifier
                      var call2152 = callmethodChecked(var_o, "superclass", [0]);
                      var opresult2154 = callmethodChecked(call2152, "\u2260", [1], GraceFalse);
                      if (Grace_isTrue(opresult2154)) {
                        setLineNumber(601);    // compilenode identifier
                        var call2155 = callmethodChecked(var_o, "superclass", [0]);
                        var call2156 = callmethodChecked(call2155, "accept", [1], this);
                        if2150 = call2156;
                      }
                      setLineNumber(603);    // compilenode identifier
                      var call2157 = callmethodChecked(var_o, "name", [0]);
                      onSelf = true;
                      var call2158 = callmethodChecked(this, "outdir", [0]);
                      var string2159 = new GraceString("class");
                      var call2160 = callmethodChecked(superDepth, "outer", [0]);
                      onOuter = true;
                      onSelf = true;
                      var call2161 = callmethodChecked(call2160, "directoryBuilderForFile()outTo()as", [1, 1, 1], call2157, call2158, string2159);
                      var var_classVis = call2161;
                      setLineNumber(604);    // compilenode identifier
                      var call2162 = callmethodChecked(var_o, "accept", [1], var_classVis);
                      setLineNumber(605);    // compilenode identifier
                      var call2163 = callmethodChecked(var_classVis, "generate", [0]);
                      setLineNumber(606);    // compilenode identifier
                      return GraceFalse;
                    }
                    setLineNumber(608);    // compilenode identifier
                    return GraceTrue;
                  };
                  func2139.paramCounts = [1];
                  obj1710.methods["visitMethod"] = func2139;
                  func2139.definitionLine = 596;
                  func2139.definitionModule = "gracedocMD";
                  setLineNumber(492);    // compilenode identifier
                  var call2164 = callmethodChecked(var_ast, "baseVisitor()object", [0, 1], this);
                  obj1710.superobj = call2164;
                  if (call2164.data) obj1710.data = call2164.data;
                  if (call2164.hasOwnProperty('_value'))
                      obj1710._value = call2164._value;
                  setLineNumber(494);    // compilenode identifier
                  obj1710.data["isOnClassPage"] = GraceFalse;
                  var reader_gracedocMD_isOnClassPage2165 = function() {
                    return this.data["isOnClassPage"];
                  };
                  obj1710.methods["isOnClassPage"] = reader_gracedocMD_isOnClassPage2165;
                  obj1710.data["isOnClassPage"] = GraceFalse;
                  var writer_gracedocMD_isOnClassPage2165 = function(argcv, o) {
                    this.data["isOnClassPage"] = o;
                    return GraceDone;
                  };
                  obj1710.methods["isOnClassPage:="] = writer_gracedocMD_isOnClassPage2165;
                  reader_gracedocMD_isOnClassPage2165.confidential = true;
                  writer_gracedocMD_isOnClassPage2165.confidential = true;
                  obj1710.mutable = true;
                  setLineNumber(495);    // compilenode identifier
                  obj1710.data["isOnTypePage"] = GraceFalse;
                  var reader_gracedocMD_isOnTypePage2166 = function() {
                    return this.data["isOnTypePage"];
                  };
                  obj1710.methods["isOnTypePage"] = reader_gracedocMD_isOnTypePage2166;
                  obj1710.data["isOnTypePage"] = GraceFalse;
                  var writer_gracedocMD_isOnTypePage2166 = function(argcv, o) {
                    this.data["isOnTypePage"] = o;
                    return GraceDone;
                  };
                  obj1710.methods["isOnTypePage:="] = writer_gracedocMD_isOnTypePage2166;
                  reader_gracedocMD_isOnTypePage2166.confidential = true;
                  writer_gracedocMD_isOnTypePage2166.confidential = true;
                  obj1710.mutable = true;
                  var if2167 = GraceDone;
                  setLineNumber(496);    // compilenode string
                  var string2168 = new GraceString("class");
                  var opresult2171 = callmethodChecked(var_pageType, "==", [1], string2168);
                  if (Grace_isTrue(opresult2171)) {
                    onSelf = true;
                    var call2172 = callmethodChecked(this, "isOnClassPage:=", [1], GraceTrue);
                    if2167 = call2172;
                  } else {
                    var if2173 = GraceDone;
                    setLineNumber(497);    // compilenode string
                    var string2174 = new GraceString("type");
                    var opresult2177 = callmethodChecked(var_pageType, "==", [1], string2174);
                    if (Grace_isTrue(opresult2177)) {
                      onSelf = true;
                      var call2178 = callmethodChecked(this, "isOnTypePage:=", [1], GraceTrue);
                      if2173 = call2178;
                    }
                    if2167 = if2173;
                  }
                  var if2179 = GraceDone;
                  setLineNumber(499);    // compilenode string
                  var string2180 = new GraceString(".grace");
                  var call2181 = callmethodChecked(var_in, "endsWith", [1], string2180);
                  var call2182 = callmethodChecked(call2181, "not", [0]);
                  if (Grace_isTrue(call2182)) {
                    if2179 = var_in;
                  } else {
                    setLineNumber(500);    // compilenode identifier
                    var call2184 = callmethodChecked(var_in, "size", [0]);
                    var diff2186 = callmethodChecked(call2184, "-", [1], new GraceNum(6));
                    var call2187 = callmethodChecked(var_in, "substringFrom()to", [1, 1], new GraceNum(0), diff2186);
                    if2179 = call2187;
                  }
                  obj1710.data["pageName"] = if2179;
                  var reader_gracedocMD_pageName2188 = function() {
                    return this.data["pageName"];
                  };
                  reader_gracedocMD_pageName2188.def = true;
                  reader_gracedocMD_pageName2188.confidential = true;
                  obj1710.methods["pageName"] = reader_gracedocMD_pageName2188;
                  var if2189 = GraceDone;
                  setLineNumber(501);    // compilenode call
                  onSelf = true;
                  var call2190 = callmethodChecked(this, "isOnTypePage", [0]);
                  if (Grace_isTrue(call2190)) {
                    var string2191 = new GraceString("");
                    onSelf = true;
                    var call2193 = callmethodChecked(this, "pageName", [0]);
                    var string2195 = new GraceString("Type: ");
                    var opresult2197 = callmethodChecked(string2195, "++", [1], call2193);
                    var opresult2199 = callmethodChecked(opresult2197, "++", [1], string2191);
                    if2189 = opresult2199;
                  } else {
                    var if2200 = GraceDone;
                    setLineNumber(502);    // compilenode call
                    onSelf = true;
                    var call2201 = callmethodChecked(this, "isOnClassPage", [0]);
                    if (Grace_isTrue(call2201)) {
                      var string2202 = new GraceString("");
                      onSelf = true;
                      var call2204 = callmethodChecked(this, "pageName", [0]);
                      var string2206 = new GraceString("Class: ");
                      var opresult2208 = callmethodChecked(string2206, "++", [1], call2204);
                      var opresult2210 = callmethodChecked(opresult2208, "++", [1], string2202);
                      if2200 = opresult2210;
                    } else {
                      setLineNumber(503);    // compilenode string
                      var string2211 = new GraceString("");
                      onSelf = true;
                      var call2213 = callmethodChecked(this, "pageName", [0]);
                      var string2215 = new GraceString("Module: ");
                      var opresult2217 = callmethodChecked(string2215, "++", [1], call2213);
                      var opresult2219 = callmethodChecked(opresult2217, "++", [1], string2211);
                      if2200 = opresult2219;
                    }
                    if2189 = if2200;
                  }
                  obj1710.data["title"] = if2189;
                  var reader_gracedocMD_title2220 = function() {
                    return this.data["title"];
                  };
                  reader_gracedocMD_title2220.def = true;
                  reader_gracedocMD_title2220.confidential = true;
                  obj1710.methods["title"] = reader_gracedocMD_title2220;
                  var if2221 = GraceDone;
                  setLineNumber(505);    // compilenode call
                  onSelf = true;
                  var call2222 = callmethodChecked(this, "isOnTypePage", [0]);
                  onSelf = true;
                  var call2224 = callmethodChecked(this, "isOnClassPage", [0]);
                  var opresult2226 = callmethodChecked(call2224, "||", [1], call2222);
                  if (Grace_isTrue(opresult2226)) {
                    if2221 = var_dir;
                  } else {
                    onSelf = true;
                    var call2227 = callmethodChecked(this, "pageName", [0]);
                    if2221 = call2227;
                  }
                  obj1710.data["outdir"] = if2221;
                  var reader_gracedocMD_outdir2228 = function() {
                    return this.data["outdir"];
                  };
                  reader_gracedocMD_outdir2228.def = true;
                  reader_gracedocMD_outdir2228.confidential = true;
                  obj1710.methods["outdir"] = reader_gracedocMD_outdir2228;
                  superDepth = origSuperDepth;
                };
                obj_init_1710.apply(inheritingObject, []);
                return obj1710;
                };
                this.methods["directoryBuilderForFile()outTo()as()object"] = func1709;
              setLineNumber(1423);    // compilenode method
              var func2229 = function(argcv) {    // method formatComments(1)rowClass(1)colspan(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_astNode = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for formatComments (arg list 1) of formatComments(1)rowClass(1)colspan(1)"));
                var var_rowClassName = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for rowClass (arg list 2) of formatComments(1)rowClass(1)colspan(1)"));
                var var_n = arguments[curarg];
                curarg++;
                if (argcv[2] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for colspan (arg list 3) of formatComments(1)rowClass(1)colspan(1)"));
                setModuleName("gracedocMD");
                setLineNumber(1424);    // compilenode string
                var string2230 = new GraceString("");
                var var_t = string2230;
                var if2231 = GraceDone;
                setLineNumber(1425);    // compilenode identifier
                var call2232 = callmethodChecked(var_astNode, "comments", [0]);
                var opresult2235 = callmethodChecked(GraceFalse, "\u2260", [1], call2232);
                if (Grace_isTrue(opresult2235)) {
                  setLineNumber(1426);    // compilenode string
                  var string2236 = new GraceString("\n");
                  var call2238 = callmethodChecked(var_astNode, "comments", [0]);
                  var call2239 = callmethodChecked(call2238, "value", [0]);
                  var opresult2242 = callmethodChecked(var_t, "++", [1], call2239);
                  var opresult2244 = callmethodChecked(opresult2242, "++", [1], string2236);
                  var_t = opresult2244;
                  if2231 = GraceDone;
                }
                setLineNumber(1428);    // compilenode identifier
                return var_t;
              };
              func2229.paramCounts = [1, 1, 1];
              this.methods["formatComments()rowClass()colspan"] = func2229;
              func2229.definitionLine = 1423;
              func2229.definitionModule = "gracedocMD";
              setLineNumber(7);    // compilenode object
              var obj2245 = Grace_allocObject(GraceObject, "settings");
              obj2245.definitionModule = "gracedocMD";
              obj2245.definitionLine = 7;
              obj2245.outer = this;
              var reader_gracedocMD_outer2246 = function() {
                return this.outer;
              };
              obj2245.methods["outer"] = reader_gracedocMD_outer2246;
              var obj_init_2245 = function() {
                var origSuperDepth = superDepth;
                superDepth = obj2245;
                setLineNumber(8);    // compilenode string
                var string2247 = new GraceString("");
                obj2245.data["inputdir"] = string2247;
                var reader_gracedocMD_inputdir2248 = function() {
                  return this.data["inputdir"];
                };
                obj2245.methods["inputdir"] = reader_gracedocMD_inputdir2248;
                obj2245.data["inputdir"] = string2247;
                var writer_gracedocMD_inputdir2248 = function(argcv, o) {
                  this.data["inputdir"] = o;
                  return GraceDone;
                };
                obj2245.methods["inputdir:="] = writer_gracedocMD_inputdir2248;
                if (!Grace_isTrue(callmethod(var_String, "match", [1], string2247)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("initial value of var 'inputdir' is not of type String"));
                obj2245.mutable = true;
                setLineNumber(9);    // compilenode string
                var string2249 = new GraceString("");
                obj2245.data["outputdir"] = string2249;
                var reader_gracedocMD_outputdir2250 = function() {
                  return this.data["outputdir"];
                };
                obj2245.methods["outputdir"] = reader_gracedocMD_outputdir2250;
                obj2245.data["outputdir"] = string2249;
                var writer_gracedocMD_outputdir2250 = function(argcv, o) {
                  this.data["outputdir"] = o;
                  return GraceDone;
                };
                obj2245.methods["outputdir:="] = writer_gracedocMD_outputdir2250;
                if (!Grace_isTrue(callmethod(var_String, "match", [1], string2249)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("initial value of var 'outputdir' is not of type String"));
                obj2245.mutable = true;
                setLineNumber(10);    // compilenode num
                obj2245.data["verbosity"] = new GraceNum(0);
                var reader_gracedocMD_verbosity2251 = function() {
                  return this.data["verbosity"];
                };
                obj2245.methods["verbosity"] = reader_gracedocMD_verbosity2251;
                obj2245.data["verbosity"] = new GraceNum(0);
                var writer_gracedocMD_verbosity2251 = function(argcv, o) {
                  this.data["verbosity"] = o;
                  return GraceDone;
                };
                obj2245.methods["verbosity:="] = writer_gracedocMD_verbosity2251;
                if (!Grace_isTrue(callmethod(var_Number, "match", [1], new GraceNum(0))))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("initial value of var 'verbosity' is not of type Number"));
                obj2245.mutable = true;
                setLineNumber(11);    // compilenode identifier
                obj2245.data["publicOnly"] = GraceFalse;
                var reader_gracedocMD_publicOnly2252 = function() {
                  return this.data["publicOnly"];
                };
                obj2245.methods["publicOnly"] = reader_gracedocMD_publicOnly2252;
                obj2245.data["publicOnly"] = GraceFalse;
                var writer_gracedocMD_publicOnly2252 = function(argcv, o) {
                  this.data["publicOnly"] = o;
                  return GraceDone;
                };
                obj2245.methods["publicOnly:="] = writer_gracedocMD_publicOnly2252;
                if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], GraceFalse)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("initial value of var 'publicOnly' is not of type Boolean"));
                obj2245.mutable = true;
                setLineNumber(12);    // compilenode num
                obj2245.data["version"] = new GraceNum(1.1);
                var reader_gracedocMD_version2253 = function() {
                  return this.data["version"];
                };
                reader_gracedocMD_version2253.def = true;
                obj2245.methods["version"] = reader_gracedocMD_version2253;
                if (!Grace_isTrue(callmethod(var_Number, "match", [1], new GraceNum(1.1))))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("value of def 'version' is not of type Number"));
                superDepth = origSuperDepth;
              };
              obj_init_2245.apply(obj2245, []);
              var var_settings = obj2245;
              setLineNumber(1426);    // compilenode method
              var func2254 = function(argcv) {    // method settings
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for settings"));
                setModuleName("gracedocMD");
                // settings is a simple accessor - elide try ... catch
                setLineNumber(7);    // compilenode identifier
                return var_settings;
              };
              func2254.paramCounts = [0];
              this.methods["settings"] = func2254;
              func2254.definitionLine = 1426;
              func2254.definitionModule = "gracedocMD";
              this.methods["settings"].debug = "def";
              setLineNumber(16);    // compilenode string
              var string2255 = new GraceString("code");
              var var_code = string2255;
              setLineNumber(1426);    // compilenode method
              var func2256 = function(argcv) {    // method code
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for code"));
                setModuleName("gracedocMD");
                // code is a simple accessor - elide try ... catch
                setLineNumber(16);    // compilenode identifier
                return var_code;
              };
              func2256.paramCounts = [0];
              this.methods["code"] = func2256;
              func2256.definitionLine = 1426;
              func2256.definitionModule = "gracedocMD";
              this.methods["code"].debug = "def";
              setLineNumber(17);    // compilenode string
              var string2257 = new GraceString("plaintext");
              var var_plain = string2257;
              setLineNumber(1426);    // compilenode method
              var func2258 = function(argcv) {    // method plain
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for plain"));
                setModuleName("gracedocMD");
                // plain is a simple accessor - elide try ... catch
                setLineNumber(17);    // compilenode identifier
                return var_plain;
              };
              func2258.paramCounts = [0];
              this.methods["plain"] = func2258;
              func2258.definitionLine = 1426;
              func2258.definitionModule = "gracedocMD";
              this.methods["plain"].debug = "def";
              setLineNumber(18);    // compilenode string
              var string2259 = new GraceString("heading");
              var var_heading = string2259;
              setLineNumber(1426);    // compilenode method
              var func2260 = function(argcv) {    // method heading
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for heading"));
                setModuleName("gracedocMD");
                // heading is a simple accessor - elide try ... catch
                setLineNumber(18);    // compilenode identifier
                return var_heading;
              };
              func2260.paramCounts = [0];
              this.methods["heading"] = func2260;
              func2260.definitionLine = 1426;
              func2260.definitionModule = "gracedocMD";
              this.methods["heading"].debug = "def";
              setLineNumber(19);    // compilenode string
              var string2261 = new GraceString("bold");
              var var_bold = string2261;
              setLineNumber(1426);    // compilenode method
              var func2262 = function(argcv) {    // method bold
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for bold"));
                setModuleName("gracedocMD");
                // bold is a simple accessor - elide try ... catch
                setLineNumber(19);    // compilenode identifier
                return var_bold;
              };
              func2262.paramCounts = [0];
              this.methods["bold"] = func2262;
              func2262.definitionLine = 1426;
              func2262.definitionModule = "gracedocMD";
              this.methods["bold"].debug = "def";
              setLineNumber(20);    // compilenode string
              var string2263 = new GraceString("italic");
              var var_italic = string2263;
              setLineNumber(1426);    // compilenode method
              var func2264 = function(argcv) {    // method italic
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for italic"));
                setModuleName("gracedocMD");
                // italic is a simple accessor - elide try ... catch
                setLineNumber(20);    // compilenode identifier
                return var_italic;
              };
              func2264.paramCounts = [0];
              this.methods["italic"] = func2264;
              func2264.definitionLine = 1426;
              func2264.definitionModule = "gracedocMD";
              this.methods["italic"].debug = "def";
              setLineNumber(21);    // compilenode string
              var string2265 = new GraceString("/grace-documentation/");
              var var_baseUrl = string2265;
              setLineNumber(1426);    // compilenode method
              var func2266 = function(argcv) {    // method baseUrl
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for baseUrl"));
                setModuleName("gracedocMD");
                // baseUrl is a simple accessor - elide try ... catch
                setLineNumber(21);    // compilenode identifier
                return var_baseUrl;
              };
              func2266.paramCounts = [0];
              this.methods["baseUrl"] = func2266;
              func2266.definitionLine = 1426;
              func2266.definitionModule = "gracedocMD";
              this.methods["baseUrl"].debug = "def";
              setLineNumber(23);    // compilenode string
              var string2267 = new GraceString("classList");
              var var_classList = string2267;
              setLineNumber(1426);    // compilenode method
              var func2268 = function(argcv) {    // method classList
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for classList"));
                setModuleName("gracedocMD");
                // classList is a simple accessor - elide try ... catch
                setLineNumber(23);    // compilenode identifier
                return var_classList;
              };
              func2268.paramCounts = [0];
              this.methods["classList"] = func2268;
              func2268.definitionLine = 1426;
              func2268.definitionModule = "gracedocMD";
              this.methods["classList"].debug = "def";
              setLineNumber(24);    // compilenode string
              var string2269 = new GraceString("typeList");
              var var_typeList = string2269;
              setLineNumber(1426);    // compilenode method
              var func2270 = function(argcv) {    // method typeList
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for typeList"));
                setModuleName("gracedocMD");
                // typeList is a simple accessor - elide try ... catch
                setLineNumber(24);    // compilenode identifier
                return var_typeList;
              };
              func2270.paramCounts = [0];
              this.methods["typeList"] = func2270;
              func2270.definitionLine = 1426;
              func2270.definitionModule = "gracedocMD";
              this.methods["typeList"].debug = "def";
              setLineNumber(89);    // compilenode typedec
              // Type decl Section
              //   Type literal 
              var type2272 = new GraceType("Section");
              type2272.typeMethods.push("md");
              type2272.typeMethods.push("isEmpty");
              type2272.typeMethods.push("insert");
              var var_Section = type2272;
              setLineNumber(1426);    // compilenode method
              var func2273 = function(argcv) {    // method Section
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Section"));
                setModuleName("gracedocMD");
                // Section is a simple accessor - elide try ... catch
                setLineNumber(89);    // compilenode identifier
                return var_Section;
              };
              func2273.paramCounts = [0];
              this.methods["Section"] = func2273;
              func2273.definitionLine = 1426;
              func2273.definitionModule = "gracedocMD";
              setLineNumber(96);    // compilenode object
              var obj2274 = Grace_allocObject(GraceObject, "section");
              obj2274.definitionModule = "gracedocMD";
              obj2274.definitionLine = 96;
              obj2274.outer = this;
              var reader_gracedocMD_outer2275 = function() {
                return this.outer;
              };
              obj2274.methods["outer"] = reader_gracedocMD_outer2275;
              var obj_init_2274 = function() {
                var origSuperDepth = superDepth;
                superDepth = obj2274;
                var func2276 = function(argcv) {    // method withTemplate(1)andCursorAt(1)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_md__39__ = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for withTemplate (arg list 1) of withTemplate(1)andCursorAt(1)"));
                  var var_idx = arguments[curarg];
                  curarg++;
                  if (argcv[1] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for andCursorAt (arg list 2) of withTemplate(1)andCursorAt(1)"));
                  setModuleName("gracedocMD");
                  var obj2277 = Grace_allocObject(GraceObject, "section.section.withTemplate()andCursorAt");
                  obj2277.definitionModule = "gracedocMD";
                  obj2277.definitionLine = 96;
                  obj2277.outer = this;
                  var reader_gracedocMD_outer2278 = function() {
                    return this.outer;
                  };
                  obj2277.methods["outer"] = reader_gracedocMD_outer2278;
                  var obj_init_2277 = function() {
                    var origSuperDepth = superDepth;
                    superDepth = obj2277;
                    var func2279 = function(argcv) {    // method addElement(1)withText(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_n = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addElement (arg list 1) of addElement(1)withText(1)"));
                      var var_t = arguments[curarg];
                      curarg++;
                      if (argcv[1] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for withText (arg list 2) of addElement(1)withText(1)"));
                      // Start argument checking
                      curarg = 1;
                      setLineNumber(101);    // compilenode identifier
                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("argument 1 in addElement (arg list 1), which corresponds to parameter n, does not have " + 
                                  callmethod(var_String, "asString", [0])._value + "."));
                      curarg++;
                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("argument 1 in withText (arg list 2), which corresponds to parameter t, does not have " + 
                                  callmethod(var_String, "asString", [0])._value + "."));
                      curarg++;
                      // End argument checking
                      setModuleName("gracedocMD");
                      setLineNumber(102);    // compilenode identifier
                      onSelf = true;
                      var call2280 = callmethodChecked(this, "hasContent:=", [1], GraceTrue);
                      setLineNumber(103);    // compilenode call
                      onSelf = true;
                      var call2281 = callmethodChecked(this, "elts", [0]);
                      var call2282 = callmethodChecked(call2281, "at()put", [1, 1], var_n, var_t);
                      return call2282;
                    };
                    func2279.paramTypes = [];
                    func2279.paramTypes.push([type_String, "n"]);
                    func2279.paramTypes.push([type_String, "t"]);
                    func2279.paramCounts = [1, 1];
                    obj2277.methods["addElement()withText"] = func2279;
                    func2279.definitionLine = 101;
                    func2279.definitionModule = "gracedocMD";
                    var func2283 = function(argcv) {    // method insert(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_t = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for insert(1)"));
                      // Start argument checking
                      curarg = 1;
                      setLineNumber(105);    // compilenode identifier
                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("argument 1 in insert (arg list 1), which corresponds to parameter t, does not have " + 
                                  callmethod(var_String, "asString", [0])._value + "."));
                      curarg++;
                      // End argument checking
                      setModuleName("gracedocMD");
                      setLineNumber(106);    // compilenode identifier
                      onSelf = true;
                      var call2284 = callmethodChecked(this, "hasContent:=", [1], GraceTrue);
                      setLineNumber(107);    // compilenode call
                      onSelf = true;
                      var call2285 = callmethodChecked(this, "cursor", [0]);
                      onSelf = true;
                      var call2286 = callmethodChecked(this, "md", [0]);
                      var call2287 = callmethodChecked(call2286, "substringFrom()to", [1, 1], new GraceNum(1), call2285);
                      var var_begin = call2287;
                      setLineNumber(108);    // compilenode call
                      onSelf = true;
                      var call2289 = callmethodChecked(this, "cursor", [0]);
                      var opresult2291 = callmethodChecked(call2289, "+", [1], new GraceNum(1));
                      onSelf = true;
                      var call2292 = callmethodChecked(this, "md", [0]);
                      var call2293 = callmethodChecked(call2292, "size", [0]);
                      onSelf = true;
                      var call2294 = callmethodChecked(this, "md", [0]);
                      var call2295 = callmethodChecked(call2294, "substringFrom()to", [1, 1], opresult2291, call2293);
                      var var_end = call2295;
                      setLineNumber(109);    // compilenode string
                      var string2296 = new GraceString("");
                      var string2299 = new GraceString("");
                      var string2302 = new GraceString("");
                      var string2305 = new GraceString("");
                      var opresult2307 = callmethodChecked(string2305, "++", [1], var_begin);
                      var opresult2309 = callmethodChecked(opresult2307, "++", [1], string2302);
                      var opresult2311 = callmethodChecked(opresult2309, "++", [1], var_t);
                      var opresult2313 = callmethodChecked(opresult2311, "++", [1], string2299);
                      var opresult2315 = callmethodChecked(opresult2313, "++", [1], var_end);
                      var opresult2317 = callmethodChecked(opresult2315, "++", [1], string2296);
                      onSelf = true;
                      var call2318 = callmethodChecked(this, "md:=", [1], opresult2317);
                      setLineNumber(110);    // compilenode identifier
                      var call2319 = callmethodChecked(var_t, "size", [0]);
                      onSelf = true;
                      var call2321 = callmethodChecked(this, "cursor", [0]);
                      var opresult2323 = callmethodChecked(call2321, "+", [1], call2319);
                      onSelf = true;
                      var call2324 = callmethodChecked(this, "cursor:=", [1], opresult2323);
                      return call2324;
                    };
                    func2283.paramTypes = [];
                    func2283.paramTypes.push([type_String, "t"]);
                    func2283.paramCounts = [1];
                    obj2277.methods["insert"] = func2283;
                    func2283.definitionLine = 105;
                    func2283.definitionModule = "gracedocMD";
                    var func2325 = function(argcv) {    // method alphabetize
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for alphabetize"));
                      setModuleName("gracedocMD");
                      setLineNumber(113);    // compilenode call
                      onSelf = true;
                      var call2326 = callmethodChecked(this, "elts", [0]);
                      var call2327 = callmethodChecked(call2326, "keys", [0]);
                      var call2328 = callmethodChecked(call2327, "sorted", [0]);
                      var var_alpha = call2328;
                      setLineNumber(114);    // compilenode num
                      var var_numElts = new GraceNum(0);
                      setLineNumber(115);    // compilenode block
                      var block2329 = new GraceBlock(this, 115, 1);
                      setLineNumber(1);    // compilenode identifier
                      block2329.real = function(var_k) {
                        setLineNumber(116);    // compilenode vardec
                        var var_rowClass;
                        var if2330 = GraceDone;
                        setLineNumber(117);    // compilenode identifier
                        var modulus2334 = callmethodChecked(var_numElts, "%", [1], new GraceNum(2));
                        var opresult2336 = callmethodChecked(modulus2334, "==", [1], new GraceNum(0));
                        if (Grace_isTrue(opresult2336)) {
                          setLineNumber(118);    // compilenode string
                          var string2337 = new GraceString("row-even");
                          var_rowClass = string2337;
                          if2330 = GraceDone;
                        } else {
                          setLineNumber(119);    // compilenode string
                          var string2338 = new GraceString("row-odd");
                          var_rowClass = string2338;
                          if2330 = GraceDone;
                        }
                        setLineNumber(120);    // compilenode string
                        var string2339 = new GraceString("class='placeholder'");
                        setLineNumber(121);    // compilenode string
                        var string2340 = new GraceString("'");
                        var string2343 = new GraceString("class='");
                        var opresult2345 = callmethodChecked(string2343, "++", [1], var_rowClass);
                        var opresult2347 = callmethodChecked(opresult2345, "++", [1], string2340);
                        setLineNumber(120);    // compilenode call
                        onSelf = true;
                        var call2348 = callmethodChecked(this, "elts", [0]);
                        var call2349 = callmethodChecked(call2348, "at", [1], var_k);
                        var call2350 = callmethodChecked(call2349, "replace()with", [1, 1], string2339, opresult2347);
                        onSelf = true;
                        var call2351 = callmethodChecked(this, "elts", [0]);
                        var call2352 = callmethodChecked(call2351, "at()put", [1, 1], var_k, call2350);
                        setLineNumber(122);    // compilenode call
                        onSelf = true;
                        var call2353 = callmethodChecked(this, "elts", [0]);
                        var call2354 = callmethodChecked(call2353, "at", [1], var_k);
                        onSelf = true;
                        var call2355 = callmethodChecked(this, "insert", [1], call2354);
                        setLineNumber(123);    // compilenode identifier
                        var opresult2358 = callmethodChecked(var_numElts, "+", [1], new GraceNum(1));
                        var_numElts = opresult2358;
                        return GraceDone;
                      };
                      var call2359 = callmethodChecked(var_prelude, "for()do", [1, 1], var_alpha, block2329);
                      return call2359;
                    };
                    func2325.paramCounts = [0];
                    obj2277.methods["alphabetize"] = func2325;
                    func2325.definitionLine = 112;
                    func2325.definitionModule = "gracedocMD";
                    setLineNumber(97);    // compilenode identifier
                    obj2277.data["md"] = var_md__39__;
                    var reader_gracedocMD_md2360 = function() {
                      return this.data["md"];
                    };
                    obj2277.methods["md"] = reader_gracedocMD_md2360;
                    obj2277.data["md"] = var_md__39__;
                    var writer_gracedocMD_md2360 = function(argcv, o) {
                      this.data["md"] = o;
                      return GraceDone;
                    };
                    obj2277.methods["md:="] = writer_gracedocMD_md2360;
                    writer_gracedocMD_md2360.confidential = true;
                    if (!Grace_isTrue(callmethod(var_String, "match", [1], var_md__39__)))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("initial value of var 'md' is not of type String"));
                    obj2277.mutable = true;
                    setLineNumber(98);    // compilenode identifier
                    obj2277.data["hasContent"] = GraceFalse;
                    var reader_gracedocMD_hasContent2361 = function() {
                      return this.data["hasContent"];
                    };
                    obj2277.methods["hasContent"] = reader_gracedocMD_hasContent2361;
                    obj2277.data["hasContent"] = GraceFalse;
                    var writer_gracedocMD_hasContent2361 = function(argcv, o) {
                      this.data["hasContent"] = o;
                      return GraceDone;
                    };
                    obj2277.methods["hasContent:="] = writer_gracedocMD_hasContent2361;
                    writer_gracedocMD_hasContent2361.confidential = true;
                    obj2277.mutable = true;
                    setLineNumber(99);    // compilenode identifier
                    obj2277.data["cursor"] = var_idx;
                    var reader_gracedocMD_cursor2362 = function() {
                      return this.data["cursor"];
                    };
                    obj2277.methods["cursor"] = reader_gracedocMD_cursor2362;
                    obj2277.data["cursor"] = var_idx;
                    var writer_gracedocMD_cursor2362 = function(argcv, o) {
                      this.data["cursor"] = o;
                      return GraceDone;
                    };
                    obj2277.methods["cursor:="] = writer_gracedocMD_cursor2362;
                    reader_gracedocMD_cursor2362.confidential = true;
                    writer_gracedocMD_cursor2362.confidential = true;
                    if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_idx)))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("initial value of var 'cursor' is not of type Number"));
                    obj2277.mutable = true;
                    setLineNumber(100);    // compilenode array
                    var array2363 = new Lineup([]);
                    var call2364 = callmethodChecked(var_prelude, "dictionary", [1], array2363);
                    obj2277.data["elts"] = call2364;
                    var reader_gracedocMD_elts2365 = function() {
                      return this.data["elts"];
                    };
                    obj2277.methods["elts"] = reader_gracedocMD_elts2365;
                    obj2277.data["elts"] = call2364;
                    var writer_gracedocMD_elts2365 = function(argcv, o) {
                      this.data["elts"] = o;
                      return GraceDone;
                    };
                    obj2277.methods["elts:="] = writer_gracedocMD_elts2365;
                    obj2277.mutable = true;
                    superDepth = origSuperDepth;
                  };
                  obj_init_2277.apply(obj2277, []);
                  setLineNumber(96);    // return value
                  if (!Grace_isTrue(callmethod(var_Section, "match", [1], obj2277)))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("result of method withTemplate(1)andCursorAt(1) does not have " + 
                              callmethod(var_Section, "asString", [0])._value + "."));
                  return obj2277;
                };
                func2276.paramCounts = [1, 1];
                obj2274.methods["withTemplate()andCursorAt"] = func2276;
                func2276.definitionLine = 96;
                func2276.definitionModule = "gracedocMD";
                  var func2366 = function(argcv) {    // method withTemplate(1     )andCursorAt(1     )()object
                    var curarg = 1;
                    var var_md__39__ = arguments[curarg];
                    curarg++;
                    var var_idx = arguments[curarg];
                    curarg++;
                    var inheritingObject = arguments[curarg++];
                    // Start argument processing
                    curarg = 1;
                    curarg++;
                    curarg++;
                    // End argument processing
                    setModuleName("gracedocMD");
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var obj2367 = Grace_allocObject(GraceObject, "withTemplate()andCursorAt");
                    obj2367.definitionModule = "gracedocMD";
                    obj2367.definitionLine = 96;
                    var inho2367 = inheritingObject;
                    while (inho2367.superobj) inho2367 = inho2367.superobj;
                    inho2367.superobj = obj2367;
                    obj2367.data = inheritingObject.data;
                    if (inheritingObject.hasOwnProperty('_value'))
                      obj2367._value = inheritingObject._value;
                    obj2367.outer = this;
                    var reader_gracedocMD_outer2368 = function() {
                      return this.outer;
                    };
                    obj2367.methods["outer"] = reader_gracedocMD_outer2368;
                    var obj_init_2367 = function() {
                      var origSuperDepth = superDepth;
                      superDepth = obj2367;
                      var func2369 = function(argcv) {    // method addElement(1)withText(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_n = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addElement (arg list 1) of addElement(1)withText(1)"));
                        var var_t = arguments[curarg];
                        curarg++;
                        if (argcv[1] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for withText (arg list 2) of addElement(1)withText(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(101);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in addElement (arg list 1), which corresponds to parameter n, does not have " + 
                                    callmethod(var_String, "asString", [0])._value + "."));
                        curarg++;
                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in withText (arg list 2), which corresponds to parameter t, does not have " + 
                                    callmethod(var_String, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("gracedocMD");
                        setLineNumber(102);    // compilenode identifier
                        onSelf = true;
                        var call2370 = callmethodChecked(this, "hasContent:=", [1], GraceTrue);
                        setLineNumber(103);    // compilenode call
                        onSelf = true;
                        var call2371 = callmethodChecked(this, "elts", [0]);
                        var call2372 = callmethodChecked(call2371, "at()put", [1, 1], var_n, var_t);
                        return call2372;
                      };
                      func2369.paramTypes = [];
                      func2369.paramTypes.push([type_String, "n"]);
                      func2369.paramTypes.push([type_String, "t"]);
                      func2369.paramCounts = [1, 1];
                      obj2367.methods["addElement()withText"] = func2369;
                      func2369.definitionLine = 101;
                      func2369.definitionModule = "gracedocMD";
                      var func2373 = function(argcv) {    // method insert(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_t = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for insert(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(105);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in insert (arg list 1), which corresponds to parameter t, does not have " + 
                                    callmethod(var_String, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("gracedocMD");
                        setLineNumber(106);    // compilenode identifier
                        onSelf = true;
                        var call2374 = callmethodChecked(this, "hasContent:=", [1], GraceTrue);
                        setLineNumber(107);    // compilenode call
                        onSelf = true;
                        var call2375 = callmethodChecked(this, "cursor", [0]);
                        onSelf = true;
                        var call2376 = callmethodChecked(this, "md", [0]);
                        var call2377 = callmethodChecked(call2376, "substringFrom()to", [1, 1], new GraceNum(1), call2375);
                        var var_begin = call2377;
                        setLineNumber(108);    // compilenode call
                        onSelf = true;
                        var call2379 = callmethodChecked(this, "cursor", [0]);
                        var opresult2381 = callmethodChecked(call2379, "+", [1], new GraceNum(1));
                        onSelf = true;
                        var call2382 = callmethodChecked(this, "md", [0]);
                        var call2383 = callmethodChecked(call2382, "size", [0]);
                        onSelf = true;
                        var call2384 = callmethodChecked(this, "md", [0]);
                        var call2385 = callmethodChecked(call2384, "substringFrom()to", [1, 1], opresult2381, call2383);
                        var var_end = call2385;
                        setLineNumber(109);    // compilenode string
                        var string2386 = new GraceString("");
                        var string2389 = new GraceString("");
                        var string2392 = new GraceString("");
                        var string2395 = new GraceString("");
                        var opresult2397 = callmethodChecked(string2395, "++", [1], var_begin);
                        var opresult2399 = callmethodChecked(opresult2397, "++", [1], string2392);
                        var opresult2401 = callmethodChecked(opresult2399, "++", [1], var_t);
                        var opresult2403 = callmethodChecked(opresult2401, "++", [1], string2389);
                        var opresult2405 = callmethodChecked(opresult2403, "++", [1], var_end);
                        var opresult2407 = callmethodChecked(opresult2405, "++", [1], string2386);
                        onSelf = true;
                        var call2408 = callmethodChecked(this, "md:=", [1], opresult2407);
                        setLineNumber(110);    // compilenode identifier
                        var call2409 = callmethodChecked(var_t, "size", [0]);
                        onSelf = true;
                        var call2411 = callmethodChecked(this, "cursor", [0]);
                        var opresult2413 = callmethodChecked(call2411, "+", [1], call2409);
                        onSelf = true;
                        var call2414 = callmethodChecked(this, "cursor:=", [1], opresult2413);
                        return call2414;
                      };
                      func2373.paramTypes = [];
                      func2373.paramTypes.push([type_String, "t"]);
                      func2373.paramCounts = [1];
                      obj2367.methods["insert"] = func2373;
                      func2373.definitionLine = 105;
                      func2373.definitionModule = "gracedocMD";
                      var func2415 = function(argcv) {    // method alphabetize
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        if (argcv[0] !== 0)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for alphabetize"));
                        setModuleName("gracedocMD");
                        setLineNumber(113);    // compilenode call
                        onSelf = true;
                        var call2416 = callmethodChecked(this, "elts", [0]);
                        var call2417 = callmethodChecked(call2416, "keys", [0]);
                        var call2418 = callmethodChecked(call2417, "sorted", [0]);
                        var var_alpha = call2418;
                        setLineNumber(114);    // compilenode num
                        var var_numElts = new GraceNum(0);
                        setLineNumber(115);    // compilenode block
                        var block2419 = new GraceBlock(this, 115, 1);
                        setLineNumber(1);    // compilenode identifier
                        block2419.real = function(var_k) {
                          setLineNumber(116);    // compilenode vardec
                          var var_rowClass;
                          var if2420 = GraceDone;
                          setLineNumber(117);    // compilenode identifier
                          var modulus2424 = callmethodChecked(var_numElts, "%", [1], new GraceNum(2));
                          var opresult2426 = callmethodChecked(modulus2424, "==", [1], new GraceNum(0));
                          if (Grace_isTrue(opresult2426)) {
                            setLineNumber(118);    // compilenode string
                            var string2427 = new GraceString("row-even");
                            var_rowClass = string2427;
                            if2420 = GraceDone;
                          } else {
                            setLineNumber(119);    // compilenode string
                            var string2428 = new GraceString("row-odd");
                            var_rowClass = string2428;
                            if2420 = GraceDone;
                          }
                          setLineNumber(120);    // compilenode string
                          var string2429 = new GraceString("class='placeholder'");
                          setLineNumber(121);    // compilenode string
                          var string2430 = new GraceString("'");
                          var string2433 = new GraceString("class='");
                          var opresult2435 = callmethodChecked(string2433, "++", [1], var_rowClass);
                          var opresult2437 = callmethodChecked(opresult2435, "++", [1], string2430);
                          setLineNumber(120);    // compilenode call
                          onSelf = true;
                          var call2438 = callmethodChecked(this, "elts", [0]);
                          var call2439 = callmethodChecked(call2438, "at", [1], var_k);
                          var call2440 = callmethodChecked(call2439, "replace()with", [1, 1], string2429, opresult2437);
                          onSelf = true;
                          var call2441 = callmethodChecked(this, "elts", [0]);
                          var call2442 = callmethodChecked(call2441, "at()put", [1, 1], var_k, call2440);
                          setLineNumber(122);    // compilenode call
                          onSelf = true;
                          var call2443 = callmethodChecked(this, "elts", [0]);
                          var call2444 = callmethodChecked(call2443, "at", [1], var_k);
                          onSelf = true;
                          var call2445 = callmethodChecked(this, "insert", [1], call2444);
                          setLineNumber(123);    // compilenode identifier
                          var opresult2448 = callmethodChecked(var_numElts, "+", [1], new GraceNum(1));
                          var_numElts = opresult2448;
                          return GraceDone;
                        };
                        var call2449 = callmethodChecked(var_prelude, "for()do", [1, 1], var_alpha, block2419);
                        return call2449;
                      };
                      func2415.paramCounts = [0];
                      obj2367.methods["alphabetize"] = func2415;
                      func2415.definitionLine = 112;
                      func2415.definitionModule = "gracedocMD";
                      setLineNumber(97);    // compilenode identifier
                      obj2367.data["md"] = var_md__39__;
                      var reader_gracedocMD_md2450 = function() {
                        return this.data["md"];
                      };
                      obj2367.methods["md"] = reader_gracedocMD_md2450;
                      obj2367.data["md"] = var_md__39__;
                      var writer_gracedocMD_md2450 = function(argcv, o) {
                        this.data["md"] = o;
                        return GraceDone;
                      };
                      obj2367.methods["md:="] = writer_gracedocMD_md2450;
                      writer_gracedocMD_md2450.confidential = true;
                      if (!Grace_isTrue(callmethod(var_String, "match", [1], var_md__39__)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("initial value of var 'md' is not of type String"));
                      obj2367.mutable = true;
                      setLineNumber(98);    // compilenode identifier
                      obj2367.data["hasContent"] = GraceFalse;
                      var reader_gracedocMD_hasContent2451 = function() {
                        return this.data["hasContent"];
                      };
                      obj2367.methods["hasContent"] = reader_gracedocMD_hasContent2451;
                      obj2367.data["hasContent"] = GraceFalse;
                      var writer_gracedocMD_hasContent2451 = function(argcv, o) {
                        this.data["hasContent"] = o;
                        return GraceDone;
                      };
                      obj2367.methods["hasContent:="] = writer_gracedocMD_hasContent2451;
                      writer_gracedocMD_hasContent2451.confidential = true;
                      obj2367.mutable = true;
                      setLineNumber(99);    // compilenode identifier
                      obj2367.data["cursor"] = var_idx;
                      var reader_gracedocMD_cursor2452 = function() {
                        return this.data["cursor"];
                      };
                      obj2367.methods["cursor"] = reader_gracedocMD_cursor2452;
                      obj2367.data["cursor"] = var_idx;
                      var writer_gracedocMD_cursor2452 = function(argcv, o) {
                        this.data["cursor"] = o;
                        return GraceDone;
                      };
                      obj2367.methods["cursor:="] = writer_gracedocMD_cursor2452;
                      reader_gracedocMD_cursor2452.confidential = true;
                      writer_gracedocMD_cursor2452.confidential = true;
                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_idx)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("initial value of var 'cursor' is not of type Number"));
                      obj2367.mutable = true;
                      setLineNumber(100);    // compilenode array
                      var array2453 = new Lineup([]);
                      var call2454 = callmethodChecked(var_prelude, "dictionary", [1], array2453);
                      obj2367.data["elts"] = call2454;
                      var reader_gracedocMD_elts2455 = function() {
                        return this.data["elts"];
                      };
                      obj2367.methods["elts"] = reader_gracedocMD_elts2455;
                      obj2367.data["elts"] = call2454;
                      var writer_gracedocMD_elts2455 = function(argcv, o) {
                        this.data["elts"] = o;
                        return GraceDone;
                      };
                      obj2367.methods["elts:="] = writer_gracedocMD_elts2455;
                      obj2367.mutable = true;
                      superDepth = origSuperDepth;
                    };
                    obj_init_2367.apply(inheritingObject, []);
                    return obj2367;
                    };
                    obj2274.methods["withTemplate()andCursorAt()object"] = func2366;
                  var func2456 = function(argcv) {    // method 
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    setModuleName("gracedocMD");
                    setLineNumber(96);    // compilenode string
                    var string2457 = new GraceString("class section");
                    return string2457;
                  };
                  func2456.paramCounts = [];
                  obj2274.methods["asString"] = func2456;
                  func2456.definitionLine = 96;
                  func2456.definitionModule = "gracedocMD";
                  superDepth = origSuperDepth;
                };
                obj_init_2274.apply(obj2274, []);
                var var_section = obj2274;
                setLineNumber(122);    // compilenode method
                var func2458 = function(argcv) {    // method section
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  if (argcv[0] !== 0)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for section"));
                  setModuleName("gracedocMD");
                  // section is a simple accessor - elide try ... catch
                  setLineNumber(96);    // compilenode identifier
                  return var_section;
                };
                func2458.paramCounts = [0];
                this.methods["section"] = func2458;
                func2458.definitionLine = 122;
                func2458.definitionModule = "gracedocMD";
                this.methods["section"].debug = "def";
                setLineNumber(129);    // compilenode object
                var obj2459 = Grace_allocObject(GraceObject, "emptySection");
                obj2459.definitionModule = "gracedocMD";
                obj2459.definitionLine = 129;
                obj2459.outer = this;
                var reader_gracedocMD_outer2460 = function() {
                  return this.outer;
                };
                obj2459.methods["outer"] = reader_gracedocMD_outer2460;
                var obj_init_2459 = function() {
                  var origSuperDepth = superDepth;
                  superDepth = obj2459;
                  var func2461 = function(argcv) {    // method withCursorAt(1)
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    var var_idx = arguments[curarg];
                    curarg++;
                    if (argcv[0] !== 1)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for withCursorAt(1)"));
                    setModuleName("gracedocMD");
                    var obj2462 = Grace_allocObject(GraceObject, "emptySection.emptySection.withCursorAt");
                    obj2462.definitionModule = "gracedocMD";
                    obj2462.definitionLine = 129;
                    obj2462.outer = this;
                    var reader_gracedocMD_outer2463 = function() {
                      return this.outer;
                    };
                    obj2462.methods["outer"] = reader_gracedocMD_outer2463;
                    var obj_init_2462 = function() {
                      var origSuperDepth = superDepth;
                      superDepth = obj2462;
                      var func2464 = function(argcv) {    // method addElement(1)withText(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_n = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addElement (arg list 1) of addElement(1)withText(1)"));
                        var var_t = arguments[curarg];
                        curarg++;
                        if (argcv[1] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for withText (arg list 2) of addElement(1)withText(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(134);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in addElement (arg list 1), which corresponds to parameter n, does not have " + 
                                    callmethod(var_String, "asString", [0])._value + "."));
                        curarg++;
                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in withText (arg list 2), which corresponds to parameter t, does not have " + 
                                    callmethod(var_String, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("gracedocMD");
                        setLineNumber(135);    // compilenode identifier
                        onSelf = true;
                        var call2465 = callmethodChecked(this, "hasContent:=", [1], GraceTrue);
                        setLineNumber(136);    // compilenode call
                        onSelf = true;
                        var call2466 = callmethodChecked(this, "elts", [0]);
                        var call2467 = callmethodChecked(call2466, "at()put", [1, 1], var_n, var_t);
                        return call2467;
                      };
                      func2464.paramTypes = [];
                      func2464.paramTypes.push([type_String, "n"]);
                      func2464.paramTypes.push([type_String, "t"]);
                      func2464.paramCounts = [1, 1];
                      obj2462.methods["addElement()withText"] = func2464;
                      func2464.definitionLine = 134;
                      func2464.definitionModule = "gracedocMD";
                      var func2468 = function(argcv) {    // method insert(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_t = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for insert(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(138);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in insert (arg list 1), which corresponds to parameter t, does not have " + 
                                    callmethod(var_String, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("gracedocMD");
                        setLineNumber(139);    // compilenode identifier
                        onSelf = true;
                        var call2469 = callmethodChecked(this, "hasContent:=", [1], GraceTrue);
                        setLineNumber(140);    // compilenode call
                        onSelf = true;
                        var call2470 = callmethodChecked(this, "cursor", [0]);
                        onSelf = true;
                        var call2471 = callmethodChecked(this, "md", [0]);
                        var call2472 = callmethodChecked(call2471, "substringFrom()to", [1, 1], new GraceNum(1), call2470);
                        var var_begin = call2472;
                        setLineNumber(141);    // compilenode call
                        onSelf = true;
                        var call2474 = callmethodChecked(this, "cursor", [0]);
                        var opresult2476 = callmethodChecked(call2474, "+", [1], new GraceNum(1));
                        onSelf = true;
                        var call2477 = callmethodChecked(this, "md", [0]);
                        var call2478 = callmethodChecked(call2477, "size", [0]);
                        onSelf = true;
                        var call2479 = callmethodChecked(this, "md", [0]);
                        var call2480 = callmethodChecked(call2479, "substringFrom()to", [1, 1], opresult2476, call2478);
                        var var_end = call2480;
                        setLineNumber(142);    // compilenode string
                        var string2481 = new GraceString("");
                        var string2484 = new GraceString("");
                        var string2487 = new GraceString("");
                        var string2490 = new GraceString("");
                        var opresult2492 = callmethodChecked(string2490, "++", [1], var_begin);
                        var opresult2494 = callmethodChecked(opresult2492, "++", [1], string2487);
                        var opresult2496 = callmethodChecked(opresult2494, "++", [1], var_t);
                        var opresult2498 = callmethodChecked(opresult2496, "++", [1], string2484);
                        var opresult2500 = callmethodChecked(opresult2498, "++", [1], var_end);
                        var opresult2502 = callmethodChecked(opresult2500, "++", [1], string2481);
                        onSelf = true;
                        var call2503 = callmethodChecked(this, "md:=", [1], opresult2502);
                        setLineNumber(143);    // compilenode identifier
                        var call2504 = callmethodChecked(var_t, "size", [0]);
                        onSelf = true;
                        var call2506 = callmethodChecked(this, "cursor", [0]);
                        var opresult2508 = callmethodChecked(call2506, "+", [1], call2504);
                        onSelf = true;
                        var call2509 = callmethodChecked(this, "cursor:=", [1], opresult2508);
                        return call2509;
                      };
                      func2468.paramTypes = [];
                      func2468.paramTypes.push([type_String, "t"]);
                      func2468.paramCounts = [1];
                      obj2462.methods["insert"] = func2468;
                      func2468.definitionLine = 138;
                      func2468.definitionModule = "gracedocMD";
                      var func2510 = function(argcv) {    // method alphabetize
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        if (argcv[0] !== 0)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for alphabetize"));
                        setModuleName("gracedocMD");
                        setLineNumber(146);    // compilenode call
                        onSelf = true;
                        var call2511 = callmethodChecked(this, "elts", [0]);
                        var call2512 = callmethodChecked(call2511, "keys", [0]);
                        var call2513 = callmethodChecked(call2512, "sorted", [0]);
                        var var_alpha = call2513;
                        setLineNumber(147);    // compilenode num
                        var var_numElts = new GraceNum(0);
                        setLineNumber(148);    // compilenode block
                        var block2514 = new GraceBlock(this, 148, 1);
                        setLineNumber(1);    // compilenode identifier
                        block2514.real = function(var_k) {
                          setLineNumber(149);    // compilenode vardec
                          var var_rowClass;
                          var if2515 = GraceDone;
                          setLineNumber(150);    // compilenode identifier
                          var modulus2519 = callmethodChecked(var_numElts, "%", [1], new GraceNum(2));
                          var opresult2521 = callmethodChecked(modulus2519, "==", [1], new GraceNum(0));
                          if (Grace_isTrue(opresult2521)) {
                            setLineNumber(151);    // compilenode string
                            var string2522 = new GraceString("row-even");
                            var_rowClass = string2522;
                            if2515 = GraceDone;
                          } else {
                            setLineNumber(152);    // compilenode string
                            var string2523 = new GraceString("row-odd");
                            var_rowClass = string2523;
                            if2515 = GraceDone;
                          }
                          setLineNumber(153);    // compilenode string
                          var string2524 = new GraceString("class='placeholder'");
                          setLineNumber(154);    // compilenode string
                          var string2525 = new GraceString("'");
                          var string2528 = new GraceString("class='");
                          var opresult2530 = callmethodChecked(string2528, "++", [1], var_rowClass);
                          var opresult2532 = callmethodChecked(opresult2530, "++", [1], string2525);
                          setLineNumber(153);    // compilenode call
                          onSelf = true;
                          var call2533 = callmethodChecked(this, "elts", [0]);
                          var call2534 = callmethodChecked(call2533, "at", [1], var_k);
                          var call2535 = callmethodChecked(call2534, "replace()with", [1, 1], string2524, opresult2532);
                          onSelf = true;
                          var call2536 = callmethodChecked(this, "elts", [0]);
                          var call2537 = callmethodChecked(call2536, "at()put", [1, 1], var_k, call2535);
                          setLineNumber(155);    // compilenode call
                          onSelf = true;
                          var call2538 = callmethodChecked(this, "elts", [0]);
                          var call2539 = callmethodChecked(call2538, "at", [1], var_k);
                          onSelf = true;
                          var call2540 = callmethodChecked(this, "insert", [1], call2539);
                          setLineNumber(156);    // compilenode identifier
                          var opresult2543 = callmethodChecked(var_numElts, "+", [1], new GraceNum(1));
                          var_numElts = opresult2543;
                          return GraceDone;
                        };
                        var call2544 = callmethodChecked(var_prelude, "for()do", [1, 1], var_alpha, block2514);
                        return call2544;
                      };
                      func2510.paramCounts = [0];
                      obj2462.methods["alphabetize"] = func2510;
                      func2510.definitionLine = 145;
                      func2510.definitionModule = "gracedocMD";
                      setLineNumber(130);    // compilenode string
                      var string2545 = new GraceString("");
                      obj2462.data["md"] = string2545;
                      var reader_gracedocMD_md2546 = function() {
                        return this.data["md"];
                      };
                      obj2462.methods["md"] = reader_gracedocMD_md2546;
                      obj2462.data["md"] = string2545;
                      var writer_gracedocMD_md2546 = function(argcv, o) {
                        this.data["md"] = o;
                        return GraceDone;
                      };
                      obj2462.methods["md:="] = writer_gracedocMD_md2546;
                      writer_gracedocMD_md2546.confidential = true;
                      if (!Grace_isTrue(callmethod(var_String, "match", [1], string2545)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("initial value of var 'md' is not of type String"));
                      obj2462.mutable = true;
                      setLineNumber(131);    // compilenode identifier
                      obj2462.data["hasContent"] = GraceFalse;
                      var reader_gracedocMD_hasContent2547 = function() {
                        return this.data["hasContent"];
                      };
                      obj2462.methods["hasContent"] = reader_gracedocMD_hasContent2547;
                      obj2462.data["hasContent"] = GraceFalse;
                      var writer_gracedocMD_hasContent2547 = function(argcv, o) {
                        this.data["hasContent"] = o;
                        return GraceDone;
                      };
                      obj2462.methods["hasContent:="] = writer_gracedocMD_hasContent2547;
                      writer_gracedocMD_hasContent2547.confidential = true;
                      obj2462.mutable = true;
                      setLineNumber(132);    // compilenode identifier
                      obj2462.data["cursor"] = var_idx;
                      var reader_gracedocMD_cursor2548 = function() {
                        return this.data["cursor"];
                      };
                      obj2462.methods["cursor"] = reader_gracedocMD_cursor2548;
                      obj2462.data["cursor"] = var_idx;
                      var writer_gracedocMD_cursor2548 = function(argcv, o) {
                        this.data["cursor"] = o;
                        return GraceDone;
                      };
                      obj2462.methods["cursor:="] = writer_gracedocMD_cursor2548;
                      reader_gracedocMD_cursor2548.confidential = true;
                      writer_gracedocMD_cursor2548.confidential = true;
                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_idx)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("initial value of var 'cursor' is not of type Number"));
                      obj2462.mutable = true;
                      setLineNumber(133);    // compilenode array
                      var array2549 = new Lineup([]);
                      var call2550 = callmethodChecked(var_prelude, "dictionary", [1], array2549);
                      obj2462.data["elts"] = call2550;
                      var reader_gracedocMD_elts2551 = function() {
                        return this.data["elts"];
                      };
                      obj2462.methods["elts"] = reader_gracedocMD_elts2551;
                      obj2462.data["elts"] = call2550;
                      var writer_gracedocMD_elts2551 = function(argcv, o) {
                        this.data["elts"] = o;
                        return GraceDone;
                      };
                      obj2462.methods["elts:="] = writer_gracedocMD_elts2551;
                      obj2462.mutable = true;
                      superDepth = origSuperDepth;
                    };
                    obj_init_2462.apply(obj2462, []);
                    setLineNumber(129);    // return value
                    if (!Grace_isTrue(callmethod(var_Section, "match", [1], obj2462)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("result of method withCursorAt(1) does not have " + 
                                callmethod(var_Section, "asString", [0])._value + "."));
                    return obj2462;
                  };
                  func2461.paramCounts = [1];
                  obj2459.methods["withCursorAt"] = func2461;
                  func2461.definitionLine = 129;
                  func2461.definitionModule = "gracedocMD";
                    var func2552 = function(argcv) {    // method withCursorAt(1     )()object
                      var curarg = 1;
                      var var_idx = arguments[curarg];
                      curarg++;
                      var inheritingObject = arguments[curarg++];
                      // Start argument processing
                      curarg = 1;
                      curarg++;
                      // End argument processing
                      setModuleName("gracedocMD");
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var obj2553 = Grace_allocObject(GraceObject, "withCursorAt");
                      obj2553.definitionModule = "gracedocMD";
                      obj2553.definitionLine = 129;
                      var inho2553 = inheritingObject;
                      while (inho2553.superobj) inho2553 = inho2553.superobj;
                      inho2553.superobj = obj2553;
                      obj2553.data = inheritingObject.data;
                      if (inheritingObject.hasOwnProperty('_value'))
                        obj2553._value = inheritingObject._value;
                      obj2553.outer = this;
                      var reader_gracedocMD_outer2554 = function() {
                        return this.outer;
                      };
                      obj2553.methods["outer"] = reader_gracedocMD_outer2554;
                      var obj_init_2553 = function() {
                        var origSuperDepth = superDepth;
                        superDepth = obj2553;
                        var func2555 = function(argcv) {    // method addElement(1)withText(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_n = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addElement (arg list 1) of addElement(1)withText(1)"));
                          var var_t = arguments[curarg];
                          curarg++;
                          if (argcv[1] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for withText (arg list 2) of addElement(1)withText(1)"));
                          // Start argument checking
                          curarg = 1;
                          setLineNumber(134);    // compilenode identifier
                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in addElement (arg list 1), which corresponds to parameter n, does not have " + 
                                      callmethod(var_String, "asString", [0])._value + "."));
                          curarg++;
                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in withText (arg list 2), which corresponds to parameter t, does not have " + 
                                      callmethod(var_String, "asString", [0])._value + "."));
                          curarg++;
                          // End argument checking
                          setModuleName("gracedocMD");
                          setLineNumber(135);    // compilenode identifier
                          onSelf = true;
                          var call2556 = callmethodChecked(this, "hasContent:=", [1], GraceTrue);
                          setLineNumber(136);    // compilenode call
                          onSelf = true;
                          var call2557 = callmethodChecked(this, "elts", [0]);
                          var call2558 = callmethodChecked(call2557, "at()put", [1, 1], var_n, var_t);
                          return call2558;
                        };
                        func2555.paramTypes = [];
                        func2555.paramTypes.push([type_String, "n"]);
                        func2555.paramTypes.push([type_String, "t"]);
                        func2555.paramCounts = [1, 1];
                        obj2553.methods["addElement()withText"] = func2555;
                        func2555.definitionLine = 134;
                        func2555.definitionModule = "gracedocMD";
                        var func2559 = function(argcv) {    // method insert(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_t = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for insert(1)"));
                          // Start argument checking
                          curarg = 1;
                          setLineNumber(138);    // compilenode identifier
                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in insert (arg list 1), which corresponds to parameter t, does not have " + 
                                      callmethod(var_String, "asString", [0])._value + "."));
                          curarg++;
                          // End argument checking
                          setModuleName("gracedocMD");
                          setLineNumber(139);    // compilenode identifier
                          onSelf = true;
                          var call2560 = callmethodChecked(this, "hasContent:=", [1], GraceTrue);
                          setLineNumber(140);    // compilenode call
                          onSelf = true;
                          var call2561 = callmethodChecked(this, "cursor", [0]);
                          onSelf = true;
                          var call2562 = callmethodChecked(this, "md", [0]);
                          var call2563 = callmethodChecked(call2562, "substringFrom()to", [1, 1], new GraceNum(1), call2561);
                          var var_begin = call2563;
                          setLineNumber(141);    // compilenode call
                          onSelf = true;
                          var call2565 = callmethodChecked(this, "cursor", [0]);
                          var opresult2567 = callmethodChecked(call2565, "+", [1], new GraceNum(1));
                          onSelf = true;
                          var call2568 = callmethodChecked(this, "md", [0]);
                          var call2569 = callmethodChecked(call2568, "size", [0]);
                          onSelf = true;
                          var call2570 = callmethodChecked(this, "md", [0]);
                          var call2571 = callmethodChecked(call2570, "substringFrom()to", [1, 1], opresult2567, call2569);
                          var var_end = call2571;
                          setLineNumber(142);    // compilenode string
                          var string2572 = new GraceString("");
                          var string2575 = new GraceString("");
                          var string2578 = new GraceString("");
                          var string2581 = new GraceString("");
                          var opresult2583 = callmethodChecked(string2581, "++", [1], var_begin);
                          var opresult2585 = callmethodChecked(opresult2583, "++", [1], string2578);
                          var opresult2587 = callmethodChecked(opresult2585, "++", [1], var_t);
                          var opresult2589 = callmethodChecked(opresult2587, "++", [1], string2575);
                          var opresult2591 = callmethodChecked(opresult2589, "++", [1], var_end);
                          var opresult2593 = callmethodChecked(opresult2591, "++", [1], string2572);
                          onSelf = true;
                          var call2594 = callmethodChecked(this, "md:=", [1], opresult2593);
                          setLineNumber(143);    // compilenode identifier
                          var call2595 = callmethodChecked(var_t, "size", [0]);
                          onSelf = true;
                          var call2597 = callmethodChecked(this, "cursor", [0]);
                          var opresult2599 = callmethodChecked(call2597, "+", [1], call2595);
                          onSelf = true;
                          var call2600 = callmethodChecked(this, "cursor:=", [1], opresult2599);
                          return call2600;
                        };
                        func2559.paramTypes = [];
                        func2559.paramTypes.push([type_String, "t"]);
                        func2559.paramCounts = [1];
                        obj2553.methods["insert"] = func2559;
                        func2559.definitionLine = 138;
                        func2559.definitionModule = "gracedocMD";
                        var func2601 = function(argcv) {    // method alphabetize
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          if (argcv[0] !== 0)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for alphabetize"));
                          setModuleName("gracedocMD");
                          setLineNumber(146);    // compilenode call
                          onSelf = true;
                          var call2602 = callmethodChecked(this, "elts", [0]);
                          var call2603 = callmethodChecked(call2602, "keys", [0]);
                          var call2604 = callmethodChecked(call2603, "sorted", [0]);
                          var var_alpha = call2604;
                          setLineNumber(147);    // compilenode num
                          var var_numElts = new GraceNum(0);
                          setLineNumber(148);    // compilenode block
                          var block2605 = new GraceBlock(this, 148, 1);
                          setLineNumber(1);    // compilenode identifier
                          block2605.real = function(var_k) {
                            setLineNumber(149);    // compilenode vardec
                            var var_rowClass;
                            var if2606 = GraceDone;
                            setLineNumber(150);    // compilenode identifier
                            var modulus2610 = callmethodChecked(var_numElts, "%", [1], new GraceNum(2));
                            var opresult2612 = callmethodChecked(modulus2610, "==", [1], new GraceNum(0));
                            if (Grace_isTrue(opresult2612)) {
                              setLineNumber(151);    // compilenode string
                              var string2613 = new GraceString("row-even");
                              var_rowClass = string2613;
                              if2606 = GraceDone;
                            } else {
                              setLineNumber(152);    // compilenode string
                              var string2614 = new GraceString("row-odd");
                              var_rowClass = string2614;
                              if2606 = GraceDone;
                            }
                            setLineNumber(153);    // compilenode string
                            var string2615 = new GraceString("class='placeholder'");
                            setLineNumber(154);    // compilenode string
                            var string2616 = new GraceString("'");
                            var string2619 = new GraceString("class='");
                            var opresult2621 = callmethodChecked(string2619, "++", [1], var_rowClass);
                            var opresult2623 = callmethodChecked(opresult2621, "++", [1], string2616);
                            setLineNumber(153);    // compilenode call
                            onSelf = true;
                            var call2624 = callmethodChecked(this, "elts", [0]);
                            var call2625 = callmethodChecked(call2624, "at", [1], var_k);
                            var call2626 = callmethodChecked(call2625, "replace()with", [1, 1], string2615, opresult2623);
                            onSelf = true;
                            var call2627 = callmethodChecked(this, "elts", [0]);
                            var call2628 = callmethodChecked(call2627, "at()put", [1, 1], var_k, call2626);
                            setLineNumber(155);    // compilenode call
                            onSelf = true;
                            var call2629 = callmethodChecked(this, "elts", [0]);
                            var call2630 = callmethodChecked(call2629, "at", [1], var_k);
                            onSelf = true;
                            var call2631 = callmethodChecked(this, "insert", [1], call2630);
                            setLineNumber(156);    // compilenode identifier
                            var opresult2634 = callmethodChecked(var_numElts, "+", [1], new GraceNum(1));
                            var_numElts = opresult2634;
                            return GraceDone;
                          };
                          var call2635 = callmethodChecked(var_prelude, "for()do", [1, 1], var_alpha, block2605);
                          return call2635;
                        };
                        func2601.paramCounts = [0];
                        obj2553.methods["alphabetize"] = func2601;
                        func2601.definitionLine = 145;
                        func2601.definitionModule = "gracedocMD";
                        setLineNumber(130);    // compilenode string
                        var string2636 = new GraceString("");
                        obj2553.data["md"] = string2636;
                        var reader_gracedocMD_md2637 = function() {
                          return this.data["md"];
                        };
                        obj2553.methods["md"] = reader_gracedocMD_md2637;
                        obj2553.data["md"] = string2636;
                        var writer_gracedocMD_md2637 = function(argcv, o) {
                          this.data["md"] = o;
                          return GraceDone;
                        };
                        obj2553.methods["md:="] = writer_gracedocMD_md2637;
                        writer_gracedocMD_md2637.confidential = true;
                        if (!Grace_isTrue(callmethod(var_String, "match", [1], string2636)))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("initial value of var 'md' is not of type String"));
                        obj2553.mutable = true;
                        setLineNumber(131);    // compilenode identifier
                        obj2553.data["hasContent"] = GraceFalse;
                        var reader_gracedocMD_hasContent2638 = function() {
                          return this.data["hasContent"];
                        };
                        obj2553.methods["hasContent"] = reader_gracedocMD_hasContent2638;
                        obj2553.data["hasContent"] = GraceFalse;
                        var writer_gracedocMD_hasContent2638 = function(argcv, o) {
                          this.data["hasContent"] = o;
                          return GraceDone;
                        };
                        obj2553.methods["hasContent:="] = writer_gracedocMD_hasContent2638;
                        writer_gracedocMD_hasContent2638.confidential = true;
                        obj2553.mutable = true;
                        setLineNumber(132);    // compilenode identifier
                        obj2553.data["cursor"] = var_idx;
                        var reader_gracedocMD_cursor2639 = function() {
                          return this.data["cursor"];
                        };
                        obj2553.methods["cursor"] = reader_gracedocMD_cursor2639;
                        obj2553.data["cursor"] = var_idx;
                        var writer_gracedocMD_cursor2639 = function(argcv, o) {
                          this.data["cursor"] = o;
                          return GraceDone;
                        };
                        obj2553.methods["cursor:="] = writer_gracedocMD_cursor2639;
                        reader_gracedocMD_cursor2639.confidential = true;
                        writer_gracedocMD_cursor2639.confidential = true;
                        if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_idx)))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("initial value of var 'cursor' is not of type Number"));
                        obj2553.mutable = true;
                        setLineNumber(133);    // compilenode array
                        var array2640 = new Lineup([]);
                        var call2641 = callmethodChecked(var_prelude, "dictionary", [1], array2640);
                        obj2553.data["elts"] = call2641;
                        var reader_gracedocMD_elts2642 = function() {
                          return this.data["elts"];
                        };
                        obj2553.methods["elts"] = reader_gracedocMD_elts2642;
                        obj2553.data["elts"] = call2641;
                        var writer_gracedocMD_elts2642 = function(argcv, o) {
                          this.data["elts"] = o;
                          return GraceDone;
                        };
                        obj2553.methods["elts:="] = writer_gracedocMD_elts2642;
                        obj2553.mutable = true;
                        superDepth = origSuperDepth;
                      };
                      obj_init_2553.apply(inheritingObject, []);
                      return obj2553;
                      };
                      obj2459.methods["withCursorAt()object"] = func2552;
                    var func2643 = function(argcv) {    // method 
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      setModuleName("gracedocMD");
                      setLineNumber(129);    // compilenode string
                      var string2644 = new GraceString("class emptySection");
                      return string2644;
                    };
                    func2643.paramCounts = [];
                    obj2459.methods["asString"] = func2643;
                    func2643.definitionLine = 129;
                    func2643.definitionModule = "gracedocMD";
                    superDepth = origSuperDepth;
                  };
                  obj_init_2459.apply(obj2459, []);
                  var var_emptySection = obj2459;
                  setLineNumber(155);    // compilenode method
                  var func2645 = function(argcv) {    // method emptySection
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    if (argcv[0] !== 0)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for emptySection"));
                    setModuleName("gracedocMD");
                    // emptySection is a simple accessor - elide try ... catch
                    setLineNumber(129);    // compilenode identifier
                    return var_emptySection;
                  };
                  func2645.paramCounts = [0];
                  this.methods["emptySection"] = func2645;
                  func2645.definitionLine = 155;
                  func2645.definitionModule = "gracedocMD";
                  this.methods["emptySection"].debug = "def";
                  setLineNumber(613);    // compilenode object
                  var obj2646 = Grace_allocObject(GraceObject, "graceDocVisitor");
                  obj2646.definitionModule = "gracedocMD";
                  obj2646.definitionLine = 613;
                  obj2646.outer = this;
                  var reader_gracedocMD_outer2647 = function() {
                    return this.outer;
                  };
                  obj2646.methods["outer"] = reader_gracedocMD_outer2647;
                  var obj_init_2646 = function() {
                    var origSuperDepth = superDepth;
                    superDepth = obj2646;
                    var func2648 = function(argcv) {    // method createFrom(1)outTo(1)as(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_in = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for createFrom (arg list 1) of createFrom(1)outTo(1)as(1)"));
                      var var_dir = arguments[curarg];
                      curarg++;
                      if (argcv[1] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for outTo (arg list 2) of createFrom(1)outTo(1)as(1)"));
                      var var_pageType = arguments[curarg];
                      curarg++;
                      if (argcv[2] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for as (arg list 3) of createFrom(1)outTo(1)as(1)"));
                      setModuleName("gracedocMD");
                      var obj2649 = Grace_allocObject(null, "graceDocVisitor.graceDocVisitor.createFrom()outTo()as");
                      obj2649.definitionModule = "gracedocMD";
                      obj2649.definitionLine = 613;
                      obj2649.outer = this;
                      var reader_gracedocMD_outer2650 = function() {
                        return this.outer;
                      };
                      obj2649.methods["outer"] = reader_gracedocMD_outer2650;
                      var obj_init_2649 = function() {
                        var origSuperDepth = superDepth;
                        superDepth = obj2649;
                        var func2651 = function(argcv) {    // method getTypeLink(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_v = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for getTypeLink(1)"));
                          // Start argument checking
                          curarg = 1;
                          setLineNumber(649);    // compilenode identifier
                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in getTypeLink (arg list 1), which corresponds to parameter v, does not have " + 
                                      callmethod(var_String, "asString", [0])._value + "."));
                          curarg++;
                          // End argument checking
                          setModuleName("gracedocMD");
                          setLineNumber(650);    // compilenode string
                          var string2652 = new GraceString("");
                          var string2655 = new GraceString("");
                          var opresult2657 = callmethodChecked(string2655, "++", [1], var_v);
                          var opresult2659 = callmethodChecked(opresult2657, "++", [1], string2652);
                          var var_filename = opresult2659;
                          setLineNumber(651);    // compilenode string
                          var string2660 = new GraceString("`](");
                          var string2663 = new GraceString("[`");
                          var opresult2665 = callmethodChecked(string2663, "++", [1], var_v);
                          var opresult2667 = callmethodChecked(opresult2665, "++", [1], string2660);
                          var var_out = opresult2667;
                          var if2668 = GraceDone;
                          setLineNumber(653);    // compilenode string
                          var string2669 = new GraceString(".md");
                          var string2672 = new GraceString("/");
                          onSelf = true;
                          var call2674 = callmethodChecked(this, "outdir", [0]);
                          var string2676 = new GraceString("/");
                          var call2678 = callmethodChecked(var_settings, "outputdir", [0]);
                          var string2680 = new GraceString("");
                          var opresult2682 = callmethodChecked(string2680, "++", [1], call2678);
                          var opresult2684 = callmethodChecked(opresult2682, "++", [1], string2676);
                          var opresult2686 = callmethodChecked(opresult2684, "++", [1], call2674);
                          var opresult2688 = callmethodChecked(opresult2686, "++", [1], string2672);
                          var opresult2690 = callmethodChecked(opresult2688, "++", [1], var_filename);
                          var opresult2692 = callmethodChecked(opresult2690, "++", [1], string2669);
                          var call2693 = callmethodChecked(var_io, "exists", [1], opresult2692);
                          if (Grace_isTrue(call2693)) {
                            setLineNumber(654);    // compilenode string
                            var string2694 = new GraceString("");
                            var string2697 = new GraceString("");
                            var string2700 = new GraceString("");
                            var opresult2702 = callmethodChecked(string2700, "++", [1], var_baseUrl);
                            var opresult2704 = callmethodChecked(opresult2702, "++", [1], string2697);
                            var opresult2706 = callmethodChecked(opresult2704, "++", [1], var_filename);
                            var opresult2708 = callmethodChecked(opresult2706, "++", [1], string2694);
                            var opresult2711 = callmethodChecked(var_out, "++", [1], opresult2708);
                            var_out = opresult2711;
                            if2668 = GraceDone;
                          } else {
                            var if2712 = GraceDone;
                            setLineNumber(656);    // compilenode string
                            var string2713 = new GraceString(".md");
                            var string2716 = new GraceString("/imported/types/");
                            var call2718 = callmethodChecked(var_settings, "outputdir", [0]);
                            var string2720 = new GraceString("");
                            var opresult2722 = callmethodChecked(string2720, "++", [1], call2718);
                            var opresult2724 = callmethodChecked(opresult2722, "++", [1], string2716);
                            var opresult2726 = callmethodChecked(opresult2724, "++", [1], var_filename);
                            var opresult2728 = callmethodChecked(opresult2726, "++", [1], string2713);
                            var call2729 = callmethodChecked(var_io, "exists", [1], opresult2728);
                            if (Grace_isTrue(call2729)) {
                              setLineNumber(657);    // compilenode string
                              var string2730 = new GraceString("");
                              var string2733 = new GraceString("");
                              var string2736 = new GraceString("");
                              var opresult2738 = callmethodChecked(string2736, "++", [1], var_baseUrl);
                              var opresult2740 = callmethodChecked(opresult2738, "++", [1], string2733);
                              var opresult2742 = callmethodChecked(opresult2740, "++", [1], var_filename);
                              var opresult2744 = callmethodChecked(opresult2742, "++", [1], string2730);
                              var opresult2747 = callmethodChecked(var_out, "++", [1], opresult2744);
                              var_out = opresult2747;
                              if2712 = GraceDone;
                            } else {
                              var if2748 = GraceDone;
                              setLineNumber(659);    // compilenode string
                              var string2749 = new GraceString(".md");
                              var string2752 = new GraceString("/gracelib/types/");
                              var call2754 = callmethodChecked(var_settings, "outputdir", [0]);
                              var string2756 = new GraceString("");
                              var opresult2758 = callmethodChecked(string2756, "++", [1], call2754);
                              var opresult2760 = callmethodChecked(opresult2758, "++", [1], string2752);
                              var opresult2762 = callmethodChecked(opresult2760, "++", [1], var_filename);
                              var opresult2764 = callmethodChecked(opresult2762, "++", [1], string2749);
                              var call2765 = callmethodChecked(var_io, "exists", [1], opresult2764);
                              if (Grace_isTrue(call2765)) {
                                setLineNumber(660);    // compilenode string
                                var string2766 = new GraceString("");
                                var string2769 = new GraceString("");
                                var string2772 = new GraceString("");
                                var opresult2774 = callmethodChecked(string2772, "++", [1], var_baseUrl);
                                var opresult2776 = callmethodChecked(opresult2774, "++", [1], string2769);
                                var opresult2778 = callmethodChecked(opresult2776, "++", [1], var_filename);
                                var opresult2780 = callmethodChecked(opresult2778, "++", [1], string2766);
                                var opresult2783 = callmethodChecked(var_out, "++", [1], opresult2780);
                                var_out = opresult2783;
                                if2748 = GraceDone;
                              } else {
                                setLineNumber(662);    // compilenode string
                                var string2784 = new GraceString("404");
                                var string2787 = new GraceString("");
                                var opresult2789 = callmethodChecked(string2787, "++", [1], var_baseUrl);
                                var opresult2791 = callmethodChecked(opresult2789, "++", [1], string2784);
                                var opresult2794 = callmethodChecked(var_out, "++", [1], opresult2791);
                                var_out = opresult2794;
                                if2748 = GraceDone;
                              }
                              if2712 = if2748;
                            }
                            if2668 = if2712;
                          }
                          setLineNumber(666);    // compilenode string
                          var string2795 = new GraceString(")");
                          var opresult2798 = callmethodChecked(var_out, "++", [1], string2795);
                          var_out = opresult2798;
                          setLineNumber(667);    // compilenode identifier
                          return var_out;
                        };
                        func2651.paramTypes = [];
                        func2651.paramTypes.push([type_String, "v"]);
                        func2651.confidential = true;
                        func2651.paramCounts = [1];
                        obj2649.methods["getTypeLink"] = func2651;
                        func2651.definitionLine = 649;
                        func2651.definitionModule = "gracedocMD";
                        var func2799 = function(argcv) {    // method getClassLink(1)show(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_c = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for getClassLink (arg list 1) of getClassLink(1)show(1)"));
                          var var_rep = arguments[curarg];
                          curarg++;
                          if (argcv[1] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for show (arg list 2) of getClassLink(1)show(1)"));
                          // Start argument checking
                          curarg = 1;
                          setLineNumber(669);    // compilenode identifier
                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in getClassLink (arg list 1), which corresponds to parameter c, does not have " + 
                                      callmethod(var_String, "asString", [0])._value + "."));
                          curarg++;
                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in show (arg list 2), which corresponds to parameter rep, does not have " + 
                                      callmethod(var_String, "asString", [0])._value + "."));
                          curarg++;
                          // End argument checking
                          setModuleName("gracedocMD");
                          setLineNumber(670);    // compilenode string
                          var string2800 = new GraceString("");
                          var string2803 = new GraceString("");
                          var opresult2805 = callmethodChecked(string2803, "++", [1], var_c);
                          var opresult2807 = callmethodChecked(opresult2805, "++", [1], string2800);
                          var var_filename = opresult2807;
                          setLineNumber(671);    // compilenode string
                          var string2808 = new GraceString("`](");
                          var string2811 = new GraceString("[`");
                          var opresult2813 = callmethodChecked(string2811, "++", [1], var_c);
                          var opresult2815 = callmethodChecked(opresult2813, "++", [1], string2808);
                          var var_out = opresult2815;
                          var if2816 = GraceDone;
                          setLineNumber(673);    // compilenode string
                          var string2817 = new GraceString(".md");
                          var string2820 = new GraceString("/");
                          onSelf = true;
                          var call2822 = callmethodChecked(this, "outdir", [0]);
                          var string2824 = new GraceString("/");
                          var call2826 = callmethodChecked(var_settings, "outputdir", [0]);
                          var string2828 = new GraceString("");
                          var opresult2830 = callmethodChecked(string2828, "++", [1], call2826);
                          var opresult2832 = callmethodChecked(opresult2830, "++", [1], string2824);
                          var opresult2834 = callmethodChecked(opresult2832, "++", [1], call2822);
                          var opresult2836 = callmethodChecked(opresult2834, "++", [1], string2820);
                          var opresult2838 = callmethodChecked(opresult2836, "++", [1], var_filename);
                          var opresult2840 = callmethodChecked(opresult2838, "++", [1], string2817);
                          var call2841 = callmethodChecked(var_io, "exists", [1], opresult2840);
                          if (Grace_isTrue(call2841)) {
                            setLineNumber(674);    // compilenode string
                            var string2842 = new GraceString("");
                            var string2845 = new GraceString("");
                            var string2848 = new GraceString("");
                            var opresult2850 = callmethodChecked(string2848, "++", [1], var_baseUrl);
                            var opresult2852 = callmethodChecked(opresult2850, "++", [1], string2845);
                            var opresult2854 = callmethodChecked(opresult2852, "++", [1], var_filename);
                            var opresult2856 = callmethodChecked(opresult2854, "++", [1], string2842);
                            var opresult2859 = callmethodChecked(var_out, "++", [1], opresult2856);
                            var_out = opresult2859;
                            if2816 = GraceDone;
                          } else {
                            var if2860 = GraceDone;
                            setLineNumber(676);    // compilenode string
                            var string2861 = new GraceString(".md");
                            var string2864 = new GraceString("/imported/classes/");
                            var call2866 = callmethodChecked(var_settings, "outputdir", [0]);
                            var string2868 = new GraceString("");
                            var opresult2870 = callmethodChecked(string2868, "++", [1], call2866);
                            var opresult2872 = callmethodChecked(opresult2870, "++", [1], string2864);
                            var opresult2874 = callmethodChecked(opresult2872, "++", [1], var_filename);
                            var opresult2876 = callmethodChecked(opresult2874, "++", [1], string2861);
                            var call2877 = callmethodChecked(var_io, "exists", [1], opresult2876);
                            if (Grace_isTrue(call2877)) {
                              setLineNumber(677);    // compilenode string
                              var string2878 = new GraceString("");
                              var string2881 = new GraceString("");
                              var string2884 = new GraceString("");
                              var opresult2886 = callmethodChecked(string2884, "++", [1], var_baseUrl);
                              var opresult2888 = callmethodChecked(opresult2886, "++", [1], string2881);
                              var opresult2890 = callmethodChecked(opresult2888, "++", [1], var_filename);
                              var opresult2892 = callmethodChecked(opresult2890, "++", [1], string2878);
                              var opresult2895 = callmethodChecked(var_out, "++", [1], opresult2892);
                              var_out = opresult2895;
                              if2860 = GraceDone;
                            } else {
                              var if2896 = GraceDone;
                              setLineNumber(679);    // compilenode string
                              var string2897 = new GraceString(".md");
                              var string2900 = new GraceString("/gracelib/classes/");
                              var call2902 = callmethodChecked(var_settings, "outputdir", [0]);
                              var string2904 = new GraceString("");
                              var opresult2906 = callmethodChecked(string2904, "++", [1], call2902);
                              var opresult2908 = callmethodChecked(opresult2906, "++", [1], string2900);
                              var opresult2910 = callmethodChecked(opresult2908, "++", [1], var_filename);
                              var opresult2912 = callmethodChecked(opresult2910, "++", [1], string2897);
                              var call2913 = callmethodChecked(var_io, "exists", [1], opresult2912);
                              if (Grace_isTrue(call2913)) {
                                setLineNumber(680);    // compilenode string
                                var string2914 = new GraceString("");
                                var string2917 = new GraceString("");
                                var string2920 = new GraceString("");
                                var opresult2922 = callmethodChecked(string2920, "++", [1], var_baseUrl);
                                var opresult2924 = callmethodChecked(opresult2922, "++", [1], string2917);
                                var opresult2926 = callmethodChecked(opresult2924, "++", [1], var_filename);
                                var opresult2928 = callmethodChecked(opresult2926, "++", [1], string2914);
                                var opresult2931 = callmethodChecked(var_out, "++", [1], opresult2928);
                                var_out = opresult2931;
                                if2896 = GraceDone;
                              } else {
                                setLineNumber(682);    // compilenode string
                                var string2932 = new GraceString("404");
                                var string2935 = new GraceString("");
                                var opresult2937 = callmethodChecked(string2935, "++", [1], var_baseUrl);
                                var opresult2939 = callmethodChecked(opresult2937, "++", [1], string2932);
                                var opresult2942 = callmethodChecked(var_out, "++", [1], opresult2939);
                                var_out = opresult2942;
                                if2896 = GraceDone;
                              }
                              if2860 = if2896;
                            }
                            if2816 = if2860;
                          }
                          setLineNumber(686);    // compilenode string
                          var string2943 = new GraceString(")");
                          var opresult2946 = callmethodChecked(var_out, "++", [1], string2943);
                          var_out = opresult2946;
                          setLineNumber(687);    // compilenode identifier
                          return var_out;
                        };
                        func2799.paramTypes = [];
                        func2799.paramTypes.push([type_String, "c"]);
                        func2799.paramTypes.push([type_String, "rep"]);
                        func2799.paramCounts = [1, 1];
                        obj2649.methods["getClassLink()show"] = func2799;
                        func2799.definitionLine = 669;
                        func2799.definitionModule = "gracedocMD";
                        var func2947 = function(argcv) {    // method getClassLink(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_c = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for getClassLink(1)"));
                          // Start argument checking
                          curarg = 1;
                          setLineNumber(689);    // compilenode identifier
                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in getClassLink (arg list 1), which corresponds to parameter c, does not have " + 
                                      callmethod(var_String, "asString", [0])._value + "."));
                          curarg++;
                          // End argument checking
                          setModuleName("gracedocMD");
                          setLineNumber(690);    // compilenode identifier
                          onSelf = true;
                          var call2948 = callmethodChecked(this, "getClassLink()show", [1, 1], var_c, var_c);
                          return call2948;
                        };
                        func2947.paramTypes = [];
                        func2947.paramTypes.push([type_String, "c"]);
                        func2947.confidential = true;
                        func2947.paramCounts = [1];
                        obj2649.methods["getClassLink"] = func2947;
                        func2947.definitionLine = 689;
                        func2947.definitionModule = "gracedocMD";
                        var func2949 = function(argcv) {    // method buildTemplate
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          if (argcv[0] !== 0)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for buildTemplate"));
                          setModuleName("gracedocMD");
                          setLineNumber(694);    // compilenode num
                          var var_cursor = new GraceNum(0);
                          setLineNumber(695);    // compilenode string
                          var string2950 = new GraceString("---\n");
                          var var_out = string2950;
                          setLineNumber(696);    // compilenode num
                          var var_classIndex = new GraceNum(0);
                          setLineNumber(697);    // compilenode num
                          var var_typeIndex = new GraceNum(0);
                          setLineNumber(698);    // compilenode call
                          var call2951 = callmethodChecked(superDepth, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call2952 = callmethodChecked(call2951, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call2953 = callmethodChecked(call2952, "markdownWriter", [0]);
                          var var_localWriter = call2953;
                          setLineNumber(702);    // compilenode string
                          var string2954 = new GraceString("");
                          onSelf = true;
                          var call2956 = callmethodChecked(this, "title", [0]);
                          var string2958 = new GraceString("");
                          var opresult2960 = callmethodChecked(string2958, "++", [1], call2956);
                          var opresult2962 = callmethodChecked(opresult2960, "++", [1], string2954);
                          var var_permalink = opresult2962;
                          if (!Grace_isTrue(callmethod(var_String, "match", [1], var_permalink)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("initial value of var 'permalink' is not of type String"));
                          setLineNumber(705);    // compilenode string
                          var string2963 = new GraceString("Class:");
                          var string2964 = new GraceString("");
                          var call2965 = callmethodChecked(var_permalink, "replace()with", [1, 1], string2963, string2964);
                          var_permalink = call2965;
                          setLineNumber(706);    // compilenode string
                          var string2966 = new GraceString("Type:");
                          var string2967 = new GraceString("");
                          var call2968 = callmethodChecked(var_permalink, "replace()with", [1, 1], string2966, string2967);
                          var_permalink = call2968;
                          setLineNumber(709);    // compilenode string
                          var string2969 = new GraceString(" ");
                          var string2970 = new GraceString("");
                          var call2971 = callmethodChecked(var_permalink, "replace()with", [1, 1], string2969, string2970);
                          var_permalink = call2971;
                          setLineNumber(712);    // compilenode string
                          var string2972 = new GraceString("\"\n");
                          onSelf = true;
                          var call2974 = callmethodChecked(this, "title", [0]);
                          var string2976 = new GraceString("title: \"");
                          var opresult2978 = callmethodChecked(string2976, "++", [1], call2974);
                          var opresult2980 = callmethodChecked(opresult2978, "++", [1], string2972);
                          var opresult2983 = callmethodChecked(var_out, "++", [1], opresult2980);
                          var_out = opresult2983;
                          setLineNumber(713);    // compilenode string
                          var string2984 = new GraceString("keywords: mydoc\n");
                          var opresult2987 = callmethodChecked(var_out, "++", [1], string2984);
                          var_out = opresult2987;
                          setLineNumber(714);    // compilenode string
                          var string2988 = new GraceString("sidebar: grace-doc-sidebar\n");
                          var opresult2991 = callmethodChecked(var_out, "++", [1], string2988);
                          var_out = opresult2991;
                          setLineNumber(715);    // compilenode string
                          var string2992 = new GraceString("toc: false\n");
                          var opresult2995 = callmethodChecked(var_out, "++", [1], string2992);
                          var_out = opresult2995;
                          setLineNumber(716);    // compilenode string
                          var string2996 = new GraceString("/\n");
                          var string2999 = new GraceString("permalink: /");
                          var opresult3001 = callmethodChecked(string2999, "++", [1], var_permalink);
                          var opresult3003 = callmethodChecked(opresult3001, "++", [1], string2996);
                          var opresult3006 = callmethodChecked(var_out, "++", [1], opresult3003);
                          var_out = opresult3006;
                          setLineNumber(717);    // compilenode string
                          var string3007 = new GraceString("folder: grace-docs\n");
                          var opresult3010 = callmethodChecked(var_out, "++", [1], string3007);
                          var_out = opresult3010;
                          setLineNumber(718);    // compilenode string
                          var string3011 = new GraceString("---\n");
                          var opresult3014 = callmethodChecked(var_out, "++", [1], string3011);
                          var_out = opresult3014;
                          var if3015 = GraceDone;
                          setLineNumber(721);    // compilenode string
                          var string3016 = new GraceString("Class:");
                          onSelf = true;
                          var call3017 = callmethodChecked(this, "title", [0]);
                          var call3018 = callmethodChecked(call3017, "contains", [1], string3016);
                          if (Grace_isTrue(call3018)) {
                            setLineNumber(723);    // compilenode call
                            onSelf = true;
                            var call3019 = callmethodChecked(this, "title", [0]);
                            onSelf = true;
                            var call3020 = callmethodChecked(this, "outdir", [0]);
                            var call3021 = callmethodChecked(var_sidebarGen, "addFile()withLink()toList()inModule", [1, 1, 1, 1], call3019, var_permalink, var_classList, call3020);
                            setLineNumber(724);    // compilenode string
                            var string3022 = new GraceString("");
                            onSelf = true;
                            var call3024 = callmethodChecked(this, "outdir", [0]);
                            var string3026 = new GraceString(" in module ");
                            var string3029 = new GraceString(" to ");
                            onSelf = true;
                            var call3031 = callmethodChecked(this, "title", [0]);
                            var string3033 = new GraceString("\nadded ");
                            var opresult3035 = callmethodChecked(string3033, "++", [1], call3031);
                            var opresult3037 = callmethodChecked(opresult3035, "++", [1], string3029);
                            var opresult3039 = callmethodChecked(opresult3037, "++", [1], var_classList);
                            var opresult3041 = callmethodChecked(opresult3039, "++", [1], string3026);
                            var opresult3043 = callmethodChecked(opresult3041, "++", [1], call3024);
                            var opresult3045 = callmethodChecked(opresult3043, "++", [1], string3022);
                            var call3046 = Grace_print(opresult3045);
                            if3015 = call3046;
                          } else {
                            var if3047 = GraceDone;
                            setLineNumber(726);    // compilenode string
                            var string3048 = new GraceString("Type:");
                            onSelf = true;
                            var call3049 = callmethodChecked(this, "title", [0]);
                            var call3050 = callmethodChecked(call3049, "contains", [1], string3048);
                            if (Grace_isTrue(call3050)) {
                              setLineNumber(728);    // compilenode call
                              onSelf = true;
                              var call3051 = callmethodChecked(this, "title", [0]);
                              onSelf = true;
                              var call3052 = callmethodChecked(this, "outdir", [0]);
                              var call3053 = callmethodChecked(var_sidebarGen, "addFile()withLink()toList()inModule", [1, 1, 1, 1], call3051, var_permalink, var_typeList, call3052);
                              if3047 = call3053;
                            }
                            if3015 = if3047;
                          }
                          var if3054 = GraceDone;
                          setLineNumber(732);    // compilenode call
                          onSelf = true;
                          var call3055 = callmethodChecked(this, "isOnClassPage", [0]);
                          if (Grace_isTrue(call3055)) {
                            setLineNumber(734);    // compilenode string
                            var string3056 = new GraceString("Definition");
                            var call3057 = callmethodChecked(var_localWriter, "addText()inMode", [1, 1], string3056, var_heading);
                            setLineNumber(735);    // compilenode call
                            onSelf = true;
                            var call3058 = callmethodChecked(this, "title", [0]);
                            var call3059 = callmethodChecked(var_localWriter, "addText()inMode", [1, 1], call3058, var_plain);
                            setLineNumber(736);    // compilenode identifier
                            var call3060 = callmethodChecked(var_localWriter, "addNewline", [0]);
                            setLineNumber(737);    // compilenode string
                            var string3061 = new GraceString("Description");
                            var call3062 = callmethodChecked(var_localWriter, "addText()inMode", [1, 1], string3061, var_heading);
                            setLineNumber(738);    // compilenode string
                            var string3063 = new GraceString("Not currently available...");
                            var call3064 = callmethodChecked(var_localWriter, "addText()inMode", [1, 1], string3063, var_plain);
                            setLineNumber(739);    // compilenode identifier
                            var call3065 = callmethodChecked(var_localWriter, "addNewline", [0]);
                            setLineNumber(740);    // compilenode string
                            var string3066 = new GraceString("Properties");
                            var call3067 = callmethodChecked(var_localWriter, "addText()inMode", [1, 1], string3066, var_heading);
                            setLineNumber(741);    // compilenode identifier
                            var call3068 = callmethodChecked(var_localWriter, "addNewline", [0]);
                            setLineNumber(744);    // compilenode identifier
                            var call3069 = callmethodChecked(var_localWriter, "dumpBin", [0]);
                            var opresult3072 = callmethodChecked(var_out, "++", [1], call3069);
                            var_out = opresult3072;
                            if3054 = GraceDone;
                          }
                          var if3073 = GraceDone;
                          setLineNumber(748);    // compilenode call
                          onSelf = true;
                          var call3074 = callmethodChecked(this, "isOnTypePage", [0]);
                          var call3075 = callmethodChecked(call3074, "prefix!", [0]);
                          onSelf = true;
                          var call3077 = callmethodChecked(this, "isOnClassPage", [0]);
                          var call3078 = callmethodChecked(call3077, "prefix!", [0]);
                          var opresult3080 = callmethodChecked(call3078, "&&", [1], call3075);
                          if (Grace_isTrue(opresult3080)) {
                            setLineNumber(750);    // compilenode string
                            var string3081 = new GraceString("Methods");
                            var call3082 = callmethodChecked(var_localWriter, "addText()inMode", [1, 1], string3081, var_heading);
                            setLineNumber(751);    // compilenode identifier
                            var call3083 = callmethodChecked(var_localWriter, "addNewline", [0]);
                            setLineNumber(754);    // compilenode identifier
                            var call3084 = callmethodChecked(var_localWriter, "dumpBin", [0]);
                            var opresult3087 = callmethodChecked(var_out, "++", [1], call3084);
                            var_out = opresult3087;
                            if3073 = GraceDone;
                          }
                          setLineNumber(761);    // compilenode identifier
                          var call3088 = callmethodChecked(var_section, "withTemplate()andCursorAt", [1, 1], var_out, var_cursor);
                          onSelf = true;
                          var call3089 = callmethodChecked(this, "section1:=", [1], call3088);
                          setLineNumber(763);    // compilenode string
                          var string3090 = new GraceString("");
                          var call3091 = callmethodChecked(var_section, "withTemplate()andCursorAt", [1, 1], string3090, var_cursor);
                          onSelf = true;
                          var call3092 = callmethodChecked(this, "section2:=", [1], call3091);
                          setLineNumber(765);    // compilenode num
                          var_cursor = new GraceNum(0);
                          setLineNumber(766);    // compilenode string
                          var string3093 = new GraceString("Types");
                          onSelf = true;
                          var call3094 = callmethodChecked(this, "writer", [0]);
                          var call3095 = callmethodChecked(call3094, "addText()inMode", [1, 1], string3093, var_heading);
                          setLineNumber(767);    // compilenode call
                          onSelf = true;
                          var call3096 = callmethodChecked(this, "writer", [0]);
                          var call3097 = callmethodChecked(call3096, "dumpBin", [0]);
                          var_out = call3097;
                          setLineNumber(768);    // compilenode identifier
                          var call3098 = callmethodChecked(var_out, "size", [0]);
                          var_cursor = call3098;
                          setLineNumber(770);    // compilenode identifier
                          var call3099 = callmethodChecked(var_section, "withTemplate()andCursorAt", [1, 1], var_out, var_cursor);
                          onSelf = true;
                          var call3100 = callmethodChecked(this, "section3:=", [1], call3099);
                          setLineNumber(772);    // compilenode num
                          var_cursor = new GraceNum(0);
                          setLineNumber(773);    // compilenode string
                          var string3101 = new GraceString("Definitions");
                          onSelf = true;
                          var call3102 = callmethodChecked(this, "writer", [0]);
                          var call3103 = callmethodChecked(call3102, "addText()inMode", [1, 1], string3101, var_heading);
                          setLineNumber(774);    // compilenode call
                          onSelf = true;
                          var call3104 = callmethodChecked(this, "writer", [0]);
                          var call3105 = callmethodChecked(call3104, "dumpBin", [0]);
                          var_out = call3105;
                          setLineNumber(775);    // compilenode identifier
                          var call3106 = callmethodChecked(var_out, "size", [0]);
                          var_cursor = call3106;
                          setLineNumber(776);    // compilenode identifier
                          var call3107 = callmethodChecked(var_section, "withTemplate()andCursorAt", [1, 1], var_out, var_cursor);
                          onSelf = true;
                          var call3108 = callmethodChecked(this, "section4:=", [1], call3107);
                          setLineNumber(778);    // compilenode string
                          var string3109 = new GraceString("");
                          var call3110 = callmethodChecked(var_section, "withTemplate()andCursorAt", [1, 1], string3109, var_cursor);
                          onSelf = true;
                          var call3111 = callmethodChecked(this, "section5:=", [1], call3110);
                          setLineNumber(780);    // compilenode string
                          var string3112 = new GraceString("");
                          var call3113 = callmethodChecked(var_section, "withTemplate()andCursorAt", [1, 1], string3112, var_cursor);
                          onSelf = true;
                          var call3114 = callmethodChecked(this, "section6:=", [1], call3113);
                          setLineNumber(783);    // compilenode string
                          var string3115 = new GraceString("");
                          var call3116 = callmethodChecked(var_section, "withTemplate()andCursorAt", [1, 1], string3115, var_cursor);
                          onSelf = true;
                          var call3117 = callmethodChecked(this, "methodtypesSection:=", [1], call3116);
                          setLineNumber(785);    // compilenode string
                          var string3118 = new GraceString("");
                          var call3119 = callmethodChecked(var_section, "withTemplate()andCursorAt", [1, 1], string3118, var_cursor);
                          onSelf = true;
                          var call3120 = callmethodChecked(this, "footerSection:=", [1], call3119);
                          return call3120;
                        };
                        func2949.confidential = true;
                        func2949.paramCounts = [0];
                        obj2649.methods["buildTemplate"] = func2949;
                        func2949.definitionLine = 693;
                        func2949.definitionModule = "gracedocMD";
                        var func3121 = function(argcv) {    // method build404
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          if (argcv[0] !== 0)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for build404"));
                          setModuleName("gracedocMD");
                          setLineNumber(793);    // compilenode string
                          var string3122 = new GraceString("---\n");
                          var var_out = string3122;
                          setLineNumber(794);    // compilenode string
                          var string3123 = new GraceString("\"\n");
                          onSelf = true;
                          var call3125 = callmethodChecked(this, "title", [0]);
                          var string3127 = new GraceString("title: \"");
                          var opresult3129 = callmethodChecked(string3127, "++", [1], call3125);
                          var opresult3131 = callmethodChecked(opresult3129, "++", [1], string3123);
                          var opresult3134 = callmethodChecked(var_out, "++", [1], opresult3131);
                          var_out = opresult3134;
                          setLineNumber(795);    // compilenode string
                          var string3135 = new GraceString("keywords: mydoc\n");
                          var opresult3138 = callmethodChecked(var_out, "++", [1], string3135);
                          var_out = opresult3138;
                          setLineNumber(796);    // compilenode string
                          var string3139 = new GraceString("sidebar: grace-doc-sidebar\n");
                          var opresult3142 = callmethodChecked(var_out, "++", [1], string3139);
                          var_out = opresult3142;
                          setLineNumber(797);    // compilenode string
                          var string3143 = new GraceString("toc: false\n");
                          var opresult3146 = callmethodChecked(var_out, "++", [1], string3143);
                          var_out = opresult3146;
                          setLineNumber(798);    // compilenode string
                          var string3147 = new GraceString("permalink: /404/\n");
                          var opresult3150 = callmethodChecked(var_out, "++", [1], string3147);
                          var_out = opresult3150;
                          setLineNumber(799);    // compilenode string
                          var string3151 = new GraceString("folder: grace-docs\n");
                          var opresult3154 = callmethodChecked(var_out, "++", [1], string3151);
                          var_out = opresult3154;
                          setLineNumber(800);    // compilenode string
                          var string3155 = new GraceString("---\n");
                          var opresult3158 = callmethodChecked(var_out, "++", [1], string3155);
                          var_out = opresult3158;
                          setLineNumber(802);    // compilenode string
                          var string3159 = new GraceString("# 404 - Page 'ot Found  ");
                          var opresult3162 = callmethodChecked(var_out, "++", [1], string3159);
                          var_out = opresult3162;
                          setLineNumber(803);    // compilenode string
                          var string3163 = new GraceString("\n  \n  \nOops! The file for this link appears to be missing! \n");
                          var opresult3166 = callmethodChecked(var_out, "++", [1], string3163);
                          var_out = opresult3166;
                          setLineNumber(804);    // compilenode string
                          var string3167 = new GraceString("Please naviagte back to your previous page!\"\n");
                          var opresult3170 = callmethodChecked(var_out, "++", [1], string3167);
                          var_out = opresult3170;
                          setLineNumber(806);    // compilenode string
                          var string3171 = new GraceString("/404.md");
                          var call3173 = callmethodChecked(var_settings, "outputdir", [0]);
                          var string3175 = new GraceString("");
                          var opresult3177 = callmethodChecked(string3175, "++", [1], call3173);
                          var opresult3179 = callmethodChecked(opresult3177, "++", [1], string3171);
                          var string3180 = new GraceString("w");
                          var call3181 = callmethodChecked(var_io, "open", [2], opresult3179, string3180);
                          var var_file404 = call3181;
                          setLineNumber(807);    // compilenode identifier
                          var call3182 = callmethodChecked(var_file404, "write", [1], var_out);
                          setLineNumber(808);    // compilenode identifier
                          var call3183 = callmethodChecked(var_file404, "close", [0]);
                          return call3183;
                        };
                        func3121.paramCounts = [0];
                        obj2649.methods["build404"] = func3121;
                        func3121.definitionLine = 792;
                        func3121.definitionModule = "gracedocMD";
                        var func3184 = function(argcv) {    // method setSidebarName
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          if (argcv[0] !== 0)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for setSidebarName"));
                          setModuleName("gracedocMD");
                          setLineNumber(814);    // compilenode call
                          onSelf = true;
                          var call3185 = callmethodChecked(this, "outdir", [0]);
                          var call3186 = callmethodChecked(var_sidebarGen, "setModule", [1], call3185);
                          return call3186;
                        };
                        func3184.paramCounts = [0];
                        obj2649.methods["setSidebarName"] = func3184;
                        func3184.definitionLine = 812;
                        func3184.definitionModule = "gracedocMD";
                        var func3187 = function(argcv) {    // method buildindex
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          if (argcv[0] !== 0)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for buildindex"));
                          setModuleName("gracedocMD");
                          setLineNumber(818);    // compilenode string
                          var string3188 = new GraceString(" -- https://github.com/reid47/gracedoc -->\n");
                          var call3190 = callmethodChecked(var_settings, "version", [0]);
                          var string3192 = new GraceString("<!-- generated by Gracedoc, v");
                          var opresult3194 = callmethodChecked(string3192, "++", [1], call3190);
                          var opresult3196 = callmethodChecked(opresult3194, "++", [1], string3188);
                          var var_out = opresult3196;
                          setLineNumber(819);    // compilenode string
                          var string3197 = new GraceString("<!DOCTYPE html>\n<html lang=\"en\">");
                          var opresult3200 = callmethodChecked(var_out, "++", [1], string3197);
                          var_out = opresult3200;
                          setLineNumber(820);    // compilenode string
                          var string3201 = new GraceString("<head>");
                          var opresult3204 = callmethodChecked(var_out, "++", [1], string3201);
                          var_out = opresult3204;
                          setLineNumber(821);    // compilenode string
                          var string3205 = new GraceString("<title>GraceDocs</title>");
                          var opresult3208 = callmethodChecked(var_out, "++", [1], string3205);
                          var_out = opresult3208;
                          setLineNumber(822);    // compilenode string
                          var string3209 = new GraceString("<link rel=\"stylesheet\" href=\"graceDoc.css\">");
                          var opresult3212 = callmethodChecked(var_out, "++", [1], string3209);
                          var_out = opresult3212;
                          setLineNumber(823);    // compilenode string
                          var string3213 = new GraceString("</head>");
                          var opresult3216 = callmethodChecked(var_out, "++", [1], string3213);
                          var_out = opresult3216;
                          setLineNumber(824);    // compilenode string
                          var string3217 = new GraceString("<body>");
                          var opresult3220 = callmethodChecked(var_out, "++", [1], string3217);
                          var_out = opresult3220;
                          setLineNumber(825);    // compilenode string
                          var string3221 = new GraceString("<iframe id=\"frame-sidebar\" src=\"modules.md\" name=\"moduleFrame\"></iframe>");
                          var opresult3224 = callmethodChecked(var_out, "++", [1], string3221);
                          var_out = opresult3224;
                          setLineNumber(826);    // compilenode string
                          var string3225 = new GraceString("<iframe id=\"frame-main\" src=\"\" name=\"mainFrame\"></iframe>");
                          var opresult3228 = callmethodChecked(var_out, "++", [1], string3225);
                          var_out = opresult3228;
                          setLineNumber(827);    // compilenode string
                          var string3229 = new GraceString("</body>");
                          var opresult3232 = callmethodChecked(var_out, "++", [1], string3229);
                          var_out = opresult3232;
                          setLineNumber(828);    // compilenode string
                          var string3233 = new GraceString("</html>");
                          var opresult3236 = callmethodChecked(var_out, "++", [1], string3233);
                          var_out = opresult3236;
                          setLineNumber(829);    // compilenode string
                          var string3237 = new GraceString("/index.md");
                          var call3239 = callmethodChecked(var_settings, "outputdir", [0]);
                          var string3241 = new GraceString("");
                          var opresult3243 = callmethodChecked(string3241, "++", [1], call3239);
                          var opresult3245 = callmethodChecked(opresult3243, "++", [1], string3237);
                          var string3246 = new GraceString("w");
                          var call3247 = callmethodChecked(var_io, "open", [2], opresult3245, string3246);
                          var var_fileindex = call3247;
                          setLineNumber(830);    // compilenode identifier
                          var call3248 = callmethodChecked(var_fileindex, "write", [1], var_out);
                          setLineNumber(831);    // compilenode identifier
                          var call3249 = callmethodChecked(var_fileindex, "close", [0]);
                          return call3249;
                        };
                        func3187.paramCounts = [0];
                        obj2649.methods["buildindex"] = func3187;
                        func3187.definitionLine = 817;
                        func3187.definitionModule = "gracedocMD";
                        var func3250 = function(argcv) {    // method buildjs
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          if (argcv[0] !== 0)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for buildjs"));
                          setModuleName("gracedocMD");
                          setLineNumber(835);    // compilenode string
                          var string3251 = new GraceString("function toggleContents(eltid) {\n    var elt = document.getElementById('contents-'+eltid)\n    var arrow = document.getElementById('arrow-button-'+eltid)\n    if (elt.style.display == 'none') {\n        elt.style.display = 'block';\n        arrow.innerHTML = '&#9660';\n    } else {\n        elt.style.display = 'none';\n        arrow.innerHTML = '&#9654';\n    }\n}");
                          var var_out = string3251;
                          setLineNumber(846);    // compilenode string
                          var string3252 = new GraceString("/gracedoc.js");
                          var call3254 = callmethodChecked(var_settings, "outputdir", [0]);
                          var string3256 = new GraceString("");
                          var opresult3258 = callmethodChecked(string3256, "++", [1], call3254);
                          var opresult3260 = callmethodChecked(opresult3258, "++", [1], string3252);
                          var string3261 = new GraceString("w");
                          var call3262 = callmethodChecked(var_io, "open", [2], opresult3260, string3261);
                          var var_filejs = call3262;
                          setLineNumber(847);    // compilenode identifier
                          var call3263 = callmethodChecked(var_filejs, "write", [1], var_out);
                          setLineNumber(848);    // compilenode identifier
                          var call3264 = callmethodChecked(var_filejs, "close", [0]);
                          return call3264;
                        };
                        func3250.paramCounts = [0];
                        obj2649.methods["buildjs"] = func3250;
                        func3250.definitionLine = 834;
                        func3250.definitionModule = "gracedocMD";
                        var func3265 = function(argcv) {    // method buildcss
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          if (argcv[0] !== 0)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for buildcss"));
                          setModuleName("gracedocMD");
                          setLineNumber(852);    // compilenode string
                          var string3266 = new GraceString("CSS Built...");
                          var call3267 = Grace_print(string3266);
                          return call3267;
                        };
                        func3265.paramCounts = [0];
                        obj2649.methods["buildcss"] = func3265;
                        func3265.definitionLine = 851;
                        func3265.definitionModule = "gracedocMD";
                        var func3268 = function(argcv) {    // method generate
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          if (argcv[0] !== 0)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for generate"));
                          setModuleName("gracedocMD");
                          var if3269 = GraceDone;
                          setLineNumber(857);    // compilenode identifier
                          var call3271 = callmethodChecked(var_settings, "verbosity", [0]);
                          var opresult3273 = callmethodChecked(call3271, ">", [1], new GraceNum(1));
                          if (Grace_isTrue(opresult3273)) {
                            var string3274 = new GraceString(")");
                            var call3276 = callmethodChecked(var_sys, "elapsedTime", [0]);
                            var string3278 = new GraceString(" - starting to assemble HTML (");
                            onSelf = true;
                            var call3280 = callmethodChecked(this, "title", [0]);
                            var string3282 = new GraceString("On ");
                            var opresult3284 = callmethodChecked(string3282, "++", [1], call3280);
                            var opresult3286 = callmethodChecked(opresult3284, "++", [1], string3278);
                            var opresult3288 = callmethodChecked(opresult3286, "++", [1], call3276);
                            var opresult3290 = callmethodChecked(opresult3288, "++", [1], string3274);
                            var call3291 = Grace_print(opresult3290);
                            if3269 = call3291;
                          }
                          setLineNumber(859);    // compilenode vardec
                          var var_outfile;
                          setLineNumber(860);    // compilenode string
                          var string3292 = new GraceString("");
                          var var_output = string3292;
                          setLineNumber(861);    // compilenode string
                          var string3293 = new GraceString(".md");
                          onSelf = true;
                          var call3295 = callmethodChecked(this, "pageName", [0]);
                          var string3297 = new GraceString("/");
                          onSelf = true;
                          var call3299 = callmethodChecked(this, "outdir", [0]);
                          var string3301 = new GraceString("/");
                          var call3303 = callmethodChecked(var_settings, "outputdir", [0]);
                          var string3305 = new GraceString("");
                          var opresult3307 = callmethodChecked(string3305, "++", [1], call3303);
                          var opresult3309 = callmethodChecked(opresult3307, "++", [1], string3301);
                          var opresult3311 = callmethodChecked(opresult3309, "++", [1], call3299);
                          var opresult3313 = callmethodChecked(opresult3311, "++", [1], string3297);
                          var opresult3315 = callmethodChecked(opresult3313, "++", [1], call3295);
                          var opresult3317 = callmethodChecked(opresult3315, "++", [1], string3293);
                          var string3318 = new GraceString("w");
                          var call3319 = callmethodChecked(var_io, "open", [2], opresult3317, string3318);
                          var_outfile = call3319;
                          setLineNumber(868);    // compilenode call
                          onSelf = true;
                          var call3320 = callmethodChecked(this, "section1", [0]);
                          var call3321 = callmethodChecked(call3320, "md", [0]);
                          var opresult3324 = callmethodChecked(var_output, "++", [1], call3321);
                          var_output = opresult3324;
                          var if3325 = GraceDone;
                          setLineNumber(869);    // compilenode call
                          onSelf = true;
                          var call3326 = callmethodChecked(this, "section6", [0]);
                          var call3327 = callmethodChecked(call3326, "hasContent", [0]);
                          if (Grace_isTrue(call3327)) {
                            setLineNumber(870);    // compilenode call
                            onSelf = true;
                            var call3328 = callmethodChecked(this, "section6", [0]);
                            var call3329 = callmethodChecked(call3328, "md", [0]);
                            var opresult3332 = callmethodChecked(var_output, "++", [1], call3329);
                            var_output = opresult3332;
                            if3325 = GraceDone;
                          }
                          var if3333 = GraceDone;
                          setLineNumber(872);    // compilenode call
                          onSelf = true;
                          var call3334 = callmethodChecked(this, "section4", [0]);
                          var call3335 = callmethodChecked(call3334, "hasContent", [0]);
                          if (Grace_isTrue(call3335)) {
                            setLineNumber(873);    // compilenode call
                            onSelf = true;
                            var call3336 = callmethodChecked(this, "section4", [0]);
                            var call3337 = callmethodChecked(call3336, "alphabetize", [0]);
                            setLineNumber(874);    // compilenode call
                            onSelf = true;
                            var call3338 = callmethodChecked(this, "section4", [0]);
                            var call3339 = callmethodChecked(call3338, "md", [0]);
                            var opresult3342 = callmethodChecked(var_output, "++", [1], call3339);
                            var_output = opresult3342;
                            if3333 = GraceDone;
                          }
                          var if3343 = GraceDone;
                          setLineNumber(876);    // compilenode call
                          onSelf = true;
                          var call3344 = callmethodChecked(this, "methodtypesSection", [0]);
                          var call3345 = callmethodChecked(call3344, "hasContent", [0]);
                          if (Grace_isTrue(call3345)) {
                            setLineNumber(877);    // compilenode call
                            onSelf = true;
                            var call3346 = callmethodChecked(this, "methodtypesSection", [0]);
                            var call3347 = callmethodChecked(call3346, "alphabetize", [0]);
                            setLineNumber(878);    // compilenode call
                            onSelf = true;
                            var call3348 = callmethodChecked(this, "methodtypesSection", [0]);
                            var call3349 = callmethodChecked(call3348, "md", [0]);
                            var opresult3352 = callmethodChecked(var_output, "++", [1], call3349);
                            var_output = opresult3352;
                            if3343 = GraceDone;
                          }
                          var if3353 = GraceDone;
                          setLineNumber(880);    // compilenode call
                          onSelf = true;
                          var call3354 = callmethodChecked(this, "section3", [0]);
                          var call3355 = callmethodChecked(call3354, "hasContent", [0]);
                          if (Grace_isTrue(call3355)) {
                            setLineNumber(881);    // compilenode call
                            onSelf = true;
                            var call3356 = callmethodChecked(this, "section3", [0]);
                            var call3357 = callmethodChecked(call3356, "alphabetize", [0]);
                            setLineNumber(882);    // compilenode call
                            onSelf = true;
                            var call3358 = callmethodChecked(this, "section3", [0]);
                            var call3359 = callmethodChecked(call3358, "md", [0]);
                            var opresult3362 = callmethodChecked(var_output, "++", [1], call3359);
                            var_output = opresult3362;
                            if3353 = GraceDone;
                          }
                          var if3363 = GraceDone;
                          setLineNumber(884);    // compilenode call
                          onSelf = true;
                          var call3364 = callmethodChecked(this, "section5", [0]);
                          var call3365 = callmethodChecked(call3364, "hasContent", [0]);
                          if (Grace_isTrue(call3365)) {
                            setLineNumber(885);    // compilenode call
                            onSelf = true;
                            var call3366 = callmethodChecked(this, "section5", [0]);
                            var call3367 = callmethodChecked(call3366, "alphabetize", [0]);
                            setLineNumber(886);    // compilenode call
                            onSelf = true;
                            var call3368 = callmethodChecked(this, "section5", [0]);
                            var call3369 = callmethodChecked(call3368, "md", [0]);
                            var opresult3372 = callmethodChecked(var_output, "++", [1], call3369);
                            var_output = opresult3372;
                            if3363 = GraceDone;
                          }
                          var if3373 = GraceDone;
                          setLineNumber(888);    // compilenode call
                          onSelf = true;
                          var call3374 = callmethodChecked(this, "section2", [0]);
                          var call3375 = callmethodChecked(call3374, "hasContent", [0]);
                          if (Grace_isTrue(call3375)) {
                            setLineNumber(889);    // compilenode call
                            onSelf = true;
                            var call3376 = callmethodChecked(this, "section2", [0]);
                            var call3377 = callmethodChecked(call3376, "alphabetize", [0]);
                            setLineNumber(890);    // compilenode call
                            onSelf = true;
                            var call3378 = callmethodChecked(this, "section2", [0]);
                            var call3379 = callmethodChecked(call3378, "md", [0]);
                            var opresult3382 = callmethodChecked(var_output, "++", [1], call3379);
                            var_output = opresult3382;
                            if3373 = GraceDone;
                          }
                          setLineNumber(892);    // compilenode call
                          onSelf = true;
                          var call3383 = callmethodChecked(this, "footerSection", [0]);
                          var call3384 = callmethodChecked(call3383, "md", [0]);
                          var opresult3387 = callmethodChecked(var_output, "++", [1], call3384);
                          var_output = opresult3387;
                          setLineNumber(893);    // compilenode identifier
                          var call3388 = callmethodChecked(var_outfile, "write", [1], var_output);
                          setLineNumber(894);    // compilenode identifier
                          var call3389 = callmethodChecked(var_outfile, "close", [0]);
                          var if3390 = GraceDone;
                          setLineNumber(895);    // compilenode identifier
                          var call3392 = callmethodChecked(var_settings, "verbosity", [0]);
                          var opresult3394 = callmethodChecked(call3392, ">", [1], new GraceNum(1));
                          if (Grace_isTrue(opresult3394)) {
                            var string3395 = new GraceString(")");
                            var call3397 = callmethodChecked(var_sys, "elapsedTime", [0]);
                            var string3399 = new GraceString(" - file written (");
                            onSelf = true;
                            var call3401 = callmethodChecked(this, "title", [0]);
                            var string3403 = new GraceString("On ");
                            var opresult3405 = callmethodChecked(string3403, "++", [1], call3401);
                            var opresult3407 = callmethodChecked(opresult3405, "++", [1], string3399);
                            var opresult3409 = callmethodChecked(opresult3407, "++", [1], call3397);
                            var opresult3411 = callmethodChecked(opresult3409, "++", [1], string3395);
                            var call3412 = Grace_print(opresult3411);
                            if3390 = call3412;
                          }
                          return if3390;
                        };
                        func3268.paramCounts = [0];
                        obj2649.methods["generate"] = func3268;
                        func3268.definitionLine = 856;
                        func3268.definitionModule = "gracedocMD";
                        var func3413 = function(argcv) {    // method visitMethodType(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_o = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMethodType(1)"));
                          setModuleName("gracedocMD");
                          var if3414 = GraceDone;
                          setLineNumber(903);    // compilenode call
                          onSelf = true;
                          var call3415 = callmethodChecked(this, "isOnTypePage", [0]);
                          if (Grace_isTrue(call3415)) {
                            setLineNumber(904);    // compilenode call
                            onSelf = true;
                            var call3416 = callmethodChecked(this, "writer", [0]);
                            var call3417 = callmethodChecked(call3416, "addBullet", [0]);
                            setLineNumber(905);    // compilenode identifier
                            var call3418 = callmethodChecked(var_o, "signature", [0]);
                            var block3419 = new GraceBlock(this, 905, 1);
                            setLineNumber(1);    // compilenode identifier
                            block3419.real = function(var_part) {
                              setLineNumber(906);    // compilenode identifier
                              var call3420 = callmethodChecked(var_part, "name", [0]);
                              onSelf = true;
                              var call3421 = callmethodChecked(this, "writer", [0]);
                              var call3422 = callmethodChecked(call3421, "addText()inMode", [1, 1], call3420, var_code);
                              var if3423 = GraceDone;
                              setLineNumber(907);    // compilenode identifier
                              var call3425 = callmethodChecked(var_part, "params", [0]);
                              var call3426 = callmethodChecked(call3425, "size", [0]);
                              var opresult3428 = callmethodChecked(call3426, ">", [1], new GraceNum(0));
                              if (Grace_isTrue(opresult3428)) {
                                setLineNumber(908);    // compilenode string
                                var string3429 = new GraceString("(");
                                onSelf = true;
                                var call3430 = callmethodChecked(this, "writer", [0]);
                                var call3431 = callmethodChecked(call3430, "addText()inMode", [1, 1], string3429, var_code);
                                setLineNumber(909);    // compilenode identifier
                                var call3432 = callmethodChecked(var_part, "params", [0]);
                                var block3433 = new GraceBlock(this, 909, 1);
                                setLineNumber(1);    // compilenode identifier
                                block3433.real = function(var_param) {
                                  var if3434 = GraceDone;
                                  setLineNumber(910);    // compilenode identifier
                                  var call3436 = callmethodChecked(var_param, "dtype", [0]);
                                  var opresult3438 = callmethodChecked(call3436, "\u2260", [1], GraceFalse);
                                  if (Grace_isTrue(opresult3438)) {
                                    setLineNumber(911);    // compilenode identifier
                                    var call3439 = callmethodChecked(var_param, "nameString", [0]);
                                    onSelf = true;
                                    var call3440 = callmethodChecked(this, "writer", [0]);
                                    var call3441 = callmethodChecked(call3440, "addText()inMode", [1, 1], call3439, var_code);
                                    setLineNumber(912);    // compilenode call
                                    onSelf = true;
                                    var call3442 = callmethodChecked(this, "writer", [0]);
                                    var call3443 = callmethodChecked(call3442, "addColon", [0]);
                                    var if3444 = GraceDone;
                                    setLineNumber(913);    // compilenode string
                                    var string3445 = new GraceString("identifier");
                                    var call3447 = callmethodChecked(var_param, "dtype", [0]);
                                    var call3448 = callmethodChecked(call3447, "kind", [0]);
                                    var opresult3450 = callmethodChecked(call3448, "==", [1], string3445);
                                    if (Grace_isTrue(opresult3450)) {
                                      setLineNumber(914);    // compilenode identifier
                                      var call3451 = callmethodChecked(var_param, "dtype", [0]);
                                      var call3452 = callmethodChecked(call3451, "value", [0]);
                                      onSelf = true;
                                      var call3453 = callmethodChecked(this, "getTypeLink", [1], call3452);
                                      onSelf = true;
                                      var call3454 = callmethodChecked(this, "writer", [0]);
                                      var call3455 = callmethodChecked(call3454, "addText()inMode", [1, 1], call3453, var_plain);
                                      if3444 = call3455;
                                    } else {
                                      var if3456 = GraceDone;
                                      setLineNumber(915);    // compilenode string
                                      var string3457 = new GraceString("generic");
                                      var call3459 = callmethodChecked(var_param, "dtype", [0]);
                                      var call3460 = callmethodChecked(call3459, "kind", [0]);
                                      var opresult3462 = callmethodChecked(call3460, "==", [1], string3457);
                                      if (Grace_isTrue(opresult3462)) {
                                        setLineNumber(916);    // compilenode identifier
                                        var call3463 = callmethodChecked(var_param, "dtype", [0]);
                                        var call3464 = callmethodChecked(call3463, "value", [0]);
                                        var call3465 = callmethodChecked(call3464, "value", [0]);
                                        onSelf = true;
                                        var call3466 = callmethodChecked(this, "writer", [0]);
                                        var call3467 = callmethodChecked(call3466, "addText()inMode", [1, 1], call3465, var_plain);
                                        setLineNumber(917);    // compilenode block
                                        var block3468 = new GraceBlock(this, 917, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block3468.real = function(var_each) {
                                          setLineNumber(917);    // compilenode string
                                          var string3469 = new GraceString("");
                                          var call3471 = callmethodChecked(var_each, "value", [0]);
                                          onSelf = true;
                                          var call3472 = callmethodChecked(this, "getTypeLink", [1], call3471);
                                          var string3474 = new GraceString("");
                                          var opresult3476 = callmethodChecked(string3474, "++", [1], call3472);
                                          var opresult3478 = callmethodChecked(opresult3476, "++", [1], string3469);
                                          onSelf = true;
                                          var call3479 = callmethodChecked(this, "writer", [0]);
                                          var call3480 = callmethodChecked(call3479, "addText()inMode", [1, 1], opresult3478, var_code);
                                          return call3480;
                                        };
                                        var block3481 = new GraceBlock(this, 917, 0);
                                        block3481.real = function() {
                                          onSelf = true;
                                          var call3482 = callmethodChecked(this, "writer", [0]);
                                          var call3483 = callmethodChecked(call3482, "addComma", [0]);
                                          return call3483;
                                        };
                                        var call3484 = callmethodChecked(var_param, "dtype", [0]);
                                        var call3485 = callmethodChecked(call3484, "args", [0]);
                                        var call3486 = callmethodChecked(call3485, "do()separatedBy", [1, 1], block3468, block3481);
                                        if3456 = call3486;
                                      }
                                      if3444 = if3456;
                                    }
                                    if3434 = if3444;
                                  } else {
                                    setLineNumber(920);    // compilenode identifier
                                    var call3487 = callmethodChecked(var_param, "nameString", [0]);
                                    onSelf = true;
                                    var call3488 = callmethodChecked(this, "writer", [0]);
                                    var call3489 = callmethodChecked(call3488, "addText()inMode", [1, 1], call3487, var_code);
                                    if3434 = call3489;
                                  }
                                  var if3490 = GraceDone;
                                  setLineNumber(922);    // compilenode identifier
                                  var call3491 = callmethodChecked(var_part, "params", [0]);
                                  var call3492 = callmethodChecked(call3491, "last", [0]);
                                  var opresult3495 = callmethodChecked(var_param, "\u2260", [1], call3492);
                                  var call3498 = callmethodChecked(var_part, "params", [0]);
                                  var call3499 = callmethodChecked(call3498, "size", [0]);
                                  var opresult3501 = callmethodChecked(call3499, ">", [1], new GraceNum(1));
                                  var opresult3503 = callmethodChecked(opresult3501, "&&", [1], opresult3495);
                                  if (Grace_isTrue(opresult3503)) {
                                    setLineNumber(923);    // compilenode call
                                    onSelf = true;
                                    var call3504 = callmethodChecked(this, "writer", [0]);
                                    var call3505 = callmethodChecked(call3504, "addComma", [0]);
                                    if3490 = call3505;
                                  }
                                  return if3490;
                                };
                                var call3506 = callmethodChecked(var_prelude, "for()do", [1, 1], call3432, block3433);
                                setLineNumber(926);    // compilenode string
                                var string3507 = new GraceString(")");
                                onSelf = true;
                                var call3508 = callmethodChecked(this, "writer", [0]);
                                var call3509 = callmethodChecked(call3508, "addText()inMode", [1, 1], string3507, var_code);
                                if3423 = call3509;
                              }
                              setLineNumber(929);    // compilenode call
                              onSelf = true;
                              var call3510 = callmethodChecked(this, "writer", [0]);
                              var call3511 = callmethodChecked(call3510, "addSpace", [0]);
                              return call3511;
                            };
                            var call3512 = callmethodChecked(var_prelude, "for()do", [1, 1], call3418, block3419);
                            setLineNumber(931);    // compilenode string
                            var string3513 = new GraceString("\u2014> ");
                            onSelf = true;
                            var call3514 = callmethodChecked(this, "writer", [0]);
                            var call3515 = callmethodChecked(call3514, "addText()inMode", [1, 1], string3513, var_code);
                            var if3516 = GraceDone;
                            setLineNumber(933);    // compilenode identifier
                            var call3518 = callmethodChecked(var_o, "rtype", [0]);
                            var opresult3520 = callmethodChecked(call3518, "\u2260", [1], GraceFalse);
                            if (Grace_isTrue(opresult3520)) {
                              var if3521 = GraceDone;
                              setLineNumber(934);    // compilenode string
                              var string3522 = new GraceString("identifier");
                              var call3524 = callmethodChecked(var_o, "rtype", [0]);
                              var call3525 = callmethodChecked(call3524, "kind", [0]);
                              var opresult3527 = callmethodChecked(call3525, "==", [1], string3522);
                              if (Grace_isTrue(opresult3527)) {
                                setLineNumber(935);    // compilenode identifier
                                var call3528 = callmethodChecked(var_o, "rtype", [0]);
                                var call3529 = callmethodChecked(call3528, "value", [0]);
                                onSelf = true;
                                var call3530 = callmethodChecked(this, "getTypeLink", [1], call3529);
                                onSelf = true;
                                var call3531 = callmethodChecked(this, "writer", [0]);
                                var call3532 = callmethodChecked(call3531, "addText()inMode", [1, 1], call3530, var_plain);
                                if3521 = call3532;
                              } else {
                                var if3533 = GraceDone;
                                setLineNumber(936);    // compilenode string
                                var string3534 = new GraceString("generic");
                                var call3536 = callmethodChecked(var_o, "rtype", [0]);
                                var call3537 = callmethodChecked(call3536, "kind", [0]);
                                var opresult3539 = callmethodChecked(call3537, "==", [1], string3534);
                                if (Grace_isTrue(opresult3539)) {
                                  setLineNumber(937);    // compilenode identifier
                                  var call3540 = callmethodChecked(var_o, "rtype", [0]);
                                  var call3541 = callmethodChecked(call3540, "value", [0]);
                                  var call3542 = callmethodChecked(call3541, "value", [0]);
                                  onSelf = true;
                                  var call3543 = callmethodChecked(this, "getTypeLink", [1], call3542);
                                  onSelf = true;
                                  var call3544 = callmethodChecked(this, "writer", [0]);
                                  var call3545 = callmethodChecked(call3544, "addText()inMode", [1, 1], call3543, var_plain);
                                  setLineNumber(938);    // compilenode block
                                  var block3546 = new GraceBlock(this, 938, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block3546.real = function(var_each) {
                                    setLineNumber(938);    // compilenode string
                                    var string3547 = new GraceString("");
                                    var call3549 = callmethodChecked(var_each, "value", [0]);
                                    onSelf = true;
                                    var call3550 = callmethodChecked(this, "getTypeLink", [1], call3549);
                                    var string3552 = new GraceString("");
                                    var opresult3554 = callmethodChecked(string3552, "++", [1], call3550);
                                    var opresult3556 = callmethodChecked(opresult3554, "++", [1], string3547);
                                    onSelf = true;
                                    var call3557 = callmethodChecked(this, "writer", [0]);
                                    var call3558 = callmethodChecked(call3557, "addText()inMode", [1, 1], opresult3556, var_code);
                                    return call3558;
                                  };
                                  var block3559 = new GraceBlock(this, 938, 0);
                                  block3559.real = function() {
                                    onSelf = true;
                                    var call3560 = callmethodChecked(this, "writer", [0]);
                                    var call3561 = callmethodChecked(call3560, "addComma", [0]);
                                    return call3561;
                                  };
                                  var call3562 = callmethodChecked(var_o, "rtype", [0]);
                                  var call3563 = callmethodChecked(call3562, "args", [0]);
                                  var call3564 = callmethodChecked(call3563, "do()separatedBy", [1, 1], block3546, block3559);
                                  if3533 = call3564;
                                }
                                if3521 = if3533;
                              }
                              if3516 = if3521;
                            } else {
                              setLineNumber(941);    // compilenode string
                              var string3565 = new GraceString("Done");
                              onSelf = true;
                              var call3566 = callmethodChecked(this, "writer", [0]);
                              var call3567 = callmethodChecked(call3566, "addText()inMode", [1, 1], string3565, var_code);
                              if3516 = call3567;
                            }
                            setLineNumber(944);    // compilenode string
                            var string3568 = new GraceString("  \n");
                            onSelf = true;
                            var call3569 = callmethodChecked(this, "writer", [0]);
                            var call3570 = callmethodChecked(call3569, "addText()inMode", [1, 1], string3568, var_plain);
                            setLineNumber(945);    // compilenode string
                            var string3571 = new GraceString("description");
                            var call3572 = callmethodChecked(superDepth, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call3573 = callmethodChecked(call3572, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call3574 = callmethodChecked(call3573, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string3571, new GraceNum(2));
                            onSelf = true;
                            var call3575 = callmethodChecked(this, "writer", [0]);
                            var call3576 = callmethodChecked(call3575, "addText()inMode", [1, 1], call3574, var_plain);
                            setLineNumber(946);    // compilenode call
                            onSelf = true;
                            var call3577 = callmethodChecked(this, "writer", [0]);
                            var call3578 = callmethodChecked(call3577, "addNewline", [0]);
                            setLineNumber(948);    // compilenode call
                            onSelf = true;
                            var call3579 = callmethodChecked(this, "writer", [0]);
                            var call3580 = callmethodChecked(call3579, "dumpBin", [0]);
                            onSelf = true;
                            var call3581 = callmethodChecked(this, "section6", [0]);
                            var call3582 = callmethodChecked(call3581, "insert", [1], call3580);
                            setLineNumber(949);    // compilenode identifier
                            return GraceFalse;
                          } else {
                            setLineNumber(951);    // compilenode identifier
                            return GraceTrue;
                          }
                          setLineNumber(903);    // return value
                          if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], if3414)))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("result of method visitMethodType(1) does not have " + 
                                      callmethod(var_Boolean, "asString", [0])._value + "."));
                          return if3414;
                        };
                        func3413.paramCounts = [1];
                        obj2649.methods["visitMethodType"] = func3413;
                        func3413.definitionLine = 902;
                        func3413.definitionModule = "gracedocMD";
                        var func3583 = function(argcv) {    // method visitTypeDec(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_o = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTypeDec(1)"));
                          setModuleName("gracedocMD");
                          var if3584 = GraceDone;
                          setLineNumber(961);    // compilenode call
                          onSelf = true;
                          var call3586 = callmethodChecked(this, "isOnTypePage", [0]);
                          var opresult3588 = callmethodChecked(call3586, "==", [1], GraceFalse);
                          if (Grace_isTrue(opresult3588)) {
                            setLineNumber(962);    // compilenode identifier
                            var call3589 = callmethodChecked(var_o, "nameString", [0]);
                            var var_n = call3589;
                            setLineNumber(964);    // compilenode call
                            onSelf = true;
                            var call3590 = callmethodChecked(this, "writer", [0]);
                            var call3591 = callmethodChecked(call3590, "addBullet", [0]);
                            setLineNumber(965);    // compilenode string
                            var string3592 = new GraceString("");
                            var call3594 = callmethodChecked(var_o, "name", [0]);
                            var call3595 = callmethodChecked(call3594, "value", [0]);
                            onSelf = true;
                            var call3596 = callmethodChecked(this, "getTypeLink", [1], call3595);
                            var string3598 = new GraceString("");
                            var opresult3600 = callmethodChecked(string3598, "++", [1], call3596);
                            var opresult3602 = callmethodChecked(opresult3600, "++", [1], string3592);
                            onSelf = true;
                            var call3603 = callmethodChecked(this, "writer", [0]);
                            var call3604 = callmethodChecked(call3603, "addText()inMode", [1, 1], opresult3602, var_plain);
                            var if3605 = GraceDone;
                            setLineNumber(966);    // compilenode identifier
                            var call3606 = callmethodChecked(var_o, "typeParams", [0]);
                            var opresult3609 = callmethodChecked(GraceFalse, "\u2260", [1], call3606);
                            if (Grace_isTrue(opresult3609)) {
                              setLineNumber(967);    // compilenode string
                              var string3610 = new GraceString(" -> ");
                              onSelf = true;
                              var call3611 = callmethodChecked(this, "writer", [0]);
                              var call3612 = callmethodChecked(call3611, "addText()inMode", [1, 1], string3610, var_code);
                              setLineNumber(968);    // compilenode identifier
                              var call3613 = callmethodChecked(var_o, "typeParams", [0]);
                              var call3614 = callmethodChecked(call3613, "params", [0]);
                              var block3615 = new GraceBlock(this, 968, 1);
                              setLineNumber(1);    // compilenode identifier
                              block3615.real = function(var_g) {
                                setLineNumber(969);    // compilenode identifier
                                var call3616 = callmethodChecked(var_g, "nameString", [0]);
                                onSelf = true;
                                var call3617 = callmethodChecked(this, "writer", [0]);
                                var call3618 = callmethodChecked(call3617, "addText()inMode", [1, 1], call3616, var_code);
                                var if3619 = GraceDone;
                                setLineNumber(970);    // compilenode identifier
                                var call3620 = callmethodChecked(var_o, "typeParams", [0]);
                                var call3621 = callmethodChecked(call3620, "params", [0]);
                                var call3622 = callmethodChecked(call3621, "last", [0]);
                                var opresult3625 = callmethodChecked(var_g, "\u2260", [1], call3622);
                                if (Grace_isTrue(opresult3625)) {
                                  onSelf = true;
                                  var call3626 = callmethodChecked(this, "writer", [0]);
                                  var call3627 = callmethodChecked(call3626, "addComma", [0]);
                                  if3619 = call3627;
                                }
                                return if3619;
                              };
                              var call3628 = callmethodChecked(var_prelude, "for()do", [1, 1], call3614, block3615);
                              if3605 = call3628;
                            }
                            setLineNumber(974);    // compilenode call
                            onSelf = true;
                            var call3629 = callmethodChecked(this, "writer", [0]);
                            var call3630 = callmethodChecked(call3629, "addNewline", [0]);
                            setLineNumber(976);    // compilenode string
                            var string3631 = new GraceString("");
                            var call3633 = callmethodChecked(var_o, "name", [0]);
                            var call3634 = callmethodChecked(call3633, "value", [0]);
                            var string3636 = new GraceString("");
                            var opresult3638 = callmethodChecked(string3636, "++", [1], call3634);
                            var opresult3640 = callmethodChecked(opresult3638, "++", [1], string3631);
                            var string3641 = new GraceString("");
                            onSelf = true;
                            var call3643 = callmethodChecked(this, "outdir", [0]);
                            var string3645 = new GraceString("");
                            var opresult3647 = callmethodChecked(string3645, "++", [1], call3643);
                            var opresult3649 = callmethodChecked(opresult3647, "++", [1], string3641);
                            var string3650 = new GraceString("type");
                            var call3651 = callmethodChecked(var_graceDocVisitor, "createFrom()outTo()as", [1, 1, 1], opresult3640, opresult3649, string3650);
                            var var_typeVis = call3651;
                            setLineNumber(977);    // compilenode identifier
                            var call3652 = callmethodChecked(var_o, "accept", [1], var_typeVis);
                            setLineNumber(978);    // compilenode identifier
                            var call3653 = callmethodChecked(var_typeVis, "generate", [0]);
                            setLineNumber(980);    // compilenode string
                            var string3654 = new GraceString("description");
                            var call3655 = callmethodChecked(superDepth, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call3656 = callmethodChecked(call3655, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call3657 = callmethodChecked(call3656, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string3654, new GraceNum(1));
                            onSelf = true;
                            var call3658 = callmethodChecked(this, "writer", [0]);
                            var call3659 = callmethodChecked(call3658, "addText()inMode", [1, 1], call3657, var_plain);
                            setLineNumber(983);    // compilenode call
                            onSelf = true;
                            var call3660 = callmethodChecked(this, "writer", [0]);
                            var call3661 = callmethodChecked(call3660, "dumpBin", [0]);
                            onSelf = true;
                            var call3662 = callmethodChecked(this, "section3", [0]);
                            var call3663 = callmethodChecked(call3662, "addElement()withText", [1, 1], var_n, call3661);
                            setLineNumber(984);    // compilenode identifier
                            return GraceFalse;
                          } else {
                            setLineNumber(988);    // compilenode string
                            var string3664 = new GraceString("Definition");
                            onSelf = true;
                            var call3665 = callmethodChecked(this, "writer", [0]);
                            var call3666 = callmethodChecked(call3665, "addText()inMode", [1, 1], string3664, var_heading);
                            setLineNumber(989);    // compilenode string
                            var string3667 = new GraceString(" ->");
                            var call3669 = callmethodChecked(var_o, "name", [0]);
                            var call3670 = callmethodChecked(call3669, "value", [0]);
                            var string3672 = new GraceString("");
                            var opresult3674 = callmethodChecked(string3672, "++", [1], call3670);
                            var opresult3676 = callmethodChecked(opresult3674, "++", [1], string3667);
                            onSelf = true;
                            var call3677 = callmethodChecked(this, "writer", [0]);
                            var call3678 = callmethodChecked(call3677, "addText()inMode", [1, 1], opresult3676, var_code);
                            var if3679 = GraceDone;
                            setLineNumber(990);    // compilenode identifier
                            var call3680 = callmethodChecked(var_o, "typeParams", [0]);
                            var opresult3683 = callmethodChecked(GraceFalse, "\u2260", [1], call3680);
                            if (Grace_isTrue(opresult3683)) {
                              setLineNumber(991);    // compilenode identifier
                              var call3684 = callmethodChecked(var_o, "typeParams", [0]);
                              var call3685 = callmethodChecked(call3684, "params", [0]);
                              var block3686 = new GraceBlock(this, 991, 1);
                              setLineNumber(1);    // compilenode identifier
                              block3686.real = function(var_g) {
                                setLineNumber(992);    // compilenode identifier
                                var call3687 = callmethodChecked(var_g, "nameString", [0]);
                                onSelf = true;
                                var call3688 = callmethodChecked(this, "writer", [0]);
                                var call3689 = callmethodChecked(call3688, "addText()inMode", [1, 1], call3687, var_code);
                                var if3690 = GraceDone;
                                setLineNumber(993);    // compilenode identifier
                                var call3691 = callmethodChecked(var_o, "typeParams", [0]);
                                var call3692 = callmethodChecked(call3691, "params", [0]);
                                var call3693 = callmethodChecked(call3692, "last", [0]);
                                var opresult3696 = callmethodChecked(var_g, "\u2260", [1], call3693);
                                if (Grace_isTrue(opresult3696)) {
                                  var string3697 = new GraceString(", ");
                                  onSelf = true;
                                  var call3698 = callmethodChecked(this, "writer", [0]);
                                  var call3699 = callmethodChecked(call3698, "addText()inMode", [1, 1], string3697, var_code);
                                  if3690 = call3699;
                                }
                                return if3690;
                              };
                              var call3700 = callmethodChecked(var_prelude, "for()do", [1, 1], call3685, block3686);
                              if3679 = call3700;
                            }
                            setLineNumber(996);    // compilenode call
                            onSelf = true;
                            var call3701 = callmethodChecked(this, "writer", [0]);
                            var call3702 = callmethodChecked(call3701, "addSpace", [0]);
                            setLineNumber(997);    // compilenode string
                            var string3703 = new GraceString("");
                            var var_temp = string3703;
                            setLineNumber(998);    // compilenode array
                            var array3704 = new Lineup([]);
                            var call3705 = callmethodChecked(var_prelude, "list", [1], array3704);
                            var var_ops = call3705;
                            setLineNumber(999);    // compilenode array
                            var array3706 = new Lineup([]);
                            var call3707 = callmethodChecked(var_prelude, "list", [1], array3706);
                            var var_tps = call3707;
                            setLineNumber(1000);    // compilenode identifier
                            var call3708 = callmethodChecked(var_o, "value", [0]);
                            var var_node = call3708;
                            var if3709 = GraceDone;
                            setLineNumber(1002);    // compilenode string
                            var string3710 = new GraceString("op");
                            var call3712 = callmethodChecked(var_node, "kind", [0]);
                            var opresult3714 = callmethodChecked(call3712, "==", [1], string3710);
                            if (Grace_isTrue(opresult3714)) {
                              setLineNumber(1003);    // compilenode block
                              var block3715 = new GraceBlock(this, 1003, 0);
                              block3715.real = function() {
                                var string3716 = new GraceString("op");
                                var call3718 = callmethodChecked(var_node, "kind", [0]);
                                var opresult3720 = callmethodChecked(call3718, "==", [1], string3716);
                                return opresult3720;
                              };
                              var block3721 = new GraceBlock(this, 1003, 0);
                              block3721.real = function() {
                                setLineNumber(1004);    // compilenode identifier
                                var call3722 = callmethodChecked(var_node, "value", [0]);
                                var call3723 = callmethodChecked(var_ops, "push", [1], call3722);
                                var if3724 = GraceDone;
                                setLineNumber(1005);    // compilenode string
                                var string3725 = new GraceString("identifier");
                                var call3727 = callmethodChecked(var_node, "right", [0]);
                                var call3728 = callmethodChecked(call3727, "kind", [0]);
                                var opresult3730 = callmethodChecked(call3728, "==", [1], string3725);
                                var string3732 = new GraceString("identifier");
                                var call3734 = callmethodChecked(var_node, "left", [0]);
                                var call3735 = callmethodChecked(call3734, "kind", [0]);
                                var opresult3737 = callmethodChecked(call3735, "==", [1], string3732);
                                var opresult3739 = callmethodChecked(opresult3737, "&&", [1], opresult3730);
                                if (Grace_isTrue(opresult3739)) {
                                  setLineNumber(1006);    // compilenode string
                                  var string3740 = new GraceString("");
                                  var call3742 = callmethodChecked(var_node, "right", [0]);
                                  var call3743 = callmethodChecked(call3742, "value", [0]);
                                  onSelf = true;
                                  var call3744 = callmethodChecked(this, "getTypeLink", [1], call3743);
                                  var string3746 = new GraceString("` ");
                                  var call3748 = callmethodChecked(var_ops, "pop", [0]);
                                  var string3750 = new GraceString(" `");
                                  var call3752 = callmethodChecked(var_node, "left", [0]);
                                  var call3753 = callmethodChecked(call3752, "value", [0]);
                                  onSelf = true;
                                  var call3754 = callmethodChecked(this, "getTypeLink", [1], call3753);
                                  var string3756 = new GraceString("");
                                  var opresult3758 = callmethodChecked(string3756, "++", [1], call3754);
                                  var opresult3760 = callmethodChecked(opresult3758, "++", [1], string3750);
                                  var opresult3762 = callmethodChecked(opresult3760, "++", [1], call3748);
                                  var opresult3764 = callmethodChecked(opresult3762, "++", [1], string3746);
                                  var opresult3766 = callmethodChecked(opresult3764, "++", [1], call3744);
                                  var opresult3768 = callmethodChecked(opresult3766, "++", [1], string3740);
                                  var_temp = opresult3768;
                                  if3724 = GraceDone;
                                } else {
                                  var if3769 = GraceDone;
                                  setLineNumber(1007);    // compilenode string
                                  var string3770 = new GraceString("identifier");
                                  var call3772 = callmethodChecked(var_node, "right", [0]);
                                  var call3773 = callmethodChecked(call3772, "kind", [0]);
                                  var opresult3775 = callmethodChecked(call3773, "==", [1], string3770);
                                  if (Grace_isTrue(opresult3775)) {
                                    setLineNumber(1008);    // compilenode identifier
                                    var call3776 = callmethodChecked(var_node, "right", [0]);
                                    var call3777 = callmethodChecked(call3776, "value", [0]);
                                    var call3778 = callmethodChecked(var_tps, "push", [1], call3777);
                                    if3769 = call3778;
                                  } else {
                                    var if3779 = GraceDone;
                                    setLineNumber(1009);    // compilenode string
                                    var string3780 = new GraceString("identifier");
                                    var call3782 = callmethodChecked(var_node, "left", [0]);
                                    var call3783 = callmethodChecked(call3782, "kind", [0]);
                                    var opresult3785 = callmethodChecked(call3783, "==", [1], string3780);
                                    if (Grace_isTrue(opresult3785)) {
                                      setLineNumber(1010);    // compilenode string
                                      var string3786 = new GraceString("`");
                                      var call3788 = callmethodChecked(var_ops, "pop", [0]);
                                      var string3790 = new GraceString(" `");
                                      var call3792 = callmethodChecked(var_node, "left", [0]);
                                      var call3793 = callmethodChecked(call3792, "value", [0]);
                                      onSelf = true;
                                      var call3794 = callmethodChecked(this, "getTypeLink", [1], call3793);
                                      var string3796 = new GraceString("");
                                      var opresult3798 = callmethodChecked(string3796, "++", [1], call3794);
                                      var opresult3800 = callmethodChecked(opresult3798, "++", [1], string3790);
                                      var opresult3802 = callmethodChecked(opresult3800, "++", [1], call3788);
                                      var opresult3804 = callmethodChecked(opresult3802, "++", [1], string3786);
                                      var_temp = opresult3804;
                                      if3779 = GraceDone;
                                    } else {
                                      var if3805 = GraceDone;
                                      setLineNumber(1011);    // compilenode string
                                      var string3806 = new GraceString("member");
                                      var call3808 = callmethodChecked(var_node, "left", [0]);
                                      var call3809 = callmethodChecked(call3808, "kind", [0]);
                                      var opresult3811 = callmethodChecked(call3809, "==", [1], string3806);
                                      if (Grace_isTrue(opresult3811)) {
                                        setLineNumber(1012);    // compilenode string
                                        var string3812 = new GraceString("`");
                                        var call3814 = callmethodChecked(var_ops, "pop", [0]);
                                        var string3816 = new GraceString(" `");
                                        var opresult3818 = callmethodChecked(string3816, "++", [1], call3814);
                                        var opresult3820 = callmethodChecked(opresult3818, "++", [1], string3812);
                                        var string3822 = new GraceString("");
                                        var call3824 = callmethodChecked(var_node, "left", [0]);
                                        var call3825 = callmethodChecked(call3824, "value", [0]);
                                        var string3827 = new GraceString(".");
                                        var call3829 = callmethodChecked(var_node, "left", [0]);
                                        var call3830 = callmethodChecked(call3829, "in", [0]);
                                        var call3831 = callmethodChecked(call3830, "value", [0]);
                                        var string3833 = new GraceString("");
                                        var opresult3835 = callmethodChecked(string3833, "++", [1], call3831);
                                        var opresult3837 = callmethodChecked(opresult3835, "++", [1], string3827);
                                        var opresult3839 = callmethodChecked(opresult3837, "++", [1], call3825);
                                        var opresult3841 = callmethodChecked(opresult3839, "++", [1], string3822);
                                        onSelf = true;
                                        var call3842 = callmethodChecked(this, "getTypeLink", [1], opresult3841);
                                        var opresult3844 = callmethodChecked(call3842, "++", [1], opresult3820);
                                        var_temp = opresult3844;
                                        if3805 = GraceDone;
                                      } else {
                                        var if3845 = GraceDone;
                                        setLineNumber(1013);    // compilenode string
                                        var string3846 = new GraceString("member");
                                        var call3848 = callmethodChecked(var_node, "right", [0]);
                                        var call3849 = callmethodChecked(call3848, "kind", [0]);
                                        var opresult3851 = callmethodChecked(call3849, "==", [1], string3846);
                                        if (Grace_isTrue(opresult3851)) {
                                          setLineNumber(1014);    // compilenode string
                                          var string3852 = new GraceString("");
                                          var call3854 = callmethodChecked(var_node, "left", [0]);
                                          var call3855 = callmethodChecked(call3854, "value", [0]);
                                          var string3857 = new GraceString(".");
                                          var call3859 = callmethodChecked(var_node, "left", [0]);
                                          var call3860 = callmethodChecked(call3859, "in", [0]);
                                          var call3861 = callmethodChecked(call3860, "value", [0]);
                                          var string3863 = new GraceString("");
                                          var opresult3865 = callmethodChecked(string3863, "++", [1], call3861);
                                          var opresult3867 = callmethodChecked(opresult3865, "++", [1], string3857);
                                          var opresult3869 = callmethodChecked(opresult3867, "++", [1], call3855);
                                          var opresult3871 = callmethodChecked(opresult3869, "++", [1], string3852);
                                          var call3872 = callmethodChecked(var_tps, "push", [1], opresult3871);
                                          if3845 = call3872;
                                        }
                                        if3805 = if3845;
                                      }
                                      if3779 = if3805;
                                    }
                                    if3769 = if3779;
                                  }
                                  if3724 = if3769;
                                }
                                setLineNumber(1016);    // compilenode identifier
                                var call3873 = callmethodChecked(var_node, "left", [0]);
                                var_node = call3873;
                                return GraceDone;
                              };
                              var call3874 = callmethodChecked(var_prelude, "while()do", [1, 1], block3715, block3721);
                              setLineNumber(1020);    // compilenode call
                              onSelf = true;
                              var call3875 = callmethodChecked(this, "writer", [0]);
                              var call3876 = callmethodChecked(call3875, "addText()inMode", [1, 1], var_temp, var_plain);
                              setLineNumber(1021);    // compilenode string
                              var string3877 = new GraceString("");
                              var_temp = string3877;
                              setLineNumber(1023);    // compilenode block
                              var block3878 = new GraceBlock(this, 1023, 0);
                              block3878.real = function() {
                                var call3880 = callmethodChecked(var_ops, "size", [0]);
                                var opresult3882 = callmethodChecked(call3880, ">", [1], new GraceNum(0));
                                var call3885 = callmethodChecked(var_tps, "size", [0]);
                                var opresult3887 = callmethodChecked(call3885, ">", [1], new GraceNum(0));
                                var opresult3889 = callmethodChecked(opresult3887, "&&", [1], opresult3882);
                                return opresult3889;
                              };
                              var block3890 = new GraceBlock(this, 1023, 0);
                              block3890.real = function() {
                                setLineNumber(1024);    // compilenode identifier
                                var call3891 = callmethodChecked(var_tps, "pop", [0]);
                                var var_p = call3891;
                                setLineNumber(1025);    // compilenode string
                                var string3892 = new GraceString("");
                                var call3894 = callmethodChecked(var_p, "value", [0]);
                                onSelf = true;
                                var call3895 = callmethodChecked(this, "getTypeLink", [1], call3894);
                                var string3897 = new GraceString(" ");
                                var call3899 = callmethodChecked(var_ops, "pop", [0]);
                                var string3901 = new GraceString(" ");
                                var string3904 = new GraceString("");
                                var opresult3906 = callmethodChecked(string3904, "++", [1], var_temp);
                                var opresult3908 = callmethodChecked(opresult3906, "++", [1], string3901);
                                var opresult3910 = callmethodChecked(opresult3908, "++", [1], call3899);
                                var opresult3912 = callmethodChecked(opresult3910, "++", [1], string3897);
                                var opresult3914 = callmethodChecked(opresult3912, "++", [1], call3895);
                                var opresult3916 = callmethodChecked(opresult3914, "++", [1], string3892);
                                var_temp = opresult3916;
                                return GraceDone;
                              };
                              var call3917 = callmethodChecked(var_prelude, "while()do", [1, 1], block3878, block3890);
                              var if3918 = GraceDone;
                              setLineNumber(1027);    // compilenode identifier
                              var call3920 = callmethodChecked(var_ops, "size", [0]);
                              var opresult3922 = callmethodChecked(call3920, ">", [1], new GraceNum(0));
                              if (Grace_isTrue(opresult3922)) {
                                setLineNumber(1028);    // compilenode string
                                var string3923 = new GraceString("");
                                var call3925 = callmethodChecked(var_ops, "pop", [0]);
                                var string3927 = new GraceString(" ");
                                var string3930 = new GraceString("");
                                var opresult3932 = callmethodChecked(string3930, "++", [1], var_temp);
                                var opresult3934 = callmethodChecked(opresult3932, "++", [1], string3927);
                                var opresult3936 = callmethodChecked(opresult3934, "++", [1], call3925);
                                var opresult3938 = callmethodChecked(opresult3936, "++", [1], string3923);
                                var_temp = opresult3938;
                                if3918 = GraceDone;
                              }
                              setLineNumber(1031);    // compilenode string
                              var string3939 = new GraceString("type");
                              var opresult3942 = callmethodChecked(var_temp, "++", [1], string3939);
                              var_temp = opresult3942;
                              setLineNumber(1032);    // compilenode call
                              onSelf = true;
                              var call3943 = callmethodChecked(this, "writer", [0]);
                              var call3944 = callmethodChecked(call3943, "addText()inMode", [1, 1], var_temp, var_code);
                              setLineNumber(1033);    // compilenode string
                              var string3945 = new GraceString("{...added methods below...}");
                              onSelf = true;
                              var call3946 = callmethodChecked(this, "writer", [0]);
                              var call3947 = callmethodChecked(call3946, "addText()inMode", [1, 1], string3945, var_code);
                              if3709 = call3947;
                            } else {
                              var if3948 = GraceDone;
                              setLineNumber(1034);    // compilenode string
                              var string3949 = new GraceString("typeliteral");
                              var call3951 = callmethodChecked(var_node, "kind", [0]);
                              var opresult3953 = callmethodChecked(call3951, "==", [1], string3949);
                              if (Grace_isTrue(opresult3953)) {
                                setLineNumber(1036);    // compilenode string
                                var string3954 = new GraceString("type");
                                var opresult3957 = callmethodChecked(var_temp, "++", [1], string3954);
                                var_temp = opresult3957;
                                setLineNumber(1037);    // compilenode string
                                var string3958 = new GraceString("{...added methods below...}");
                                onSelf = true;
                                var call3959 = callmethodChecked(this, "writer", [0]);
                                var call3960 = callmethodChecked(call3959, "addText()inMode", [1, 1], string3958, var_code);
                                if3948 = call3960;
                              } else {
                                var if3961 = GraceDone;
                                setLineNumber(1038);    // compilenode string
                                var string3962 = new GraceString("identifier");
                                var call3964 = callmethodChecked(var_node, "kind", [0]);
                                var opresult3966 = callmethodChecked(call3964, "==", [1], string3962);
                                if (Grace_isTrue(opresult3966)) {
                                  setLineNumber(1039);    // compilenode call
                                  onSelf = true;
                                  var call3967 = callmethodChecked(this, "writer", [0]);
                                  var call3968 = callmethodChecked(call3967, "addSpace", [0]);
                                  setLineNumber(1040);    // compilenode identifier
                                  var call3969 = callmethodChecked(var_node, "value", [0]);
                                  onSelf = true;
                                  var call3970 = callmethodChecked(this, "getTypeLink", [1], call3969);
                                  onSelf = true;
                                  var call3971 = callmethodChecked(this, "writer", [0]);
                                  var call3972 = callmethodChecked(call3971, "addText()inMode", [1, 1], call3970, var_plain);
                                  var if3973 = GraceDone;
                                  setLineNumber(1041);    // compilenode identifier
                                  var call3975 = callmethodChecked(var_node, "generics", [0]);
                                  var opresult3977 = callmethodChecked(call3975, "\u2260", [1], GraceFalse);
                                  if (Grace_isTrue(opresult3977)) {
                                    setLineNumber(1042);    // compilenode identifier
                                    var call3978 = callmethodChecked(var_node, "generics", [0]);
                                    var block3979 = new GraceBlock(this, 1042, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block3979.real = function(var_g) {
                                      setLineNumber(1043);    // compilenode identifier
                                      var call3980 = callmethodChecked(var_g, "value", [0]);
                                      onSelf = true;
                                      var call3981 = callmethodChecked(this, "writer", [0]);
                                      var call3982 = callmethodChecked(call3981, "addText()inMode", [1, 1], call3980, var_code);
                                      var if3983 = GraceDone;
                                      setLineNumber(1044);    // compilenode identifier
                                      var call3984 = callmethodChecked(var_node, "generics", [0]);
                                      var call3985 = callmethodChecked(call3984, "last", [0]);
                                      var opresult3988 = callmethodChecked(var_g, "\u2260", [1], call3985);
                                      if (Grace_isTrue(opresult3988)) {
                                        var string3989 = new GraceString(", ");
                                        onSelf = true;
                                        var call3990 = callmethodChecked(this, "writer", [0]);
                                        var call3991 = callmethodChecked(call3990, "add", [1], string3989);
                                        if3983 = call3991;
                                      }
                                      return if3983;
                                    };
                                    var call3992 = callmethodChecked(var_prelude, "for()do", [1, 1], call3978, block3979);
                                    if3973 = call3992;
                                  }
                                  if3961 = if3973;
                                } else {
                                  var if3993 = GraceDone;
                                  setLineNumber(1047);    // compilenode string
                                  var string3994 = new GraceString("member");
                                  var call3996 = callmethodChecked(var_node, "kind", [0]);
                                  var opresult3998 = callmethodChecked(call3996, "==", [1], string3994);
                                  if (Grace_isTrue(opresult3998)) {
                                    setLineNumber(1048);    // compilenode string
                                    var string3999 = new GraceString("");
                                    var call4001 = callmethodChecked(var_node, "value", [0]);
                                    var string4003 = new GraceString(".");
                                    var call4005 = callmethodChecked(var_node, "in", [0]);
                                    var call4006 = callmethodChecked(call4005, "value", [0]);
                                    var string4008 = new GraceString("");
                                    var opresult4010 = callmethodChecked(string4008, "++", [1], call4006);
                                    var opresult4012 = callmethodChecked(opresult4010, "++", [1], string4003);
                                    var opresult4014 = callmethodChecked(opresult4012, "++", [1], call4001);
                                    var opresult4016 = callmethodChecked(opresult4014, "++", [1], string3999);
                                    onSelf = true;
                                    var call4017 = callmethodChecked(this, "getTypeLink", [1], opresult4016);
                                    onSelf = true;
                                    var call4018 = callmethodChecked(this, "writer", [0]);
                                    var call4019 = callmethodChecked(call4018, "addText()inMode", [1, 1], call4017, var_plain);
                                    var if4020 = GraceDone;
                                    setLineNumber(1049);    // compilenode identifier
                                    var call4022 = callmethodChecked(var_node, "generics", [0]);
                                    var opresult4024 = callmethodChecked(call4022, "\u2260", [1], GraceFalse);
                                    if (Grace_isTrue(opresult4024)) {
                                      setLineNumber(1050);    // compilenode identifier
                                      var call4025 = callmethodChecked(var_node, "generics", [0]);
                                      var block4026 = new GraceBlock(this, 1050, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block4026.real = function(var_g) {
                                        setLineNumber(1051);    // compilenode identifier
                                        var call4027 = callmethodChecked(var_g, "value", [0]);
                                        onSelf = true;
                                        var call4028 = callmethodChecked(this, "writer", [0]);
                                        var call4029 = callmethodChecked(call4028, "addText()inMode", [1, 1], call4027, var_code);
                                        var if4030 = GraceDone;
                                        setLineNumber(1052);    // compilenode identifier
                                        var call4031 = callmethodChecked(var_node, "generics", [0]);
                                        var call4032 = callmethodChecked(call4031, "last", [0]);
                                        var opresult4035 = callmethodChecked(var_g, "\u2260", [1], call4032);
                                        if (Grace_isTrue(opresult4035)) {
                                          var string4036 = new GraceString(", ");
                                          onSelf = true;
                                          var call4037 = callmethodChecked(this, "writer", [0]);
                                          var call4038 = callmethodChecked(call4037, "addText()inMode", [1, 1], string4036, var_code);
                                          if4030 = call4038;
                                        }
                                        return if4030;
                                      };
                                      var call4039 = callmethodChecked(var_prelude, "for()do", [1, 1], call4025, block4026);
                                      if4020 = call4039;
                                    }
                                    if3993 = if4020;
                                  }
                                  if3961 = if3993;
                                }
                                if3948 = if3961;
                              }
                              if3709 = if3948;
                            }
                            setLineNumber(1056);    // compilenode string
                            var string4040 = new GraceString("Description");
                            onSelf = true;
                            var call4041 = callmethodChecked(this, "writer", [0]);
                            var call4042 = callmethodChecked(call4041, "addText()inMode", [1, 1], string4040, var_heading);
                            setLineNumber(1057);    // compilenode string
                            var string4043 = new GraceString("top-box-description");
                            var call4044 = callmethodChecked(superDepth, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call4045 = callmethodChecked(call4044, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call4046 = callmethodChecked(call4045, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string4043, new GraceNum(1));
                            onSelf = true;
                            var call4047 = callmethodChecked(this, "writer", [0]);
                            var call4048 = callmethodChecked(call4047, "addText()inMode", [1, 1], call4046, var_plain);
                            setLineNumber(1058);    // compilenode string
                            var string4049 = new GraceString("Properties");
                            onSelf = true;
                            var call4050 = callmethodChecked(this, "writer", [0]);
                            var call4051 = callmethodChecked(call4050, "addText()inMode", [1, 1], string4049, var_heading);
                            setLineNumber(1059);    // compilenode call
                            onSelf = true;
                            var call4052 = callmethodChecked(this, "writer", [0]);
                            var call4053 = callmethodChecked(call4052, "dumpBin", [0]);
                            onSelf = true;
                            var call4054 = callmethodChecked(this, "section6", [0]);
                            var call4055 = callmethodChecked(call4054, "insert", [1], call4053);
                            setLineNumber(1060);    // compilenode identifier
                            return GraceTrue;
                          }
                          setLineNumber(961);    // return value
                          if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], if3584)))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("result of method visitTypeDec(1) does not have " + 
                                      callmethod(var_Boolean, "asString", [0])._value + "."));
                          return if3584;
                        };
                        func3583.paramCounts = [1];
                        obj2649.methods["visitTypeDec"] = func3583;
                        func3583.definitionLine = 957;
                        func3583.definitionModule = "gracedocMD";
                        var func4056 = function(argcv) {    // method visitMethod(1)up(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_o = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMethod (arg list 1) of visitMethod(1)up(1)"));
                          var var_anc = arguments[curarg];
                          curarg++;
                          if (argcv[1] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitMethod(1)up(1)"));
                          setModuleName("gracedocMD");
                          var if4057 = GraceDone;
                          setLineNumber(1069);    // compilenode identifier
                          var call4058 = callmethodChecked(var_o, "isConfidential", [0]);
                          var call4060 = callmethodChecked(var_settings, "publicOnly", [0]);
                          var opresult4062 = callmethodChecked(call4060, "&&", [1], call4058);
                          if (Grace_isTrue(opresult4062)) {
                            return GraceFalse;
                          }
                          var if4063 = GraceDone;
                          setLineNumber(1070);    // compilenode identifier
                          var call4064 = callmethodChecked(var_o, "isClass", [0]);
                          if (Grace_isTrue(call4064)) {
                            setLineNumber(1071);    // compilenode identifier
                            onSelf = true;
                            var call4065 = callmethodChecked(this, "doClassMethod()up", [1, 1], var_o, var_anc);
                            return call4065;
                          }
                          setLineNumber(1073);    // compilenode call
                          onSelf = true;
                          var call4066 = callmethodChecked(this, "writer", [0]);
                          var call4067 = callmethodChecked(call4066, "addBullet", [0]);
                          setLineNumber(1074);    // compilenode identifier
                          var call4068 = callmethodChecked(var_o, "signature", [0]);
                          var block4069 = new GraceBlock(this, 1074, 1);
                          setLineNumber(1);    // compilenode identifier
                          block4069.real = function(var_part) {
                            setLineNumber(1075);    // compilenode identifier
                            var call4070 = callmethodChecked(var_part, "name", [0]);
                            onSelf = true;
                            var call4072 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                            var opresult4074 = callmethodChecked(call4072, "++", [1], call4070);
                            onSelf = true;
                            var call4075 = callmethodChecked(this, "writer", [0]);
                            var call4076 = callmethodChecked(call4075, "addText()inMode", [1, 1], opresult4074, var_code);
                            var if4077 = GraceDone;
                            setLineNumber(1077);    // compilenode identifier
                            var call4079 = callmethodChecked(var_part, "params", [0]);
                            var call4080 = callmethodChecked(call4079, "size", [0]);
                            var opresult4082 = callmethodChecked(call4080, ">", [1], new GraceNum(0));
                            if (Grace_isTrue(opresult4082)) {
                              setLineNumber(1078);    // compilenode string
                              var string4083 = new GraceString(" ( ");
                              onSelf = true;
                              var call4084 = callmethodChecked(this, "writer", [0]);
                              var call4085 = callmethodChecked(call4084, "addText()inMode", [1, 1], string4083, var_code);
                              setLineNumber(1079);    // compilenode identifier
                              var call4086 = callmethodChecked(var_part, "params", [0]);
                              var block4087 = new GraceBlock(this, 1079, 1);
                              setLineNumber(1);    // compilenode identifier
                              block4087.real = function(var_param) {
                                var if4088 = GraceDone;
                                setLineNumber(1080);    // compilenode identifier
                                var call4090 = callmethodChecked(var_param, "dtype", [0]);
                                var opresult4092 = callmethodChecked(call4090, "\u2260", [1], GraceFalse);
                                if (Grace_isTrue(opresult4092)) {
                                  setLineNumber(1081);    // compilenode identifier
                                  var call4093 = callmethodChecked(var_param, "nameString", [0]);
                                  onSelf = true;
                                  var call4094 = callmethodChecked(this, "writer", [0]);
                                  var call4095 = callmethodChecked(call4094, "addText()inMode", [1, 1], call4093, var_code);
                                  setLineNumber(1082);    // compilenode call
                                  onSelf = true;
                                  var call4096 = callmethodChecked(this, "writer", [0]);
                                  var call4097 = callmethodChecked(call4096, "addColon", [0]);
                                  setLineNumber(1083);    // compilenode call
                                  onSelf = true;
                                  var call4098 = callmethodChecked(this, "writer", [0]);
                                  var call4099 = callmethodChecked(call4098, "addSpace", [0]);
                                  var if4100 = GraceDone;
                                  setLineNumber(1084);    // compilenode string
                                  var string4101 = new GraceString("identifier");
                                  var call4103 = callmethodChecked(var_param, "dtype", [0]);
                                  var call4104 = callmethodChecked(call4103, "kind", [0]);
                                  var opresult4106 = callmethodChecked(call4104, "==", [1], string4101);
                                  if (Grace_isTrue(opresult4106)) {
                                    setLineNumber(1085);    // compilenode identifier
                                    var call4107 = callmethodChecked(var_param, "dtype", [0]);
                                    var call4108 = callmethodChecked(call4107, "value", [0]);
                                    onSelf = true;
                                    var call4109 = callmethodChecked(this, "getTypeLink", [1], call4108);
                                    onSelf = true;
                                    var call4110 = callmethodChecked(this, "writer", [0]);
                                    var call4111 = callmethodChecked(call4110, "addText()inMode", [1, 1], call4109, var_plain);
                                    if4100 = call4111;
                                  } else {
                                    var if4112 = GraceDone;
                                    setLineNumber(1086);    // compilenode string
                                    var string4113 = new GraceString("generic");
                                    var call4115 = callmethodChecked(var_param, "dtype", [0]);
                                    var call4116 = callmethodChecked(call4115, "kind", [0]);
                                    var opresult4118 = callmethodChecked(call4116, "==", [1], string4113);
                                    if (Grace_isTrue(opresult4118)) {
                                      setLineNumber(1087);    // compilenode identifier
                                      var call4119 = callmethodChecked(var_param, "dtype", [0]);
                                      var call4120 = callmethodChecked(call4119, "value", [0]);
                                      var call4121 = callmethodChecked(call4120, "value", [0]);
                                      onSelf = true;
                                      var call4122 = callmethodChecked(this, "getTypeLink", [1], call4121);
                                      onSelf = true;
                                      var call4123 = callmethodChecked(this, "writer", [0]);
                                      var call4124 = callmethodChecked(call4123, "addText()inMode", [1, 1], call4122, var_plain);
                                      setLineNumber(1088);    // compilenode block
                                      var block4125 = new GraceBlock(this, 1088, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block4125.real = function(var_each) {
                                        setLineNumber(1088);    // compilenode string
                                        var string4126 = new GraceString("");
                                        var call4128 = callmethodChecked(var_each, "value", [0]);
                                        onSelf = true;
                                        var call4129 = callmethodChecked(this, "getTypeLink", [1], call4128);
                                        var string4131 = new GraceString("");
                                        var opresult4133 = callmethodChecked(string4131, "++", [1], call4129);
                                        var opresult4135 = callmethodChecked(opresult4133, "++", [1], string4126);
                                        onSelf = true;
                                        var call4136 = callmethodChecked(this, "writer", [0]);
                                        var call4137 = callmethodChecked(call4136, "addText()inMode", [1, 1], opresult4135, var_plain);
                                        return call4137;
                                      };
                                      var block4138 = new GraceBlock(this, 1088, 0);
                                      block4138.real = function() {
                                        onSelf = true;
                                        var call4139 = callmethodChecked(this, "writer", [0]);
                                        var call4140 = callmethodChecked(call4139, "addComma", [0]);
                                        return call4140;
                                      };
                                      var call4141 = callmethodChecked(var_param, "dtype", [0]);
                                      var call4142 = callmethodChecked(call4141, "args", [0]);
                                      var call4143 = callmethodChecked(call4142, "do()separatedBy", [1, 1], block4125, block4138);
                                      if4112 = call4143;
                                    }
                                    if4100 = if4112;
                                  }
                                  if4088 = if4100;
                                } else {
                                  setLineNumber(1092);    // compilenode identifier
                                  var call4144 = callmethodChecked(var_param, "nameString", [0]);
                                  onSelf = true;
                                  var call4145 = callmethodChecked(this, "writer", [0]);
                                  var call4146 = callmethodChecked(call4145, "addText()inMode", [1, 1], call4144, var_code);
                                  if4088 = call4146;
                                }
                                var if4147 = GraceDone;
                                setLineNumber(1094);    // compilenode identifier
                                var call4148 = callmethodChecked(var_part, "params", [0]);
                                var call4149 = callmethodChecked(call4148, "last", [0]);
                                var opresult4152 = callmethodChecked(var_param, "\u2260", [1], call4149);
                                var call4155 = callmethodChecked(var_part, "params", [0]);
                                var call4156 = callmethodChecked(call4155, "size", [0]);
                                var opresult4158 = callmethodChecked(call4156, ">", [1], new GraceNum(1));
                                var opresult4160 = callmethodChecked(opresult4158, "&&", [1], opresult4152);
                                if (Grace_isTrue(opresult4160)) {
                                  setLineNumber(1095);    // compilenode call
                                  onSelf = true;
                                  var call4161 = callmethodChecked(this, "writer", [0]);
                                  var call4162 = callmethodChecked(call4161, "addComma", [0]);
                                  if4147 = call4162;
                                }
                                return if4147;
                              };
                              var call4163 = callmethodChecked(var_prelude, "for()do", [1, 1], call4086, block4087);
                              setLineNumber(1098);    // compilenode string
                              var string4164 = new GraceString(")");
                              onSelf = true;
                              var call4165 = callmethodChecked(this, "writer", [0]);
                              var call4166 = callmethodChecked(call4165, "addText()inMode", [1, 1], string4164, var_code);
                              if4077 = call4166;
                            }
                            return if4077;
                          };
                          var call4167 = callmethodChecked(var_prelude, "for()do", [1, 1], call4068, block4069);
                          setLineNumber(1101);    // compilenode call
                          onSelf = true;
                          var call4168 = callmethodChecked(this, "writer", [0]);
                          var call4169 = callmethodChecked(call4168, "addSpace", [0]);
                          setLineNumber(1102);    // compilenode string
                          var string4170 = new GraceString("->");
                          onSelf = true;
                          var call4171 = callmethodChecked(this, "writer", [0]);
                          var call4172 = callmethodChecked(call4171, "addText()inMode", [1, 1], string4170, var_code);
                          var if4173 = GraceDone;
                          setLineNumber(1103);    // compilenode identifier
                          var call4175 = callmethodChecked(var_o, "dtype", [0]);
                          var opresult4177 = callmethodChecked(call4175, "\u2260", [1], GraceFalse);
                          if (Grace_isTrue(opresult4177)) {
                            setLineNumber(1104);    // compilenode identifier
                            var call4178 = callmethodChecked(var_o, "dtype", [0]);
                            var call4179 = callmethodChecked(call4178, "value", [0]);
                            onSelf = true;
                            var call4180 = callmethodChecked(this, "getTypeLink", [1], call4179);
                            onSelf = true;
                            var call4181 = callmethodChecked(this, "writer", [0]);
                            var call4182 = callmethodChecked(call4181, "addText()inMode", [1, 1], call4180, var_plain);
                            if4173 = call4182;
                          } else {
                            setLineNumber(1106);    // compilenode string
                            var string4183 = new GraceString("Done");
                            onSelf = true;
                            var call4184 = callmethodChecked(this, "getTypeLink", [1], string4183);
                            onSelf = true;
                            var call4185 = callmethodChecked(this, "writer", [0]);
                            var call4186 = callmethodChecked(call4185, "addText()inMode", [1, 1], call4184, var_plain);
                            if4173 = call4186;
                          }
                          setLineNumber(1108);    // compilenode call
                          onSelf = true;
                          var call4187 = callmethodChecked(this, "writer", [0]);
                          var call4188 = callmethodChecked(call4187, "addNewline", [0]);
                          setLineNumber(1109);    // compilenode string
                          var string4189 = new GraceString("description");
                          var call4190 = callmethodChecked(superDepth, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call4191 = callmethodChecked(call4190, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call4192 = callmethodChecked(call4191, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string4189, new GraceNum(2));
                          onSelf = true;
                          var call4193 = callmethodChecked(this, "writer", [0]);
                          var call4194 = callmethodChecked(call4193, "addText()inMode", [1, 1], call4192, var_plain);
                          setLineNumber(1112);    // compilenode call
                          onSelf = true;
                          var call4195 = callmethodChecked(this, "writer", [0]);
                          var call4196 = callmethodChecked(call4195, "dumpBin", [0]);
                          onSelf = true;
                          var call4197 = callmethodChecked(this, "section6", [0]);
                          var call4198 = callmethodChecked(call4197, "insert", [1], call4196);
                          setLineNumber(1113);    // compilenode identifier
                          return GraceFalse;
                        };
                        func4056.paramCounts = [1, 1];
                        obj2649.methods["visitMethod()up"] = func4056;
                        func4056.definitionLine = 1067;
                        func4056.definitionModule = "gracedocMD";
                        var func4199 = function(argcv) {    // method buildDefChain(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_anc = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for buildDefChain(1)"));
                          setModuleName("gracedocMD");
                          setLineNumber(1118);    // compilenode identifier
                          var var_a = var_anc;
                          setLineNumber(1119);    // compilenode string
                          var string4200 = new GraceString("");
                          var var_s = string4200;
                          setLineNumber(1120);    // compilenode block
                          var block4201 = new GraceBlock(this, 1120, 0);
                          block4201.real = function() {
                            var call4202 = callmethodChecked(var_a, "isEmpty", [0]);
                            var call4203 = callmethodChecked(call4202, "not", [0]);
                            return call4203;
                          };
                          var block4204 = new GraceBlock(this, 1120, 0);
                          block4204.real = function() {
                            var if4205 = GraceDone;
                            setLineNumber(1121);    // compilenode identifier
                            var call4206 = callmethodChecked(var_a, "parent", [0]);
                            var call4207 = callmethodChecked(call4206, "kind", [0]);
                            var string4209 = new GraceString("defdec");
                            var opresult4211 = callmethodChecked(string4209, "==", [1], call4207);
                            if (Grace_isTrue(opresult4211)) {
                              setLineNumber(1122);    // compilenode string
                              var string4213 = new GraceString(".");
                              var call4215 = callmethodChecked(var_a, "parent", [0]);
                              var call4216 = callmethodChecked(call4215, "nameString", [0]);
                              var opresult4218 = callmethodChecked(call4216, "++", [1], string4213);
                              var opresult4220 = callmethodChecked(opresult4218, "++", [1], var_s);
                              var_s = opresult4220;
                              if4205 = GraceDone;
                            } else {
                              var if4221 = GraceDone;
                              setLineNumber(1124);    // compilenode identifier
                              var call4222 = callmethodChecked(var_a, "parent", [0]);
                              var call4223 = callmethodChecked(call4222, "kind", [0]);
                              var string4225 = new GraceString("object");
                              var opresult4227 = callmethodChecked(string4225, "\u2260", [1], call4223);
                              if (Grace_isTrue(opresult4227)) {
                                setLineNumber(1125);    // compilenode identifier
                                throw new ReturnException(var_s, returnTarget);
                              }
                              if4205 = if4221;
                            }
                            setLineNumber(1127);    // compilenode identifier
                            var call4228 = callmethodChecked(var_a, "forebears", [0]);
                            var_a = call4228;
                            return GraceDone;
                          };
                          var call4229 = callmethodChecked(var_prelude, "while()do", [1, 1], block4201, block4204);
                          setLineNumber(1129);    // compilenode identifier
                          return var_s;
                        };
                        func4199.paramCounts = [1];
                        obj2649.methods["buildDefChain"] = func4199;
                        func4199.definitionLine = 1117;
                        func4199.definitionModule = "gracedocMD";
                        var func4230 = function(argcv) {    // method doClassMethod(1)up(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_m = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for doClassMethod (arg list 1) of doClassMethod(1)up(1)"));
                          var var_anc = arguments[curarg];
                          curarg++;
                          if (argcv[1] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of doClassMethod(1)up(1)"));
                          setModuleName("gracedocMD");
                          setLineNumber(1135);    // compilenode identifier
                          var call4231 = callmethodChecked(var_m, "body", [0]);
                          var call4232 = callmethodChecked(call4231, "last", [0]);
                          var var_o = call4232;
                          var if4233 = GraceDone;
                          setLineNumber(1138);    // compilenode call
                          onSelf = true;
                          var call4235 = callmethodChecked(this, "isOnClassPage", [0]);
                          var opresult4237 = callmethodChecked(call4235, "==", [1], GraceFalse);
                          if (Grace_isTrue(opresult4237)) {
                            setLineNumber(1139);    // compilenode identifier
                            var call4238 = callmethodChecked(var_m, "nameString", [0]);
                            var var_n = call4238;
                            setLineNumber(1140);    // compilenode identifier
                            onSelf = true;
                            var call4239 = callmethodChecked(this, "getClassLink", [1], var_n);
                            var var_link = call4239;
                            setLineNumber(1141);    // compilenode identifier
                            onSelf = true;
                            var call4240 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                            var var_ch = call4240;
                            var if4241 = GraceDone;
                            setLineNumber(1142);    // compilenode string
                            var string4242 = new GraceString("");
                            var opresult4245 = callmethodChecked(var_ch, "\u2260", [1], string4242);
                            if (Grace_isTrue(opresult4245)) {
                              var string4247 = new GraceString("`");
                              var opresult4249 = callmethodChecked(string4247, "++", [1], var_ch);
                              var_ch = opresult4249;
                              var string4250 = new GraceString("`");
                              var opresult4253 = callmethodChecked(var_ch, "++", [1], string4250);
                              var_ch = opresult4253;
                              if4241 = GraceDone;
                            }
                            setLineNumber(1143);    // compilenode string
                            var string4254 = new GraceString("");
                            var string4257 = new GraceString("");
                            var string4260 = new GraceString("");
                            var opresult4262 = callmethodChecked(string4260, "++", [1], var_ch);
                            var opresult4264 = callmethodChecked(opresult4262, "++", [1], string4257);
                            var opresult4266 = callmethodChecked(opresult4264, "++", [1], var_link);
                            var opresult4268 = callmethodChecked(opresult4266, "++", [1], string4254);
                            var var_chain = opresult4268;
                            setLineNumber(1144);    // compilenode call
                            onSelf = true;
                            var call4269 = callmethodChecked(this, "writer", [0]);
                            var call4270 = callmethodChecked(call4269, "addBullet", [0]);
                            var if4271 = GraceDone;
                            setLineNumber(1145);    // compilenode string
                            var string4272 = new GraceString("");
                            var opresult4275 = callmethodChecked(var_chain, "\u2260", [1], string4272);
                            if (Grace_isTrue(opresult4275)) {
                              var string4276 = new GraceString("");
                              var string4279 = new GraceString("");
                              var opresult4281 = callmethodChecked(string4279, "++", [1], var_chain);
                              var opresult4283 = callmethodChecked(opresult4281, "++", [1], string4276);
                              onSelf = true;
                              var call4284 = callmethodChecked(this, "writer", [0]);
                              var call4285 = callmethodChecked(call4284, "addText()inMode", [1, 1], opresult4283, var_plain);
                              if4271 = call4285;
                            }
                            var if4286 = GraceDone;
                            setLineNumber(1146);    // compilenode identifier
                            var call4287 = callmethodChecked(var_m, "signature", [0]);
                            var call4288 = callmethodChecked(call4287, "isEmpty", [0]);
                            var call4289 = callmethodChecked(call4288, "prefix!", [0]);
                            if (Grace_isTrue(call4289)) {
                              var string4290 = new GraceString(":: ");
                              onSelf = true;
                              var call4291 = callmethodChecked(this, "writer", [0]);
                              var call4292 = callmethodChecked(call4291, "addText()inMode", [1, 1], string4290, var_code);
                              if4286 = call4292;
                            }
                            setLineNumber(1147);    // compilenode block
                            var block4293 = new GraceBlock(this, 1147, 1);
                            setLineNumber(1);    // compilenode identifier
                            block4293.real = function(var_part) {
                              var if4294 = GraceDone;
                              setLineNumber(1148);    // compilenode identifier
                              var call4296 = callmethodChecked(var_part, "params", [0]);
                              var call4297 = callmethodChecked(call4296, "size", [0]);
                              var opresult4299 = callmethodChecked(call4297, ">", [1], new GraceNum(0));
                              if (Grace_isTrue(opresult4299)) {
                                setLineNumber(1149);    // compilenode identifier
                                var call4300 = callmethodChecked(var_part, "name", [0]);
                                onSelf = true;
                                var call4301 = callmethodChecked(this, "writer", [0]);
                                var call4302 = callmethodChecked(call4301, "addText()inMode", [1, 1], call4300, var_code);
                                setLineNumber(1150);    // compilenode string
                                var string4303 = new GraceString("(");
                                onSelf = true;
                                var call4304 = callmethodChecked(this, "writer", [0]);
                                var call4305 = callmethodChecked(call4304, "addText()inMode", [1, 1], string4303, var_code);
                                setLineNumber(1151);    // compilenode identifier
                                var call4306 = callmethodChecked(var_part, "params", [0]);
                                var block4307 = new GraceBlock(this, 1151, 1);
                                setLineNumber(1);    // compilenode identifier
                                block4307.real = function(var_param) {
                                  var if4308 = GraceDone;
                                  setLineNumber(1152);    // compilenode identifier
                                  var call4310 = callmethodChecked(var_param, "dtype", [0]);
                                  var opresult4312 = callmethodChecked(call4310, "\u2260", [1], GraceFalse);
                                  if (Grace_isTrue(opresult4312)) {
                                    setLineNumber(1153);    // compilenode identifier
                                    var call4313 = callmethodChecked(var_param, "value", [0]);
                                    onSelf = true;
                                    var call4314 = callmethodChecked(this, "writer", [0]);
                                    var call4315 = callmethodChecked(call4314, "addText()inMode", [1, 1], call4313, var_code);
                                    setLineNumber(1154);    // compilenode call
                                    onSelf = true;
                                    var call4316 = callmethodChecked(this, "writer", [0]);
                                    var call4317 = callmethodChecked(call4316, "addColon", [0]);
                                    setLineNumber(1155);    // compilenode identifier
                                    var call4318 = callmethodChecked(var_param, "dtype", [0]);
                                    var call4319 = callmethodChecked(call4318, "nameString", [0]);
                                    onSelf = true;
                                    var call4320 = callmethodChecked(this, "getTypeLink", [1], call4319);
                                    onSelf = true;
                                    var call4321 = callmethodChecked(this, "writer", [0]);
                                    var call4322 = callmethodChecked(call4321, "addText()inMode", [1, 1], call4320, var_plain);
                                    if4308 = call4322;
                                  } else {
                                    setLineNumber(1157);    // compilenode identifier
                                    var call4323 = callmethodChecked(var_param, "value", [0]);
                                    onSelf = true;
                                    var call4324 = callmethodChecked(this, "writer", [0]);
                                    var call4325 = callmethodChecked(call4324, "addText()inMode", [1, 1], call4323, var_code);
                                    if4308 = call4325;
                                  }
                                  var if4326 = GraceDone;
                                  setLineNumber(1159);    // compilenode identifier
                                  var call4327 = callmethodChecked(var_part, "params", [0]);
                                  var call4328 = callmethodChecked(call4327, "last", [0]);
                                  var opresult4331 = callmethodChecked(var_param, "\u2260", [1], call4328);
                                  var call4334 = callmethodChecked(var_part, "params", [0]);
                                  var call4335 = callmethodChecked(call4334, "size", [0]);
                                  var opresult4337 = callmethodChecked(call4335, ">", [1], new GraceNum(1));
                                  var opresult4339 = callmethodChecked(opresult4337, "&&", [1], opresult4331);
                                  if (Grace_isTrue(opresult4339)) {
                                    setLineNumber(1160);    // compilenode call
                                    onSelf = true;
                                    var call4340 = callmethodChecked(this, "writer", [0]);
                                    var call4341 = callmethodChecked(call4340, "addComma", [0]);
                                    if4326 = call4341;
                                  }
                                  return if4326;
                                };
                                var call4342 = callmethodChecked(var_prelude, "for()do", [1, 1], call4306, block4307);
                                setLineNumber(1163);    // compilenode string
                                var string4343 = new GraceString(")");
                                onSelf = true;
                                var call4344 = callmethodChecked(this, "writer", [0]);
                                var call4345 = callmethodChecked(call4344, "addText()inMode", [1, 1], string4343, var_code);
                                if4294 = call4345;
                              }
                              return if4294;
                            };
                            setLineNumber(1147);    // compilenode identifier
                            var call4346 = callmethodChecked(var_m, "signature", [0]);
                            var call4347 = callmethodChecked(call4346, "do", [1], block4293);
                            var if4348 = GraceDone;
                            setLineNumber(1167);    // compilenode identifier
                            var call4350 = callmethodChecked(var_m, "dtype", [0]);
                            var opresult4352 = callmethodChecked(call4350, "\u2260", [1], GraceFalse);
                            if (Grace_isTrue(opresult4352)) {
                              setLineNumber(1168);    // compilenode string
                              var string4353 = new GraceString(" -> ");
                              onSelf = true;
                              var call4354 = callmethodChecked(this, "writer", [0]);
                              var call4355 = callmethodChecked(call4354, "addText()inMode", [1, 1], string4353, var_code);
                              var if4356 = GraceDone;
                              setLineNumber(1169);    // compilenode string
                              var string4357 = new GraceString("identifier");
                              var call4359 = callmethodChecked(var_m, "dtype", [0]);
                              var call4360 = callmethodChecked(call4359, "kind", [0]);
                              var opresult4362 = callmethodChecked(call4360, "==", [1], string4357);
                              if (Grace_isTrue(opresult4362)) {
                                setLineNumber(1170);    // compilenode identifier
                                var call4363 = callmethodChecked(var_m, "dtype", [0]);
                                var call4364 = callmethodChecked(call4363, "value", [0]);
                                onSelf = true;
                                var call4365 = callmethodChecked(this, "getTypeLink", [1], call4364);
                                onSelf = true;
                                var call4366 = callmethodChecked(this, "writer", [0]);
                                var call4367 = callmethodChecked(call4366, "addText()inMode", [1, 1], call4365, var_plain);
                                if4356 = call4367;
                              } else {
                                var if4368 = GraceDone;
                                setLineNumber(1171);    // compilenode string
                                var string4369 = new GraceString("generic");
                                var call4371 = callmethodChecked(var_m, "dtype", [0]);
                                var call4372 = callmethodChecked(call4371, "kind", [0]);
                                var opresult4374 = callmethodChecked(call4372, "==", [1], string4369);
                                if (Grace_isTrue(opresult4374)) {
                                  setLineNumber(1172);    // compilenode identifier
                                  var call4375 = callmethodChecked(var_m, "dtype", [0]);
                                  var call4376 = callmethodChecked(call4375, "value", [0]);
                                  var call4377 = callmethodChecked(call4376, "value", [0]);
                                  onSelf = true;
                                  var call4378 = callmethodChecked(this, "getTypeLink", [1], call4377);
                                  onSelf = true;
                                  var call4379 = callmethodChecked(this, "writer", [0]);
                                  var call4380 = callmethodChecked(call4379, "addText()inMode", [1, 1], call4378, var_plain);
                                  setLineNumber(1173);    // compilenode block
                                  var block4381 = new GraceBlock(this, 1173, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block4381.real = function(var_each) {
                                    setLineNumber(1173);    // compilenode string
                                    var string4382 = new GraceString("");
                                    var call4384 = callmethodChecked(var_each, "value", [0]);
                                    onSelf = true;
                                    var call4385 = callmethodChecked(this, "getTypeLink", [1], call4384);
                                    var string4387 = new GraceString("");
                                    var opresult4389 = callmethodChecked(string4387, "++", [1], call4385);
                                    var opresult4391 = callmethodChecked(opresult4389, "++", [1], string4382);
                                    onSelf = true;
                                    var call4392 = callmethodChecked(this, "writer", [0]);
                                    var call4393 = callmethodChecked(call4392, "addText()inMode", [1, 1], opresult4391, var_plain);
                                    return call4393;
                                  };
                                  var block4394 = new GraceBlock(this, 1173, 0);
                                  block4394.real = function() {
                                    onSelf = true;
                                    var call4395 = callmethodChecked(this, "writer", [0]);
                                    var call4396 = callmethodChecked(call4395, "addComma", [0]);
                                    return call4396;
                                  };
                                  var call4397 = callmethodChecked(var_m, "dtype", [0]);
                                  var call4398 = callmethodChecked(call4397, "args", [0]);
                                  var call4399 = callmethodChecked(call4398, "do()separatedBy", [1, 1], block4381, block4394);
                                  if4368 = call4399;
                                }
                                if4356 = if4368;
                              }
                              if4348 = if4356;
                            }
                            var if4400 = GraceDone;
                            setLineNumber(1177);    // compilenode identifier
                            var call4402 = callmethodChecked(var_o, "superclass", [0]);
                            var opresult4404 = callmethodChecked(call4402, "\u2260", [1], GraceFalse);
                            if (Grace_isTrue(opresult4404)) {
                              setLineNumber(1178);    // compilenode identifier
                              var call4405 = callmethodChecked(var_o, "superclass", [0]);
                              var call4406 = callmethodChecked(call4405, "accept", [1], this);
                              if4400 = call4406;
                            }
                            setLineNumber(1181);    // compilenode call
                            onSelf = true;
                            var call4407 = callmethodChecked(this, "outdir", [0]);
                            var string4408 = new GraceString("class");
                            var call4409 = callmethodChecked(var_graceDocVisitor, "createFrom()outTo()as", [1, 1, 1], var_n, call4407, string4408);
                            var var_classVis = call4409;
                            setLineNumber(1182);    // compilenode identifier
                            var call4410 = callmethodChecked(var_o, "accept", [1], var_classVis);
                            setLineNumber(1183);    // compilenode identifier
                            var call4411 = callmethodChecked(var_classVis, "generate", [0]);
                            setLineNumber(1185);    // compilenode call
                            onSelf = true;
                            var call4412 = callmethodChecked(this, "writer", [0]);
                            var call4413 = callmethodChecked(call4412, "addNewline", [0]);
                            setLineNumber(1186);    // compilenode call
                            onSelf = true;
                            var call4414 = callmethodChecked(this, "writer", [0]);
                            var call4415 = callmethodChecked(call4414, "addNewline", [0]);
                            setLineNumber(1187);    // compilenode call
                            onSelf = true;
                            var call4416 = callmethodChecked(this, "writer", [0]);
                            var call4417 = callmethodChecked(call4416, "dumpBin", [0]);
                            onSelf = true;
                            var call4418 = callmethodChecked(this, "section6", [0]);
                            var call4419 = callmethodChecked(call4418, "insert", [1], call4417);
                            setLineNumber(1189);    // compilenode identifier
                            return GraceFalse;
                          } else {
                            setLineNumber(1193);    // compilenode call
                            onSelf = true;
                            var call4420 = callmethodChecked(this, "writer", [0]);
                            var call4421 = callmethodChecked(call4420, "addBullet", [0]);
                            setLineNumber(1194);    // compilenode identifier
                            var call4422 = callmethodChecked(var_o, "name", [0]);
                            onSelf = true;
                            var call4423 = callmethodChecked(this, "writer", [0]);
                            var call4424 = callmethodChecked(call4423, "addText()inMode", [1, 1], call4422, var_code);
                            setLineNumber(1196);    // compilenode identifier
                            var call4425 = callmethodChecked(var_m, "signature", [0]);
                            var block4426 = new GraceBlock(this, 1196, 1);
                            setLineNumber(1);    // compilenode identifier
                            block4426.real = function(var_part) {
                              setLineNumber(1197);    // compilenode identifier
                              var call4427 = callmethodChecked(var_part, "name", [0]);
                              onSelf = true;
                              var call4428 = callmethodChecked(this, "writer", [0]);
                              var call4429 = callmethodChecked(call4428, "addText()inMode", [1, 1], call4427, var_code);
                              var if4430 = GraceDone;
                              setLineNumber(1198);    // compilenode identifier
                              var call4432 = callmethodChecked(var_part, "params", [0]);
                              var call4433 = callmethodChecked(call4432, "size", [0]);
                              var opresult4435 = callmethodChecked(call4433, ">", [1], new GraceNum(0));
                              if (Grace_isTrue(opresult4435)) {
                                setLineNumber(1199);    // compilenode string
                                var string4436 = new GraceString(" (");
                                onSelf = true;
                                var call4437 = callmethodChecked(this, "writer", [0]);
                                var call4438 = callmethodChecked(call4437, "addText()inMode", [1, 1], string4436, var_code);
                                setLineNumber(1200);    // compilenode identifier
                                var call4439 = callmethodChecked(var_part, "params", [0]);
                                var block4440 = new GraceBlock(this, 1200, 1);
                                setLineNumber(1);    // compilenode identifier
                                block4440.real = function(var_param) {
                                  var if4441 = GraceDone;
                                  setLineNumber(1201);    // compilenode identifier
                                  var call4443 = callmethodChecked(var_param, "dtype", [0]);
                                  var opresult4445 = callmethodChecked(call4443, "\u2260", [1], GraceFalse);
                                  if (Grace_isTrue(opresult4445)) {
                                    setLineNumber(1202);    // compilenode identifier
                                    var call4446 = callmethodChecked(var_param, "value", [0]);
                                    onSelf = true;
                                    var call4447 = callmethodChecked(this, "writer", [0]);
                                    var call4448 = callmethodChecked(call4447, "addText()inMode", [1, 1], call4446, var_code);
                                    setLineNumber(1203);    // compilenode call
                                    onSelf = true;
                                    var call4449 = callmethodChecked(this, "writer", [0]);
                                    var call4450 = callmethodChecked(call4449, "addColon", [0]);
                                    setLineNumber(1204);    // compilenode identifier
                                    var call4451 = callmethodChecked(var_param, "dtype", [0]);
                                    var call4452 = callmethodChecked(call4451, "value", [0]);
                                    onSelf = true;
                                    var call4453 = callmethodChecked(this, "getTypeLink", [1], call4452);
                                    onSelf = true;
                                    var call4454 = callmethodChecked(this, "writer", [0]);
                                    var call4455 = callmethodChecked(call4454, "addText()inMode", [1, 1], call4453, var_plain);
                                    if4441 = call4455;
                                  } else {
                                    setLineNumber(1206);    // compilenode identifier
                                    var call4456 = callmethodChecked(var_param, "value", [0]);
                                    onSelf = true;
                                    var call4457 = callmethodChecked(this, "writer", [0]);
                                    var call4458 = callmethodChecked(call4457, "addText()inMode", [1, 1], call4456, var_code);
                                    setLineNumber(1207);    // compilenode call
                                    onSelf = true;
                                    var call4459 = callmethodChecked(this, "writer", [0]);
                                    var call4460 = callmethodChecked(call4459, "addColon", [0]);
                                    if4441 = call4460;
                                  }
                                  var if4461 = GraceDone;
                                  setLineNumber(1209);    // compilenode identifier
                                  var call4462 = callmethodChecked(var_part, "params", [0]);
                                  var call4463 = callmethodChecked(call4462, "size", [0]);
                                  var call4464 = callmethodChecked(var_part, "params", [0]);
                                  var call4465 = callmethodChecked(call4464, "at", [1], call4463);
                                  var opresult4468 = callmethodChecked(var_param, "\u2260", [1], call4465);
                                  var call4471 = callmethodChecked(var_part, "params", [0]);
                                  var call4472 = callmethodChecked(call4471, "size", [0]);
                                  var opresult4474 = callmethodChecked(call4472, ">", [1], new GraceNum(1));
                                  var opresult4476 = callmethodChecked(opresult4474, "&&", [1], opresult4468);
                                  if (Grace_isTrue(opresult4476)) {
                                    setLineNumber(1210);    // compilenode call
                                    onSelf = true;
                                    var call4477 = callmethodChecked(this, "writer", [0]);
                                    var call4478 = callmethodChecked(call4477, "addComma", [0]);
                                    if4461 = call4478;
                                  }
                                  return if4461;
                                };
                                var call4479 = callmethodChecked(var_prelude, "for()do", [1, 1], call4439, block4440);
                                if4430 = call4479;
                              }
                              setLineNumber(1214);    // compilenode string
                              var string4480 = new GraceString(")");
                              onSelf = true;
                              var call4481 = callmethodChecked(this, "writer", [0]);
                              var call4482 = callmethodChecked(call4481, "addText()inMode", [1, 1], string4480, var_code);
                              return call4482;
                            };
                            var call4483 = callmethodChecked(var_prelude, "for()do", [1, 1], call4425, block4426);
                            var if4484 = GraceDone;
                            setLineNumber(1217);    // compilenode identifier
                            var call4486 = callmethodChecked(var_m, "dtype", [0]);
                            var opresult4488 = callmethodChecked(call4486, "\u2260", [1], GraceFalse);
                            if (Grace_isTrue(opresult4488)) {
                              setLineNumber(1218);    // compilenode string
                              var string4489 = new GraceString(" -> ");
                              onSelf = true;
                              var call4490 = callmethodChecked(this, "writer", [0]);
                              var call4491 = callmethodChecked(call4490, "addText()inMode", [1, 1], string4489, var_code);
                              var if4492 = GraceDone;
                              setLineNumber(1219);    // compilenode string
                              var string4493 = new GraceString("identifier");
                              var call4495 = callmethodChecked(var_m, "dtype", [0]);
                              var call4496 = callmethodChecked(call4495, "kind", [0]);
                              var opresult4498 = callmethodChecked(call4496, "==", [1], string4493);
                              if (Grace_isTrue(opresult4498)) {
                                setLineNumber(1220);    // compilenode identifier
                                var call4499 = callmethodChecked(var_m, "dtype", [0]);
                                var call4500 = callmethodChecked(call4499, "value", [0]);
                                onSelf = true;
                                var call4501 = callmethodChecked(this, "getTypeLink", [1], call4500);
                                onSelf = true;
                                var call4502 = callmethodChecked(this, "writer", [0]);
                                var call4503 = callmethodChecked(call4502, "addText()inMode", [1, 1], call4501, var_plain);
                                if4492 = call4503;
                              } else {
                                var if4504 = GraceDone;
                                setLineNumber(1221);    // compilenode string
                                var string4505 = new GraceString("generic");
                                var call4507 = callmethodChecked(var_m, "dtype", [0]);
                                var call4508 = callmethodChecked(call4507, "kind", [0]);
                                var opresult4510 = callmethodChecked(call4508, "==", [1], string4505);
                                if (Grace_isTrue(opresult4510)) {
                                  setLineNumber(1222);    // compilenode identifier
                                  var call4511 = callmethodChecked(var_m, "dtype", [0]);
                                  var call4512 = callmethodChecked(call4511, "value", [0]);
                                  var call4513 = callmethodChecked(call4512, "value", [0]);
                                  onSelf = true;
                                  var call4514 = callmethodChecked(this, "getTypeLink", [1], call4513);
                                  onSelf = true;
                                  var call4515 = callmethodChecked(this, "writer", [0]);
                                  var call4516 = callmethodChecked(call4515, "addText()inMode", [1, 1], call4514, var_plain);
                                  setLineNumber(1223);    // compilenode block
                                  var block4517 = new GraceBlock(this, 1223, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block4517.real = function(var_each) {
                                    setLineNumber(1223);    // compilenode string
                                    var string4518 = new GraceString("");
                                    var call4520 = callmethodChecked(var_each, "value", [0]);
                                    onSelf = true;
                                    var call4521 = callmethodChecked(this, "getTypeLink", [1], call4520);
                                    var string4523 = new GraceString("");
                                    var opresult4525 = callmethodChecked(string4523, "++", [1], call4521);
                                    var opresult4527 = callmethodChecked(opresult4525, "++", [1], string4518);
                                    onSelf = true;
                                    var call4528 = callmethodChecked(this, "writer", [0]);
                                    var call4529 = callmethodChecked(call4528, "addText()inMode", [1, 1], opresult4527, var_plain);
                                    return call4529;
                                  };
                                  var block4530 = new GraceBlock(this, 1223, 0);
                                  block4530.real = function() {
                                    onSelf = true;
                                    var call4531 = callmethodChecked(this, "writer", [0]);
                                    var call4532 = callmethodChecked(call4531, "addComma", [0]);
                                    return call4532;
                                  };
                                  var call4533 = callmethodChecked(var_m, "dtype", [0]);
                                  var call4534 = callmethodChecked(call4533, "args", [0]);
                                  var call4535 = callmethodChecked(call4534, "do()separatedBy", [1, 1], block4517, block4530);
                                  if4504 = call4535;
                                }
                                if4492 = if4504;
                              }
                              if4484 = if4492;
                            }
                            setLineNumber(1227);    // compilenode call
                            onSelf = true;
                            var call4536 = callmethodChecked(this, "writer", [0]);
                            var call4537 = callmethodChecked(call4536, "addNewline", [0]);
                            setLineNumber(1228);    // compilenode string
                            var string4538 = new GraceString("top-box-description");
                            var call4539 = callmethodChecked(superDepth, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call4540 = callmethodChecked(call4539, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call4541 = callmethodChecked(call4540, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string4538, new GraceNum(1));
                            onSelf = true;
                            var call4542 = callmethodChecked(this, "writer", [0]);
                            var call4543 = callmethodChecked(call4542, "addText()inMode", [1, 1], call4541, var_plain);
                            setLineNumber(1229);    // compilenode call
                            onSelf = true;
                            var call4544 = callmethodChecked(this, "writer", [0]);
                            var call4545 = callmethodChecked(call4544, "dumpBin", [0]);
                            onSelf = true;
                            var call4546 = callmethodChecked(this, "section6", [0]);
                            var call4547 = callmethodChecked(call4546, "insert", [1], call4545);
                            setLineNumber(1230);    // compilenode identifier
                            return GraceTrue;
                          }
                          setLineNumber(1138);    // return value
                          if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], if4233)))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("result of method doClassMethod(1)up(1) does not have " + 
                                      callmethod(var_Boolean, "asString", [0])._value + "."));
                          return if4233;
                        };
                        func4230.paramCounts = [1, 1];
                        obj2649.methods["doClassMethod()up"] = func4230;
                        func4230.definitionLine = 1134;
                        func4230.definitionModule = "gracedocMD";
                        var func4548 = function(argcv) {    // method visitDefDec(1)up(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_o = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitDefDec (arg list 1) of visitDefDec(1)up(1)"));
                          var var_anc = arguments[curarg];
                          curarg++;
                          if (argcv[1] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitDefDec(1)up(1)"));
                          setModuleName("gracedocMD");
                          var if4549 = GraceDone;
                          setLineNumber(1236);    // compilenode call
                          onSelf = true;
                          var call4551 = callmethodChecked(this, "isOnClassPage", [0]);
                          var opresult4553 = callmethodChecked(call4551, "==", [1], GraceTrue);
                          if (Grace_isTrue(opresult4553)) {
                            var if4554 = GraceDone;
                            setLineNumber(1237);    // compilenode identifier
                            var call4555 = callmethodChecked(var_settings, "publicOnly", [0]);
                            var call4556 = callmethodChecked(call4555, "prefix!", [0]);
                            if (Grace_isTrue(call4556)) {
                              setLineNumber(1238);    // compilenode identifier
                              var call4557 = callmethodChecked(var_o, "name", [0]);
                              var call4558 = callmethodChecked(call4557, "value", [0]);
                              var var_n = call4558;
                              setLineNumber(1239);    // compilenode identifier
                              onSelf = true;
                              var call4560 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                              var opresult4562 = callmethodChecked(call4560, "++", [1], var_n);
                              var var_temp = opresult4562;
                              setLineNumber(1240);    // compilenode call
                              onSelf = true;
                              var call4563 = callmethodChecked(this, "writer", [0]);
                              var call4564 = callmethodChecked(call4563, "addBullet", [0]);
                              var if4565 = GraceDone;
                              setLineNumber(1241);    // compilenode string
                              var string4566 = new GraceString("");
                              var opresult4569 = callmethodChecked(var_temp, "\u2260", [1], string4566);
                              if (Grace_isTrue(opresult4569)) {
                                onSelf = true;
                                var call4571 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                                var opresult4573 = callmethodChecked(call4571, "++", [1], var_n);
                                onSelf = true;
                                var call4574 = callmethodChecked(this, "writer", [0]);
                                var call4575 = callmethodChecked(call4574, "addText()inMode", [1, 1], opresult4573, var_code);
                                if4565 = call4575;
                              }
                              setLineNumber(1242);    // compilenode string
                              var string4576 = new GraceString(" -> ");
                              onSelf = true;
                              var call4577 = callmethodChecked(this, "writer", [0]);
                              var call4578 = callmethodChecked(call4577, "addText()inMode", [1, 1], string4576, var_code);
                              var if4579 = GraceDone;
                              setLineNumber(1243);    // compilenode identifier
                              var call4581 = callmethodChecked(var_o, "dtype", [0]);
                              var opresult4583 = callmethodChecked(call4581, "\u2260", [1], GraceFalse);
                              if (Grace_isTrue(opresult4583)) {
                                var if4584 = GraceDone;
                                setLineNumber(1244);    // compilenode string
                                var string4585 = new GraceString("identifier");
                                var call4587 = callmethodChecked(var_o, "dtype", [0]);
                                var call4588 = callmethodChecked(call4587, "kind", [0]);
                                var opresult4590 = callmethodChecked(call4588, "==", [1], string4585);
                                if (Grace_isTrue(opresult4590)) {
                                  setLineNumber(1245);    // compilenode identifier
                                  var call4591 = callmethodChecked(var_o, "dtype", [0]);
                                  var call4592 = callmethodChecked(call4591, "value", [0]);
                                  onSelf = true;
                                  var call4593 = callmethodChecked(this, "getTypeLink", [1], call4592);
                                  onSelf = true;
                                  var call4594 = callmethodChecked(this, "writer", [0]);
                                  var call4595 = callmethodChecked(call4594, "addText()inMode", [1, 1], call4593, var_plain);
                                  if4584 = call4595;
                                } else {
                                  var if4596 = GraceDone;
                                  setLineNumber(1246);    // compilenode string
                                  var string4597 = new GraceString("generic");
                                  var call4599 = callmethodChecked(var_o, "dtype", [0]);
                                  var call4600 = callmethodChecked(call4599, "kind", [0]);
                                  var opresult4602 = callmethodChecked(call4600, "==", [1], string4597);
                                  if (Grace_isTrue(opresult4602)) {
                                    setLineNumber(1247);    // compilenode identifier
                                    var call4603 = callmethodChecked(var_o, "dtype", [0]);
                                    var call4604 = callmethodChecked(call4603, "value", [0]);
                                    var call4605 = callmethodChecked(call4604, "value", [0]);
                                    onSelf = true;
                                    var call4606 = callmethodChecked(this, "getTypeLink", [1], call4605);
                                    onSelf = true;
                                    var call4607 = callmethodChecked(this, "writer", [0]);
                                    var call4608 = callmethodChecked(call4607, "addText()inMode", [1, 1], call4606, var_plain);
                                    setLineNumber(1248);    // compilenode block
                                    var block4609 = new GraceBlock(this, 1248, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block4609.real = function(var_each) {
                                      setLineNumber(1248);    // compilenode string
                                      var string4610 = new GraceString("");
                                      var call4612 = callmethodChecked(var_each, "value", [0]);
                                      onSelf = true;
                                      var call4613 = callmethodChecked(this, "getTypeLink", [1], call4612);
                                      var string4615 = new GraceString("");
                                      var opresult4617 = callmethodChecked(string4615, "++", [1], call4613);
                                      var opresult4619 = callmethodChecked(opresult4617, "++", [1], string4610);
                                      onSelf = true;
                                      var call4620 = callmethodChecked(this, "writer", [0]);
                                      var call4621 = callmethodChecked(call4620, "addText()inMode", [1, 1], opresult4619, var_plain);
                                      return call4621;
                                    };
                                    var block4622 = new GraceBlock(this, 1248, 0);
                                    block4622.real = function() {
                                      onSelf = true;
                                      var call4623 = callmethodChecked(this, "writer", [0]);
                                      var call4624 = callmethodChecked(call4623, "addComma", [0]);
                                      return call4624;
                                    };
                                    var call4625 = callmethodChecked(var_o, "dtype", [0]);
                                    var call4626 = callmethodChecked(call4625, "args", [0]);
                                    var call4627 = callmethodChecked(call4626, "do()separatedBy", [1, 1], block4609, block4622);
                                    if4596 = call4627;
                                  }
                                  if4584 = if4596;
                                }
                                if4579 = if4584;
                              }
                              setLineNumber(1251);    // compilenode call
                              onSelf = true;
                              var call4628 = callmethodChecked(this, "writer", [0]);
                              var call4629 = callmethodChecked(call4628, "addNewline", [0]);
                              setLineNumber(1253);    // compilenode string
                              var string4630 = new GraceString("description");
                              var call4631 = callmethodChecked(superDepth, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call4632 = callmethodChecked(call4631, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call4633 = callmethodChecked(call4632, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string4630, new GraceNum(3));
                              onSelf = true;
                              var call4634 = callmethodChecked(this, "writer", [0]);
                              var call4635 = callmethodChecked(call4634, "addText()inMode", [1, 1], call4633, var_plain);
                              setLineNumber(1254);    // compilenode call
                              onSelf = true;
                              var call4636 = callmethodChecked(this, "writer", [0]);
                              var call4637 = callmethodChecked(call4636, "dumpBin", [0]);
                              onSelf = true;
                              var call4638 = callmethodChecked(this, "section4", [0]);
                              var call4639 = callmethodChecked(call4638, "insert", [1], call4637);
                              if4554 = call4639;
                            } else {
                              var if4640 = GraceDone;
                              setLineNumber(1258);    // compilenode identifier
                              var call4641 = callmethodChecked(var_o, "isReadable", [0]);
                              if (Grace_isTrue(call4641)) {
                                setLineNumber(1260);    // compilenode identifier
                                var call4642 = callmethodChecked(var_o, "name", [0]);
                                var call4643 = callmethodChecked(call4642, "value", [0]);
                                var var_n = call4643;
                                setLineNumber(1261);    // compilenode identifier
                                onSelf = true;
                                var call4645 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                                var opresult4647 = callmethodChecked(call4645, "++", [1], var_n);
                                var var_temp = opresult4647;
                                setLineNumber(1262);    // compilenode call
                                onSelf = true;
                                var call4648 = callmethodChecked(this, "writer", [0]);
                                var call4649 = callmethodChecked(call4648, "addBullet", [0]);
                                setLineNumber(1263);    // compilenode string
                                var string4650 = new GraceString("def ");
                                onSelf = true;
                                var call4651 = callmethodChecked(this, "writer", [0]);
                                var call4652 = callmethodChecked(call4651, "addText()inMode", [1, 1], string4650, var_code);
                                var if4653 = GraceDone;
                                setLineNumber(1265);    // compilenode string
                                var string4654 = new GraceString("");
                                var opresult4657 = callmethodChecked(var_temp, "\u2260", [1], string4654);
                                if (Grace_isTrue(opresult4657)) {
                                  onSelf = true;
                                  var call4659 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                                  var opresult4661 = callmethodChecked(call4659, "++", [1], var_n);
                                  onSelf = true;
                                  var call4662 = callmethodChecked(this, "writer", [0]);
                                  var call4663 = callmethodChecked(call4662, "addText()inMode", [1, 1], opresult4661, var_code);
                                  if4653 = call4663;
                                }
                                setLineNumber(1266);    // compilenode string
                                var string4664 = new GraceString(" -> ");
                                onSelf = true;
                                var call4665 = callmethodChecked(this, "writer", [0]);
                                var call4666 = callmethodChecked(call4665, "addText()inMode", [1, 1], string4664, var_code);
                                var if4667 = GraceDone;
                                setLineNumber(1268);    // compilenode identifier
                                var call4669 = callmethodChecked(var_o, "dtype", [0]);
                                var opresult4671 = callmethodChecked(call4669, "\u2260", [1], GraceFalse);
                                if (Grace_isTrue(opresult4671)) {
                                  var if4672 = GraceDone;
                                  setLineNumber(1269);    // compilenode string
                                  var string4673 = new GraceString("identifier");
                                  var call4675 = callmethodChecked(var_o, "dtype", [0]);
                                  var call4676 = callmethodChecked(call4675, "kind", [0]);
                                  var opresult4678 = callmethodChecked(call4676, "==", [1], string4673);
                                  if (Grace_isTrue(opresult4678)) {
                                    setLineNumber(1270);    // compilenode identifier
                                    var call4679 = callmethodChecked(var_o, "dtype", [0]);
                                    var call4680 = callmethodChecked(call4679, "value", [0]);
                                    onSelf = true;
                                    var call4681 = callmethodChecked(this, "getTypeLink", [1], call4680);
                                    onSelf = true;
                                    var call4682 = callmethodChecked(this, "writer", [0]);
                                    var call4683 = callmethodChecked(call4682, "addText()inMode", [1, 1], call4681, var_plain);
                                    if4672 = call4683;
                                  } else {
                                    var if4684 = GraceDone;
                                    setLineNumber(1271);    // compilenode string
                                    var string4685 = new GraceString("generic");
                                    var call4687 = callmethodChecked(var_o, "dtype", [0]);
                                    var call4688 = callmethodChecked(call4687, "kind", [0]);
                                    var opresult4690 = callmethodChecked(call4688, "==", [1], string4685);
                                    if (Grace_isTrue(opresult4690)) {
                                      setLineNumber(1272);    // compilenode identifier
                                      var call4691 = callmethodChecked(var_o, "dtype", [0]);
                                      var call4692 = callmethodChecked(call4691, "value", [0]);
                                      var call4693 = callmethodChecked(call4692, "value", [0]);
                                      onSelf = true;
                                      var call4694 = callmethodChecked(this, "getTypeLink", [1], call4693);
                                      onSelf = true;
                                      var call4695 = callmethodChecked(this, "writer", [0]);
                                      var call4696 = callmethodChecked(call4695, "addText()inMode", [1, 1], call4694, var_plain);
                                      setLineNumber(1273);    // compilenode block
                                      var block4697 = new GraceBlock(this, 1273, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block4697.real = function(var_each) {
                                        setLineNumber(1273);    // compilenode string
                                        var string4698 = new GraceString("");
                                        var call4700 = callmethodChecked(var_each, "value", [0]);
                                        onSelf = true;
                                        var call4701 = callmethodChecked(this, "getTypeLink", [1], call4700);
                                        var string4703 = new GraceString("");
                                        var opresult4705 = callmethodChecked(string4703, "++", [1], call4701);
                                        var opresult4707 = callmethodChecked(opresult4705, "++", [1], string4698);
                                        onSelf = true;
                                        var call4708 = callmethodChecked(this, "writer", [0]);
                                        var call4709 = callmethodChecked(call4708, "addText()inMode", [1, 1], opresult4707, var_plain);
                                        return call4709;
                                      };
                                      var block4710 = new GraceBlock(this, 1273, 0);
                                      block4710.real = function() {
                                        onSelf = true;
                                        var call4711 = callmethodChecked(this, "writer", [0]);
                                        var call4712 = callmethodChecked(call4711, "addComma", [0]);
                                        return call4712;
                                      };
                                      var call4713 = callmethodChecked(var_o, "dtype", [0]);
                                      var call4714 = callmethodChecked(call4713, "args", [0]);
                                      var call4715 = callmethodChecked(call4714, "do()separatedBy", [1, 1], block4697, block4710);
                                      if4684 = call4715;
                                    }
                                    if4672 = if4684;
                                  }
                                  if4667 = if4672;
                                }
                                setLineNumber(1276);    // compilenode call
                                onSelf = true;
                                var call4716 = callmethodChecked(this, "writer", [0]);
                                var call4717 = callmethodChecked(call4716, "addNewline", [0]);
                                setLineNumber(1278);    // compilenode string
                                var string4718 = new GraceString("description");
                                var call4719 = callmethodChecked(superDepth, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call4720 = callmethodChecked(call4719, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call4721 = callmethodChecked(call4720, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string4718, new GraceNum(2));
                                onSelf = true;
                                var call4722 = callmethodChecked(this, "writer", [0]);
                                var call4723 = callmethodChecked(call4722, "addText()inMode", [1, 1], call4721, var_plain);
                                setLineNumber(1279);    // compilenode call
                                onSelf = true;
                                var call4724 = callmethodChecked(this, "writer", [0]);
                                var call4725 = callmethodChecked(call4724, "dumpBin", [0]);
                                onSelf = true;
                                var call4726 = callmethodChecked(this, "section4", [0]);
                                var call4727 = callmethodChecked(call4726, "insert", [1], call4725);
                                if4640 = call4727;
                              }
                              if4554 = if4640;
                            }
                            setLineNumber(1282);    // compilenode identifier
                            var call4728 = callmethodChecked(var_anc, "parent", [0]);
                            var call4729 = callmethodChecked(call4728, "isObject", [0]);
                            return call4729;
                          } else {
                            var if4730 = GraceDone;
                            setLineNumber(1284);    // compilenode identifier
                            var call4731 = callmethodChecked(var_settings, "publicOnly", [0]);
                            var call4732 = callmethodChecked(call4731, "prefix!", [0]);
                            if (Grace_isTrue(call4732)) {
                              setLineNumber(1285);    // compilenode identifier
                              var call4733 = callmethodChecked(var_o, "name", [0]);
                              var call4734 = callmethodChecked(call4733, "value", [0]);
                              onSelf = true;
                              var call4736 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                              var opresult4738 = callmethodChecked(call4736, "++", [1], call4734);
                              var var_n = opresult4738;
                              setLineNumber(1286);    // compilenode call
                              onSelf = true;
                              var call4739 = callmethodChecked(this, "writer", [0]);
                              var call4740 = callmethodChecked(call4739, "addBullet", [0]);
                              setLineNumber(1287);    // compilenode string
                              var string4741 = new GraceString("");
                              var string4744 = new GraceString("def ");
                              var opresult4746 = callmethodChecked(string4744, "++", [1], var_n);
                              var opresult4748 = callmethodChecked(opresult4746, "++", [1], string4741);
                              onSelf = true;
                              var call4749 = callmethodChecked(this, "writer", [0]);
                              var call4750 = callmethodChecked(call4749, "addText()inMode", [1, 1], opresult4748, var_code);
                              setLineNumber(1288);    // compilenode string
                              var string4751 = new GraceString(" -> ");
                              onSelf = true;
                              var call4752 = callmethodChecked(this, "writer", [0]);
                              var call4753 = callmethodChecked(call4752, "addText()inMode", [1, 1], string4751, var_code);
                              var if4754 = GraceDone;
                              setLineNumber(1290);    // compilenode identifier
                              var call4756 = callmethodChecked(var_o, "dtype", [0]);
                              var opresult4758 = callmethodChecked(call4756, "\u2260", [1], GraceFalse);
                              if (Grace_isTrue(opresult4758)) {
                                var if4759 = GraceDone;
                                setLineNumber(1291);    // compilenode string
                                var string4760 = new GraceString("identifier");
                                var call4762 = callmethodChecked(var_o, "dtype", [0]);
                                var call4763 = callmethodChecked(call4762, "kind", [0]);
                                var opresult4765 = callmethodChecked(call4763, "==", [1], string4760);
                                if (Grace_isTrue(opresult4765)) {
                                  setLineNumber(1292);    // compilenode identifier
                                  var call4766 = callmethodChecked(var_o, "dtype", [0]);
                                  var call4767 = callmethodChecked(call4766, "value", [0]);
                                  onSelf = true;
                                  var call4768 = callmethodChecked(this, "getTypeLink", [1], call4767);
                                  onSelf = true;
                                  var call4769 = callmethodChecked(this, "writer", [0]);
                                  var call4770 = callmethodChecked(call4769, "addText()inMode", [1, 1], call4768, var_plain);
                                  if4759 = call4770;
                                } else {
                                  var if4771 = GraceDone;
                                  setLineNumber(1293);    // compilenode string
                                  var string4772 = new GraceString("generic");
                                  var call4774 = callmethodChecked(var_o, "dtype", [0]);
                                  var call4775 = callmethodChecked(call4774, "kind", [0]);
                                  var opresult4777 = callmethodChecked(call4775, "==", [1], string4772);
                                  if (Grace_isTrue(opresult4777)) {
                                    setLineNumber(1294);    // compilenode identifier
                                    var call4778 = callmethodChecked(var_o, "dtype", [0]);
                                    var call4779 = callmethodChecked(call4778, "value", [0]);
                                    var call4780 = callmethodChecked(call4779, "value", [0]);
                                    onSelf = true;
                                    var call4781 = callmethodChecked(this, "getTypeLink", [1], call4780);
                                    onSelf = true;
                                    var call4782 = callmethodChecked(this, "writer", [0]);
                                    var call4783 = callmethodChecked(call4782, "addText()inMode", [1, 1], call4781, var_plain);
                                    setLineNumber(1295);    // compilenode block
                                    var block4784 = new GraceBlock(this, 1295, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block4784.real = function(var_each) {
                                      setLineNumber(1295);    // compilenode string
                                      var string4785 = new GraceString("");
                                      var call4787 = callmethodChecked(var_each, "value", [0]);
                                      var string4789 = new GraceString("");
                                      var opresult4791 = callmethodChecked(string4789, "++", [1], call4787);
                                      var opresult4793 = callmethodChecked(opresult4791, "++", [1], string4785);
                                      onSelf = true;
                                      var call4794 = callmethodChecked(this, "writer", [0]);
                                      var call4795 = callmethodChecked(call4794, "addText()inMode", [1, 1], opresult4793, var_code);
                                      return call4795;
                                    };
                                    var block4796 = new GraceBlock(this, 1295, 0);
                                    block4796.real = function() {
                                      onSelf = true;
                                      var call4797 = callmethodChecked(this, "writer", [0]);
                                      var call4798 = callmethodChecked(call4797, "addComma", [0]);
                                      return call4798;
                                    };
                                    var call4799 = callmethodChecked(var_o, "dtype", [0]);
                                    var call4800 = callmethodChecked(call4799, "args", [0]);
                                    var call4801 = callmethodChecked(call4800, "do()separatedBy", [1, 1], block4784, block4796);
                                    if4771 = call4801;
                                  }
                                  if4759 = if4771;
                                }
                                if4754 = if4759;
                              }
                              setLineNumber(1298);    // compilenode call
                              onSelf = true;
                              var call4802 = callmethodChecked(this, "writer", [0]);
                              var call4803 = callmethodChecked(call4802, "addNewline", [0]);
                              setLineNumber(1299);    // compilenode string
                              var string4804 = new GraceString("description");
                              var call4805 = callmethodChecked(superDepth, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call4806 = callmethodChecked(call4805, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call4807 = callmethodChecked(call4806, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string4804, new GraceNum(3));
                              onSelf = true;
                              var call4808 = callmethodChecked(this, "writer", [0]);
                              var call4809 = callmethodChecked(call4808, "addText()inMode", [1, 1], call4807, var_plain);
                              setLineNumber(1300);    // compilenode call
                              onSelf = true;
                              var call4810 = callmethodChecked(this, "writer", [0]);
                              var call4811 = callmethodChecked(call4810, "dumpBin", [0]);
                              onSelf = true;
                              var call4812 = callmethodChecked(this, "section4", [0]);
                              var call4813 = callmethodChecked(call4812, "insert", [1], call4811);
                              if4730 = call4813;
                            } else {
                              var if4814 = GraceDone;
                              setLineNumber(1304);    // compilenode identifier
                              var call4815 = callmethodChecked(var_o, "isReadable", [0]);
                              if (Grace_isTrue(call4815)) {
                                setLineNumber(1305);    // compilenode call
                                onSelf = true;
                                var call4816 = callmethodChecked(this, "writer", [0]);
                                var call4817 = callmethodChecked(call4816, "addBullet", [0]);
                                setLineNumber(1306);    // compilenode string
                                var string4818 = new GraceString("def ");
                                onSelf = true;
                                var call4819 = callmethodChecked(this, "writer", [0]);
                                var call4820 = callmethodChecked(call4819, "addText()inMode", [1, 1], string4818, var_code);
                                setLineNumber(1307);    // compilenode string
                                var string4821 = new GraceString("");
                                var call4823 = callmethodChecked(var_o, "name", [0]);
                                var call4824 = callmethodChecked(call4823, "value", [0]);
                                onSelf = true;
                                var call4826 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                                var opresult4828 = callmethodChecked(call4826, "++", [1], call4824);
                                var string4830 = new GraceString("");
                                var opresult4832 = callmethodChecked(string4830, "++", [1], opresult4828);
                                var opresult4834 = callmethodChecked(opresult4832, "++", [1], string4821);
                                onSelf = true;
                                var call4835 = callmethodChecked(this, "writer", [0]);
                                var call4836 = callmethodChecked(call4835, "addText()inMode", [1, 1], opresult4834, var_code);
                                setLineNumber(1308);    // compilenode string
                                var string4837 = new GraceString(" -> ");
                                onSelf = true;
                                var call4838 = callmethodChecked(this, "writer", [0]);
                                var call4839 = callmethodChecked(call4838, "addText()inMode", [1, 1], string4837, var_code);
                                setLineNumber(1309);    // compilenode identifier
                                var call4840 = callmethodChecked(var_o, "name", [0]);
                                var call4841 = callmethodChecked(call4840, "value", [0]);
                                var var_n = call4841;
                                var if4842 = GraceDone;
                                setLineNumber(1310);    // compilenode identifier
                                var call4844 = callmethodChecked(var_o, "dtype", [0]);
                                var opresult4846 = callmethodChecked(call4844, "\u2260", [1], GraceFalse);
                                if (Grace_isTrue(opresult4846)) {
                                  var if4847 = GraceDone;
                                  setLineNumber(1311);    // compilenode string
                                  var string4848 = new GraceString("identifier");
                                  var call4850 = callmethodChecked(var_o, "dtype", [0]);
                                  var call4851 = callmethodChecked(call4850, "kind", [0]);
                                  var opresult4853 = callmethodChecked(call4851, "==", [1], string4848);
                                  if (Grace_isTrue(opresult4853)) {
                                    setLineNumber(1312);    // compilenode identifier
                                    var call4854 = callmethodChecked(var_o, "dtype", [0]);
                                    var call4855 = callmethodChecked(call4854, "value", [0]);
                                    onSelf = true;
                                    var call4856 = callmethodChecked(this, "getTypeLink", [1], call4855);
                                    onSelf = true;
                                    var call4857 = callmethodChecked(this, "writer", [0]);
                                    var call4858 = callmethodChecked(call4857, "addText()inMode", [1, 1], call4856, var_plain);
                                    if4847 = call4858;
                                  } else {
                                    var if4859 = GraceDone;
                                    setLineNumber(1313);    // compilenode string
                                    var string4860 = new GraceString("generic");
                                    var call4862 = callmethodChecked(var_o, "dtype", [0]);
                                    var call4863 = callmethodChecked(call4862, "kind", [0]);
                                    var opresult4865 = callmethodChecked(call4863, "==", [1], string4860);
                                    if (Grace_isTrue(opresult4865)) {
                                      setLineNumber(1314);    // compilenode identifier
                                      var call4866 = callmethodChecked(var_o, "dtype", [0]);
                                      var call4867 = callmethodChecked(call4866, "value", [0]);
                                      var call4868 = callmethodChecked(call4867, "value", [0]);
                                      onSelf = true;
                                      var call4869 = callmethodChecked(this, "getTypeLink", [1], call4868);
                                      onSelf = true;
                                      var call4870 = callmethodChecked(this, "writer", [0]);
                                      var call4871 = callmethodChecked(call4870, "addText()inMode", [1, 1], call4869, var_plain);
                                      setLineNumber(1315);    // compilenode block
                                      var block4872 = new GraceBlock(this, 1315, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block4872.real = function(var_each) {
                                        setLineNumber(1315);    // compilenode string
                                        var string4873 = new GraceString("");
                                        var call4875 = callmethodChecked(var_each, "value", [0]);
                                        onSelf = true;
                                        var call4876 = callmethodChecked(this, "getTypeLink", [1], call4875);
                                        var string4878 = new GraceString("");
                                        var opresult4880 = callmethodChecked(string4878, "++", [1], call4876);
                                        var opresult4882 = callmethodChecked(opresult4880, "++", [1], string4873);
                                        onSelf = true;
                                        var call4883 = callmethodChecked(this, "writer", [0]);
                                        var call4884 = callmethodChecked(call4883, "addText()inMode", [1, 1], opresult4882, var_plain);
                                        return call4884;
                                      };
                                      var block4885 = new GraceBlock(this, 1315, 0);
                                      block4885.real = function() {
                                        onSelf = true;
                                        var call4886 = callmethodChecked(this, "writer", [0]);
                                        var call4887 = callmethodChecked(call4886, "addComma", [0]);
                                        return call4887;
                                      };
                                      var call4888 = callmethodChecked(var_o, "dtype", [0]);
                                      var call4889 = callmethodChecked(call4888, "args", [0]);
                                      var call4890 = callmethodChecked(call4889, "do()separatedBy", [1, 1], block4872, block4885);
                                      if4859 = call4890;
                                    }
                                    if4847 = if4859;
                                  }
                                  if4842 = if4847;
                                }
                                setLineNumber(1318);    // compilenode call
                                onSelf = true;
                                var call4891 = callmethodChecked(this, "writer", [0]);
                                var call4892 = callmethodChecked(call4891, "addNewline", [0]);
                                setLineNumber(1320);    // compilenode string
                                var string4893 = new GraceString("description");
                                var call4894 = callmethodChecked(superDepth, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call4895 = callmethodChecked(call4894, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call4896 = callmethodChecked(call4895, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string4893, new GraceNum(2));
                                onSelf = true;
                                var call4897 = callmethodChecked(this, "writer", [0]);
                                var call4898 = callmethodChecked(call4897, "addText()inMode", [1, 1], call4896, var_plain);
                                setLineNumber(1321);    // compilenode call
                                onSelf = true;
                                var call4899 = callmethodChecked(this, "writer", [0]);
                                var call4900 = callmethodChecked(call4899, "dumpBin", [0]);
                                onSelf = true;
                                var call4901 = callmethodChecked(this, "section4", [0]);
                                var call4902 = callmethodChecked(call4901, "insert", [1], call4900);
                                if4814 = call4902;
                              }
                              if4730 = if4814;
                            }
                            setLineNumber(1324);    // compilenode identifier
                            var call4903 = callmethodChecked(var_anc, "parent", [0]);
                            var call4904 = callmethodChecked(call4903, "isObject", [0]);
                            return call4904;
                          }
                          setLineNumber(1236);    // return value
                          if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], if4549)))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("result of method visitDefDec(1)up(1) does not have " + 
                                      callmethod(var_Boolean, "asString", [0])._value + "."));
                          return if4549;
                        };
                        func4548.paramCounts = [1, 1];
                        obj2649.methods["visitDefDec()up"] = func4548;
                        func4548.definitionLine = 1235;
                        func4548.definitionModule = "gracedocMD";
                        var func4905 = function(argcv) {    // method visitVarDec(1)up(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_o = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitVarDec (arg list 1) of visitVarDec(1)up(1)"));
                          var var_anc = arguments[curarg];
                          curarg++;
                          if (argcv[1] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitVarDec(1)up(1)"));
                          setModuleName("gracedocMD");
                          setLineNumber(1329);    // compilenode identifier
                          var call4906 = callmethodChecked(var_o, "nameString", [0]);
                          onSelf = true;
                          var call4908 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                          var opresult4910 = callmethodChecked(call4908, "++", [1], call4906);
                          var var_n = opresult4910;
                          var if4911 = GraceDone;
                          setLineNumber(1330);    // compilenode call
                          onSelf = true;
                          var call4913 = callmethodChecked(this, "isOnClassPage", [0]);
                          var opresult4915 = callmethodChecked(call4913, "==", [1], GraceTrue);
                          if (Grace_isTrue(opresult4915)) {
                            var if4916 = GraceDone;
                            setLineNumber(1331);    // compilenode identifier
                            var call4917 = callmethodChecked(var_settings, "publicOnly", [0]);
                            var call4918 = callmethodChecked(call4917, "prefix!", [0]);
                            if (Grace_isTrue(call4918)) {
                              setLineNumber(1332);    // compilenode call
                              onSelf = true;
                              var call4919 = callmethodChecked(this, "writer", [0]);
                              var call4920 = callmethodChecked(call4919, "addBullet", [0]);
                              setLineNumber(1333);    // compilenode string
                              var string4921 = new GraceString("var ");
                              onSelf = true;
                              var call4922 = callmethodChecked(this, "writer", [0]);
                              var call4923 = callmethodChecked(call4922, "addText()inMode", [1, 1], string4921, var_code);
                              setLineNumber(1334);    // compilenode string
                              var string4924 = new GraceString("");
                              var call4926 = callmethodChecked(var_o, "name", [0]);
                              var call4927 = callmethodChecked(call4926, "value", [0]);
                              var string4929 = new GraceString("");
                              onSelf = true;
                              var call4931 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                              var string4933 = new GraceString("");
                              var opresult4935 = callmethodChecked(string4933, "++", [1], call4931);
                              var opresult4937 = callmethodChecked(opresult4935, "++", [1], string4929);
                              var opresult4939 = callmethodChecked(opresult4937, "++", [1], call4927);
                              var opresult4941 = callmethodChecked(opresult4939, "++", [1], string4924);
                              onSelf = true;
                              var call4942 = callmethodChecked(this, "writer", [0]);
                              var call4943 = callmethodChecked(call4942, "addText()inMode", [1, 1], opresult4941, var_code);
                              var if4944 = GraceDone;
                              setLineNumber(1335);    // compilenode identifier
                              var call4946 = callmethodChecked(var_o, "dtype", [0]);
                              var opresult4948 = callmethodChecked(call4946, "\u2260", [1], GraceFalse);
                              if (Grace_isTrue(opresult4948)) {
                                setLineNumber(1336);    // compilenode string
                                var string4949 = new GraceString(" -> ");
                                onSelf = true;
                                var call4950 = callmethodChecked(this, "writer", [0]);
                                var call4951 = callmethodChecked(call4950, "addText()inMode", [1, 1], string4949, var_code);
                                setLineNumber(1337);    // compilenode string
                                var string4952 = new GraceString("");
                                var call4954 = callmethodChecked(var_o, "dtype", [0]);
                                var call4955 = callmethodChecked(call4954, "value", [0]);
                                onSelf = true;
                                var call4956 = callmethodChecked(this, "getTypeLink", [1], call4955);
                                var string4958 = new GraceString("");
                                var opresult4960 = callmethodChecked(string4958, "++", [1], call4956);
                                var opresult4962 = callmethodChecked(opresult4960, "++", [1], string4952);
                                onSelf = true;
                                var call4963 = callmethodChecked(this, "writer", [0]);
                                var call4964 = callmethodChecked(call4963, "addText()inMode", [1, 1], opresult4962, var_plain);
                                if4944 = call4964;
                              }
                              setLineNumber(1339);    // compilenode call
                              onSelf = true;
                              var call4965 = callmethodChecked(this, "writer", [0]);
                              var call4966 = callmethodChecked(call4965, "addNewline", [0]);
                              setLineNumber(1340);    // compilenode string
                              var string4967 = new GraceString("description");
                              var call4968 = callmethodChecked(superDepth, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call4969 = callmethodChecked(call4968, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call4970 = callmethodChecked(call4969, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string4967, new GraceNum(3));
                              onSelf = true;
                              var call4971 = callmethodChecked(this, "writer", [0]);
                              var call4972 = callmethodChecked(call4971, "addText()inMode", [1, 1], call4970, var_plain);
                              setLineNumber(1341);    // compilenode call
                              onSelf = true;
                              var call4973 = callmethodChecked(this, "writer", [0]);
                              var call4974 = callmethodChecked(call4973, "dumpBin", [0]);
                              onSelf = true;
                              var call4975 = callmethodChecked(this, "section4", [0]);
                              var call4976 = callmethodChecked(call4975, "insert", [1], call4974);
                              if4916 = call4976;
                            } else {
                              var if4977 = GraceDone;
                              setLineNumber(1343);    // compilenode identifier
                              var call4978 = callmethodChecked(var_o, "isReadable", [0]);
                              if (Grace_isTrue(call4978)) {
                                setLineNumber(1344);    // compilenode call
                                onSelf = true;
                                var call4979 = callmethodChecked(this, "writer", [0]);
                                var call4980 = callmethodChecked(call4979, "addBullet", [0]);
                                setLineNumber(1345);    // compilenode string
                                var string4981 = new GraceString("var ");
                                onSelf = true;
                                var call4982 = callmethodChecked(this, "writer", [0]);
                                var call4983 = callmethodChecked(call4982, "addText()inMode", [1, 1], string4981, var_code);
                                setLineNumber(1346);    // compilenode string
                                var string4984 = new GraceString("");
                                var call4986 = callmethodChecked(var_o, "name", [0]);
                                var call4987 = callmethodChecked(call4986, "value", [0]);
                                var string4989 = new GraceString("");
                                onSelf = true;
                                var call4991 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                                var string4993 = new GraceString("");
                                var opresult4995 = callmethodChecked(string4993, "++", [1], call4991);
                                var opresult4997 = callmethodChecked(opresult4995, "++", [1], string4989);
                                var opresult4999 = callmethodChecked(opresult4997, "++", [1], call4987);
                                var opresult5001 = callmethodChecked(opresult4999, "++", [1], string4984);
                                onSelf = true;
                                var call5002 = callmethodChecked(this, "writer", [0]);
                                var call5003 = callmethodChecked(call5002, "addText()inMode", [1, 1], opresult5001, var_code);
                                var if5004 = GraceDone;
                                setLineNumber(1347);    // compilenode identifier
                                var call5006 = callmethodChecked(var_o, "dtype", [0]);
                                var opresult5008 = callmethodChecked(call5006, "\u2260", [1], GraceFalse);
                                if (Grace_isTrue(opresult5008)) {
                                  setLineNumber(1348);    // compilenode string
                                  var string5009 = new GraceString(" -> ");
                                  onSelf = true;
                                  var call5010 = callmethodChecked(this, "writer", [0]);
                                  var call5011 = callmethodChecked(call5010, "addText()inMode", [1, 1], string5009, var_code);
                                  setLineNumber(1349);    // compilenode string
                                  var string5012 = new GraceString("");
                                  var call5014 = callmethodChecked(var_o, "dtype", [0]);
                                  var call5015 = callmethodChecked(call5014, "value", [0]);
                                  onSelf = true;
                                  var call5016 = callmethodChecked(this, "getTypeLink", [1], call5015);
                                  var string5018 = new GraceString("");
                                  var opresult5020 = callmethodChecked(string5018, "++", [1], call5016);
                                  var opresult5022 = callmethodChecked(opresult5020, "++", [1], string5012);
                                  onSelf = true;
                                  var call5023 = callmethodChecked(this, "writer", [0]);
                                  var call5024 = callmethodChecked(call5023, "addText()inMode", [1, 1], opresult5022, var_plain);
                                  if5004 = call5024;
                                }
                                setLineNumber(1351);    // compilenode string
                                var string5025 = new GraceString("description");
                                var call5026 = callmethodChecked(superDepth, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call5027 = callmethodChecked(call5026, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call5028 = callmethodChecked(call5027, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string5025, new GraceNum(2));
                                onSelf = true;
                                var call5029 = callmethodChecked(this, "writer", [0]);
                                var call5030 = callmethodChecked(call5029, "addText()inMode", [1, 1], call5028, var_plain);
                                setLineNumber(1352);    // compilenode call
                                onSelf = true;
                                var call5031 = callmethodChecked(this, "writer", [0]);
                                var call5032 = callmethodChecked(call5031, "dumpBin", [0]);
                                onSelf = true;
                                var call5033 = callmethodChecked(this, "section4", [0]);
                                var call5034 = callmethodChecked(call5033, "insert", [1], call5032);
                                if4977 = call5034;
                              }
                              var if5035 = GraceDone;
                              setLineNumber(1354);    // compilenode identifier
                              var call5036 = callmethodChecked(var_o, "isWritable", [0]);
                              if (Grace_isTrue(call5036)) {
                                setLineNumber(1355);    // compilenode call
                                onSelf = true;
                                var call5037 = callmethodChecked(this, "writer", [0]);
                                var call5038 = callmethodChecked(call5037, "addBullet", [0]);
                                setLineNumber(1356);    // compilenode string
                                var string5039 = new GraceString("var ");
                                onSelf = true;
                                var call5040 = callmethodChecked(this, "writer", [0]);
                                var call5041 = callmethodChecked(call5040, "addText()inMode", [1, 1], string5039, var_code);
                                setLineNumber(1357);    // compilenode string
                                var string5042 = new GraceString("");
                                var call5044 = callmethodChecked(var_o, "name", [0]);
                                var call5045 = callmethodChecked(call5044, "value", [0]);
                                var string5047 = new GraceString("");
                                onSelf = true;
                                var call5049 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                                var string5051 = new GraceString("");
                                var opresult5053 = callmethodChecked(string5051, "++", [1], call5049);
                                var opresult5055 = callmethodChecked(opresult5053, "++", [1], string5047);
                                var opresult5057 = callmethodChecked(opresult5055, "++", [1], call5045);
                                var opresult5059 = callmethodChecked(opresult5057, "++", [1], string5042);
                                onSelf = true;
                                var call5060 = callmethodChecked(this, "writer", [0]);
                                var call5061 = callmethodChecked(call5060, "addText()inMode", [1, 1], opresult5059, var_code);
                                var if5062 = GraceDone;
                                setLineNumber(1358);    // compilenode identifier
                                var call5064 = callmethodChecked(var_o, "dtype", [0]);
                                var opresult5066 = callmethodChecked(call5064, "\u2260", [1], GraceFalse);
                                if (Grace_isTrue(opresult5066)) {
                                  setLineNumber(1359);    // compilenode string
                                  var string5067 = new GraceString(" -> ");
                                  onSelf = true;
                                  var call5068 = callmethodChecked(this, "writer", [0]);
                                  var call5069 = callmethodChecked(call5068, "addText()inMode", [1, 1], string5067, var_code);
                                  setLineNumber(1360);    // compilenode string
                                  var string5070 = new GraceString(")");
                                  var call5072 = callmethodChecked(var_o, "dtype", [0]);
                                  var call5073 = callmethodChecked(call5072, "value", [0]);
                                  onSelf = true;
                                  var call5074 = callmethodChecked(this, "getTypeLink", [1], call5073);
                                  var string5076 = new GraceString("(_:");
                                  var opresult5078 = callmethodChecked(string5076, "++", [1], call5074);
                                  var opresult5080 = callmethodChecked(opresult5078, "++", [1], string5070);
                                  onSelf = true;
                                  var call5081 = callmethodChecked(this, "writer", [0]);
                                  var call5082 = callmethodChecked(call5081, "addText()inMode", [1, 1], opresult5080, var_plain);
                                  if5062 = call5082;
                                } else {
                                  setLineNumber(1362);    // compilenode string
                                  var string5083 = new GraceString("-> Done");
                                  onSelf = true;
                                  var call5084 = callmethodChecked(this, "writer", [0]);
                                  var call5085 = callmethodChecked(call5084, "addText()inMode", [1, 1], string5083, var_code);
                                  if5062 = call5085;
                                }
                                setLineNumber(1364);    // compilenode string
                                var string5086 = new GraceString("");
                                var string5089 = new GraceString("Updates ");
                                var opresult5091 = callmethodChecked(string5089, "++", [1], var_n);
                                var opresult5093 = callmethodChecked(opresult5091, "++", [1], string5086);
                                onSelf = true;
                                var call5094 = callmethodChecked(this, "writer", [0]);
                                var call5095 = callmethodChecked(call5094, "addText()inMode", [1, 1], opresult5093, var_code);
                                setLineNumber(1365);    // compilenode call
                                onSelf = true;
                                var call5096 = callmethodChecked(this, "writer", [0]);
                                var call5097 = callmethodChecked(call5096, "dumpBin", [0]);
                                onSelf = true;
                                var call5098 = callmethodChecked(this, "section4", [0]);
                                var call5099 = callmethodChecked(call5098, "insert", [1], call5097);
                                if5035 = call5099;
                              }
                              if4916 = if5035;
                            }
                            setLineNumber(1368);    // compilenode identifier
                            return GraceFalse;
                          } else {
                            var if5100 = GraceDone;
                            setLineNumber(1370);    // compilenode identifier
                            var call5101 = callmethodChecked(var_settings, "publicOnly", [0]);
                            var call5102 = callmethodChecked(call5101, "prefix!", [0]);
                            if (Grace_isTrue(call5102)) {
                              setLineNumber(1371);    // compilenode call
                              onSelf = true;
                              var call5103 = callmethodChecked(this, "writer", [0]);
                              var call5104 = callmethodChecked(call5103, "addBullet", [0]);
                              setLineNumber(1372);    // compilenode string
                              var string5105 = new GraceString("var ");
                              onSelf = true;
                              var call5106 = callmethodChecked(this, "writer", [0]);
                              var call5107 = callmethodChecked(call5106, "addText()inMode", [1, 1], string5105, var_code);
                              setLineNumber(1373);    // compilenode string
                              var string5108 = new GraceString("");
                              var call5110 = callmethodChecked(var_o, "name", [0]);
                              var call5111 = callmethodChecked(call5110, "value", [0]);
                              var string5113 = new GraceString("");
                              onSelf = true;
                              var call5115 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                              var string5117 = new GraceString("");
                              var opresult5119 = callmethodChecked(string5117, "++", [1], call5115);
                              var opresult5121 = callmethodChecked(opresult5119, "++", [1], string5113);
                              var opresult5123 = callmethodChecked(opresult5121, "++", [1], call5111);
                              var opresult5125 = callmethodChecked(opresult5123, "++", [1], string5108);
                              onSelf = true;
                              var call5126 = callmethodChecked(this, "writer", [0]);
                              var call5127 = callmethodChecked(call5126, "addText()inMode", [1, 1], opresult5125, var_code);
                              var if5128 = GraceDone;
                              setLineNumber(1374);    // compilenode identifier
                              var call5130 = callmethodChecked(var_o, "dtype", [0]);
                              var opresult5132 = callmethodChecked(call5130, "\u2260", [1], GraceFalse);
                              if (Grace_isTrue(opresult5132)) {
                                setLineNumber(1375);    // compilenode string
                                var string5133 = new GraceString(" -> ");
                                onSelf = true;
                                var call5134 = callmethodChecked(this, "writer", [0]);
                                var call5135 = callmethodChecked(call5134, "addText()inMode", [1, 1], string5133, var_code);
                                setLineNumber(1376);    // compilenode string
                                var string5136 = new GraceString("");
                                var call5138 = callmethodChecked(var_o, "dtype", [0]);
                                var call5139 = callmethodChecked(call5138, "value", [0]);
                                onSelf = true;
                                var call5140 = callmethodChecked(this, "getTypeLink", [1], call5139);
                                var string5142 = new GraceString("");
                                var opresult5144 = callmethodChecked(string5142, "++", [1], call5140);
                                var opresult5146 = callmethodChecked(opresult5144, "++", [1], string5136);
                                onSelf = true;
                                var call5147 = callmethodChecked(this, "writer", [0]);
                                var call5148 = callmethodChecked(call5147, "addText()inMode", [1, 1], opresult5146, var_plain);
                                if5128 = call5148;
                              }
                              setLineNumber(1378);    // compilenode call
                              onSelf = true;
                              var call5149 = callmethodChecked(this, "writer", [0]);
                              var call5150 = callmethodChecked(call5149, "addNewline", [0]);
                              setLineNumber(1379);    // compilenode string
                              var string5151 = new GraceString("description");
                              var call5152 = callmethodChecked(superDepth, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call5153 = callmethodChecked(call5152, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call5154 = callmethodChecked(call5153, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string5151, new GraceNum(3));
                              onSelf = true;
                              var call5155 = callmethodChecked(this, "writer", [0]);
                              var call5156 = callmethodChecked(call5155, "addText()inMode", [1, 1], call5154, var_plain);
                              setLineNumber(1380);    // compilenode call
                              onSelf = true;
                              var call5157 = callmethodChecked(this, "writer", [0]);
                              var call5158 = callmethodChecked(call5157, "dumpBin", [0]);
                              onSelf = true;
                              var call5159 = callmethodChecked(this, "section4", [0]);
                              var call5160 = callmethodChecked(call5159, "insert", [1], call5158);
                              if5100 = call5160;
                            } else {
                              var if5161 = GraceDone;
                              setLineNumber(1382);    // compilenode identifier
                              var call5162 = callmethodChecked(var_o, "isReadable", [0]);
                              if (Grace_isTrue(call5162)) {
                                setLineNumber(1383);    // compilenode call
                                onSelf = true;
                                var call5163 = callmethodChecked(this, "writer", [0]);
                                var call5164 = callmethodChecked(call5163, "addBullet", [0]);
                                setLineNumber(1384);    // compilenode string
                                var string5165 = new GraceString("var ");
                                onSelf = true;
                                var call5166 = callmethodChecked(this, "writer", [0]);
                                var call5167 = callmethodChecked(call5166, "addText()inMode", [1, 1], string5165, var_code);
                                setLineNumber(1385);    // compilenode string
                                var string5168 = new GraceString("");
                                var call5170 = callmethodChecked(var_o, "name", [0]);
                                var call5171 = callmethodChecked(call5170, "value", [0]);
                                var string5173 = new GraceString("");
                                onSelf = true;
                                var call5175 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                                var string5177 = new GraceString("");
                                var opresult5179 = callmethodChecked(string5177, "++", [1], call5175);
                                var opresult5181 = callmethodChecked(opresult5179, "++", [1], string5173);
                                var opresult5183 = callmethodChecked(opresult5181, "++", [1], call5171);
                                var opresult5185 = callmethodChecked(opresult5183, "++", [1], string5168);
                                onSelf = true;
                                var call5186 = callmethodChecked(this, "writer", [0]);
                                var call5187 = callmethodChecked(call5186, "addText()inMode", [1, 1], opresult5185, var_code);
                                var if5188 = GraceDone;
                                setLineNumber(1386);    // compilenode identifier
                                var call5190 = callmethodChecked(var_o, "dtype", [0]);
                                var opresult5192 = callmethodChecked(call5190, "\u2260", [1], GraceFalse);
                                if (Grace_isTrue(opresult5192)) {
                                  setLineNumber(1387);    // compilenode string
                                  var string5193 = new GraceString(" -> ");
                                  onSelf = true;
                                  var call5194 = callmethodChecked(this, "writer", [0]);
                                  var call5195 = callmethodChecked(call5194, "addText()inMode", [1, 1], string5193, var_code);
                                  setLineNumber(1388);    // compilenode string
                                  var string5196 = new GraceString("");
                                  var call5198 = callmethodChecked(var_o, "dtype", [0]);
                                  var call5199 = callmethodChecked(call5198, "value", [0]);
                                  onSelf = true;
                                  var call5200 = callmethodChecked(this, "getTypeLink", [1], call5199);
                                  var string5202 = new GraceString("");
                                  var opresult5204 = callmethodChecked(string5202, "++", [1], call5200);
                                  var opresult5206 = callmethodChecked(opresult5204, "++", [1], string5196);
                                  onSelf = true;
                                  var call5207 = callmethodChecked(this, "writer", [0]);
                                  var call5208 = callmethodChecked(call5207, "addText()inMode", [1, 1], opresult5206, var_plain);
                                  if5188 = call5208;
                                }
                                setLineNumber(1390);    // compilenode call
                                onSelf = true;
                                var call5209 = callmethodChecked(this, "writer", [0]);
                                var call5210 = callmethodChecked(call5209, "addNewline", [0]);
                                setLineNumber(1391);    // compilenode string
                                var string5211 = new GraceString("description");
                                var call5212 = callmethodChecked(superDepth, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call5213 = callmethodChecked(call5212, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call5214 = callmethodChecked(call5213, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string5211, new GraceNum(2));
                                onSelf = true;
                                var call5215 = callmethodChecked(this, "writer", [0]);
                                var call5216 = callmethodChecked(call5215, "addText()inMode", [1, 1], call5214, var_plain);
                                setLineNumber(1392);    // compilenode call
                                onSelf = true;
                                var call5217 = callmethodChecked(this, "writer", [0]);
                                var call5218 = callmethodChecked(call5217, "dumpBin", [0]);
                                onSelf = true;
                                var call5219 = callmethodChecked(this, "section4", [0]);
                                var call5220 = callmethodChecked(call5219, "insert", [1], call5218);
                                if5161 = call5220;
                              }
                              var if5221 = GraceDone;
                              setLineNumber(1394);    // compilenode identifier
                              var call5222 = callmethodChecked(var_o, "isWritable", [0]);
                              if (Grace_isTrue(call5222)) {
                                setLineNumber(1395);    // compilenode call
                                onSelf = true;
                                var call5223 = callmethodChecked(this, "writer", [0]);
                                var call5224 = callmethodChecked(call5223, "addBullet", [0]);
                                setLineNumber(1396);    // compilenode string
                                var string5225 = new GraceString("var ");
                                onSelf = true;
                                var call5226 = callmethodChecked(this, "writer", [0]);
                                var call5227 = callmethodChecked(call5226, "addText()inMode", [1, 1], string5225, var_code);
                                setLineNumber(1397);    // compilenode string
                                var string5228 = new GraceString("");
                                var call5230 = callmethodChecked(var_o, "name", [0]);
                                var call5231 = callmethodChecked(call5230, "value", [0]);
                                var string5233 = new GraceString("");
                                onSelf = true;
                                var call5235 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                                var string5237 = new GraceString("");
                                var opresult5239 = callmethodChecked(string5237, "++", [1], call5235);
                                var opresult5241 = callmethodChecked(opresult5239, "++", [1], string5233);
                                var opresult5243 = callmethodChecked(opresult5241, "++", [1], call5231);
                                var opresult5245 = callmethodChecked(opresult5243, "++", [1], string5228);
                                onSelf = true;
                                var call5246 = callmethodChecked(this, "writer", [0]);
                                var call5247 = callmethodChecked(call5246, "addText()inMode", [1, 1], opresult5245, var_code);
                                var if5248 = GraceDone;
                                setLineNumber(1398);    // compilenode identifier
                                var call5250 = callmethodChecked(var_o, "dtype", [0]);
                                var opresult5252 = callmethodChecked(call5250, "\u2260", [1], GraceFalse);
                                if (Grace_isTrue(opresult5252)) {
                                  setLineNumber(1399);    // compilenode string
                                  var string5253 = new GraceString(" -> ");
                                  onSelf = true;
                                  var call5254 = callmethodChecked(this, "writer", [0]);
                                  var call5255 = callmethodChecked(call5254, "addText()inMode", [1, 1], string5253, var_code);
                                  setLineNumber(1400);    // compilenode string
                                  var string5256 = new GraceString(")");
                                  var call5258 = callmethodChecked(var_o, "dtype", [0]);
                                  var call5259 = callmethodChecked(call5258, "value", [0]);
                                  onSelf = true;
                                  var call5260 = callmethodChecked(this, "getTypeLink", [1], call5259);
                                  var string5262 = new GraceString("(_:");
                                  var opresult5264 = callmethodChecked(string5262, "++", [1], call5260);
                                  var opresult5266 = callmethodChecked(opresult5264, "++", [1], string5256);
                                  onSelf = true;
                                  var call5267 = callmethodChecked(this, "writer", [0]);
                                  var call5268 = callmethodChecked(call5267, "addText()inMode", [1, 1], opresult5266, var_plain);
                                  if5248 = call5268;
                                } else {
                                  setLineNumber(1403);    // compilenode string
                                  var string5269 = new GraceString("-> Done");
                                  onSelf = true;
                                  var call5270 = callmethodChecked(this, "writer", [0]);
                                  var call5271 = callmethodChecked(call5270, "addText()inMode", [1, 1], string5269, var_code);
                                  if5248 = call5271;
                                }
                                setLineNumber(1405);    // compilenode string
                                var string5272 = new GraceString("");
                                var string5275 = new GraceString("Updates ");
                                var opresult5277 = callmethodChecked(string5275, "++", [1], var_n);
                                var opresult5279 = callmethodChecked(opresult5277, "++", [1], string5272);
                                onSelf = true;
                                var call5280 = callmethodChecked(this, "writer", [0]);
                                var call5281 = callmethodChecked(call5280, "addText()inMode", [1, 1], opresult5279, var_code);
                                setLineNumber(1406);    // compilenode call
                                onSelf = true;
                                var call5282 = callmethodChecked(this, "writer", [0]);
                                var call5283 = callmethodChecked(call5282, "dumpBin", [0]);
                                onSelf = true;
                                var call5284 = callmethodChecked(this, "section4", [0]);
                                var call5285 = callmethodChecked(call5284, "insert", [1], call5283);
                                if5221 = call5285;
                              }
                              if5100 = if5221;
                            }
                            setLineNumber(1409);    // compilenode identifier
                            return GraceFalse;
                          }
                          setLineNumber(1330);    // return value
                          if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], if4911)))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("result of method visitVarDec(1)up(1) does not have " + 
                                      callmethod(var_Boolean, "asString", [0])._value + "."));
                          return if4911;
                        };
                        func4905.paramCounts = [1, 1];
                        obj2649.methods["visitVarDec()up"] = func4905;
                        func4905.definitionLine = 1328;
                        func4905.definitionModule = "gracedocMD";
                        var func5286 = function(argcv) {    // method visitInherits(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_o = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitInherits(1)"));
                          setModuleName("gracedocMD");
                          setLineNumber(1417);    // compilenode identifier
                          return GraceTrue;
                        };
                        func5286.paramCounts = [1];
                        obj2649.methods["visitInherits"] = func5286;
                        func5286.definitionLine = 1413;
                        func5286.definitionModule = "gracedocMD";
                        setLineNumber(614);    // compilenode identifier
                        var call5287 = callmethodChecked(var_ast, "baseVisitor()object", [0, 1], this);
                        obj2649.superobj = call5287;
                        if (call5287.data) obj2649.data = call5287.data;
                        if (call5287.hasOwnProperty('_value'))
                            obj2649._value = call5287._value;
                        setLineNumber(616);    // compilenode identifier
                        obj2649.data["isOnClassPage"] = GraceFalse;
                        var reader_gracedocMD_isOnClassPage5288 = function() {
                          return this.data["isOnClassPage"];
                        };
                        obj2649.methods["isOnClassPage"] = reader_gracedocMD_isOnClassPage5288;
                        obj2649.data["isOnClassPage"] = GraceFalse;
                        var writer_gracedocMD_isOnClassPage5288 = function(argcv, o) {
                          this.data["isOnClassPage"] = o;
                          return GraceDone;
                        };
                        obj2649.methods["isOnClassPage:="] = writer_gracedocMD_isOnClassPage5288;
                        reader_gracedocMD_isOnClassPage5288.confidential = true;
                        writer_gracedocMD_isOnClassPage5288.confidential = true;
                        obj2649.mutable = true;
                        setLineNumber(617);    // compilenode identifier
                        obj2649.data["isOnTypePage"] = GraceFalse;
                        var reader_gracedocMD_isOnTypePage5289 = function() {
                          return this.data["isOnTypePage"];
                        };
                        obj2649.methods["isOnTypePage"] = reader_gracedocMD_isOnTypePage5289;
                        obj2649.data["isOnTypePage"] = GraceFalse;
                        var writer_gracedocMD_isOnTypePage5289 = function(argcv, o) {
                          this.data["isOnTypePage"] = o;
                          return GraceDone;
                        };
                        obj2649.methods["isOnTypePage:="] = writer_gracedocMD_isOnTypePage5289;
                        reader_gracedocMD_isOnTypePage5289.confidential = true;
                        writer_gracedocMD_isOnTypePage5289.confidential = true;
                        obj2649.mutable = true;
                        var if5290 = GraceDone;
                        setLineNumber(618);    // compilenode string
                        var string5291 = new GraceString("class");
                        var opresult5294 = callmethodChecked(var_pageType, "==", [1], string5291);
                        if (Grace_isTrue(opresult5294)) {
                          onSelf = true;
                          var call5295 = callmethodChecked(this, "isOnClassPage:=", [1], GraceTrue);
                          if5290 = call5295;
                        } else {
                          var if5296 = GraceDone;
                          setLineNumber(619);    // compilenode string
                          var string5297 = new GraceString("type");
                          var opresult5300 = callmethodChecked(var_pageType, "==", [1], string5297);
                          if (Grace_isTrue(opresult5300)) {
                            onSelf = true;
                            var call5301 = callmethodChecked(this, "isOnTypePage:=", [1], GraceTrue);
                            if5296 = call5301;
                          }
                          if5290 = if5296;
                        }
                        var if5302 = GraceDone;
                        setLineNumber(621);    // compilenode string
                        var string5303 = new GraceString(".grace");
                        var call5304 = callmethodChecked(var_in, "endsWith", [1], string5303);
                        var call5305 = callmethodChecked(call5304, "not", [0]);
                        if (Grace_isTrue(call5305)) {
                          if5302 = var_in;
                        } else {
                          setLineNumber(622);    // compilenode identifier
                          var call5307 = callmethodChecked(var_in, "size", [0]);
                          var diff5309 = callmethodChecked(call5307, "-", [1], new GraceNum(6));
                          var call5310 = callmethodChecked(var_in, "substringFrom()to", [1, 1], new GraceNum(0), diff5309);
                          if5302 = call5310;
                        }
                        obj2649.data["pageName"] = if5302;
                        var reader_gracedocMD_pageName5311 = function() {
                          return this.data["pageName"];
                        };
                        reader_gracedocMD_pageName5311.def = true;
                        reader_gracedocMD_pageName5311.confidential = true;
                        obj2649.methods["pageName"] = reader_gracedocMD_pageName5311;
                        var if5312 = GraceDone;
                        setLineNumber(623);    // compilenode call
                        onSelf = true;
                        var call5313 = callmethodChecked(this, "isOnTypePage", [0]);
                        if (Grace_isTrue(call5313)) {
                          var string5314 = new GraceString("");
                          onSelf = true;
                          var call5316 = callmethodChecked(this, "pageName", [0]);
                          var string5318 = new GraceString("Type: ");
                          var opresult5320 = callmethodChecked(string5318, "++", [1], call5316);
                          var opresult5322 = callmethodChecked(opresult5320, "++", [1], string5314);
                          if5312 = opresult5322;
                        } else {
                          var if5323 = GraceDone;
                          setLineNumber(624);    // compilenode call
                          onSelf = true;
                          var call5324 = callmethodChecked(this, "isOnClassPage", [0]);
                          if (Grace_isTrue(call5324)) {
                            var string5325 = new GraceString("");
                            onSelf = true;
                            var call5327 = callmethodChecked(this, "pageName", [0]);
                            var string5329 = new GraceString("Class: ");
                            var opresult5331 = callmethodChecked(string5329, "++", [1], call5327);
                            var opresult5333 = callmethodChecked(opresult5331, "++", [1], string5325);
                            if5323 = opresult5333;
                          } else {
                            setLineNumber(625);    // compilenode string
                            var string5334 = new GraceString("");
                            onSelf = true;
                            var call5336 = callmethodChecked(this, "pageName", [0]);
                            var string5338 = new GraceString("Module: ");
                            var opresult5340 = callmethodChecked(string5338, "++", [1], call5336);
                            var opresult5342 = callmethodChecked(opresult5340, "++", [1], string5334);
                            if5323 = opresult5342;
                          }
                          if5312 = if5323;
                        }
                        obj2649.data["title"] = if5312;
                        var reader_gracedocMD_title5343 = function() {
                          return this.data["title"];
                        };
                        reader_gracedocMD_title5343.def = true;
                        reader_gracedocMD_title5343.confidential = true;
                        obj2649.methods["title"] = reader_gracedocMD_title5343;
                        obj2649.data["section1"] = undefined;
                        var reader_gracedocMD_section15344 = function() {
                          return this.data["section1"];
                        };
                        obj2649.methods["section1"] = reader_gracedocMD_section15344;
                        obj2649.data["section1"] = undefined;
                        var writer_gracedocMD_section15344 = function(argcv, o) {
                          this.data["section1"] = o;
                          return GraceDone;
                        };
                        obj2649.methods["section1:="] = writer_gracedocMD_section15344;
                        reader_gracedocMD_section15344.confidential = true;
                        writer_gracedocMD_section15344.confidential = true;
                        obj2649.mutable = true;
                        obj2649.data["section2"] = undefined;
                        var reader_gracedocMD_section25345 = function() {
                          return this.data["section2"];
                        };
                        obj2649.methods["section2"] = reader_gracedocMD_section25345;
                        obj2649.data["section2"] = undefined;
                        var writer_gracedocMD_section25345 = function(argcv, o) {
                          this.data["section2"] = o;
                          return GraceDone;
                        };
                        obj2649.methods["section2:="] = writer_gracedocMD_section25345;
                        reader_gracedocMD_section25345.confidential = true;
                        writer_gracedocMD_section25345.confidential = true;
                        obj2649.mutable = true;
                        obj2649.data["section3"] = undefined;
                        var reader_gracedocMD_section35346 = function() {
                          return this.data["section3"];
                        };
                        obj2649.methods["section3"] = reader_gracedocMD_section35346;
                        obj2649.data["section3"] = undefined;
                        var writer_gracedocMD_section35346 = function(argcv, o) {
                          this.data["section3"] = o;
                          return GraceDone;
                        };
                        obj2649.methods["section3:="] = writer_gracedocMD_section35346;
                        reader_gracedocMD_section35346.confidential = true;
                        writer_gracedocMD_section35346.confidential = true;
                        obj2649.mutable = true;
                        obj2649.data["section4"] = undefined;
                        var reader_gracedocMD_section45347 = function() {
                          return this.data["section4"];
                        };
                        obj2649.methods["section4"] = reader_gracedocMD_section45347;
                        obj2649.data["section4"] = undefined;
                        var writer_gracedocMD_section45347 = function(argcv, o) {
                          this.data["section4"] = o;
                          return GraceDone;
                        };
                        obj2649.methods["section4:="] = writer_gracedocMD_section45347;
                        reader_gracedocMD_section45347.confidential = true;
                        writer_gracedocMD_section45347.confidential = true;
                        obj2649.mutable = true;
                        obj2649.data["section5"] = undefined;
                        var reader_gracedocMD_section55348 = function() {
                          return this.data["section5"];
                        };
                        obj2649.methods["section5"] = reader_gracedocMD_section55348;
                        obj2649.data["section5"] = undefined;
                        var writer_gracedocMD_section55348 = function(argcv, o) {
                          this.data["section5"] = o;
                          return GraceDone;
                        };
                        obj2649.methods["section5:="] = writer_gracedocMD_section55348;
                        reader_gracedocMD_section55348.confidential = true;
                        writer_gracedocMD_section55348.confidential = true;
                        obj2649.mutable = true;
                        obj2649.data["footerSection"] = undefined;
                        var reader_gracedocMD_footerSection5349 = function() {
                          return this.data["footerSection"];
                        };
                        obj2649.methods["footerSection"] = reader_gracedocMD_footerSection5349;
                        obj2649.data["footerSection"] = undefined;
                        var writer_gracedocMD_footerSection5349 = function(argcv, o) {
                          this.data["footerSection"] = o;
                          return GraceDone;
                        };
                        obj2649.methods["footerSection:="] = writer_gracedocMD_footerSection5349;
                        reader_gracedocMD_footerSection5349.confidential = true;
                        writer_gracedocMD_footerSection5349.confidential = true;
                        obj2649.mutable = true;
                        obj2649.data["methodtypesSection"] = undefined;
                        var reader_gracedocMD_methodtypesSection5350 = function() {
                          return this.data["methodtypesSection"];
                        };
                        obj2649.methods["methodtypesSection"] = reader_gracedocMD_methodtypesSection5350;
                        obj2649.data["methodtypesSection"] = undefined;
                        var writer_gracedocMD_methodtypesSection5350 = function(argcv, o) {
                          this.data["methodtypesSection"] = o;
                          return GraceDone;
                        };
                        obj2649.methods["methodtypesSection:="] = writer_gracedocMD_methodtypesSection5350;
                        reader_gracedocMD_methodtypesSection5350.confidential = true;
                        writer_gracedocMD_methodtypesSection5350.confidential = true;
                        obj2649.mutable = true;
                        obj2649.data["section6"] = undefined;
                        var reader_gracedocMD_section65351 = function() {
                          return this.data["section6"];
                        };
                        obj2649.methods["section6"] = reader_gracedocMD_section65351;
                        obj2649.data["section6"] = undefined;
                        var writer_gracedocMD_section65351 = function(argcv, o) {
                          this.data["section6"] = o;
                          return GraceDone;
                        };
                        obj2649.methods["section6:="] = writer_gracedocMD_section65351;
                        reader_gracedocMD_section65351.confidential = true;
                        writer_gracedocMD_section65351.confidential = true;
                        obj2649.mutable = true;
                        setLineNumber(634);    // compilenode call
                        var call5352 = callmethodChecked(superDepth, "outer", [0]);
                        onOuter = true;
                        onSelf = true;
                        var call5353 = callmethodChecked(call5352, "outer", [0]);
                        onOuter = true;
                        onSelf = true;
                        var call5354 = callmethodChecked(call5353, "markdownWriter", [0]);
                        obj2649.data["writer"] = call5354;
                        var reader_gracedocMD_writer5355 = function() {
                          return this.data["writer"];
                        };
                        obj2649.methods["writer"] = reader_gracedocMD_writer5355;
                        obj2649.data["writer"] = call5354;
                        var writer_gracedocMD_writer5355 = function(argcv, o) {
                          this.data["writer"] = o;
                          return GraceDone;
                        };
                        obj2649.methods["writer:="] = writer_gracedocMD_writer5355;
                        reader_gracedocMD_writer5355.confidential = true;
                        writer_gracedocMD_writer5355.confidential = true;
                        obj2649.mutable = true;
                        var if5356 = GraceDone;
                        setLineNumber(636);    // compilenode call
                        onSelf = true;
                        var call5357 = callmethodChecked(this, "isOnTypePage", [0]);
                        onSelf = true;
                        var call5359 = callmethodChecked(this, "isOnClassPage", [0]);
                        var opresult5361 = callmethodChecked(call5359, "||", [1], call5357);
                        if (Grace_isTrue(opresult5361)) {
                          if5356 = var_dir;
                        } else {
                          onSelf = true;
                          var call5362 = callmethodChecked(this, "pageName", [0]);
                          if5356 = call5362;
                        }
                        obj2649.data["outdir"] = if5356;
                        var reader_gracedocMD_outdir5363 = function() {
                          return this.data["outdir"];
                        };
                        reader_gracedocMD_outdir5363.def = true;
                        reader_gracedocMD_outdir5363.confidential = true;
                        obj2649.methods["outdir"] = reader_gracedocMD_outdir5363;
                        var if5364 = GraceDone;
                        setLineNumber(639);    // compilenode identifier
                        var call5366 = callmethodChecked(var_settings, "verbosity", [0]);
                        var opresult5368 = callmethodChecked(call5366, ">", [1], new GraceNum(1));
                        if (Grace_isTrue(opresult5368)) {
                          var string5369 = new GraceString(")");
                          var call5371 = callmethodChecked(var_sys, "elapsedTime", [0]);
                          var string5373 = new GraceString(" at time: (");
                          onSelf = true;
                          var call5375 = callmethodChecked(this, "outdir", [0]);
                          var string5377 = new GraceString(" - graceDocVisitor created... inMod ");
                          onSelf = true;
                          var call5379 = callmethodChecked(this, "title", [0]);
                          var string5381 = new GraceString("On ");
                          var opresult5383 = callmethodChecked(string5381, "++", [1], call5379);
                          var opresult5385 = callmethodChecked(opresult5383, "++", [1], string5377);
                          var opresult5387 = callmethodChecked(opresult5385, "++", [1], call5375);
                          var opresult5389 = callmethodChecked(opresult5387, "++", [1], string5373);
                          var opresult5391 = callmethodChecked(opresult5389, "++", [1], call5371);
                          var opresult5393 = callmethodChecked(opresult5391, "++", [1], string5369);
                          var call5394 = Grace_print(opresult5393);
                          if5364 = call5394;
                        }
                        setLineNumber(642);    // compilenode call
                        onSelf = true;
                        var call5395 = callmethodChecked(this, "buildTemplate", [0]);
                        superDepth = origSuperDepth;
                      };
                      obj_init_2649.apply(obj2649, []);
                      return obj2649;
                    };
                    func2648.paramCounts = [1, 1, 1];
                    obj2646.methods["createFrom()outTo()as"] = func2648;
                    func2648.definitionLine = 613;
                    func2648.definitionModule = "gracedocMD";
                      var func5396 = function(argcv) {    // method createFrom(1     )outTo(1     )as(1     )()object
                        var curarg = 1;
                        var var_in = arguments[curarg];
                        curarg++;
                        var var_dir = arguments[curarg];
                        curarg++;
                        var var_pageType = arguments[curarg];
                        curarg++;
                        var inheritingObject = arguments[curarg++];
                        // Start argument processing
                        curarg = 1;
                        curarg++;
                        curarg++;
                        curarg++;
                        // End argument processing
                        setModuleName("gracedocMD");
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var obj5397 = Grace_allocObject(null, "createFrom()outTo()as");
                        obj5397.definitionModule = "gracedocMD";
                        obj5397.definitionLine = 613;
                        var inho5397 = inheritingObject;
                        while (inho5397.superobj) inho5397 = inho5397.superobj;
                        inho5397.superobj = obj5397;
                        obj5397.data = inheritingObject.data;
                        if (inheritingObject.hasOwnProperty('_value'))
                          obj5397._value = inheritingObject._value;
                        obj5397.outer = this;
                        var reader_gracedocMD_outer5398 = function() {
                          return this.outer;
                        };
                        obj5397.methods["outer"] = reader_gracedocMD_outer5398;
                        var obj_init_5397 = function() {
                          var origSuperDepth = superDepth;
                          superDepth = obj5397;
                          var func5399 = function(argcv) {    // method getTypeLink(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_v = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for getTypeLink(1)"));
                            // Start argument checking
                            curarg = 1;
                            setLineNumber(649);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in getTypeLink (arg list 1), which corresponds to parameter v, does not have " + 
                                        callmethod(var_String, "asString", [0])._value + "."));
                            curarg++;
                            // End argument checking
                            setModuleName("gracedocMD");
                            setLineNumber(650);    // compilenode string
                            var string5400 = new GraceString("");
                            var string5403 = new GraceString("");
                            var opresult5405 = callmethodChecked(string5403, "++", [1], var_v);
                            var opresult5407 = callmethodChecked(opresult5405, "++", [1], string5400);
                            var var_filename = opresult5407;
                            setLineNumber(651);    // compilenode string
                            var string5408 = new GraceString("`](");
                            var string5411 = new GraceString("[`");
                            var opresult5413 = callmethodChecked(string5411, "++", [1], var_v);
                            var opresult5415 = callmethodChecked(opresult5413, "++", [1], string5408);
                            var var_out = opresult5415;
                            var if5416 = GraceDone;
                            setLineNumber(653);    // compilenode string
                            var string5417 = new GraceString(".md");
                            var string5420 = new GraceString("/");
                            onSelf = true;
                            var call5422 = callmethodChecked(this, "outdir", [0]);
                            var string5424 = new GraceString("/");
                            var call5426 = callmethodChecked(var_settings, "outputdir", [0]);
                            var string5428 = new GraceString("");
                            var opresult5430 = callmethodChecked(string5428, "++", [1], call5426);
                            var opresult5432 = callmethodChecked(opresult5430, "++", [1], string5424);
                            var opresult5434 = callmethodChecked(opresult5432, "++", [1], call5422);
                            var opresult5436 = callmethodChecked(opresult5434, "++", [1], string5420);
                            var opresult5438 = callmethodChecked(opresult5436, "++", [1], var_filename);
                            var opresult5440 = callmethodChecked(opresult5438, "++", [1], string5417);
                            var call5441 = callmethodChecked(var_io, "exists", [1], opresult5440);
                            if (Grace_isTrue(call5441)) {
                              setLineNumber(654);    // compilenode string
                              var string5442 = new GraceString("");
                              var string5445 = new GraceString("");
                              var string5448 = new GraceString("");
                              var opresult5450 = callmethodChecked(string5448, "++", [1], var_baseUrl);
                              var opresult5452 = callmethodChecked(opresult5450, "++", [1], string5445);
                              var opresult5454 = callmethodChecked(opresult5452, "++", [1], var_filename);
                              var opresult5456 = callmethodChecked(opresult5454, "++", [1], string5442);
                              var opresult5459 = callmethodChecked(var_out, "++", [1], opresult5456);
                              var_out = opresult5459;
                              if5416 = GraceDone;
                            } else {
                              var if5460 = GraceDone;
                              setLineNumber(656);    // compilenode string
                              var string5461 = new GraceString(".md");
                              var string5464 = new GraceString("/imported/types/");
                              var call5466 = callmethodChecked(var_settings, "outputdir", [0]);
                              var string5468 = new GraceString("");
                              var opresult5470 = callmethodChecked(string5468, "++", [1], call5466);
                              var opresult5472 = callmethodChecked(opresult5470, "++", [1], string5464);
                              var opresult5474 = callmethodChecked(opresult5472, "++", [1], var_filename);
                              var opresult5476 = callmethodChecked(opresult5474, "++", [1], string5461);
                              var call5477 = callmethodChecked(var_io, "exists", [1], opresult5476);
                              if (Grace_isTrue(call5477)) {
                                setLineNumber(657);    // compilenode string
                                var string5478 = new GraceString("");
                                var string5481 = new GraceString("");
                                var string5484 = new GraceString("");
                                var opresult5486 = callmethodChecked(string5484, "++", [1], var_baseUrl);
                                var opresult5488 = callmethodChecked(opresult5486, "++", [1], string5481);
                                var opresult5490 = callmethodChecked(opresult5488, "++", [1], var_filename);
                                var opresult5492 = callmethodChecked(opresult5490, "++", [1], string5478);
                                var opresult5495 = callmethodChecked(var_out, "++", [1], opresult5492);
                                var_out = opresult5495;
                                if5460 = GraceDone;
                              } else {
                                var if5496 = GraceDone;
                                setLineNumber(659);    // compilenode string
                                var string5497 = new GraceString(".md");
                                var string5500 = new GraceString("/gracelib/types/");
                                var call5502 = callmethodChecked(var_settings, "outputdir", [0]);
                                var string5504 = new GraceString("");
                                var opresult5506 = callmethodChecked(string5504, "++", [1], call5502);
                                var opresult5508 = callmethodChecked(opresult5506, "++", [1], string5500);
                                var opresult5510 = callmethodChecked(opresult5508, "++", [1], var_filename);
                                var opresult5512 = callmethodChecked(opresult5510, "++", [1], string5497);
                                var call5513 = callmethodChecked(var_io, "exists", [1], opresult5512);
                                if (Grace_isTrue(call5513)) {
                                  setLineNumber(660);    // compilenode string
                                  var string5514 = new GraceString("");
                                  var string5517 = new GraceString("");
                                  var string5520 = new GraceString("");
                                  var opresult5522 = callmethodChecked(string5520, "++", [1], var_baseUrl);
                                  var opresult5524 = callmethodChecked(opresult5522, "++", [1], string5517);
                                  var opresult5526 = callmethodChecked(opresult5524, "++", [1], var_filename);
                                  var opresult5528 = callmethodChecked(opresult5526, "++", [1], string5514);
                                  var opresult5531 = callmethodChecked(var_out, "++", [1], opresult5528);
                                  var_out = opresult5531;
                                  if5496 = GraceDone;
                                } else {
                                  setLineNumber(662);    // compilenode string
                                  var string5532 = new GraceString("404");
                                  var string5535 = new GraceString("");
                                  var opresult5537 = callmethodChecked(string5535, "++", [1], var_baseUrl);
                                  var opresult5539 = callmethodChecked(opresult5537, "++", [1], string5532);
                                  var opresult5542 = callmethodChecked(var_out, "++", [1], opresult5539);
                                  var_out = opresult5542;
                                  if5496 = GraceDone;
                                }
                                if5460 = if5496;
                              }
                              if5416 = if5460;
                            }
                            setLineNumber(666);    // compilenode string
                            var string5543 = new GraceString(")");
                            var opresult5546 = callmethodChecked(var_out, "++", [1], string5543);
                            var_out = opresult5546;
                            setLineNumber(667);    // compilenode identifier
                            return var_out;
                          };
                          func5399.paramTypes = [];
                          func5399.paramTypes.push([type_String, "v"]);
                          func5399.confidential = true;
                          func5399.paramCounts = [1];
                          obj5397.methods["getTypeLink"] = func5399;
                          func5399.definitionLine = 649;
                          func5399.definitionModule = "gracedocMD";
                          var func5547 = function(argcv) {    // method getClassLink(1)show(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_c = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for getClassLink (arg list 1) of getClassLink(1)show(1)"));
                            var var_rep = arguments[curarg];
                            curarg++;
                            if (argcv[1] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for show (arg list 2) of getClassLink(1)show(1)"));
                            // Start argument checking
                            curarg = 1;
                            setLineNumber(669);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in getClassLink (arg list 1), which corresponds to parameter c, does not have " + 
                                        callmethod(var_String, "asString", [0])._value + "."));
                            curarg++;
                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in show (arg list 2), which corresponds to parameter rep, does not have " + 
                                        callmethod(var_String, "asString", [0])._value + "."));
                            curarg++;
                            // End argument checking
                            setModuleName("gracedocMD");
                            setLineNumber(670);    // compilenode string
                            var string5548 = new GraceString("");
                            var string5551 = new GraceString("");
                            var opresult5553 = callmethodChecked(string5551, "++", [1], var_c);
                            var opresult5555 = callmethodChecked(opresult5553, "++", [1], string5548);
                            var var_filename = opresult5555;
                            setLineNumber(671);    // compilenode string
                            var string5556 = new GraceString("`](");
                            var string5559 = new GraceString("[`");
                            var opresult5561 = callmethodChecked(string5559, "++", [1], var_c);
                            var opresult5563 = callmethodChecked(opresult5561, "++", [1], string5556);
                            var var_out = opresult5563;
                            var if5564 = GraceDone;
                            setLineNumber(673);    // compilenode string
                            var string5565 = new GraceString(".md");
                            var string5568 = new GraceString("/");
                            onSelf = true;
                            var call5570 = callmethodChecked(this, "outdir", [0]);
                            var string5572 = new GraceString("/");
                            var call5574 = callmethodChecked(var_settings, "outputdir", [0]);
                            var string5576 = new GraceString("");
                            var opresult5578 = callmethodChecked(string5576, "++", [1], call5574);
                            var opresult5580 = callmethodChecked(opresult5578, "++", [1], string5572);
                            var opresult5582 = callmethodChecked(opresult5580, "++", [1], call5570);
                            var opresult5584 = callmethodChecked(opresult5582, "++", [1], string5568);
                            var opresult5586 = callmethodChecked(opresult5584, "++", [1], var_filename);
                            var opresult5588 = callmethodChecked(opresult5586, "++", [1], string5565);
                            var call5589 = callmethodChecked(var_io, "exists", [1], opresult5588);
                            if (Grace_isTrue(call5589)) {
                              setLineNumber(674);    // compilenode string
                              var string5590 = new GraceString("");
                              var string5593 = new GraceString("");
                              var string5596 = new GraceString("");
                              var opresult5598 = callmethodChecked(string5596, "++", [1], var_baseUrl);
                              var opresult5600 = callmethodChecked(opresult5598, "++", [1], string5593);
                              var opresult5602 = callmethodChecked(opresult5600, "++", [1], var_filename);
                              var opresult5604 = callmethodChecked(opresult5602, "++", [1], string5590);
                              var opresult5607 = callmethodChecked(var_out, "++", [1], opresult5604);
                              var_out = opresult5607;
                              if5564 = GraceDone;
                            } else {
                              var if5608 = GraceDone;
                              setLineNumber(676);    // compilenode string
                              var string5609 = new GraceString(".md");
                              var string5612 = new GraceString("/imported/classes/");
                              var call5614 = callmethodChecked(var_settings, "outputdir", [0]);
                              var string5616 = new GraceString("");
                              var opresult5618 = callmethodChecked(string5616, "++", [1], call5614);
                              var opresult5620 = callmethodChecked(opresult5618, "++", [1], string5612);
                              var opresult5622 = callmethodChecked(opresult5620, "++", [1], var_filename);
                              var opresult5624 = callmethodChecked(opresult5622, "++", [1], string5609);
                              var call5625 = callmethodChecked(var_io, "exists", [1], opresult5624);
                              if (Grace_isTrue(call5625)) {
                                setLineNumber(677);    // compilenode string
                                var string5626 = new GraceString("");
                                var string5629 = new GraceString("");
                                var string5632 = new GraceString("");
                                var opresult5634 = callmethodChecked(string5632, "++", [1], var_baseUrl);
                                var opresult5636 = callmethodChecked(opresult5634, "++", [1], string5629);
                                var opresult5638 = callmethodChecked(opresult5636, "++", [1], var_filename);
                                var opresult5640 = callmethodChecked(opresult5638, "++", [1], string5626);
                                var opresult5643 = callmethodChecked(var_out, "++", [1], opresult5640);
                                var_out = opresult5643;
                                if5608 = GraceDone;
                              } else {
                                var if5644 = GraceDone;
                                setLineNumber(679);    // compilenode string
                                var string5645 = new GraceString(".md");
                                var string5648 = new GraceString("/gracelib/classes/");
                                var call5650 = callmethodChecked(var_settings, "outputdir", [0]);
                                var string5652 = new GraceString("");
                                var opresult5654 = callmethodChecked(string5652, "++", [1], call5650);
                                var opresult5656 = callmethodChecked(opresult5654, "++", [1], string5648);
                                var opresult5658 = callmethodChecked(opresult5656, "++", [1], var_filename);
                                var opresult5660 = callmethodChecked(opresult5658, "++", [1], string5645);
                                var call5661 = callmethodChecked(var_io, "exists", [1], opresult5660);
                                if (Grace_isTrue(call5661)) {
                                  setLineNumber(680);    // compilenode string
                                  var string5662 = new GraceString("");
                                  var string5665 = new GraceString("");
                                  var string5668 = new GraceString("");
                                  var opresult5670 = callmethodChecked(string5668, "++", [1], var_baseUrl);
                                  var opresult5672 = callmethodChecked(opresult5670, "++", [1], string5665);
                                  var opresult5674 = callmethodChecked(opresult5672, "++", [1], var_filename);
                                  var opresult5676 = callmethodChecked(opresult5674, "++", [1], string5662);
                                  var opresult5679 = callmethodChecked(var_out, "++", [1], opresult5676);
                                  var_out = opresult5679;
                                  if5644 = GraceDone;
                                } else {
                                  setLineNumber(682);    // compilenode string
                                  var string5680 = new GraceString("404");
                                  var string5683 = new GraceString("");
                                  var opresult5685 = callmethodChecked(string5683, "++", [1], var_baseUrl);
                                  var opresult5687 = callmethodChecked(opresult5685, "++", [1], string5680);
                                  var opresult5690 = callmethodChecked(var_out, "++", [1], opresult5687);
                                  var_out = opresult5690;
                                  if5644 = GraceDone;
                                }
                                if5608 = if5644;
                              }
                              if5564 = if5608;
                            }
                            setLineNumber(686);    // compilenode string
                            var string5691 = new GraceString(")");
                            var opresult5694 = callmethodChecked(var_out, "++", [1], string5691);
                            var_out = opresult5694;
                            setLineNumber(687);    // compilenode identifier
                            return var_out;
                          };
                          func5547.paramTypes = [];
                          func5547.paramTypes.push([type_String, "c"]);
                          func5547.paramTypes.push([type_String, "rep"]);
                          func5547.paramCounts = [1, 1];
                          obj5397.methods["getClassLink()show"] = func5547;
                          func5547.definitionLine = 669;
                          func5547.definitionModule = "gracedocMD";
                          var func5695 = function(argcv) {    // method getClassLink(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_c = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for getClassLink(1)"));
                            // Start argument checking
                            curarg = 1;
                            setLineNumber(689);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in getClassLink (arg list 1), which corresponds to parameter c, does not have " + 
                                        callmethod(var_String, "asString", [0])._value + "."));
                            curarg++;
                            // End argument checking
                            setModuleName("gracedocMD");
                            setLineNumber(690);    // compilenode identifier
                            onSelf = true;
                            var call5696 = callmethodChecked(this, "getClassLink()show", [1, 1], var_c, var_c);
                            return call5696;
                          };
                          func5695.paramTypes = [];
                          func5695.paramTypes.push([type_String, "c"]);
                          func5695.confidential = true;
                          func5695.paramCounts = [1];
                          obj5397.methods["getClassLink"] = func5695;
                          func5695.definitionLine = 689;
                          func5695.definitionModule = "gracedocMD";
                          var func5697 = function(argcv) {    // method buildTemplate
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            if (argcv[0] !== 0)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for buildTemplate"));
                            setModuleName("gracedocMD");
                            setLineNumber(694);    // compilenode num
                            var var_cursor = new GraceNum(0);
                            setLineNumber(695);    // compilenode string
                            var string5698 = new GraceString("---\n");
                            var var_out = string5698;
                            setLineNumber(696);    // compilenode num
                            var var_classIndex = new GraceNum(0);
                            setLineNumber(697);    // compilenode num
                            var var_typeIndex = new GraceNum(0);
                            setLineNumber(698);    // compilenode call
                            var call5699 = callmethodChecked(superDepth, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call5700 = callmethodChecked(call5699, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call5701 = callmethodChecked(call5700, "markdownWriter", [0]);
                            var var_localWriter = call5701;
                            setLineNumber(702);    // compilenode string
                            var string5702 = new GraceString("");
                            onSelf = true;
                            var call5704 = callmethodChecked(this, "title", [0]);
                            var string5706 = new GraceString("");
                            var opresult5708 = callmethodChecked(string5706, "++", [1], call5704);
                            var opresult5710 = callmethodChecked(opresult5708, "++", [1], string5702);
                            var var_permalink = opresult5710;
                            if (!Grace_isTrue(callmethod(var_String, "match", [1], var_permalink)))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("initial value of var 'permalink' is not of type String"));
                            setLineNumber(705);    // compilenode string
                            var string5711 = new GraceString("Class:");
                            var string5712 = new GraceString("");
                            var call5713 = callmethodChecked(var_permalink, "replace()with", [1, 1], string5711, string5712);
                            var_permalink = call5713;
                            setLineNumber(706);    // compilenode string
                            var string5714 = new GraceString("Type:");
                            var string5715 = new GraceString("");
                            var call5716 = callmethodChecked(var_permalink, "replace()with", [1, 1], string5714, string5715);
                            var_permalink = call5716;
                            setLineNumber(709);    // compilenode string
                            var string5717 = new GraceString(" ");
                            var string5718 = new GraceString("");
                            var call5719 = callmethodChecked(var_permalink, "replace()with", [1, 1], string5717, string5718);
                            var_permalink = call5719;
                            setLineNumber(712);    // compilenode string
                            var string5720 = new GraceString("\"\n");
                            onSelf = true;
                            var call5722 = callmethodChecked(this, "title", [0]);
                            var string5724 = new GraceString("title: \"");
                            var opresult5726 = callmethodChecked(string5724, "++", [1], call5722);
                            var opresult5728 = callmethodChecked(opresult5726, "++", [1], string5720);
                            var opresult5731 = callmethodChecked(var_out, "++", [1], opresult5728);
                            var_out = opresult5731;
                            setLineNumber(713);    // compilenode string
                            var string5732 = new GraceString("keywords: mydoc\n");
                            var opresult5735 = callmethodChecked(var_out, "++", [1], string5732);
                            var_out = opresult5735;
                            setLineNumber(714);    // compilenode string
                            var string5736 = new GraceString("sidebar: grace-doc-sidebar\n");
                            var opresult5739 = callmethodChecked(var_out, "++", [1], string5736);
                            var_out = opresult5739;
                            setLineNumber(715);    // compilenode string
                            var string5740 = new GraceString("toc: false\n");
                            var opresult5743 = callmethodChecked(var_out, "++", [1], string5740);
                            var_out = opresult5743;
                            setLineNumber(716);    // compilenode string
                            var string5744 = new GraceString("/\n");
                            var string5747 = new GraceString("permalink: /");
                            var opresult5749 = callmethodChecked(string5747, "++", [1], var_permalink);
                            var opresult5751 = callmethodChecked(opresult5749, "++", [1], string5744);
                            var opresult5754 = callmethodChecked(var_out, "++", [1], opresult5751);
                            var_out = opresult5754;
                            setLineNumber(717);    // compilenode string
                            var string5755 = new GraceString("folder: grace-docs\n");
                            var opresult5758 = callmethodChecked(var_out, "++", [1], string5755);
                            var_out = opresult5758;
                            setLineNumber(718);    // compilenode string
                            var string5759 = new GraceString("---\n");
                            var opresult5762 = callmethodChecked(var_out, "++", [1], string5759);
                            var_out = opresult5762;
                            var if5763 = GraceDone;
                            setLineNumber(721);    // compilenode string
                            var string5764 = new GraceString("Class:");
                            onSelf = true;
                            var call5765 = callmethodChecked(this, "title", [0]);
                            var call5766 = callmethodChecked(call5765, "contains", [1], string5764);
                            if (Grace_isTrue(call5766)) {
                              setLineNumber(723);    // compilenode call
                              onSelf = true;
                              var call5767 = callmethodChecked(this, "title", [0]);
                              onSelf = true;
                              var call5768 = callmethodChecked(this, "outdir", [0]);
                              var call5769 = callmethodChecked(var_sidebarGen, "addFile()withLink()toList()inModule", [1, 1, 1, 1], call5767, var_permalink, var_classList, call5768);
                              setLineNumber(724);    // compilenode string
                              var string5770 = new GraceString("");
                              onSelf = true;
                              var call5772 = callmethodChecked(this, "outdir", [0]);
                              var string5774 = new GraceString(" in module ");
                              var string5777 = new GraceString(" to ");
                              onSelf = true;
                              var call5779 = callmethodChecked(this, "title", [0]);
                              var string5781 = new GraceString("\nadded ");
                              var opresult5783 = callmethodChecked(string5781, "++", [1], call5779);
                              var opresult5785 = callmethodChecked(opresult5783, "++", [1], string5777);
                              var opresult5787 = callmethodChecked(opresult5785, "++", [1], var_classList);
                              var opresult5789 = callmethodChecked(opresult5787, "++", [1], string5774);
                              var opresult5791 = callmethodChecked(opresult5789, "++", [1], call5772);
                              var opresult5793 = callmethodChecked(opresult5791, "++", [1], string5770);
                              var call5794 = Grace_print(opresult5793);
                              if5763 = call5794;
                            } else {
                              var if5795 = GraceDone;
                              setLineNumber(726);    // compilenode string
                              var string5796 = new GraceString("Type:");
                              onSelf = true;
                              var call5797 = callmethodChecked(this, "title", [0]);
                              var call5798 = callmethodChecked(call5797, "contains", [1], string5796);
                              if (Grace_isTrue(call5798)) {
                                setLineNumber(728);    // compilenode call
                                onSelf = true;
                                var call5799 = callmethodChecked(this, "title", [0]);
                                onSelf = true;
                                var call5800 = callmethodChecked(this, "outdir", [0]);
                                var call5801 = callmethodChecked(var_sidebarGen, "addFile()withLink()toList()inModule", [1, 1, 1, 1], call5799, var_permalink, var_typeList, call5800);
                                if5795 = call5801;
                              }
                              if5763 = if5795;
                            }
                            var if5802 = GraceDone;
                            setLineNumber(732);    // compilenode call
                            onSelf = true;
                            var call5803 = callmethodChecked(this, "isOnClassPage", [0]);
                            if (Grace_isTrue(call5803)) {
                              setLineNumber(734);    // compilenode string
                              var string5804 = new GraceString("Definition");
                              var call5805 = callmethodChecked(var_localWriter, "addText()inMode", [1, 1], string5804, var_heading);
                              setLineNumber(735);    // compilenode call
                              onSelf = true;
                              var call5806 = callmethodChecked(this, "title", [0]);
                              var call5807 = callmethodChecked(var_localWriter, "addText()inMode", [1, 1], call5806, var_plain);
                              setLineNumber(736);    // compilenode identifier
                              var call5808 = callmethodChecked(var_localWriter, "addNewline", [0]);
                              setLineNumber(737);    // compilenode string
                              var string5809 = new GraceString("Description");
                              var call5810 = callmethodChecked(var_localWriter, "addText()inMode", [1, 1], string5809, var_heading);
                              setLineNumber(738);    // compilenode string
                              var string5811 = new GraceString("Not currently available...");
                              var call5812 = callmethodChecked(var_localWriter, "addText()inMode", [1, 1], string5811, var_plain);
                              setLineNumber(739);    // compilenode identifier
                              var call5813 = callmethodChecked(var_localWriter, "addNewline", [0]);
                              setLineNumber(740);    // compilenode string
                              var string5814 = new GraceString("Properties");
                              var call5815 = callmethodChecked(var_localWriter, "addText()inMode", [1, 1], string5814, var_heading);
                              setLineNumber(741);    // compilenode identifier
                              var call5816 = callmethodChecked(var_localWriter, "addNewline", [0]);
                              setLineNumber(744);    // compilenode identifier
                              var call5817 = callmethodChecked(var_localWriter, "dumpBin", [0]);
                              var opresult5820 = callmethodChecked(var_out, "++", [1], call5817);
                              var_out = opresult5820;
                              if5802 = GraceDone;
                            }
                            var if5821 = GraceDone;
                            setLineNumber(748);    // compilenode call
                            onSelf = true;
                            var call5822 = callmethodChecked(this, "isOnTypePage", [0]);
                            var call5823 = callmethodChecked(call5822, "prefix!", [0]);
                            onSelf = true;
                            var call5825 = callmethodChecked(this, "isOnClassPage", [0]);
                            var call5826 = callmethodChecked(call5825, "prefix!", [0]);
                            var opresult5828 = callmethodChecked(call5826, "&&", [1], call5823);
                            if (Grace_isTrue(opresult5828)) {
                              setLineNumber(750);    // compilenode string
                              var string5829 = new GraceString("Methods");
                              var call5830 = callmethodChecked(var_localWriter, "addText()inMode", [1, 1], string5829, var_heading);
                              setLineNumber(751);    // compilenode identifier
                              var call5831 = callmethodChecked(var_localWriter, "addNewline", [0]);
                              setLineNumber(754);    // compilenode identifier
                              var call5832 = callmethodChecked(var_localWriter, "dumpBin", [0]);
                              var opresult5835 = callmethodChecked(var_out, "++", [1], call5832);
                              var_out = opresult5835;
                              if5821 = GraceDone;
                            }
                            setLineNumber(761);    // compilenode identifier
                            var call5836 = callmethodChecked(var_section, "withTemplate()andCursorAt", [1, 1], var_out, var_cursor);
                            onSelf = true;
                            var call5837 = callmethodChecked(this, "section1:=", [1], call5836);
                            setLineNumber(763);    // compilenode string
                            var string5838 = new GraceString("");
                            var call5839 = callmethodChecked(var_section, "withTemplate()andCursorAt", [1, 1], string5838, var_cursor);
                            onSelf = true;
                            var call5840 = callmethodChecked(this, "section2:=", [1], call5839);
                            setLineNumber(765);    // compilenode num
                            var_cursor = new GraceNum(0);
                            setLineNumber(766);    // compilenode string
                            var string5841 = new GraceString("Types");
                            onSelf = true;
                            var call5842 = callmethodChecked(this, "writer", [0]);
                            var call5843 = callmethodChecked(call5842, "addText()inMode", [1, 1], string5841, var_heading);
                            setLineNumber(767);    // compilenode call
                            onSelf = true;
                            var call5844 = callmethodChecked(this, "writer", [0]);
                            var call5845 = callmethodChecked(call5844, "dumpBin", [0]);
                            var_out = call5845;
                            setLineNumber(768);    // compilenode identifier
                            var call5846 = callmethodChecked(var_out, "size", [0]);
                            var_cursor = call5846;
                            setLineNumber(770);    // compilenode identifier
                            var call5847 = callmethodChecked(var_section, "withTemplate()andCursorAt", [1, 1], var_out, var_cursor);
                            onSelf = true;
                            var call5848 = callmethodChecked(this, "section3:=", [1], call5847);
                            setLineNumber(772);    // compilenode num
                            var_cursor = new GraceNum(0);
                            setLineNumber(773);    // compilenode string
                            var string5849 = new GraceString("Definitions");
                            onSelf = true;
                            var call5850 = callmethodChecked(this, "writer", [0]);
                            var call5851 = callmethodChecked(call5850, "addText()inMode", [1, 1], string5849, var_heading);
                            setLineNumber(774);    // compilenode call
                            onSelf = true;
                            var call5852 = callmethodChecked(this, "writer", [0]);
                            var call5853 = callmethodChecked(call5852, "dumpBin", [0]);
                            var_out = call5853;
                            setLineNumber(775);    // compilenode identifier
                            var call5854 = callmethodChecked(var_out, "size", [0]);
                            var_cursor = call5854;
                            setLineNumber(776);    // compilenode identifier
                            var call5855 = callmethodChecked(var_section, "withTemplate()andCursorAt", [1, 1], var_out, var_cursor);
                            onSelf = true;
                            var call5856 = callmethodChecked(this, "section4:=", [1], call5855);
                            setLineNumber(778);    // compilenode string
                            var string5857 = new GraceString("");
                            var call5858 = callmethodChecked(var_section, "withTemplate()andCursorAt", [1, 1], string5857, var_cursor);
                            onSelf = true;
                            var call5859 = callmethodChecked(this, "section5:=", [1], call5858);
                            setLineNumber(780);    // compilenode string
                            var string5860 = new GraceString("");
                            var call5861 = callmethodChecked(var_section, "withTemplate()andCursorAt", [1, 1], string5860, var_cursor);
                            onSelf = true;
                            var call5862 = callmethodChecked(this, "section6:=", [1], call5861);
                            setLineNumber(783);    // compilenode string
                            var string5863 = new GraceString("");
                            var call5864 = callmethodChecked(var_section, "withTemplate()andCursorAt", [1, 1], string5863, var_cursor);
                            onSelf = true;
                            var call5865 = callmethodChecked(this, "methodtypesSection:=", [1], call5864);
                            setLineNumber(785);    // compilenode string
                            var string5866 = new GraceString("");
                            var call5867 = callmethodChecked(var_section, "withTemplate()andCursorAt", [1, 1], string5866, var_cursor);
                            onSelf = true;
                            var call5868 = callmethodChecked(this, "footerSection:=", [1], call5867);
                            return call5868;
                          };
                          func5697.confidential = true;
                          func5697.paramCounts = [0];
                          obj5397.methods["buildTemplate"] = func5697;
                          func5697.definitionLine = 693;
                          func5697.definitionModule = "gracedocMD";
                          var func5869 = function(argcv) {    // method build404
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            if (argcv[0] !== 0)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for build404"));
                            setModuleName("gracedocMD");
                            setLineNumber(793);    // compilenode string
                            var string5870 = new GraceString("---\n");
                            var var_out = string5870;
                            setLineNumber(794);    // compilenode string
                            var string5871 = new GraceString("\"\n");
                            onSelf = true;
                            var call5873 = callmethodChecked(this, "title", [0]);
                            var string5875 = new GraceString("title: \"");
                            var opresult5877 = callmethodChecked(string5875, "++", [1], call5873);
                            var opresult5879 = callmethodChecked(opresult5877, "++", [1], string5871);
                            var opresult5882 = callmethodChecked(var_out, "++", [1], opresult5879);
                            var_out = opresult5882;
                            setLineNumber(795);    // compilenode string
                            var string5883 = new GraceString("keywords: mydoc\n");
                            var opresult5886 = callmethodChecked(var_out, "++", [1], string5883);
                            var_out = opresult5886;
                            setLineNumber(796);    // compilenode string
                            var string5887 = new GraceString("sidebar: grace-doc-sidebar\n");
                            var opresult5890 = callmethodChecked(var_out, "++", [1], string5887);
                            var_out = opresult5890;
                            setLineNumber(797);    // compilenode string
                            var string5891 = new GraceString("toc: false\n");
                            var opresult5894 = callmethodChecked(var_out, "++", [1], string5891);
                            var_out = opresult5894;
                            setLineNumber(798);    // compilenode string
                            var string5895 = new GraceString("permalink: /404/\n");
                            var opresult5898 = callmethodChecked(var_out, "++", [1], string5895);
                            var_out = opresult5898;
                            setLineNumber(799);    // compilenode string
                            var string5899 = new GraceString("folder: grace-docs\n");
                            var opresult5902 = callmethodChecked(var_out, "++", [1], string5899);
                            var_out = opresult5902;
                            setLineNumber(800);    // compilenode string
                            var string5903 = new GraceString("---\n");
                            var opresult5906 = callmethodChecked(var_out, "++", [1], string5903);
                            var_out = opresult5906;
                            setLineNumber(802);    // compilenode string
                            var string5907 = new GraceString("# 404 - Page 'ot Found  ");
                            var opresult5910 = callmethodChecked(var_out, "++", [1], string5907);
                            var_out = opresult5910;
                            setLineNumber(803);    // compilenode string
                            var string5911 = new GraceString("\n  \n  \nOops! The file for this link appears to be missing! \n");
                            var opresult5914 = callmethodChecked(var_out, "++", [1], string5911);
                            var_out = opresult5914;
                            setLineNumber(804);    // compilenode string
                            var string5915 = new GraceString("Please naviagte back to your previous page!\"\n");
                            var opresult5918 = callmethodChecked(var_out, "++", [1], string5915);
                            var_out = opresult5918;
                            setLineNumber(806);    // compilenode string
                            var string5919 = new GraceString("/404.md");
                            var call5921 = callmethodChecked(var_settings, "outputdir", [0]);
                            var string5923 = new GraceString("");
                            var opresult5925 = callmethodChecked(string5923, "++", [1], call5921);
                            var opresult5927 = callmethodChecked(opresult5925, "++", [1], string5919);
                            var string5928 = new GraceString("w");
                            var call5929 = callmethodChecked(var_io, "open", [2], opresult5927, string5928);
                            var var_file404 = call5929;
                            setLineNumber(807);    // compilenode identifier
                            var call5930 = callmethodChecked(var_file404, "write", [1], var_out);
                            setLineNumber(808);    // compilenode identifier
                            var call5931 = callmethodChecked(var_file404, "close", [0]);
                            return call5931;
                          };
                          func5869.paramCounts = [0];
                          obj5397.methods["build404"] = func5869;
                          func5869.definitionLine = 792;
                          func5869.definitionModule = "gracedocMD";
                          var func5932 = function(argcv) {    // method setSidebarName
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            if (argcv[0] !== 0)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for setSidebarName"));
                            setModuleName("gracedocMD");
                            setLineNumber(814);    // compilenode call
                            onSelf = true;
                            var call5933 = callmethodChecked(this, "outdir", [0]);
                            var call5934 = callmethodChecked(var_sidebarGen, "setModule", [1], call5933);
                            return call5934;
                          };
                          func5932.paramCounts = [0];
                          obj5397.methods["setSidebarName"] = func5932;
                          func5932.definitionLine = 812;
                          func5932.definitionModule = "gracedocMD";
                          var func5935 = function(argcv) {    // method buildindex
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            if (argcv[0] !== 0)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for buildindex"));
                            setModuleName("gracedocMD");
                            setLineNumber(818);    // compilenode string
                            var string5936 = new GraceString(" -- https://github.com/reid47/gracedoc -->\n");
                            var call5938 = callmethodChecked(var_settings, "version", [0]);
                            var string5940 = new GraceString("<!-- generated by Gracedoc, v");
                            var opresult5942 = callmethodChecked(string5940, "++", [1], call5938);
                            var opresult5944 = callmethodChecked(opresult5942, "++", [1], string5936);
                            var var_out = opresult5944;
                            setLineNumber(819);    // compilenode string
                            var string5945 = new GraceString("<!DOCTYPE html>\n<html lang=\"en\">");
                            var opresult5948 = callmethodChecked(var_out, "++", [1], string5945);
                            var_out = opresult5948;
                            setLineNumber(820);    // compilenode string
                            var string5949 = new GraceString("<head>");
                            var opresult5952 = callmethodChecked(var_out, "++", [1], string5949);
                            var_out = opresult5952;
                            setLineNumber(821);    // compilenode string
                            var string5953 = new GraceString("<title>GraceDocs</title>");
                            var opresult5956 = callmethodChecked(var_out, "++", [1], string5953);
                            var_out = opresult5956;
                            setLineNumber(822);    // compilenode string
                            var string5957 = new GraceString("<link rel=\"stylesheet\" href=\"graceDoc.css\">");
                            var opresult5960 = callmethodChecked(var_out, "++", [1], string5957);
                            var_out = opresult5960;
                            setLineNumber(823);    // compilenode string
                            var string5961 = new GraceString("</head>");
                            var opresult5964 = callmethodChecked(var_out, "++", [1], string5961);
                            var_out = opresult5964;
                            setLineNumber(824);    // compilenode string
                            var string5965 = new GraceString("<body>");
                            var opresult5968 = callmethodChecked(var_out, "++", [1], string5965);
                            var_out = opresult5968;
                            setLineNumber(825);    // compilenode string
                            var string5969 = new GraceString("<iframe id=\"frame-sidebar\" src=\"modules.md\" name=\"moduleFrame\"></iframe>");
                            var opresult5972 = callmethodChecked(var_out, "++", [1], string5969);
                            var_out = opresult5972;
                            setLineNumber(826);    // compilenode string
                            var string5973 = new GraceString("<iframe id=\"frame-main\" src=\"\" name=\"mainFrame\"></iframe>");
                            var opresult5976 = callmethodChecked(var_out, "++", [1], string5973);
                            var_out = opresult5976;
                            setLineNumber(827);    // compilenode string
                            var string5977 = new GraceString("</body>");
                            var opresult5980 = callmethodChecked(var_out, "++", [1], string5977);
                            var_out = opresult5980;
                            setLineNumber(828);    // compilenode string
                            var string5981 = new GraceString("</html>");
                            var opresult5984 = callmethodChecked(var_out, "++", [1], string5981);
                            var_out = opresult5984;
                            setLineNumber(829);    // compilenode string
                            var string5985 = new GraceString("/index.md");
                            var call5987 = callmethodChecked(var_settings, "outputdir", [0]);
                            var string5989 = new GraceString("");
                            var opresult5991 = callmethodChecked(string5989, "++", [1], call5987);
                            var opresult5993 = callmethodChecked(opresult5991, "++", [1], string5985);
                            var string5994 = new GraceString("w");
                            var call5995 = callmethodChecked(var_io, "open", [2], opresult5993, string5994);
                            var var_fileindex = call5995;
                            setLineNumber(830);    // compilenode identifier
                            var call5996 = callmethodChecked(var_fileindex, "write", [1], var_out);
                            setLineNumber(831);    // compilenode identifier
                            var call5997 = callmethodChecked(var_fileindex, "close", [0]);
                            return call5997;
                          };
                          func5935.paramCounts = [0];
                          obj5397.methods["buildindex"] = func5935;
                          func5935.definitionLine = 817;
                          func5935.definitionModule = "gracedocMD";
                          var func5998 = function(argcv) {    // method buildjs
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            if (argcv[0] !== 0)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for buildjs"));
                            setModuleName("gracedocMD");
                            setLineNumber(835);    // compilenode string
                            var string5999 = new GraceString("function toggleContents(eltid) {\n    var elt = document.getElementById('contents-'+eltid)\n    var arrow = document.getElementById('arrow-button-'+eltid)\n    if (elt.style.display == 'none') {\n        elt.style.display = 'block';\n        arrow.innerHTML = '&#9660';\n    } else {\n        elt.style.display = 'none';\n        arrow.innerHTML = '&#9654';\n    }\n}");
                            var var_out = string5999;
                            setLineNumber(846);    // compilenode string
                            var string6000 = new GraceString("/gracedoc.js");
                            var call6002 = callmethodChecked(var_settings, "outputdir", [0]);
                            var string6004 = new GraceString("");
                            var opresult6006 = callmethodChecked(string6004, "++", [1], call6002);
                            var opresult6008 = callmethodChecked(opresult6006, "++", [1], string6000);
                            var string6009 = new GraceString("w");
                            var call6010 = callmethodChecked(var_io, "open", [2], opresult6008, string6009);
                            var var_filejs = call6010;
                            setLineNumber(847);    // compilenode identifier
                            var call6011 = callmethodChecked(var_filejs, "write", [1], var_out);
                            setLineNumber(848);    // compilenode identifier
                            var call6012 = callmethodChecked(var_filejs, "close", [0]);
                            return call6012;
                          };
                          func5998.paramCounts = [0];
                          obj5397.methods["buildjs"] = func5998;
                          func5998.definitionLine = 834;
                          func5998.definitionModule = "gracedocMD";
                          var func6013 = function(argcv) {    // method buildcss
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            if (argcv[0] !== 0)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for buildcss"));
                            setModuleName("gracedocMD");
                            setLineNumber(852);    // compilenode string
                            var string6014 = new GraceString("CSS Built...");
                            var call6015 = Grace_print(string6014);
                            return call6015;
                          };
                          func6013.paramCounts = [0];
                          obj5397.methods["buildcss"] = func6013;
                          func6013.definitionLine = 851;
                          func6013.definitionModule = "gracedocMD";
                          var func6016 = function(argcv) {    // method generate
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            if (argcv[0] !== 0)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for generate"));
                            setModuleName("gracedocMD");
                            var if6017 = GraceDone;
                            setLineNumber(857);    // compilenode identifier
                            var call6019 = callmethodChecked(var_settings, "verbosity", [0]);
                            var opresult6021 = callmethodChecked(call6019, ">", [1], new GraceNum(1));
                            if (Grace_isTrue(opresult6021)) {
                              var string6022 = new GraceString(")");
                              var call6024 = callmethodChecked(var_sys, "elapsedTime", [0]);
                              var string6026 = new GraceString(" - starting to assemble HTML (");
                              onSelf = true;
                              var call6028 = callmethodChecked(this, "title", [0]);
                              var string6030 = new GraceString("On ");
                              var opresult6032 = callmethodChecked(string6030, "++", [1], call6028);
                              var opresult6034 = callmethodChecked(opresult6032, "++", [1], string6026);
                              var opresult6036 = callmethodChecked(opresult6034, "++", [1], call6024);
                              var opresult6038 = callmethodChecked(opresult6036, "++", [1], string6022);
                              var call6039 = Grace_print(opresult6038);
                              if6017 = call6039;
                            }
                            setLineNumber(859);    // compilenode vardec
                            var var_outfile;
                            setLineNumber(860);    // compilenode string
                            var string6040 = new GraceString("");
                            var var_output = string6040;
                            setLineNumber(861);    // compilenode string
                            var string6041 = new GraceString(".md");
                            onSelf = true;
                            var call6043 = callmethodChecked(this, "pageName", [0]);
                            var string6045 = new GraceString("/");
                            onSelf = true;
                            var call6047 = callmethodChecked(this, "outdir", [0]);
                            var string6049 = new GraceString("/");
                            var call6051 = callmethodChecked(var_settings, "outputdir", [0]);
                            var string6053 = new GraceString("");
                            var opresult6055 = callmethodChecked(string6053, "++", [1], call6051);
                            var opresult6057 = callmethodChecked(opresult6055, "++", [1], string6049);
                            var opresult6059 = callmethodChecked(opresult6057, "++", [1], call6047);
                            var opresult6061 = callmethodChecked(opresult6059, "++", [1], string6045);
                            var opresult6063 = callmethodChecked(opresult6061, "++", [1], call6043);
                            var opresult6065 = callmethodChecked(opresult6063, "++", [1], string6041);
                            var string6066 = new GraceString("w");
                            var call6067 = callmethodChecked(var_io, "open", [2], opresult6065, string6066);
                            var_outfile = call6067;
                            setLineNumber(868);    // compilenode call
                            onSelf = true;
                            var call6068 = callmethodChecked(this, "section1", [0]);
                            var call6069 = callmethodChecked(call6068, "md", [0]);
                            var opresult6072 = callmethodChecked(var_output, "++", [1], call6069);
                            var_output = opresult6072;
                            var if6073 = GraceDone;
                            setLineNumber(869);    // compilenode call
                            onSelf = true;
                            var call6074 = callmethodChecked(this, "section6", [0]);
                            var call6075 = callmethodChecked(call6074, "hasContent", [0]);
                            if (Grace_isTrue(call6075)) {
                              setLineNumber(870);    // compilenode call
                              onSelf = true;
                              var call6076 = callmethodChecked(this, "section6", [0]);
                              var call6077 = callmethodChecked(call6076, "md", [0]);
                              var opresult6080 = callmethodChecked(var_output, "++", [1], call6077);
                              var_output = opresult6080;
                              if6073 = GraceDone;
                            }
                            var if6081 = GraceDone;
                            setLineNumber(872);    // compilenode call
                            onSelf = true;
                            var call6082 = callmethodChecked(this, "section4", [0]);
                            var call6083 = callmethodChecked(call6082, "hasContent", [0]);
                            if (Grace_isTrue(call6083)) {
                              setLineNumber(873);    // compilenode call
                              onSelf = true;
                              var call6084 = callmethodChecked(this, "section4", [0]);
                              var call6085 = callmethodChecked(call6084, "alphabetize", [0]);
                              setLineNumber(874);    // compilenode call
                              onSelf = true;
                              var call6086 = callmethodChecked(this, "section4", [0]);
                              var call6087 = callmethodChecked(call6086, "md", [0]);
                              var opresult6090 = callmethodChecked(var_output, "++", [1], call6087);
                              var_output = opresult6090;
                              if6081 = GraceDone;
                            }
                            var if6091 = GraceDone;
                            setLineNumber(876);    // compilenode call
                            onSelf = true;
                            var call6092 = callmethodChecked(this, "methodtypesSection", [0]);
                            var call6093 = callmethodChecked(call6092, "hasContent", [0]);
                            if (Grace_isTrue(call6093)) {
                              setLineNumber(877);    // compilenode call
                              onSelf = true;
                              var call6094 = callmethodChecked(this, "methodtypesSection", [0]);
                              var call6095 = callmethodChecked(call6094, "alphabetize", [0]);
                              setLineNumber(878);    // compilenode call
                              onSelf = true;
                              var call6096 = callmethodChecked(this, "methodtypesSection", [0]);
                              var call6097 = callmethodChecked(call6096, "md", [0]);
                              var opresult6100 = callmethodChecked(var_output, "++", [1], call6097);
                              var_output = opresult6100;
                              if6091 = GraceDone;
                            }
                            var if6101 = GraceDone;
                            setLineNumber(880);    // compilenode call
                            onSelf = true;
                            var call6102 = callmethodChecked(this, "section3", [0]);
                            var call6103 = callmethodChecked(call6102, "hasContent", [0]);
                            if (Grace_isTrue(call6103)) {
                              setLineNumber(881);    // compilenode call
                              onSelf = true;
                              var call6104 = callmethodChecked(this, "section3", [0]);
                              var call6105 = callmethodChecked(call6104, "alphabetize", [0]);
                              setLineNumber(882);    // compilenode call
                              onSelf = true;
                              var call6106 = callmethodChecked(this, "section3", [0]);
                              var call6107 = callmethodChecked(call6106, "md", [0]);
                              var opresult6110 = callmethodChecked(var_output, "++", [1], call6107);
                              var_output = opresult6110;
                              if6101 = GraceDone;
                            }
                            var if6111 = GraceDone;
                            setLineNumber(884);    // compilenode call
                            onSelf = true;
                            var call6112 = callmethodChecked(this, "section5", [0]);
                            var call6113 = callmethodChecked(call6112, "hasContent", [0]);
                            if (Grace_isTrue(call6113)) {
                              setLineNumber(885);    // compilenode call
                              onSelf = true;
                              var call6114 = callmethodChecked(this, "section5", [0]);
                              var call6115 = callmethodChecked(call6114, "alphabetize", [0]);
                              setLineNumber(886);    // compilenode call
                              onSelf = true;
                              var call6116 = callmethodChecked(this, "section5", [0]);
                              var call6117 = callmethodChecked(call6116, "md", [0]);
                              var opresult6120 = callmethodChecked(var_output, "++", [1], call6117);
                              var_output = opresult6120;
                              if6111 = GraceDone;
                            }
                            var if6121 = GraceDone;
                            setLineNumber(888);    // compilenode call
                            onSelf = true;
                            var call6122 = callmethodChecked(this, "section2", [0]);
                            var call6123 = callmethodChecked(call6122, "hasContent", [0]);
                            if (Grace_isTrue(call6123)) {
                              setLineNumber(889);    // compilenode call
                              onSelf = true;
                              var call6124 = callmethodChecked(this, "section2", [0]);
                              var call6125 = callmethodChecked(call6124, "alphabetize", [0]);
                              setLineNumber(890);    // compilenode call
                              onSelf = true;
                              var call6126 = callmethodChecked(this, "section2", [0]);
                              var call6127 = callmethodChecked(call6126, "md", [0]);
                              var opresult6130 = callmethodChecked(var_output, "++", [1], call6127);
                              var_output = opresult6130;
                              if6121 = GraceDone;
                            }
                            setLineNumber(892);    // compilenode call
                            onSelf = true;
                            var call6131 = callmethodChecked(this, "footerSection", [0]);
                            var call6132 = callmethodChecked(call6131, "md", [0]);
                            var opresult6135 = callmethodChecked(var_output, "++", [1], call6132);
                            var_output = opresult6135;
                            setLineNumber(893);    // compilenode identifier
                            var call6136 = callmethodChecked(var_outfile, "write", [1], var_output);
                            setLineNumber(894);    // compilenode identifier
                            var call6137 = callmethodChecked(var_outfile, "close", [0]);
                            var if6138 = GraceDone;
                            setLineNumber(895);    // compilenode identifier
                            var call6140 = callmethodChecked(var_settings, "verbosity", [0]);
                            var opresult6142 = callmethodChecked(call6140, ">", [1], new GraceNum(1));
                            if (Grace_isTrue(opresult6142)) {
                              var string6143 = new GraceString(")");
                              var call6145 = callmethodChecked(var_sys, "elapsedTime", [0]);
                              var string6147 = new GraceString(" - file written (");
                              onSelf = true;
                              var call6149 = callmethodChecked(this, "title", [0]);
                              var string6151 = new GraceString("On ");
                              var opresult6153 = callmethodChecked(string6151, "++", [1], call6149);
                              var opresult6155 = callmethodChecked(opresult6153, "++", [1], string6147);
                              var opresult6157 = callmethodChecked(opresult6155, "++", [1], call6145);
                              var opresult6159 = callmethodChecked(opresult6157, "++", [1], string6143);
                              var call6160 = Grace_print(opresult6159);
                              if6138 = call6160;
                            }
                            return if6138;
                          };
                          func6016.paramCounts = [0];
                          obj5397.methods["generate"] = func6016;
                          func6016.definitionLine = 856;
                          func6016.definitionModule = "gracedocMD";
                          var func6161 = function(argcv) {    // method visitMethodType(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_o = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMethodType(1)"));
                            setModuleName("gracedocMD");
                            var if6162 = GraceDone;
                            setLineNumber(903);    // compilenode call
                            onSelf = true;
                            var call6163 = callmethodChecked(this, "isOnTypePage", [0]);
                            if (Grace_isTrue(call6163)) {
                              setLineNumber(904);    // compilenode call
                              onSelf = true;
                              var call6164 = callmethodChecked(this, "writer", [0]);
                              var call6165 = callmethodChecked(call6164, "addBullet", [0]);
                              setLineNumber(905);    // compilenode identifier
                              var call6166 = callmethodChecked(var_o, "signature", [0]);
                              var block6167 = new GraceBlock(this, 905, 1);
                              setLineNumber(1);    // compilenode identifier
                              block6167.real = function(var_part) {
                                setLineNumber(906);    // compilenode identifier
                                var call6168 = callmethodChecked(var_part, "name", [0]);
                                onSelf = true;
                                var call6169 = callmethodChecked(this, "writer", [0]);
                                var call6170 = callmethodChecked(call6169, "addText()inMode", [1, 1], call6168, var_code);
                                var if6171 = GraceDone;
                                setLineNumber(907);    // compilenode identifier
                                var call6173 = callmethodChecked(var_part, "params", [0]);
                                var call6174 = callmethodChecked(call6173, "size", [0]);
                                var opresult6176 = callmethodChecked(call6174, ">", [1], new GraceNum(0));
                                if (Grace_isTrue(opresult6176)) {
                                  setLineNumber(908);    // compilenode string
                                  var string6177 = new GraceString("(");
                                  onSelf = true;
                                  var call6178 = callmethodChecked(this, "writer", [0]);
                                  var call6179 = callmethodChecked(call6178, "addText()inMode", [1, 1], string6177, var_code);
                                  setLineNumber(909);    // compilenode identifier
                                  var call6180 = callmethodChecked(var_part, "params", [0]);
                                  var block6181 = new GraceBlock(this, 909, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block6181.real = function(var_param) {
                                    var if6182 = GraceDone;
                                    setLineNumber(910);    // compilenode identifier
                                    var call6184 = callmethodChecked(var_param, "dtype", [0]);
                                    var opresult6186 = callmethodChecked(call6184, "\u2260", [1], GraceFalse);
                                    if (Grace_isTrue(opresult6186)) {
                                      setLineNumber(911);    // compilenode identifier
                                      var call6187 = callmethodChecked(var_param, "nameString", [0]);
                                      onSelf = true;
                                      var call6188 = callmethodChecked(this, "writer", [0]);
                                      var call6189 = callmethodChecked(call6188, "addText()inMode", [1, 1], call6187, var_code);
                                      setLineNumber(912);    // compilenode call
                                      onSelf = true;
                                      var call6190 = callmethodChecked(this, "writer", [0]);
                                      var call6191 = callmethodChecked(call6190, "addColon", [0]);
                                      var if6192 = GraceDone;
                                      setLineNumber(913);    // compilenode string
                                      var string6193 = new GraceString("identifier");
                                      var call6195 = callmethodChecked(var_param, "dtype", [0]);
                                      var call6196 = callmethodChecked(call6195, "kind", [0]);
                                      var opresult6198 = callmethodChecked(call6196, "==", [1], string6193);
                                      if (Grace_isTrue(opresult6198)) {
                                        setLineNumber(914);    // compilenode identifier
                                        var call6199 = callmethodChecked(var_param, "dtype", [0]);
                                        var call6200 = callmethodChecked(call6199, "value", [0]);
                                        onSelf = true;
                                        var call6201 = callmethodChecked(this, "getTypeLink", [1], call6200);
                                        onSelf = true;
                                        var call6202 = callmethodChecked(this, "writer", [0]);
                                        var call6203 = callmethodChecked(call6202, "addText()inMode", [1, 1], call6201, var_plain);
                                        if6192 = call6203;
                                      } else {
                                        var if6204 = GraceDone;
                                        setLineNumber(915);    // compilenode string
                                        var string6205 = new GraceString("generic");
                                        var call6207 = callmethodChecked(var_param, "dtype", [0]);
                                        var call6208 = callmethodChecked(call6207, "kind", [0]);
                                        var opresult6210 = callmethodChecked(call6208, "==", [1], string6205);
                                        if (Grace_isTrue(opresult6210)) {
                                          setLineNumber(916);    // compilenode identifier
                                          var call6211 = callmethodChecked(var_param, "dtype", [0]);
                                          var call6212 = callmethodChecked(call6211, "value", [0]);
                                          var call6213 = callmethodChecked(call6212, "value", [0]);
                                          onSelf = true;
                                          var call6214 = callmethodChecked(this, "writer", [0]);
                                          var call6215 = callmethodChecked(call6214, "addText()inMode", [1, 1], call6213, var_plain);
                                          setLineNumber(917);    // compilenode block
                                          var block6216 = new GraceBlock(this, 917, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block6216.real = function(var_each) {
                                            setLineNumber(917);    // compilenode string
                                            var string6217 = new GraceString("");
                                            var call6219 = callmethodChecked(var_each, "value", [0]);
                                            onSelf = true;
                                            var call6220 = callmethodChecked(this, "getTypeLink", [1], call6219);
                                            var string6222 = new GraceString("");
                                            var opresult6224 = callmethodChecked(string6222, "++", [1], call6220);
                                            var opresult6226 = callmethodChecked(opresult6224, "++", [1], string6217);
                                            onSelf = true;
                                            var call6227 = callmethodChecked(this, "writer", [0]);
                                            var call6228 = callmethodChecked(call6227, "addText()inMode", [1, 1], opresult6226, var_code);
                                            return call6228;
                                          };
                                          var block6229 = new GraceBlock(this, 917, 0);
                                          block6229.real = function() {
                                            onSelf = true;
                                            var call6230 = callmethodChecked(this, "writer", [0]);
                                            var call6231 = callmethodChecked(call6230, "addComma", [0]);
                                            return call6231;
                                          };
                                          var call6232 = callmethodChecked(var_param, "dtype", [0]);
                                          var call6233 = callmethodChecked(call6232, "args", [0]);
                                          var call6234 = callmethodChecked(call6233, "do()separatedBy", [1, 1], block6216, block6229);
                                          if6204 = call6234;
                                        }
                                        if6192 = if6204;
                                      }
                                      if6182 = if6192;
                                    } else {
                                      setLineNumber(920);    // compilenode identifier
                                      var call6235 = callmethodChecked(var_param, "nameString", [0]);
                                      onSelf = true;
                                      var call6236 = callmethodChecked(this, "writer", [0]);
                                      var call6237 = callmethodChecked(call6236, "addText()inMode", [1, 1], call6235, var_code);
                                      if6182 = call6237;
                                    }
                                    var if6238 = GraceDone;
                                    setLineNumber(922);    // compilenode identifier
                                    var call6239 = callmethodChecked(var_part, "params", [0]);
                                    var call6240 = callmethodChecked(call6239, "last", [0]);
                                    var opresult6243 = callmethodChecked(var_param, "\u2260", [1], call6240);
                                    var call6246 = callmethodChecked(var_part, "params", [0]);
                                    var call6247 = callmethodChecked(call6246, "size", [0]);
                                    var opresult6249 = callmethodChecked(call6247, ">", [1], new GraceNum(1));
                                    var opresult6251 = callmethodChecked(opresult6249, "&&", [1], opresult6243);
                                    if (Grace_isTrue(opresult6251)) {
                                      setLineNumber(923);    // compilenode call
                                      onSelf = true;
                                      var call6252 = callmethodChecked(this, "writer", [0]);
                                      var call6253 = callmethodChecked(call6252, "addComma", [0]);
                                      if6238 = call6253;
                                    }
                                    return if6238;
                                  };
                                  var call6254 = callmethodChecked(var_prelude, "for()do", [1, 1], call6180, block6181);
                                  setLineNumber(926);    // compilenode string
                                  var string6255 = new GraceString(")");
                                  onSelf = true;
                                  var call6256 = callmethodChecked(this, "writer", [0]);
                                  var call6257 = callmethodChecked(call6256, "addText()inMode", [1, 1], string6255, var_code);
                                  if6171 = call6257;
                                }
                                setLineNumber(929);    // compilenode call
                                onSelf = true;
                                var call6258 = callmethodChecked(this, "writer", [0]);
                                var call6259 = callmethodChecked(call6258, "addSpace", [0]);
                                return call6259;
                              };
                              var call6260 = callmethodChecked(var_prelude, "for()do", [1, 1], call6166, block6167);
                              setLineNumber(931);    // compilenode string
                              var string6261 = new GraceString("\u2014> ");
                              onSelf = true;
                              var call6262 = callmethodChecked(this, "writer", [0]);
                              var call6263 = callmethodChecked(call6262, "addText()inMode", [1, 1], string6261, var_code);
                              var if6264 = GraceDone;
                              setLineNumber(933);    // compilenode identifier
                              var call6266 = callmethodChecked(var_o, "rtype", [0]);
                              var opresult6268 = callmethodChecked(call6266, "\u2260", [1], GraceFalse);
                              if (Grace_isTrue(opresult6268)) {
                                var if6269 = GraceDone;
                                setLineNumber(934);    // compilenode string
                                var string6270 = new GraceString("identifier");
                                var call6272 = callmethodChecked(var_o, "rtype", [0]);
                                var call6273 = callmethodChecked(call6272, "kind", [0]);
                                var opresult6275 = callmethodChecked(call6273, "==", [1], string6270);
                                if (Grace_isTrue(opresult6275)) {
                                  setLineNumber(935);    // compilenode identifier
                                  var call6276 = callmethodChecked(var_o, "rtype", [0]);
                                  var call6277 = callmethodChecked(call6276, "value", [0]);
                                  onSelf = true;
                                  var call6278 = callmethodChecked(this, "getTypeLink", [1], call6277);
                                  onSelf = true;
                                  var call6279 = callmethodChecked(this, "writer", [0]);
                                  var call6280 = callmethodChecked(call6279, "addText()inMode", [1, 1], call6278, var_plain);
                                  if6269 = call6280;
                                } else {
                                  var if6281 = GraceDone;
                                  setLineNumber(936);    // compilenode string
                                  var string6282 = new GraceString("generic");
                                  var call6284 = callmethodChecked(var_o, "rtype", [0]);
                                  var call6285 = callmethodChecked(call6284, "kind", [0]);
                                  var opresult6287 = callmethodChecked(call6285, "==", [1], string6282);
                                  if (Grace_isTrue(opresult6287)) {
                                    setLineNumber(937);    // compilenode identifier
                                    var call6288 = callmethodChecked(var_o, "rtype", [0]);
                                    var call6289 = callmethodChecked(call6288, "value", [0]);
                                    var call6290 = callmethodChecked(call6289, "value", [0]);
                                    onSelf = true;
                                    var call6291 = callmethodChecked(this, "getTypeLink", [1], call6290);
                                    onSelf = true;
                                    var call6292 = callmethodChecked(this, "writer", [0]);
                                    var call6293 = callmethodChecked(call6292, "addText()inMode", [1, 1], call6291, var_plain);
                                    setLineNumber(938);    // compilenode block
                                    var block6294 = new GraceBlock(this, 938, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block6294.real = function(var_each) {
                                      setLineNumber(938);    // compilenode string
                                      var string6295 = new GraceString("");
                                      var call6297 = callmethodChecked(var_each, "value", [0]);
                                      onSelf = true;
                                      var call6298 = callmethodChecked(this, "getTypeLink", [1], call6297);
                                      var string6300 = new GraceString("");
                                      var opresult6302 = callmethodChecked(string6300, "++", [1], call6298);
                                      var opresult6304 = callmethodChecked(opresult6302, "++", [1], string6295);
                                      onSelf = true;
                                      var call6305 = callmethodChecked(this, "writer", [0]);
                                      var call6306 = callmethodChecked(call6305, "addText()inMode", [1, 1], opresult6304, var_code);
                                      return call6306;
                                    };
                                    var block6307 = new GraceBlock(this, 938, 0);
                                    block6307.real = function() {
                                      onSelf = true;
                                      var call6308 = callmethodChecked(this, "writer", [0]);
                                      var call6309 = callmethodChecked(call6308, "addComma", [0]);
                                      return call6309;
                                    };
                                    var call6310 = callmethodChecked(var_o, "rtype", [0]);
                                    var call6311 = callmethodChecked(call6310, "args", [0]);
                                    var call6312 = callmethodChecked(call6311, "do()separatedBy", [1, 1], block6294, block6307);
                                    if6281 = call6312;
                                  }
                                  if6269 = if6281;
                                }
                                if6264 = if6269;
                              } else {
                                setLineNumber(941);    // compilenode string
                                var string6313 = new GraceString("Done");
                                onSelf = true;
                                var call6314 = callmethodChecked(this, "writer", [0]);
                                var call6315 = callmethodChecked(call6314, "addText()inMode", [1, 1], string6313, var_code);
                                if6264 = call6315;
                              }
                              setLineNumber(944);    // compilenode string
                              var string6316 = new GraceString("  \n");
                              onSelf = true;
                              var call6317 = callmethodChecked(this, "writer", [0]);
                              var call6318 = callmethodChecked(call6317, "addText()inMode", [1, 1], string6316, var_plain);
                              setLineNumber(945);    // compilenode string
                              var string6319 = new GraceString("description");
                              var call6320 = callmethodChecked(superDepth, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call6321 = callmethodChecked(call6320, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call6322 = callmethodChecked(call6321, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string6319, new GraceNum(2));
                              onSelf = true;
                              var call6323 = callmethodChecked(this, "writer", [0]);
                              var call6324 = callmethodChecked(call6323, "addText()inMode", [1, 1], call6322, var_plain);
                              setLineNumber(946);    // compilenode call
                              onSelf = true;
                              var call6325 = callmethodChecked(this, "writer", [0]);
                              var call6326 = callmethodChecked(call6325, "addNewline", [0]);
                              setLineNumber(948);    // compilenode call
                              onSelf = true;
                              var call6327 = callmethodChecked(this, "writer", [0]);
                              var call6328 = callmethodChecked(call6327, "dumpBin", [0]);
                              onSelf = true;
                              var call6329 = callmethodChecked(this, "section6", [0]);
                              var call6330 = callmethodChecked(call6329, "insert", [1], call6328);
                              setLineNumber(949);    // compilenode identifier
                              return GraceFalse;
                            } else {
                              setLineNumber(951);    // compilenode identifier
                              return GraceTrue;
                            }
                            setLineNumber(903);    // return value
                            if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], if6162)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method visitMethodType(1) does not have " + 
                                        callmethod(var_Boolean, "asString", [0])._value + "."));
                            return if6162;
                          };
                          func6161.paramCounts = [1];
                          obj5397.methods["visitMethodType"] = func6161;
                          func6161.definitionLine = 902;
                          func6161.definitionModule = "gracedocMD";
                          var func6331 = function(argcv) {    // method visitTypeDec(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_o = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTypeDec(1)"));
                            setModuleName("gracedocMD");
                            var if6332 = GraceDone;
                            setLineNumber(961);    // compilenode call
                            onSelf = true;
                            var call6334 = callmethodChecked(this, "isOnTypePage", [0]);
                            var opresult6336 = callmethodChecked(call6334, "==", [1], GraceFalse);
                            if (Grace_isTrue(opresult6336)) {
                              setLineNumber(962);    // compilenode identifier
                              var call6337 = callmethodChecked(var_o, "nameString", [0]);
                              var var_n = call6337;
                              setLineNumber(964);    // compilenode call
                              onSelf = true;
                              var call6338 = callmethodChecked(this, "writer", [0]);
                              var call6339 = callmethodChecked(call6338, "addBullet", [0]);
                              setLineNumber(965);    // compilenode string
                              var string6340 = new GraceString("");
                              var call6342 = callmethodChecked(var_o, "name", [0]);
                              var call6343 = callmethodChecked(call6342, "value", [0]);
                              onSelf = true;
                              var call6344 = callmethodChecked(this, "getTypeLink", [1], call6343);
                              var string6346 = new GraceString("");
                              var opresult6348 = callmethodChecked(string6346, "++", [1], call6344);
                              var opresult6350 = callmethodChecked(opresult6348, "++", [1], string6340);
                              onSelf = true;
                              var call6351 = callmethodChecked(this, "writer", [0]);
                              var call6352 = callmethodChecked(call6351, "addText()inMode", [1, 1], opresult6350, var_plain);
                              var if6353 = GraceDone;
                              setLineNumber(966);    // compilenode identifier
                              var call6354 = callmethodChecked(var_o, "typeParams", [0]);
                              var opresult6357 = callmethodChecked(GraceFalse, "\u2260", [1], call6354);
                              if (Grace_isTrue(opresult6357)) {
                                setLineNumber(967);    // compilenode string
                                var string6358 = new GraceString(" -> ");
                                onSelf = true;
                                var call6359 = callmethodChecked(this, "writer", [0]);
                                var call6360 = callmethodChecked(call6359, "addText()inMode", [1, 1], string6358, var_code);
                                setLineNumber(968);    // compilenode identifier
                                var call6361 = callmethodChecked(var_o, "typeParams", [0]);
                                var call6362 = callmethodChecked(call6361, "params", [0]);
                                var block6363 = new GraceBlock(this, 968, 1);
                                setLineNumber(1);    // compilenode identifier
                                block6363.real = function(var_g) {
                                  setLineNumber(969);    // compilenode identifier
                                  var call6364 = callmethodChecked(var_g, "nameString", [0]);
                                  onSelf = true;
                                  var call6365 = callmethodChecked(this, "writer", [0]);
                                  var call6366 = callmethodChecked(call6365, "addText()inMode", [1, 1], call6364, var_code);
                                  var if6367 = GraceDone;
                                  setLineNumber(970);    // compilenode identifier
                                  var call6368 = callmethodChecked(var_o, "typeParams", [0]);
                                  var call6369 = callmethodChecked(call6368, "params", [0]);
                                  var call6370 = callmethodChecked(call6369, "last", [0]);
                                  var opresult6373 = callmethodChecked(var_g, "\u2260", [1], call6370);
                                  if (Grace_isTrue(opresult6373)) {
                                    onSelf = true;
                                    var call6374 = callmethodChecked(this, "writer", [0]);
                                    var call6375 = callmethodChecked(call6374, "addComma", [0]);
                                    if6367 = call6375;
                                  }
                                  return if6367;
                                };
                                var call6376 = callmethodChecked(var_prelude, "for()do", [1, 1], call6362, block6363);
                                if6353 = call6376;
                              }
                              setLineNumber(974);    // compilenode call
                              onSelf = true;
                              var call6377 = callmethodChecked(this, "writer", [0]);
                              var call6378 = callmethodChecked(call6377, "addNewline", [0]);
                              setLineNumber(976);    // compilenode string
                              var string6379 = new GraceString("");
                              var call6381 = callmethodChecked(var_o, "name", [0]);
                              var call6382 = callmethodChecked(call6381, "value", [0]);
                              var string6384 = new GraceString("");
                              var opresult6386 = callmethodChecked(string6384, "++", [1], call6382);
                              var opresult6388 = callmethodChecked(opresult6386, "++", [1], string6379);
                              var string6389 = new GraceString("");
                              onSelf = true;
                              var call6391 = callmethodChecked(this, "outdir", [0]);
                              var string6393 = new GraceString("");
                              var opresult6395 = callmethodChecked(string6393, "++", [1], call6391);
                              var opresult6397 = callmethodChecked(opresult6395, "++", [1], string6389);
                              var string6398 = new GraceString("type");
                              var call6399 = callmethodChecked(var_graceDocVisitor, "createFrom()outTo()as", [1, 1, 1], opresult6388, opresult6397, string6398);
                              var var_typeVis = call6399;
                              setLineNumber(977);    // compilenode identifier
                              var call6400 = callmethodChecked(var_o, "accept", [1], var_typeVis);
                              setLineNumber(978);    // compilenode identifier
                              var call6401 = callmethodChecked(var_typeVis, "generate", [0]);
                              setLineNumber(980);    // compilenode string
                              var string6402 = new GraceString("description");
                              var call6403 = callmethodChecked(superDepth, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call6404 = callmethodChecked(call6403, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call6405 = callmethodChecked(call6404, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string6402, new GraceNum(1));
                              onSelf = true;
                              var call6406 = callmethodChecked(this, "writer", [0]);
                              var call6407 = callmethodChecked(call6406, "addText()inMode", [1, 1], call6405, var_plain);
                              setLineNumber(983);    // compilenode call
                              onSelf = true;
                              var call6408 = callmethodChecked(this, "writer", [0]);
                              var call6409 = callmethodChecked(call6408, "dumpBin", [0]);
                              onSelf = true;
                              var call6410 = callmethodChecked(this, "section3", [0]);
                              var call6411 = callmethodChecked(call6410, "addElement()withText", [1, 1], var_n, call6409);
                              setLineNumber(984);    // compilenode identifier
                              return GraceFalse;
                            } else {
                              setLineNumber(988);    // compilenode string
                              var string6412 = new GraceString("Definition");
                              onSelf = true;
                              var call6413 = callmethodChecked(this, "writer", [0]);
                              var call6414 = callmethodChecked(call6413, "addText()inMode", [1, 1], string6412, var_heading);
                              setLineNumber(989);    // compilenode string
                              var string6415 = new GraceString(" ->");
                              var call6417 = callmethodChecked(var_o, "name", [0]);
                              var call6418 = callmethodChecked(call6417, "value", [0]);
                              var string6420 = new GraceString("");
                              var opresult6422 = callmethodChecked(string6420, "++", [1], call6418);
                              var opresult6424 = callmethodChecked(opresult6422, "++", [1], string6415);
                              onSelf = true;
                              var call6425 = callmethodChecked(this, "writer", [0]);
                              var call6426 = callmethodChecked(call6425, "addText()inMode", [1, 1], opresult6424, var_code);
                              var if6427 = GraceDone;
                              setLineNumber(990);    // compilenode identifier
                              var call6428 = callmethodChecked(var_o, "typeParams", [0]);
                              var opresult6431 = callmethodChecked(GraceFalse, "\u2260", [1], call6428);
                              if (Grace_isTrue(opresult6431)) {
                                setLineNumber(991);    // compilenode identifier
                                var call6432 = callmethodChecked(var_o, "typeParams", [0]);
                                var call6433 = callmethodChecked(call6432, "params", [0]);
                                var block6434 = new GraceBlock(this, 991, 1);
                                setLineNumber(1);    // compilenode identifier
                                block6434.real = function(var_g) {
                                  setLineNumber(992);    // compilenode identifier
                                  var call6435 = callmethodChecked(var_g, "nameString", [0]);
                                  onSelf = true;
                                  var call6436 = callmethodChecked(this, "writer", [0]);
                                  var call6437 = callmethodChecked(call6436, "addText()inMode", [1, 1], call6435, var_code);
                                  var if6438 = GraceDone;
                                  setLineNumber(993);    // compilenode identifier
                                  var call6439 = callmethodChecked(var_o, "typeParams", [0]);
                                  var call6440 = callmethodChecked(call6439, "params", [0]);
                                  var call6441 = callmethodChecked(call6440, "last", [0]);
                                  var opresult6444 = callmethodChecked(var_g, "\u2260", [1], call6441);
                                  if (Grace_isTrue(opresult6444)) {
                                    var string6445 = new GraceString(", ");
                                    onSelf = true;
                                    var call6446 = callmethodChecked(this, "writer", [0]);
                                    var call6447 = callmethodChecked(call6446, "addText()inMode", [1, 1], string6445, var_code);
                                    if6438 = call6447;
                                  }
                                  return if6438;
                                };
                                var call6448 = callmethodChecked(var_prelude, "for()do", [1, 1], call6433, block6434);
                                if6427 = call6448;
                              }
                              setLineNumber(996);    // compilenode call
                              onSelf = true;
                              var call6449 = callmethodChecked(this, "writer", [0]);
                              var call6450 = callmethodChecked(call6449, "addSpace", [0]);
                              setLineNumber(997);    // compilenode string
                              var string6451 = new GraceString("");
                              var var_temp = string6451;
                              setLineNumber(998);    // compilenode array
                              var array6452 = new Lineup([]);
                              var call6453 = callmethodChecked(var_prelude, "list", [1], array6452);
                              var var_ops = call6453;
                              setLineNumber(999);    // compilenode array
                              var array6454 = new Lineup([]);
                              var call6455 = callmethodChecked(var_prelude, "list", [1], array6454);
                              var var_tps = call6455;
                              setLineNumber(1000);    // compilenode identifier
                              var call6456 = callmethodChecked(var_o, "value", [0]);
                              var var_node = call6456;
                              var if6457 = GraceDone;
                              setLineNumber(1002);    // compilenode string
                              var string6458 = new GraceString("op");
                              var call6460 = callmethodChecked(var_node, "kind", [0]);
                              var opresult6462 = callmethodChecked(call6460, "==", [1], string6458);
                              if (Grace_isTrue(opresult6462)) {
                                setLineNumber(1003);    // compilenode block
                                var block6463 = new GraceBlock(this, 1003, 0);
                                block6463.real = function() {
                                  var string6464 = new GraceString("op");
                                  var call6466 = callmethodChecked(var_node, "kind", [0]);
                                  var opresult6468 = callmethodChecked(call6466, "==", [1], string6464);
                                  return opresult6468;
                                };
                                var block6469 = new GraceBlock(this, 1003, 0);
                                block6469.real = function() {
                                  setLineNumber(1004);    // compilenode identifier
                                  var call6470 = callmethodChecked(var_node, "value", [0]);
                                  var call6471 = callmethodChecked(var_ops, "push", [1], call6470);
                                  var if6472 = GraceDone;
                                  setLineNumber(1005);    // compilenode string
                                  var string6473 = new GraceString("identifier");
                                  var call6475 = callmethodChecked(var_node, "right", [0]);
                                  var call6476 = callmethodChecked(call6475, "kind", [0]);
                                  var opresult6478 = callmethodChecked(call6476, "==", [1], string6473);
                                  var string6480 = new GraceString("identifier");
                                  var call6482 = callmethodChecked(var_node, "left", [0]);
                                  var call6483 = callmethodChecked(call6482, "kind", [0]);
                                  var opresult6485 = callmethodChecked(call6483, "==", [1], string6480);
                                  var opresult6487 = callmethodChecked(opresult6485, "&&", [1], opresult6478);
                                  if (Grace_isTrue(opresult6487)) {
                                    setLineNumber(1006);    // compilenode string
                                    var string6488 = new GraceString("");
                                    var call6490 = callmethodChecked(var_node, "right", [0]);
                                    var call6491 = callmethodChecked(call6490, "value", [0]);
                                    onSelf = true;
                                    var call6492 = callmethodChecked(this, "getTypeLink", [1], call6491);
                                    var string6494 = new GraceString("` ");
                                    var call6496 = callmethodChecked(var_ops, "pop", [0]);
                                    var string6498 = new GraceString(" `");
                                    var call6500 = callmethodChecked(var_node, "left", [0]);
                                    var call6501 = callmethodChecked(call6500, "value", [0]);
                                    onSelf = true;
                                    var call6502 = callmethodChecked(this, "getTypeLink", [1], call6501);
                                    var string6504 = new GraceString("");
                                    var opresult6506 = callmethodChecked(string6504, "++", [1], call6502);
                                    var opresult6508 = callmethodChecked(opresult6506, "++", [1], string6498);
                                    var opresult6510 = callmethodChecked(opresult6508, "++", [1], call6496);
                                    var opresult6512 = callmethodChecked(opresult6510, "++", [1], string6494);
                                    var opresult6514 = callmethodChecked(opresult6512, "++", [1], call6492);
                                    var opresult6516 = callmethodChecked(opresult6514, "++", [1], string6488);
                                    var_temp = opresult6516;
                                    if6472 = GraceDone;
                                  } else {
                                    var if6517 = GraceDone;
                                    setLineNumber(1007);    // compilenode string
                                    var string6518 = new GraceString("identifier");
                                    var call6520 = callmethodChecked(var_node, "right", [0]);
                                    var call6521 = callmethodChecked(call6520, "kind", [0]);
                                    var opresult6523 = callmethodChecked(call6521, "==", [1], string6518);
                                    if (Grace_isTrue(opresult6523)) {
                                      setLineNumber(1008);    // compilenode identifier
                                      var call6524 = callmethodChecked(var_node, "right", [0]);
                                      var call6525 = callmethodChecked(call6524, "value", [0]);
                                      var call6526 = callmethodChecked(var_tps, "push", [1], call6525);
                                      if6517 = call6526;
                                    } else {
                                      var if6527 = GraceDone;
                                      setLineNumber(1009);    // compilenode string
                                      var string6528 = new GraceString("identifier");
                                      var call6530 = callmethodChecked(var_node, "left", [0]);
                                      var call6531 = callmethodChecked(call6530, "kind", [0]);
                                      var opresult6533 = callmethodChecked(call6531, "==", [1], string6528);
                                      if (Grace_isTrue(opresult6533)) {
                                        setLineNumber(1010);    // compilenode string
                                        var string6534 = new GraceString("`");
                                        var call6536 = callmethodChecked(var_ops, "pop", [0]);
                                        var string6538 = new GraceString(" `");
                                        var call6540 = callmethodChecked(var_node, "left", [0]);
                                        var call6541 = callmethodChecked(call6540, "value", [0]);
                                        onSelf = true;
                                        var call6542 = callmethodChecked(this, "getTypeLink", [1], call6541);
                                        var string6544 = new GraceString("");
                                        var opresult6546 = callmethodChecked(string6544, "++", [1], call6542);
                                        var opresult6548 = callmethodChecked(opresult6546, "++", [1], string6538);
                                        var opresult6550 = callmethodChecked(opresult6548, "++", [1], call6536);
                                        var opresult6552 = callmethodChecked(opresult6550, "++", [1], string6534);
                                        var_temp = opresult6552;
                                        if6527 = GraceDone;
                                      } else {
                                        var if6553 = GraceDone;
                                        setLineNumber(1011);    // compilenode string
                                        var string6554 = new GraceString("member");
                                        var call6556 = callmethodChecked(var_node, "left", [0]);
                                        var call6557 = callmethodChecked(call6556, "kind", [0]);
                                        var opresult6559 = callmethodChecked(call6557, "==", [1], string6554);
                                        if (Grace_isTrue(opresult6559)) {
                                          setLineNumber(1012);    // compilenode string
                                          var string6560 = new GraceString("`");
                                          var call6562 = callmethodChecked(var_ops, "pop", [0]);
                                          var string6564 = new GraceString(" `");
                                          var opresult6566 = callmethodChecked(string6564, "++", [1], call6562);
                                          var opresult6568 = callmethodChecked(opresult6566, "++", [1], string6560);
                                          var string6570 = new GraceString("");
                                          var call6572 = callmethodChecked(var_node, "left", [0]);
                                          var call6573 = callmethodChecked(call6572, "value", [0]);
                                          var string6575 = new GraceString(".");
                                          var call6577 = callmethodChecked(var_node, "left", [0]);
                                          var call6578 = callmethodChecked(call6577, "in", [0]);
                                          var call6579 = callmethodChecked(call6578, "value", [0]);
                                          var string6581 = new GraceString("");
                                          var opresult6583 = callmethodChecked(string6581, "++", [1], call6579);
                                          var opresult6585 = callmethodChecked(opresult6583, "++", [1], string6575);
                                          var opresult6587 = callmethodChecked(opresult6585, "++", [1], call6573);
                                          var opresult6589 = callmethodChecked(opresult6587, "++", [1], string6570);
                                          onSelf = true;
                                          var call6590 = callmethodChecked(this, "getTypeLink", [1], opresult6589);
                                          var opresult6592 = callmethodChecked(call6590, "++", [1], opresult6568);
                                          var_temp = opresult6592;
                                          if6553 = GraceDone;
                                        } else {
                                          var if6593 = GraceDone;
                                          setLineNumber(1013);    // compilenode string
                                          var string6594 = new GraceString("member");
                                          var call6596 = callmethodChecked(var_node, "right", [0]);
                                          var call6597 = callmethodChecked(call6596, "kind", [0]);
                                          var opresult6599 = callmethodChecked(call6597, "==", [1], string6594);
                                          if (Grace_isTrue(opresult6599)) {
                                            setLineNumber(1014);    // compilenode string
                                            var string6600 = new GraceString("");
                                            var call6602 = callmethodChecked(var_node, "left", [0]);
                                            var call6603 = callmethodChecked(call6602, "value", [0]);
                                            var string6605 = new GraceString(".");
                                            var call6607 = callmethodChecked(var_node, "left", [0]);
                                            var call6608 = callmethodChecked(call6607, "in", [0]);
                                            var call6609 = callmethodChecked(call6608, "value", [0]);
                                            var string6611 = new GraceString("");
                                            var opresult6613 = callmethodChecked(string6611, "++", [1], call6609);
                                            var opresult6615 = callmethodChecked(opresult6613, "++", [1], string6605);
                                            var opresult6617 = callmethodChecked(opresult6615, "++", [1], call6603);
                                            var opresult6619 = callmethodChecked(opresult6617, "++", [1], string6600);
                                            var call6620 = callmethodChecked(var_tps, "push", [1], opresult6619);
                                            if6593 = call6620;
                                          }
                                          if6553 = if6593;
                                        }
                                        if6527 = if6553;
                                      }
                                      if6517 = if6527;
                                    }
                                    if6472 = if6517;
                                  }
                                  setLineNumber(1016);    // compilenode identifier
                                  var call6621 = callmethodChecked(var_node, "left", [0]);
                                  var_node = call6621;
                                  return GraceDone;
                                };
                                var call6622 = callmethodChecked(var_prelude, "while()do", [1, 1], block6463, block6469);
                                setLineNumber(1020);    // compilenode call
                                onSelf = true;
                                var call6623 = callmethodChecked(this, "writer", [0]);
                                var call6624 = callmethodChecked(call6623, "addText()inMode", [1, 1], var_temp, var_plain);
                                setLineNumber(1021);    // compilenode string
                                var string6625 = new GraceString("");
                                var_temp = string6625;
                                setLineNumber(1023);    // compilenode block
                                var block6626 = new GraceBlock(this, 1023, 0);
                                block6626.real = function() {
                                  var call6628 = callmethodChecked(var_ops, "size", [0]);
                                  var opresult6630 = callmethodChecked(call6628, ">", [1], new GraceNum(0));
                                  var call6633 = callmethodChecked(var_tps, "size", [0]);
                                  var opresult6635 = callmethodChecked(call6633, ">", [1], new GraceNum(0));
                                  var opresult6637 = callmethodChecked(opresult6635, "&&", [1], opresult6630);
                                  return opresult6637;
                                };
                                var block6638 = new GraceBlock(this, 1023, 0);
                                block6638.real = function() {
                                  setLineNumber(1024);    // compilenode identifier
                                  var call6639 = callmethodChecked(var_tps, "pop", [0]);
                                  var var_p = call6639;
                                  setLineNumber(1025);    // compilenode string
                                  var string6640 = new GraceString("");
                                  var call6642 = callmethodChecked(var_p, "value", [0]);
                                  onSelf = true;
                                  var call6643 = callmethodChecked(this, "getTypeLink", [1], call6642);
                                  var string6645 = new GraceString(" ");
                                  var call6647 = callmethodChecked(var_ops, "pop", [0]);
                                  var string6649 = new GraceString(" ");
                                  var string6652 = new GraceString("");
                                  var opresult6654 = callmethodChecked(string6652, "++", [1], var_temp);
                                  var opresult6656 = callmethodChecked(opresult6654, "++", [1], string6649);
                                  var opresult6658 = callmethodChecked(opresult6656, "++", [1], call6647);
                                  var opresult6660 = callmethodChecked(opresult6658, "++", [1], string6645);
                                  var opresult6662 = callmethodChecked(opresult6660, "++", [1], call6643);
                                  var opresult6664 = callmethodChecked(opresult6662, "++", [1], string6640);
                                  var_temp = opresult6664;
                                  return GraceDone;
                                };
                                var call6665 = callmethodChecked(var_prelude, "while()do", [1, 1], block6626, block6638);
                                var if6666 = GraceDone;
                                setLineNumber(1027);    // compilenode identifier
                                var call6668 = callmethodChecked(var_ops, "size", [0]);
                                var opresult6670 = callmethodChecked(call6668, ">", [1], new GraceNum(0));
                                if (Grace_isTrue(opresult6670)) {
                                  setLineNumber(1028);    // compilenode string
                                  var string6671 = new GraceString("");
                                  var call6673 = callmethodChecked(var_ops, "pop", [0]);
                                  var string6675 = new GraceString(" ");
                                  var string6678 = new GraceString("");
                                  var opresult6680 = callmethodChecked(string6678, "++", [1], var_temp);
                                  var opresult6682 = callmethodChecked(opresult6680, "++", [1], string6675);
                                  var opresult6684 = callmethodChecked(opresult6682, "++", [1], call6673);
                                  var opresult6686 = callmethodChecked(opresult6684, "++", [1], string6671);
                                  var_temp = opresult6686;
                                  if6666 = GraceDone;
                                }
                                setLineNumber(1031);    // compilenode string
                                var string6687 = new GraceString("type");
                                var opresult6690 = callmethodChecked(var_temp, "++", [1], string6687);
                                var_temp = opresult6690;
                                setLineNumber(1032);    // compilenode call
                                onSelf = true;
                                var call6691 = callmethodChecked(this, "writer", [0]);
                                var call6692 = callmethodChecked(call6691, "addText()inMode", [1, 1], var_temp, var_code);
                                setLineNumber(1033);    // compilenode string
                                var string6693 = new GraceString("{...added methods below...}");
                                onSelf = true;
                                var call6694 = callmethodChecked(this, "writer", [0]);
                                var call6695 = callmethodChecked(call6694, "addText()inMode", [1, 1], string6693, var_code);
                                if6457 = call6695;
                              } else {
                                var if6696 = GraceDone;
                                setLineNumber(1034);    // compilenode string
                                var string6697 = new GraceString("typeliteral");
                                var call6699 = callmethodChecked(var_node, "kind", [0]);
                                var opresult6701 = callmethodChecked(call6699, "==", [1], string6697);
                                if (Grace_isTrue(opresult6701)) {
                                  setLineNumber(1036);    // compilenode string
                                  var string6702 = new GraceString("type");
                                  var opresult6705 = callmethodChecked(var_temp, "++", [1], string6702);
                                  var_temp = opresult6705;
                                  setLineNumber(1037);    // compilenode string
                                  var string6706 = new GraceString("{...added methods below...}");
                                  onSelf = true;
                                  var call6707 = callmethodChecked(this, "writer", [0]);
                                  var call6708 = callmethodChecked(call6707, "addText()inMode", [1, 1], string6706, var_code);
                                  if6696 = call6708;
                                } else {
                                  var if6709 = GraceDone;
                                  setLineNumber(1038);    // compilenode string
                                  var string6710 = new GraceString("identifier");
                                  var call6712 = callmethodChecked(var_node, "kind", [0]);
                                  var opresult6714 = callmethodChecked(call6712, "==", [1], string6710);
                                  if (Grace_isTrue(opresult6714)) {
                                    setLineNumber(1039);    // compilenode call
                                    onSelf = true;
                                    var call6715 = callmethodChecked(this, "writer", [0]);
                                    var call6716 = callmethodChecked(call6715, "addSpace", [0]);
                                    setLineNumber(1040);    // compilenode identifier
                                    var call6717 = callmethodChecked(var_node, "value", [0]);
                                    onSelf = true;
                                    var call6718 = callmethodChecked(this, "getTypeLink", [1], call6717);
                                    onSelf = true;
                                    var call6719 = callmethodChecked(this, "writer", [0]);
                                    var call6720 = callmethodChecked(call6719, "addText()inMode", [1, 1], call6718, var_plain);
                                    var if6721 = GraceDone;
                                    setLineNumber(1041);    // compilenode identifier
                                    var call6723 = callmethodChecked(var_node, "generics", [0]);
                                    var opresult6725 = callmethodChecked(call6723, "\u2260", [1], GraceFalse);
                                    if (Grace_isTrue(opresult6725)) {
                                      setLineNumber(1042);    // compilenode identifier
                                      var call6726 = callmethodChecked(var_node, "generics", [0]);
                                      var block6727 = new GraceBlock(this, 1042, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block6727.real = function(var_g) {
                                        setLineNumber(1043);    // compilenode identifier
                                        var call6728 = callmethodChecked(var_g, "value", [0]);
                                        onSelf = true;
                                        var call6729 = callmethodChecked(this, "writer", [0]);
                                        var call6730 = callmethodChecked(call6729, "addText()inMode", [1, 1], call6728, var_code);
                                        var if6731 = GraceDone;
                                        setLineNumber(1044);    // compilenode identifier
                                        var call6732 = callmethodChecked(var_node, "generics", [0]);
                                        var call6733 = callmethodChecked(call6732, "last", [0]);
                                        var opresult6736 = callmethodChecked(var_g, "\u2260", [1], call6733);
                                        if (Grace_isTrue(opresult6736)) {
                                          var string6737 = new GraceString(", ");
                                          onSelf = true;
                                          var call6738 = callmethodChecked(this, "writer", [0]);
                                          var call6739 = callmethodChecked(call6738, "add", [1], string6737);
                                          if6731 = call6739;
                                        }
                                        return if6731;
                                      };
                                      var call6740 = callmethodChecked(var_prelude, "for()do", [1, 1], call6726, block6727);
                                      if6721 = call6740;
                                    }
                                    if6709 = if6721;
                                  } else {
                                    var if6741 = GraceDone;
                                    setLineNumber(1047);    // compilenode string
                                    var string6742 = new GraceString("member");
                                    var call6744 = callmethodChecked(var_node, "kind", [0]);
                                    var opresult6746 = callmethodChecked(call6744, "==", [1], string6742);
                                    if (Grace_isTrue(opresult6746)) {
                                      setLineNumber(1048);    // compilenode string
                                      var string6747 = new GraceString("");
                                      var call6749 = callmethodChecked(var_node, "value", [0]);
                                      var string6751 = new GraceString(".");
                                      var call6753 = callmethodChecked(var_node, "in", [0]);
                                      var call6754 = callmethodChecked(call6753, "value", [0]);
                                      var string6756 = new GraceString("");
                                      var opresult6758 = callmethodChecked(string6756, "++", [1], call6754);
                                      var opresult6760 = callmethodChecked(opresult6758, "++", [1], string6751);
                                      var opresult6762 = callmethodChecked(opresult6760, "++", [1], call6749);
                                      var opresult6764 = callmethodChecked(opresult6762, "++", [1], string6747);
                                      onSelf = true;
                                      var call6765 = callmethodChecked(this, "getTypeLink", [1], opresult6764);
                                      onSelf = true;
                                      var call6766 = callmethodChecked(this, "writer", [0]);
                                      var call6767 = callmethodChecked(call6766, "addText()inMode", [1, 1], call6765, var_plain);
                                      var if6768 = GraceDone;
                                      setLineNumber(1049);    // compilenode identifier
                                      var call6770 = callmethodChecked(var_node, "generics", [0]);
                                      var opresult6772 = callmethodChecked(call6770, "\u2260", [1], GraceFalse);
                                      if (Grace_isTrue(opresult6772)) {
                                        setLineNumber(1050);    // compilenode identifier
                                        var call6773 = callmethodChecked(var_node, "generics", [0]);
                                        var block6774 = new GraceBlock(this, 1050, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block6774.real = function(var_g) {
                                          setLineNumber(1051);    // compilenode identifier
                                          var call6775 = callmethodChecked(var_g, "value", [0]);
                                          onSelf = true;
                                          var call6776 = callmethodChecked(this, "writer", [0]);
                                          var call6777 = callmethodChecked(call6776, "addText()inMode", [1, 1], call6775, var_code);
                                          var if6778 = GraceDone;
                                          setLineNumber(1052);    // compilenode identifier
                                          var call6779 = callmethodChecked(var_node, "generics", [0]);
                                          var call6780 = callmethodChecked(call6779, "last", [0]);
                                          var opresult6783 = callmethodChecked(var_g, "\u2260", [1], call6780);
                                          if (Grace_isTrue(opresult6783)) {
                                            var string6784 = new GraceString(", ");
                                            onSelf = true;
                                            var call6785 = callmethodChecked(this, "writer", [0]);
                                            var call6786 = callmethodChecked(call6785, "addText()inMode", [1, 1], string6784, var_code);
                                            if6778 = call6786;
                                          }
                                          return if6778;
                                        };
                                        var call6787 = callmethodChecked(var_prelude, "for()do", [1, 1], call6773, block6774);
                                        if6768 = call6787;
                                      }
                                      if6741 = if6768;
                                    }
                                    if6709 = if6741;
                                  }
                                  if6696 = if6709;
                                }
                                if6457 = if6696;
                              }
                              setLineNumber(1056);    // compilenode string
                              var string6788 = new GraceString("Description");
                              onSelf = true;
                              var call6789 = callmethodChecked(this, "writer", [0]);
                              var call6790 = callmethodChecked(call6789, "addText()inMode", [1, 1], string6788, var_heading);
                              setLineNumber(1057);    // compilenode string
                              var string6791 = new GraceString("top-box-description");
                              var call6792 = callmethodChecked(superDepth, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call6793 = callmethodChecked(call6792, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call6794 = callmethodChecked(call6793, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string6791, new GraceNum(1));
                              onSelf = true;
                              var call6795 = callmethodChecked(this, "writer", [0]);
                              var call6796 = callmethodChecked(call6795, "addText()inMode", [1, 1], call6794, var_plain);
                              setLineNumber(1058);    // compilenode string
                              var string6797 = new GraceString("Properties");
                              onSelf = true;
                              var call6798 = callmethodChecked(this, "writer", [0]);
                              var call6799 = callmethodChecked(call6798, "addText()inMode", [1, 1], string6797, var_heading);
                              setLineNumber(1059);    // compilenode call
                              onSelf = true;
                              var call6800 = callmethodChecked(this, "writer", [0]);
                              var call6801 = callmethodChecked(call6800, "dumpBin", [0]);
                              onSelf = true;
                              var call6802 = callmethodChecked(this, "section6", [0]);
                              var call6803 = callmethodChecked(call6802, "insert", [1], call6801);
                              setLineNumber(1060);    // compilenode identifier
                              return GraceTrue;
                            }
                            setLineNumber(961);    // return value
                            if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], if6332)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method visitTypeDec(1) does not have " + 
                                        callmethod(var_Boolean, "asString", [0])._value + "."));
                            return if6332;
                          };
                          func6331.paramCounts = [1];
                          obj5397.methods["visitTypeDec"] = func6331;
                          func6331.definitionLine = 957;
                          func6331.definitionModule = "gracedocMD";
                          var func6804 = function(argcv) {    // method visitMethod(1)up(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_o = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMethod (arg list 1) of visitMethod(1)up(1)"));
                            var var_anc = arguments[curarg];
                            curarg++;
                            if (argcv[1] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitMethod(1)up(1)"));
                            setModuleName("gracedocMD");
                            var if6805 = GraceDone;
                            setLineNumber(1069);    // compilenode identifier
                            var call6806 = callmethodChecked(var_o, "isConfidential", [0]);
                            var call6808 = callmethodChecked(var_settings, "publicOnly", [0]);
                            var opresult6810 = callmethodChecked(call6808, "&&", [1], call6806);
                            if (Grace_isTrue(opresult6810)) {
                              return GraceFalse;
                            }
                            var if6811 = GraceDone;
                            setLineNumber(1070);    // compilenode identifier
                            var call6812 = callmethodChecked(var_o, "isClass", [0]);
                            if (Grace_isTrue(call6812)) {
                              setLineNumber(1071);    // compilenode identifier
                              onSelf = true;
                              var call6813 = callmethodChecked(this, "doClassMethod()up", [1, 1], var_o, var_anc);
                              return call6813;
                            }
                            setLineNumber(1073);    // compilenode call
                            onSelf = true;
                            var call6814 = callmethodChecked(this, "writer", [0]);
                            var call6815 = callmethodChecked(call6814, "addBullet", [0]);
                            setLineNumber(1074);    // compilenode identifier
                            var call6816 = callmethodChecked(var_o, "signature", [0]);
                            var block6817 = new GraceBlock(this, 1074, 1);
                            setLineNumber(1);    // compilenode identifier
                            block6817.real = function(var_part) {
                              setLineNumber(1075);    // compilenode identifier
                              var call6818 = callmethodChecked(var_part, "name", [0]);
                              onSelf = true;
                              var call6820 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                              var opresult6822 = callmethodChecked(call6820, "++", [1], call6818);
                              onSelf = true;
                              var call6823 = callmethodChecked(this, "writer", [0]);
                              var call6824 = callmethodChecked(call6823, "addText()inMode", [1, 1], opresult6822, var_code);
                              var if6825 = GraceDone;
                              setLineNumber(1077);    // compilenode identifier
                              var call6827 = callmethodChecked(var_part, "params", [0]);
                              var call6828 = callmethodChecked(call6827, "size", [0]);
                              var opresult6830 = callmethodChecked(call6828, ">", [1], new GraceNum(0));
                              if (Grace_isTrue(opresult6830)) {
                                setLineNumber(1078);    // compilenode string
                                var string6831 = new GraceString(" ( ");
                                onSelf = true;
                                var call6832 = callmethodChecked(this, "writer", [0]);
                                var call6833 = callmethodChecked(call6832, "addText()inMode", [1, 1], string6831, var_code);
                                setLineNumber(1079);    // compilenode identifier
                                var call6834 = callmethodChecked(var_part, "params", [0]);
                                var block6835 = new GraceBlock(this, 1079, 1);
                                setLineNumber(1);    // compilenode identifier
                                block6835.real = function(var_param) {
                                  var if6836 = GraceDone;
                                  setLineNumber(1080);    // compilenode identifier
                                  var call6838 = callmethodChecked(var_param, "dtype", [0]);
                                  var opresult6840 = callmethodChecked(call6838, "\u2260", [1], GraceFalse);
                                  if (Grace_isTrue(opresult6840)) {
                                    setLineNumber(1081);    // compilenode identifier
                                    var call6841 = callmethodChecked(var_param, "nameString", [0]);
                                    onSelf = true;
                                    var call6842 = callmethodChecked(this, "writer", [0]);
                                    var call6843 = callmethodChecked(call6842, "addText()inMode", [1, 1], call6841, var_code);
                                    setLineNumber(1082);    // compilenode call
                                    onSelf = true;
                                    var call6844 = callmethodChecked(this, "writer", [0]);
                                    var call6845 = callmethodChecked(call6844, "addColon", [0]);
                                    setLineNumber(1083);    // compilenode call
                                    onSelf = true;
                                    var call6846 = callmethodChecked(this, "writer", [0]);
                                    var call6847 = callmethodChecked(call6846, "addSpace", [0]);
                                    var if6848 = GraceDone;
                                    setLineNumber(1084);    // compilenode string
                                    var string6849 = new GraceString("identifier");
                                    var call6851 = callmethodChecked(var_param, "dtype", [0]);
                                    var call6852 = callmethodChecked(call6851, "kind", [0]);
                                    var opresult6854 = callmethodChecked(call6852, "==", [1], string6849);
                                    if (Grace_isTrue(opresult6854)) {
                                      setLineNumber(1085);    // compilenode identifier
                                      var call6855 = callmethodChecked(var_param, "dtype", [0]);
                                      var call6856 = callmethodChecked(call6855, "value", [0]);
                                      onSelf = true;
                                      var call6857 = callmethodChecked(this, "getTypeLink", [1], call6856);
                                      onSelf = true;
                                      var call6858 = callmethodChecked(this, "writer", [0]);
                                      var call6859 = callmethodChecked(call6858, "addText()inMode", [1, 1], call6857, var_plain);
                                      if6848 = call6859;
                                    } else {
                                      var if6860 = GraceDone;
                                      setLineNumber(1086);    // compilenode string
                                      var string6861 = new GraceString("generic");
                                      var call6863 = callmethodChecked(var_param, "dtype", [0]);
                                      var call6864 = callmethodChecked(call6863, "kind", [0]);
                                      var opresult6866 = callmethodChecked(call6864, "==", [1], string6861);
                                      if (Grace_isTrue(opresult6866)) {
                                        setLineNumber(1087);    // compilenode identifier
                                        var call6867 = callmethodChecked(var_param, "dtype", [0]);
                                        var call6868 = callmethodChecked(call6867, "value", [0]);
                                        var call6869 = callmethodChecked(call6868, "value", [0]);
                                        onSelf = true;
                                        var call6870 = callmethodChecked(this, "getTypeLink", [1], call6869);
                                        onSelf = true;
                                        var call6871 = callmethodChecked(this, "writer", [0]);
                                        var call6872 = callmethodChecked(call6871, "addText()inMode", [1, 1], call6870, var_plain);
                                        setLineNumber(1088);    // compilenode block
                                        var block6873 = new GraceBlock(this, 1088, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block6873.real = function(var_each) {
                                          setLineNumber(1088);    // compilenode string
                                          var string6874 = new GraceString("");
                                          var call6876 = callmethodChecked(var_each, "value", [0]);
                                          onSelf = true;
                                          var call6877 = callmethodChecked(this, "getTypeLink", [1], call6876);
                                          var string6879 = new GraceString("");
                                          var opresult6881 = callmethodChecked(string6879, "++", [1], call6877);
                                          var opresult6883 = callmethodChecked(opresult6881, "++", [1], string6874);
                                          onSelf = true;
                                          var call6884 = callmethodChecked(this, "writer", [0]);
                                          var call6885 = callmethodChecked(call6884, "addText()inMode", [1, 1], opresult6883, var_plain);
                                          return call6885;
                                        };
                                        var block6886 = new GraceBlock(this, 1088, 0);
                                        block6886.real = function() {
                                          onSelf = true;
                                          var call6887 = callmethodChecked(this, "writer", [0]);
                                          var call6888 = callmethodChecked(call6887, "addComma", [0]);
                                          return call6888;
                                        };
                                        var call6889 = callmethodChecked(var_param, "dtype", [0]);
                                        var call6890 = callmethodChecked(call6889, "args", [0]);
                                        var call6891 = callmethodChecked(call6890, "do()separatedBy", [1, 1], block6873, block6886);
                                        if6860 = call6891;
                                      }
                                      if6848 = if6860;
                                    }
                                    if6836 = if6848;
                                  } else {
                                    setLineNumber(1092);    // compilenode identifier
                                    var call6892 = callmethodChecked(var_param, "nameString", [0]);
                                    onSelf = true;
                                    var call6893 = callmethodChecked(this, "writer", [0]);
                                    var call6894 = callmethodChecked(call6893, "addText()inMode", [1, 1], call6892, var_code);
                                    if6836 = call6894;
                                  }
                                  var if6895 = GraceDone;
                                  setLineNumber(1094);    // compilenode identifier
                                  var call6896 = callmethodChecked(var_part, "params", [0]);
                                  var call6897 = callmethodChecked(call6896, "last", [0]);
                                  var opresult6900 = callmethodChecked(var_param, "\u2260", [1], call6897);
                                  var call6903 = callmethodChecked(var_part, "params", [0]);
                                  var call6904 = callmethodChecked(call6903, "size", [0]);
                                  var opresult6906 = callmethodChecked(call6904, ">", [1], new GraceNum(1));
                                  var opresult6908 = callmethodChecked(opresult6906, "&&", [1], opresult6900);
                                  if (Grace_isTrue(opresult6908)) {
                                    setLineNumber(1095);    // compilenode call
                                    onSelf = true;
                                    var call6909 = callmethodChecked(this, "writer", [0]);
                                    var call6910 = callmethodChecked(call6909, "addComma", [0]);
                                    if6895 = call6910;
                                  }
                                  return if6895;
                                };
                                var call6911 = callmethodChecked(var_prelude, "for()do", [1, 1], call6834, block6835);
                                setLineNumber(1098);    // compilenode string
                                var string6912 = new GraceString(")");
                                onSelf = true;
                                var call6913 = callmethodChecked(this, "writer", [0]);
                                var call6914 = callmethodChecked(call6913, "addText()inMode", [1, 1], string6912, var_code);
                                if6825 = call6914;
                              }
                              return if6825;
                            };
                            var call6915 = callmethodChecked(var_prelude, "for()do", [1, 1], call6816, block6817);
                            setLineNumber(1101);    // compilenode call
                            onSelf = true;
                            var call6916 = callmethodChecked(this, "writer", [0]);
                            var call6917 = callmethodChecked(call6916, "addSpace", [0]);
                            setLineNumber(1102);    // compilenode string
                            var string6918 = new GraceString("->");
                            onSelf = true;
                            var call6919 = callmethodChecked(this, "writer", [0]);
                            var call6920 = callmethodChecked(call6919, "addText()inMode", [1, 1], string6918, var_code);
                            var if6921 = GraceDone;
                            setLineNumber(1103);    // compilenode identifier
                            var call6923 = callmethodChecked(var_o, "dtype", [0]);
                            var opresult6925 = callmethodChecked(call6923, "\u2260", [1], GraceFalse);
                            if (Grace_isTrue(opresult6925)) {
                              setLineNumber(1104);    // compilenode identifier
                              var call6926 = callmethodChecked(var_o, "dtype", [0]);
                              var call6927 = callmethodChecked(call6926, "value", [0]);
                              onSelf = true;
                              var call6928 = callmethodChecked(this, "getTypeLink", [1], call6927);
                              onSelf = true;
                              var call6929 = callmethodChecked(this, "writer", [0]);
                              var call6930 = callmethodChecked(call6929, "addText()inMode", [1, 1], call6928, var_plain);
                              if6921 = call6930;
                            } else {
                              setLineNumber(1106);    // compilenode string
                              var string6931 = new GraceString("Done");
                              onSelf = true;
                              var call6932 = callmethodChecked(this, "getTypeLink", [1], string6931);
                              onSelf = true;
                              var call6933 = callmethodChecked(this, "writer", [0]);
                              var call6934 = callmethodChecked(call6933, "addText()inMode", [1, 1], call6932, var_plain);
                              if6921 = call6934;
                            }
                            setLineNumber(1108);    // compilenode call
                            onSelf = true;
                            var call6935 = callmethodChecked(this, "writer", [0]);
                            var call6936 = callmethodChecked(call6935, "addNewline", [0]);
                            setLineNumber(1109);    // compilenode string
                            var string6937 = new GraceString("description");
                            var call6938 = callmethodChecked(superDepth, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call6939 = callmethodChecked(call6938, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call6940 = callmethodChecked(call6939, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string6937, new GraceNum(2));
                            onSelf = true;
                            var call6941 = callmethodChecked(this, "writer", [0]);
                            var call6942 = callmethodChecked(call6941, "addText()inMode", [1, 1], call6940, var_plain);
                            setLineNumber(1112);    // compilenode call
                            onSelf = true;
                            var call6943 = callmethodChecked(this, "writer", [0]);
                            var call6944 = callmethodChecked(call6943, "dumpBin", [0]);
                            onSelf = true;
                            var call6945 = callmethodChecked(this, "section6", [0]);
                            var call6946 = callmethodChecked(call6945, "insert", [1], call6944);
                            setLineNumber(1113);    // compilenode identifier
                            return GraceFalse;
                          };
                          func6804.paramCounts = [1, 1];
                          obj5397.methods["visitMethod()up"] = func6804;
                          func6804.definitionLine = 1067;
                          func6804.definitionModule = "gracedocMD";
                          var func6947 = function(argcv) {    // method buildDefChain(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_anc = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for buildDefChain(1)"));
                            setModuleName("gracedocMD");
                            setLineNumber(1118);    // compilenode identifier
                            var var_a = var_anc;
                            setLineNumber(1119);    // compilenode string
                            var string6948 = new GraceString("");
                            var var_s = string6948;
                            setLineNumber(1120);    // compilenode block
                            var block6949 = new GraceBlock(this, 1120, 0);
                            block6949.real = function() {
                              var call6950 = callmethodChecked(var_a, "isEmpty", [0]);
                              var call6951 = callmethodChecked(call6950, "not", [0]);
                              return call6951;
                            };
                            var block6952 = new GraceBlock(this, 1120, 0);
                            block6952.real = function() {
                              var if6953 = GraceDone;
                              setLineNumber(1121);    // compilenode identifier
                              var call6954 = callmethodChecked(var_a, "parent", [0]);
                              var call6955 = callmethodChecked(call6954, "kind", [0]);
                              var string6957 = new GraceString("defdec");
                              var opresult6959 = callmethodChecked(string6957, "==", [1], call6955);
                              if (Grace_isTrue(opresult6959)) {
                                setLineNumber(1122);    // compilenode string
                                var string6961 = new GraceString(".");
                                var call6963 = callmethodChecked(var_a, "parent", [0]);
                                var call6964 = callmethodChecked(call6963, "nameString", [0]);
                                var opresult6966 = callmethodChecked(call6964, "++", [1], string6961);
                                var opresult6968 = callmethodChecked(opresult6966, "++", [1], var_s);
                                var_s = opresult6968;
                                if6953 = GraceDone;
                              } else {
                                var if6969 = GraceDone;
                                setLineNumber(1124);    // compilenode identifier
                                var call6970 = callmethodChecked(var_a, "parent", [0]);
                                var call6971 = callmethodChecked(call6970, "kind", [0]);
                                var string6973 = new GraceString("object");
                                var opresult6975 = callmethodChecked(string6973, "\u2260", [1], call6971);
                                if (Grace_isTrue(opresult6975)) {
                                  setLineNumber(1125);    // compilenode identifier
                                  throw new ReturnException(var_s, returnTarget);
                                }
                                if6953 = if6969;
                              }
                              setLineNumber(1127);    // compilenode identifier
                              var call6976 = callmethodChecked(var_a, "forebears", [0]);
                              var_a = call6976;
                              return GraceDone;
                            };
                            var call6977 = callmethodChecked(var_prelude, "while()do", [1, 1], block6949, block6952);
                            setLineNumber(1129);    // compilenode identifier
                            return var_s;
                          };
                          func6947.paramCounts = [1];
                          obj5397.methods["buildDefChain"] = func6947;
                          func6947.definitionLine = 1117;
                          func6947.definitionModule = "gracedocMD";
                          var func6978 = function(argcv) {    // method doClassMethod(1)up(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_m = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for doClassMethod (arg list 1) of doClassMethod(1)up(1)"));
                            var var_anc = arguments[curarg];
                            curarg++;
                            if (argcv[1] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of doClassMethod(1)up(1)"));
                            setModuleName("gracedocMD");
                            setLineNumber(1135);    // compilenode identifier
                            var call6979 = callmethodChecked(var_m, "body", [0]);
                            var call6980 = callmethodChecked(call6979, "last", [0]);
                            var var_o = call6980;
                            var if6981 = GraceDone;
                            setLineNumber(1138);    // compilenode call
                            onSelf = true;
                            var call6983 = callmethodChecked(this, "isOnClassPage", [0]);
                            var opresult6985 = callmethodChecked(call6983, "==", [1], GraceFalse);
                            if (Grace_isTrue(opresult6985)) {
                              setLineNumber(1139);    // compilenode identifier
                              var call6986 = callmethodChecked(var_m, "nameString", [0]);
                              var var_n = call6986;
                              setLineNumber(1140);    // compilenode identifier
                              onSelf = true;
                              var call6987 = callmethodChecked(this, "getClassLink", [1], var_n);
                              var var_link = call6987;
                              setLineNumber(1141);    // compilenode identifier
                              onSelf = true;
                              var call6988 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                              var var_ch = call6988;
                              var if6989 = GraceDone;
                              setLineNumber(1142);    // compilenode string
                              var string6990 = new GraceString("");
                              var opresult6993 = callmethodChecked(var_ch, "\u2260", [1], string6990);
                              if (Grace_isTrue(opresult6993)) {
                                var string6995 = new GraceString("`");
                                var opresult6997 = callmethodChecked(string6995, "++", [1], var_ch);
                                var_ch = opresult6997;
                                var string6998 = new GraceString("`");
                                var opresult7001 = callmethodChecked(var_ch, "++", [1], string6998);
                                var_ch = opresult7001;
                                if6989 = GraceDone;
                              }
                              setLineNumber(1143);    // compilenode string
                              var string7002 = new GraceString("");
                              var string7005 = new GraceString("");
                              var string7008 = new GraceString("");
                              var opresult7010 = callmethodChecked(string7008, "++", [1], var_ch);
                              var opresult7012 = callmethodChecked(opresult7010, "++", [1], string7005);
                              var opresult7014 = callmethodChecked(opresult7012, "++", [1], var_link);
                              var opresult7016 = callmethodChecked(opresult7014, "++", [1], string7002);
                              var var_chain = opresult7016;
                              setLineNumber(1144);    // compilenode call
                              onSelf = true;
                              var call7017 = callmethodChecked(this, "writer", [0]);
                              var call7018 = callmethodChecked(call7017, "addBullet", [0]);
                              var if7019 = GraceDone;
                              setLineNumber(1145);    // compilenode string
                              var string7020 = new GraceString("");
                              var opresult7023 = callmethodChecked(var_chain, "\u2260", [1], string7020);
                              if (Grace_isTrue(opresult7023)) {
                                var string7024 = new GraceString("");
                                var string7027 = new GraceString("");
                                var opresult7029 = callmethodChecked(string7027, "++", [1], var_chain);
                                var opresult7031 = callmethodChecked(opresult7029, "++", [1], string7024);
                                onSelf = true;
                                var call7032 = callmethodChecked(this, "writer", [0]);
                                var call7033 = callmethodChecked(call7032, "addText()inMode", [1, 1], opresult7031, var_plain);
                                if7019 = call7033;
                              }
                              var if7034 = GraceDone;
                              setLineNumber(1146);    // compilenode identifier
                              var call7035 = callmethodChecked(var_m, "signature", [0]);
                              var call7036 = callmethodChecked(call7035, "isEmpty", [0]);
                              var call7037 = callmethodChecked(call7036, "prefix!", [0]);
                              if (Grace_isTrue(call7037)) {
                                var string7038 = new GraceString(":: ");
                                onSelf = true;
                                var call7039 = callmethodChecked(this, "writer", [0]);
                                var call7040 = callmethodChecked(call7039, "addText()inMode", [1, 1], string7038, var_code);
                                if7034 = call7040;
                              }
                              setLineNumber(1147);    // compilenode block
                              var block7041 = new GraceBlock(this, 1147, 1);
                              setLineNumber(1);    // compilenode identifier
                              block7041.real = function(var_part) {
                                var if7042 = GraceDone;
                                setLineNumber(1148);    // compilenode identifier
                                var call7044 = callmethodChecked(var_part, "params", [0]);
                                var call7045 = callmethodChecked(call7044, "size", [0]);
                                var opresult7047 = callmethodChecked(call7045, ">", [1], new GraceNum(0));
                                if (Grace_isTrue(opresult7047)) {
                                  setLineNumber(1149);    // compilenode identifier
                                  var call7048 = callmethodChecked(var_part, "name", [0]);
                                  onSelf = true;
                                  var call7049 = callmethodChecked(this, "writer", [0]);
                                  var call7050 = callmethodChecked(call7049, "addText()inMode", [1, 1], call7048, var_code);
                                  setLineNumber(1150);    // compilenode string
                                  var string7051 = new GraceString("(");
                                  onSelf = true;
                                  var call7052 = callmethodChecked(this, "writer", [0]);
                                  var call7053 = callmethodChecked(call7052, "addText()inMode", [1, 1], string7051, var_code);
                                  setLineNumber(1151);    // compilenode identifier
                                  var call7054 = callmethodChecked(var_part, "params", [0]);
                                  var block7055 = new GraceBlock(this, 1151, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block7055.real = function(var_param) {
                                    var if7056 = GraceDone;
                                    setLineNumber(1152);    // compilenode identifier
                                    var call7058 = callmethodChecked(var_param, "dtype", [0]);
                                    var opresult7060 = callmethodChecked(call7058, "\u2260", [1], GraceFalse);
                                    if (Grace_isTrue(opresult7060)) {
                                      setLineNumber(1153);    // compilenode identifier
                                      var call7061 = callmethodChecked(var_param, "value", [0]);
                                      onSelf = true;
                                      var call7062 = callmethodChecked(this, "writer", [0]);
                                      var call7063 = callmethodChecked(call7062, "addText()inMode", [1, 1], call7061, var_code);
                                      setLineNumber(1154);    // compilenode call
                                      onSelf = true;
                                      var call7064 = callmethodChecked(this, "writer", [0]);
                                      var call7065 = callmethodChecked(call7064, "addColon", [0]);
                                      setLineNumber(1155);    // compilenode identifier
                                      var call7066 = callmethodChecked(var_param, "dtype", [0]);
                                      var call7067 = callmethodChecked(call7066, "nameString", [0]);
                                      onSelf = true;
                                      var call7068 = callmethodChecked(this, "getTypeLink", [1], call7067);
                                      onSelf = true;
                                      var call7069 = callmethodChecked(this, "writer", [0]);
                                      var call7070 = callmethodChecked(call7069, "addText()inMode", [1, 1], call7068, var_plain);
                                      if7056 = call7070;
                                    } else {
                                      setLineNumber(1157);    // compilenode identifier
                                      var call7071 = callmethodChecked(var_param, "value", [0]);
                                      onSelf = true;
                                      var call7072 = callmethodChecked(this, "writer", [0]);
                                      var call7073 = callmethodChecked(call7072, "addText()inMode", [1, 1], call7071, var_code);
                                      if7056 = call7073;
                                    }
                                    var if7074 = GraceDone;
                                    setLineNumber(1159);    // compilenode identifier
                                    var call7075 = callmethodChecked(var_part, "params", [0]);
                                    var call7076 = callmethodChecked(call7075, "last", [0]);
                                    var opresult7079 = callmethodChecked(var_param, "\u2260", [1], call7076);
                                    var call7082 = callmethodChecked(var_part, "params", [0]);
                                    var call7083 = callmethodChecked(call7082, "size", [0]);
                                    var opresult7085 = callmethodChecked(call7083, ">", [1], new GraceNum(1));
                                    var opresult7087 = callmethodChecked(opresult7085, "&&", [1], opresult7079);
                                    if (Grace_isTrue(opresult7087)) {
                                      setLineNumber(1160);    // compilenode call
                                      onSelf = true;
                                      var call7088 = callmethodChecked(this, "writer", [0]);
                                      var call7089 = callmethodChecked(call7088, "addComma", [0]);
                                      if7074 = call7089;
                                    }
                                    return if7074;
                                  };
                                  var call7090 = callmethodChecked(var_prelude, "for()do", [1, 1], call7054, block7055);
                                  setLineNumber(1163);    // compilenode string
                                  var string7091 = new GraceString(")");
                                  onSelf = true;
                                  var call7092 = callmethodChecked(this, "writer", [0]);
                                  var call7093 = callmethodChecked(call7092, "addText()inMode", [1, 1], string7091, var_code);
                                  if7042 = call7093;
                                }
                                return if7042;
                              };
                              setLineNumber(1147);    // compilenode identifier
                              var call7094 = callmethodChecked(var_m, "signature", [0]);
                              var call7095 = callmethodChecked(call7094, "do", [1], block7041);
                              var if7096 = GraceDone;
                              setLineNumber(1167);    // compilenode identifier
                              var call7098 = callmethodChecked(var_m, "dtype", [0]);
                              var opresult7100 = callmethodChecked(call7098, "\u2260", [1], GraceFalse);
                              if (Grace_isTrue(opresult7100)) {
                                setLineNumber(1168);    // compilenode string
                                var string7101 = new GraceString(" -> ");
                                onSelf = true;
                                var call7102 = callmethodChecked(this, "writer", [0]);
                                var call7103 = callmethodChecked(call7102, "addText()inMode", [1, 1], string7101, var_code);
                                var if7104 = GraceDone;
                                setLineNumber(1169);    // compilenode string
                                var string7105 = new GraceString("identifier");
                                var call7107 = callmethodChecked(var_m, "dtype", [0]);
                                var call7108 = callmethodChecked(call7107, "kind", [0]);
                                var opresult7110 = callmethodChecked(call7108, "==", [1], string7105);
                                if (Grace_isTrue(opresult7110)) {
                                  setLineNumber(1170);    // compilenode identifier
                                  var call7111 = callmethodChecked(var_m, "dtype", [0]);
                                  var call7112 = callmethodChecked(call7111, "value", [0]);
                                  onSelf = true;
                                  var call7113 = callmethodChecked(this, "getTypeLink", [1], call7112);
                                  onSelf = true;
                                  var call7114 = callmethodChecked(this, "writer", [0]);
                                  var call7115 = callmethodChecked(call7114, "addText()inMode", [1, 1], call7113, var_plain);
                                  if7104 = call7115;
                                } else {
                                  var if7116 = GraceDone;
                                  setLineNumber(1171);    // compilenode string
                                  var string7117 = new GraceString("generic");
                                  var call7119 = callmethodChecked(var_m, "dtype", [0]);
                                  var call7120 = callmethodChecked(call7119, "kind", [0]);
                                  var opresult7122 = callmethodChecked(call7120, "==", [1], string7117);
                                  if (Grace_isTrue(opresult7122)) {
                                    setLineNumber(1172);    // compilenode identifier
                                    var call7123 = callmethodChecked(var_m, "dtype", [0]);
                                    var call7124 = callmethodChecked(call7123, "value", [0]);
                                    var call7125 = callmethodChecked(call7124, "value", [0]);
                                    onSelf = true;
                                    var call7126 = callmethodChecked(this, "getTypeLink", [1], call7125);
                                    onSelf = true;
                                    var call7127 = callmethodChecked(this, "writer", [0]);
                                    var call7128 = callmethodChecked(call7127, "addText()inMode", [1, 1], call7126, var_plain);
                                    setLineNumber(1173);    // compilenode block
                                    var block7129 = new GraceBlock(this, 1173, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block7129.real = function(var_each) {
                                      setLineNumber(1173);    // compilenode string
                                      var string7130 = new GraceString("");
                                      var call7132 = callmethodChecked(var_each, "value", [0]);
                                      onSelf = true;
                                      var call7133 = callmethodChecked(this, "getTypeLink", [1], call7132);
                                      var string7135 = new GraceString("");
                                      var opresult7137 = callmethodChecked(string7135, "++", [1], call7133);
                                      var opresult7139 = callmethodChecked(opresult7137, "++", [1], string7130);
                                      onSelf = true;
                                      var call7140 = callmethodChecked(this, "writer", [0]);
                                      var call7141 = callmethodChecked(call7140, "addText()inMode", [1, 1], opresult7139, var_plain);
                                      return call7141;
                                    };
                                    var block7142 = new GraceBlock(this, 1173, 0);
                                    block7142.real = function() {
                                      onSelf = true;
                                      var call7143 = callmethodChecked(this, "writer", [0]);
                                      var call7144 = callmethodChecked(call7143, "addComma", [0]);
                                      return call7144;
                                    };
                                    var call7145 = callmethodChecked(var_m, "dtype", [0]);
                                    var call7146 = callmethodChecked(call7145, "args", [0]);
                                    var call7147 = callmethodChecked(call7146, "do()separatedBy", [1, 1], block7129, block7142);
                                    if7116 = call7147;
                                  }
                                  if7104 = if7116;
                                }
                                if7096 = if7104;
                              }
                              var if7148 = GraceDone;
                              setLineNumber(1177);    // compilenode identifier
                              var call7150 = callmethodChecked(var_o, "superclass", [0]);
                              var opresult7152 = callmethodChecked(call7150, "\u2260", [1], GraceFalse);
                              if (Grace_isTrue(opresult7152)) {
                                setLineNumber(1178);    // compilenode identifier
                                var call7153 = callmethodChecked(var_o, "superclass", [0]);
                                var call7154 = callmethodChecked(call7153, "accept", [1], this);
                                if7148 = call7154;
                              }
                              setLineNumber(1181);    // compilenode call
                              onSelf = true;
                              var call7155 = callmethodChecked(this, "outdir", [0]);
                              var string7156 = new GraceString("class");
                              var call7157 = callmethodChecked(var_graceDocVisitor, "createFrom()outTo()as", [1, 1, 1], var_n, call7155, string7156);
                              var var_classVis = call7157;
                              setLineNumber(1182);    // compilenode identifier
                              var call7158 = callmethodChecked(var_o, "accept", [1], var_classVis);
                              setLineNumber(1183);    // compilenode identifier
                              var call7159 = callmethodChecked(var_classVis, "generate", [0]);
                              setLineNumber(1185);    // compilenode call
                              onSelf = true;
                              var call7160 = callmethodChecked(this, "writer", [0]);
                              var call7161 = callmethodChecked(call7160, "addNewline", [0]);
                              setLineNumber(1186);    // compilenode call
                              onSelf = true;
                              var call7162 = callmethodChecked(this, "writer", [0]);
                              var call7163 = callmethodChecked(call7162, "addNewline", [0]);
                              setLineNumber(1187);    // compilenode call
                              onSelf = true;
                              var call7164 = callmethodChecked(this, "writer", [0]);
                              var call7165 = callmethodChecked(call7164, "dumpBin", [0]);
                              onSelf = true;
                              var call7166 = callmethodChecked(this, "section6", [0]);
                              var call7167 = callmethodChecked(call7166, "insert", [1], call7165);
                              setLineNumber(1189);    // compilenode identifier
                              return GraceFalse;
                            } else {
                              setLineNumber(1193);    // compilenode call
                              onSelf = true;
                              var call7168 = callmethodChecked(this, "writer", [0]);
                              var call7169 = callmethodChecked(call7168, "addBullet", [0]);
                              setLineNumber(1194);    // compilenode identifier
                              var call7170 = callmethodChecked(var_o, "name", [0]);
                              onSelf = true;
                              var call7171 = callmethodChecked(this, "writer", [0]);
                              var call7172 = callmethodChecked(call7171, "addText()inMode", [1, 1], call7170, var_code);
                              setLineNumber(1196);    // compilenode identifier
                              var call7173 = callmethodChecked(var_m, "signature", [0]);
                              var block7174 = new GraceBlock(this, 1196, 1);
                              setLineNumber(1);    // compilenode identifier
                              block7174.real = function(var_part) {
                                setLineNumber(1197);    // compilenode identifier
                                var call7175 = callmethodChecked(var_part, "name", [0]);
                                onSelf = true;
                                var call7176 = callmethodChecked(this, "writer", [0]);
                                var call7177 = callmethodChecked(call7176, "addText()inMode", [1, 1], call7175, var_code);
                                var if7178 = GraceDone;
                                setLineNumber(1198);    // compilenode identifier
                                var call7180 = callmethodChecked(var_part, "params", [0]);
                                var call7181 = callmethodChecked(call7180, "size", [0]);
                                var opresult7183 = callmethodChecked(call7181, ">", [1], new GraceNum(0));
                                if (Grace_isTrue(opresult7183)) {
                                  setLineNumber(1199);    // compilenode string
                                  var string7184 = new GraceString(" (");
                                  onSelf = true;
                                  var call7185 = callmethodChecked(this, "writer", [0]);
                                  var call7186 = callmethodChecked(call7185, "addText()inMode", [1, 1], string7184, var_code);
                                  setLineNumber(1200);    // compilenode identifier
                                  var call7187 = callmethodChecked(var_part, "params", [0]);
                                  var block7188 = new GraceBlock(this, 1200, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block7188.real = function(var_param) {
                                    var if7189 = GraceDone;
                                    setLineNumber(1201);    // compilenode identifier
                                    var call7191 = callmethodChecked(var_param, "dtype", [0]);
                                    var opresult7193 = callmethodChecked(call7191, "\u2260", [1], GraceFalse);
                                    if (Grace_isTrue(opresult7193)) {
                                      setLineNumber(1202);    // compilenode identifier
                                      var call7194 = callmethodChecked(var_param, "value", [0]);
                                      onSelf = true;
                                      var call7195 = callmethodChecked(this, "writer", [0]);
                                      var call7196 = callmethodChecked(call7195, "addText()inMode", [1, 1], call7194, var_code);
                                      setLineNumber(1203);    // compilenode call
                                      onSelf = true;
                                      var call7197 = callmethodChecked(this, "writer", [0]);
                                      var call7198 = callmethodChecked(call7197, "addColon", [0]);
                                      setLineNumber(1204);    // compilenode identifier
                                      var call7199 = callmethodChecked(var_param, "dtype", [0]);
                                      var call7200 = callmethodChecked(call7199, "value", [0]);
                                      onSelf = true;
                                      var call7201 = callmethodChecked(this, "getTypeLink", [1], call7200);
                                      onSelf = true;
                                      var call7202 = callmethodChecked(this, "writer", [0]);
                                      var call7203 = callmethodChecked(call7202, "addText()inMode", [1, 1], call7201, var_plain);
                                      if7189 = call7203;
                                    } else {
                                      setLineNumber(1206);    // compilenode identifier
                                      var call7204 = callmethodChecked(var_param, "value", [0]);
                                      onSelf = true;
                                      var call7205 = callmethodChecked(this, "writer", [0]);
                                      var call7206 = callmethodChecked(call7205, "addText()inMode", [1, 1], call7204, var_code);
                                      setLineNumber(1207);    // compilenode call
                                      onSelf = true;
                                      var call7207 = callmethodChecked(this, "writer", [0]);
                                      var call7208 = callmethodChecked(call7207, "addColon", [0]);
                                      if7189 = call7208;
                                    }
                                    var if7209 = GraceDone;
                                    setLineNumber(1209);    // compilenode identifier
                                    var call7210 = callmethodChecked(var_part, "params", [0]);
                                    var call7211 = callmethodChecked(call7210, "size", [0]);
                                    var call7212 = callmethodChecked(var_part, "params", [0]);
                                    var call7213 = callmethodChecked(call7212, "at", [1], call7211);
                                    var opresult7216 = callmethodChecked(var_param, "\u2260", [1], call7213);
                                    var call7219 = callmethodChecked(var_part, "params", [0]);
                                    var call7220 = callmethodChecked(call7219, "size", [0]);
                                    var opresult7222 = callmethodChecked(call7220, ">", [1], new GraceNum(1));
                                    var opresult7224 = callmethodChecked(opresult7222, "&&", [1], opresult7216);
                                    if (Grace_isTrue(opresult7224)) {
                                      setLineNumber(1210);    // compilenode call
                                      onSelf = true;
                                      var call7225 = callmethodChecked(this, "writer", [0]);
                                      var call7226 = callmethodChecked(call7225, "addComma", [0]);
                                      if7209 = call7226;
                                    }
                                    return if7209;
                                  };
                                  var call7227 = callmethodChecked(var_prelude, "for()do", [1, 1], call7187, block7188);
                                  if7178 = call7227;
                                }
                                setLineNumber(1214);    // compilenode string
                                var string7228 = new GraceString(")");
                                onSelf = true;
                                var call7229 = callmethodChecked(this, "writer", [0]);
                                var call7230 = callmethodChecked(call7229, "addText()inMode", [1, 1], string7228, var_code);
                                return call7230;
                              };
                              var call7231 = callmethodChecked(var_prelude, "for()do", [1, 1], call7173, block7174);
                              var if7232 = GraceDone;
                              setLineNumber(1217);    // compilenode identifier
                              var call7234 = callmethodChecked(var_m, "dtype", [0]);
                              var opresult7236 = callmethodChecked(call7234, "\u2260", [1], GraceFalse);
                              if (Grace_isTrue(opresult7236)) {
                                setLineNumber(1218);    // compilenode string
                                var string7237 = new GraceString(" -> ");
                                onSelf = true;
                                var call7238 = callmethodChecked(this, "writer", [0]);
                                var call7239 = callmethodChecked(call7238, "addText()inMode", [1, 1], string7237, var_code);
                                var if7240 = GraceDone;
                                setLineNumber(1219);    // compilenode string
                                var string7241 = new GraceString("identifier");
                                var call7243 = callmethodChecked(var_m, "dtype", [0]);
                                var call7244 = callmethodChecked(call7243, "kind", [0]);
                                var opresult7246 = callmethodChecked(call7244, "==", [1], string7241);
                                if (Grace_isTrue(opresult7246)) {
                                  setLineNumber(1220);    // compilenode identifier
                                  var call7247 = callmethodChecked(var_m, "dtype", [0]);
                                  var call7248 = callmethodChecked(call7247, "value", [0]);
                                  onSelf = true;
                                  var call7249 = callmethodChecked(this, "getTypeLink", [1], call7248);
                                  onSelf = true;
                                  var call7250 = callmethodChecked(this, "writer", [0]);
                                  var call7251 = callmethodChecked(call7250, "addText()inMode", [1, 1], call7249, var_plain);
                                  if7240 = call7251;
                                } else {
                                  var if7252 = GraceDone;
                                  setLineNumber(1221);    // compilenode string
                                  var string7253 = new GraceString("generic");
                                  var call7255 = callmethodChecked(var_m, "dtype", [0]);
                                  var call7256 = callmethodChecked(call7255, "kind", [0]);
                                  var opresult7258 = callmethodChecked(call7256, "==", [1], string7253);
                                  if (Grace_isTrue(opresult7258)) {
                                    setLineNumber(1222);    // compilenode identifier
                                    var call7259 = callmethodChecked(var_m, "dtype", [0]);
                                    var call7260 = callmethodChecked(call7259, "value", [0]);
                                    var call7261 = callmethodChecked(call7260, "value", [0]);
                                    onSelf = true;
                                    var call7262 = callmethodChecked(this, "getTypeLink", [1], call7261);
                                    onSelf = true;
                                    var call7263 = callmethodChecked(this, "writer", [0]);
                                    var call7264 = callmethodChecked(call7263, "addText()inMode", [1, 1], call7262, var_plain);
                                    setLineNumber(1223);    // compilenode block
                                    var block7265 = new GraceBlock(this, 1223, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block7265.real = function(var_each) {
                                      setLineNumber(1223);    // compilenode string
                                      var string7266 = new GraceString("");
                                      var call7268 = callmethodChecked(var_each, "value", [0]);
                                      onSelf = true;
                                      var call7269 = callmethodChecked(this, "getTypeLink", [1], call7268);
                                      var string7271 = new GraceString("");
                                      var opresult7273 = callmethodChecked(string7271, "++", [1], call7269);
                                      var opresult7275 = callmethodChecked(opresult7273, "++", [1], string7266);
                                      onSelf = true;
                                      var call7276 = callmethodChecked(this, "writer", [0]);
                                      var call7277 = callmethodChecked(call7276, "addText()inMode", [1, 1], opresult7275, var_plain);
                                      return call7277;
                                    };
                                    var block7278 = new GraceBlock(this, 1223, 0);
                                    block7278.real = function() {
                                      onSelf = true;
                                      var call7279 = callmethodChecked(this, "writer", [0]);
                                      var call7280 = callmethodChecked(call7279, "addComma", [0]);
                                      return call7280;
                                    };
                                    var call7281 = callmethodChecked(var_m, "dtype", [0]);
                                    var call7282 = callmethodChecked(call7281, "args", [0]);
                                    var call7283 = callmethodChecked(call7282, "do()separatedBy", [1, 1], block7265, block7278);
                                    if7252 = call7283;
                                  }
                                  if7240 = if7252;
                                }
                                if7232 = if7240;
                              }
                              setLineNumber(1227);    // compilenode call
                              onSelf = true;
                              var call7284 = callmethodChecked(this, "writer", [0]);
                              var call7285 = callmethodChecked(call7284, "addNewline", [0]);
                              setLineNumber(1228);    // compilenode string
                              var string7286 = new GraceString("top-box-description");
                              var call7287 = callmethodChecked(superDepth, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call7288 = callmethodChecked(call7287, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call7289 = callmethodChecked(call7288, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string7286, new GraceNum(1));
                              onSelf = true;
                              var call7290 = callmethodChecked(this, "writer", [0]);
                              var call7291 = callmethodChecked(call7290, "addText()inMode", [1, 1], call7289, var_plain);
                              setLineNumber(1229);    // compilenode call
                              onSelf = true;
                              var call7292 = callmethodChecked(this, "writer", [0]);
                              var call7293 = callmethodChecked(call7292, "dumpBin", [0]);
                              onSelf = true;
                              var call7294 = callmethodChecked(this, "section6", [0]);
                              var call7295 = callmethodChecked(call7294, "insert", [1], call7293);
                              setLineNumber(1230);    // compilenode identifier
                              return GraceTrue;
                            }
                            setLineNumber(1138);    // return value
                            if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], if6981)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method doClassMethod(1)up(1) does not have " + 
                                        callmethod(var_Boolean, "asString", [0])._value + "."));
                            return if6981;
                          };
                          func6978.paramCounts = [1, 1];
                          obj5397.methods["doClassMethod()up"] = func6978;
                          func6978.definitionLine = 1134;
                          func6978.definitionModule = "gracedocMD";
                          var func7296 = function(argcv) {    // method visitDefDec(1)up(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_o = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitDefDec (arg list 1) of visitDefDec(1)up(1)"));
                            var var_anc = arguments[curarg];
                            curarg++;
                            if (argcv[1] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitDefDec(1)up(1)"));
                            setModuleName("gracedocMD");
                            var if7297 = GraceDone;
                            setLineNumber(1236);    // compilenode call
                            onSelf = true;
                            var call7299 = callmethodChecked(this, "isOnClassPage", [0]);
                            var opresult7301 = callmethodChecked(call7299, "==", [1], GraceTrue);
                            if (Grace_isTrue(opresult7301)) {
                              var if7302 = GraceDone;
                              setLineNumber(1237);    // compilenode identifier
                              var call7303 = callmethodChecked(var_settings, "publicOnly", [0]);
                              var call7304 = callmethodChecked(call7303, "prefix!", [0]);
                              if (Grace_isTrue(call7304)) {
                                setLineNumber(1238);    // compilenode identifier
                                var call7305 = callmethodChecked(var_o, "name", [0]);
                                var call7306 = callmethodChecked(call7305, "value", [0]);
                                var var_n = call7306;
                                setLineNumber(1239);    // compilenode identifier
                                onSelf = true;
                                var call7308 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                                var opresult7310 = callmethodChecked(call7308, "++", [1], var_n);
                                var var_temp = opresult7310;
                                setLineNumber(1240);    // compilenode call
                                onSelf = true;
                                var call7311 = callmethodChecked(this, "writer", [0]);
                                var call7312 = callmethodChecked(call7311, "addBullet", [0]);
                                var if7313 = GraceDone;
                                setLineNumber(1241);    // compilenode string
                                var string7314 = new GraceString("");
                                var opresult7317 = callmethodChecked(var_temp, "\u2260", [1], string7314);
                                if (Grace_isTrue(opresult7317)) {
                                  onSelf = true;
                                  var call7319 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                                  var opresult7321 = callmethodChecked(call7319, "++", [1], var_n);
                                  onSelf = true;
                                  var call7322 = callmethodChecked(this, "writer", [0]);
                                  var call7323 = callmethodChecked(call7322, "addText()inMode", [1, 1], opresult7321, var_code);
                                  if7313 = call7323;
                                }
                                setLineNumber(1242);    // compilenode string
                                var string7324 = new GraceString(" -> ");
                                onSelf = true;
                                var call7325 = callmethodChecked(this, "writer", [0]);
                                var call7326 = callmethodChecked(call7325, "addText()inMode", [1, 1], string7324, var_code);
                                var if7327 = GraceDone;
                                setLineNumber(1243);    // compilenode identifier
                                var call7329 = callmethodChecked(var_o, "dtype", [0]);
                                var opresult7331 = callmethodChecked(call7329, "\u2260", [1], GraceFalse);
                                if (Grace_isTrue(opresult7331)) {
                                  var if7332 = GraceDone;
                                  setLineNumber(1244);    // compilenode string
                                  var string7333 = new GraceString("identifier");
                                  var call7335 = callmethodChecked(var_o, "dtype", [0]);
                                  var call7336 = callmethodChecked(call7335, "kind", [0]);
                                  var opresult7338 = callmethodChecked(call7336, "==", [1], string7333);
                                  if (Grace_isTrue(opresult7338)) {
                                    setLineNumber(1245);    // compilenode identifier
                                    var call7339 = callmethodChecked(var_o, "dtype", [0]);
                                    var call7340 = callmethodChecked(call7339, "value", [0]);
                                    onSelf = true;
                                    var call7341 = callmethodChecked(this, "getTypeLink", [1], call7340);
                                    onSelf = true;
                                    var call7342 = callmethodChecked(this, "writer", [0]);
                                    var call7343 = callmethodChecked(call7342, "addText()inMode", [1, 1], call7341, var_plain);
                                    if7332 = call7343;
                                  } else {
                                    var if7344 = GraceDone;
                                    setLineNumber(1246);    // compilenode string
                                    var string7345 = new GraceString("generic");
                                    var call7347 = callmethodChecked(var_o, "dtype", [0]);
                                    var call7348 = callmethodChecked(call7347, "kind", [0]);
                                    var opresult7350 = callmethodChecked(call7348, "==", [1], string7345);
                                    if (Grace_isTrue(opresult7350)) {
                                      setLineNumber(1247);    // compilenode identifier
                                      var call7351 = callmethodChecked(var_o, "dtype", [0]);
                                      var call7352 = callmethodChecked(call7351, "value", [0]);
                                      var call7353 = callmethodChecked(call7352, "value", [0]);
                                      onSelf = true;
                                      var call7354 = callmethodChecked(this, "getTypeLink", [1], call7353);
                                      onSelf = true;
                                      var call7355 = callmethodChecked(this, "writer", [0]);
                                      var call7356 = callmethodChecked(call7355, "addText()inMode", [1, 1], call7354, var_plain);
                                      setLineNumber(1248);    // compilenode block
                                      var block7357 = new GraceBlock(this, 1248, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block7357.real = function(var_each) {
                                        setLineNumber(1248);    // compilenode string
                                        var string7358 = new GraceString("");
                                        var call7360 = callmethodChecked(var_each, "value", [0]);
                                        onSelf = true;
                                        var call7361 = callmethodChecked(this, "getTypeLink", [1], call7360);
                                        var string7363 = new GraceString("");
                                        var opresult7365 = callmethodChecked(string7363, "++", [1], call7361);
                                        var opresult7367 = callmethodChecked(opresult7365, "++", [1], string7358);
                                        onSelf = true;
                                        var call7368 = callmethodChecked(this, "writer", [0]);
                                        var call7369 = callmethodChecked(call7368, "addText()inMode", [1, 1], opresult7367, var_plain);
                                        return call7369;
                                      };
                                      var block7370 = new GraceBlock(this, 1248, 0);
                                      block7370.real = function() {
                                        onSelf = true;
                                        var call7371 = callmethodChecked(this, "writer", [0]);
                                        var call7372 = callmethodChecked(call7371, "addComma", [0]);
                                        return call7372;
                                      };
                                      var call7373 = callmethodChecked(var_o, "dtype", [0]);
                                      var call7374 = callmethodChecked(call7373, "args", [0]);
                                      var call7375 = callmethodChecked(call7374, "do()separatedBy", [1, 1], block7357, block7370);
                                      if7344 = call7375;
                                    }
                                    if7332 = if7344;
                                  }
                                  if7327 = if7332;
                                }
                                setLineNumber(1251);    // compilenode call
                                onSelf = true;
                                var call7376 = callmethodChecked(this, "writer", [0]);
                                var call7377 = callmethodChecked(call7376, "addNewline", [0]);
                                setLineNumber(1253);    // compilenode string
                                var string7378 = new GraceString("description");
                                var call7379 = callmethodChecked(superDepth, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call7380 = callmethodChecked(call7379, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call7381 = callmethodChecked(call7380, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string7378, new GraceNum(3));
                                onSelf = true;
                                var call7382 = callmethodChecked(this, "writer", [0]);
                                var call7383 = callmethodChecked(call7382, "addText()inMode", [1, 1], call7381, var_plain);
                                setLineNumber(1254);    // compilenode call
                                onSelf = true;
                                var call7384 = callmethodChecked(this, "writer", [0]);
                                var call7385 = callmethodChecked(call7384, "dumpBin", [0]);
                                onSelf = true;
                                var call7386 = callmethodChecked(this, "section4", [0]);
                                var call7387 = callmethodChecked(call7386, "insert", [1], call7385);
                                if7302 = call7387;
                              } else {
                                var if7388 = GraceDone;
                                setLineNumber(1258);    // compilenode identifier
                                var call7389 = callmethodChecked(var_o, "isReadable", [0]);
                                if (Grace_isTrue(call7389)) {
                                  setLineNumber(1260);    // compilenode identifier
                                  var call7390 = callmethodChecked(var_o, "name", [0]);
                                  var call7391 = callmethodChecked(call7390, "value", [0]);
                                  var var_n = call7391;
                                  setLineNumber(1261);    // compilenode identifier
                                  onSelf = true;
                                  var call7393 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                                  var opresult7395 = callmethodChecked(call7393, "++", [1], var_n);
                                  var var_temp = opresult7395;
                                  setLineNumber(1262);    // compilenode call
                                  onSelf = true;
                                  var call7396 = callmethodChecked(this, "writer", [0]);
                                  var call7397 = callmethodChecked(call7396, "addBullet", [0]);
                                  setLineNumber(1263);    // compilenode string
                                  var string7398 = new GraceString("def ");
                                  onSelf = true;
                                  var call7399 = callmethodChecked(this, "writer", [0]);
                                  var call7400 = callmethodChecked(call7399, "addText()inMode", [1, 1], string7398, var_code);
                                  var if7401 = GraceDone;
                                  setLineNumber(1265);    // compilenode string
                                  var string7402 = new GraceString("");
                                  var opresult7405 = callmethodChecked(var_temp, "\u2260", [1], string7402);
                                  if (Grace_isTrue(opresult7405)) {
                                    onSelf = true;
                                    var call7407 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                                    var opresult7409 = callmethodChecked(call7407, "++", [1], var_n);
                                    onSelf = true;
                                    var call7410 = callmethodChecked(this, "writer", [0]);
                                    var call7411 = callmethodChecked(call7410, "addText()inMode", [1, 1], opresult7409, var_code);
                                    if7401 = call7411;
                                  }
                                  setLineNumber(1266);    // compilenode string
                                  var string7412 = new GraceString(" -> ");
                                  onSelf = true;
                                  var call7413 = callmethodChecked(this, "writer", [0]);
                                  var call7414 = callmethodChecked(call7413, "addText()inMode", [1, 1], string7412, var_code);
                                  var if7415 = GraceDone;
                                  setLineNumber(1268);    // compilenode identifier
                                  var call7417 = callmethodChecked(var_o, "dtype", [0]);
                                  var opresult7419 = callmethodChecked(call7417, "\u2260", [1], GraceFalse);
                                  if (Grace_isTrue(opresult7419)) {
                                    var if7420 = GraceDone;
                                    setLineNumber(1269);    // compilenode string
                                    var string7421 = new GraceString("identifier");
                                    var call7423 = callmethodChecked(var_o, "dtype", [0]);
                                    var call7424 = callmethodChecked(call7423, "kind", [0]);
                                    var opresult7426 = callmethodChecked(call7424, "==", [1], string7421);
                                    if (Grace_isTrue(opresult7426)) {
                                      setLineNumber(1270);    // compilenode identifier
                                      var call7427 = callmethodChecked(var_o, "dtype", [0]);
                                      var call7428 = callmethodChecked(call7427, "value", [0]);
                                      onSelf = true;
                                      var call7429 = callmethodChecked(this, "getTypeLink", [1], call7428);
                                      onSelf = true;
                                      var call7430 = callmethodChecked(this, "writer", [0]);
                                      var call7431 = callmethodChecked(call7430, "addText()inMode", [1, 1], call7429, var_plain);
                                      if7420 = call7431;
                                    } else {
                                      var if7432 = GraceDone;
                                      setLineNumber(1271);    // compilenode string
                                      var string7433 = new GraceString("generic");
                                      var call7435 = callmethodChecked(var_o, "dtype", [0]);
                                      var call7436 = callmethodChecked(call7435, "kind", [0]);
                                      var opresult7438 = callmethodChecked(call7436, "==", [1], string7433);
                                      if (Grace_isTrue(opresult7438)) {
                                        setLineNumber(1272);    // compilenode identifier
                                        var call7439 = callmethodChecked(var_o, "dtype", [0]);
                                        var call7440 = callmethodChecked(call7439, "value", [0]);
                                        var call7441 = callmethodChecked(call7440, "value", [0]);
                                        onSelf = true;
                                        var call7442 = callmethodChecked(this, "getTypeLink", [1], call7441);
                                        onSelf = true;
                                        var call7443 = callmethodChecked(this, "writer", [0]);
                                        var call7444 = callmethodChecked(call7443, "addText()inMode", [1, 1], call7442, var_plain);
                                        setLineNumber(1273);    // compilenode block
                                        var block7445 = new GraceBlock(this, 1273, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block7445.real = function(var_each) {
                                          setLineNumber(1273);    // compilenode string
                                          var string7446 = new GraceString("");
                                          var call7448 = callmethodChecked(var_each, "value", [0]);
                                          onSelf = true;
                                          var call7449 = callmethodChecked(this, "getTypeLink", [1], call7448);
                                          var string7451 = new GraceString("");
                                          var opresult7453 = callmethodChecked(string7451, "++", [1], call7449);
                                          var opresult7455 = callmethodChecked(opresult7453, "++", [1], string7446);
                                          onSelf = true;
                                          var call7456 = callmethodChecked(this, "writer", [0]);
                                          var call7457 = callmethodChecked(call7456, "addText()inMode", [1, 1], opresult7455, var_plain);
                                          return call7457;
                                        };
                                        var block7458 = new GraceBlock(this, 1273, 0);
                                        block7458.real = function() {
                                          onSelf = true;
                                          var call7459 = callmethodChecked(this, "writer", [0]);
                                          var call7460 = callmethodChecked(call7459, "addComma", [0]);
                                          return call7460;
                                        };
                                        var call7461 = callmethodChecked(var_o, "dtype", [0]);
                                        var call7462 = callmethodChecked(call7461, "args", [0]);
                                        var call7463 = callmethodChecked(call7462, "do()separatedBy", [1, 1], block7445, block7458);
                                        if7432 = call7463;
                                      }
                                      if7420 = if7432;
                                    }
                                    if7415 = if7420;
                                  }
                                  setLineNumber(1276);    // compilenode call
                                  onSelf = true;
                                  var call7464 = callmethodChecked(this, "writer", [0]);
                                  var call7465 = callmethodChecked(call7464, "addNewline", [0]);
                                  setLineNumber(1278);    // compilenode string
                                  var string7466 = new GraceString("description");
                                  var call7467 = callmethodChecked(superDepth, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call7468 = callmethodChecked(call7467, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call7469 = callmethodChecked(call7468, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string7466, new GraceNum(2));
                                  onSelf = true;
                                  var call7470 = callmethodChecked(this, "writer", [0]);
                                  var call7471 = callmethodChecked(call7470, "addText()inMode", [1, 1], call7469, var_plain);
                                  setLineNumber(1279);    // compilenode call
                                  onSelf = true;
                                  var call7472 = callmethodChecked(this, "writer", [0]);
                                  var call7473 = callmethodChecked(call7472, "dumpBin", [0]);
                                  onSelf = true;
                                  var call7474 = callmethodChecked(this, "section4", [0]);
                                  var call7475 = callmethodChecked(call7474, "insert", [1], call7473);
                                  if7388 = call7475;
                                }
                                if7302 = if7388;
                              }
                              setLineNumber(1282);    // compilenode identifier
                              var call7476 = callmethodChecked(var_anc, "parent", [0]);
                              var call7477 = callmethodChecked(call7476, "isObject", [0]);
                              return call7477;
                            } else {
                              var if7478 = GraceDone;
                              setLineNumber(1284);    // compilenode identifier
                              var call7479 = callmethodChecked(var_settings, "publicOnly", [0]);
                              var call7480 = callmethodChecked(call7479, "prefix!", [0]);
                              if (Grace_isTrue(call7480)) {
                                setLineNumber(1285);    // compilenode identifier
                                var call7481 = callmethodChecked(var_o, "name", [0]);
                                var call7482 = callmethodChecked(call7481, "value", [0]);
                                onSelf = true;
                                var call7484 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                                var opresult7486 = callmethodChecked(call7484, "++", [1], call7482);
                                var var_n = opresult7486;
                                setLineNumber(1286);    // compilenode call
                                onSelf = true;
                                var call7487 = callmethodChecked(this, "writer", [0]);
                                var call7488 = callmethodChecked(call7487, "addBullet", [0]);
                                setLineNumber(1287);    // compilenode string
                                var string7489 = new GraceString("");
                                var string7492 = new GraceString("def ");
                                var opresult7494 = callmethodChecked(string7492, "++", [1], var_n);
                                var opresult7496 = callmethodChecked(opresult7494, "++", [1], string7489);
                                onSelf = true;
                                var call7497 = callmethodChecked(this, "writer", [0]);
                                var call7498 = callmethodChecked(call7497, "addText()inMode", [1, 1], opresult7496, var_code);
                                setLineNumber(1288);    // compilenode string
                                var string7499 = new GraceString(" -> ");
                                onSelf = true;
                                var call7500 = callmethodChecked(this, "writer", [0]);
                                var call7501 = callmethodChecked(call7500, "addText()inMode", [1, 1], string7499, var_code);
                                var if7502 = GraceDone;
                                setLineNumber(1290);    // compilenode identifier
                                var call7504 = callmethodChecked(var_o, "dtype", [0]);
                                var opresult7506 = callmethodChecked(call7504, "\u2260", [1], GraceFalse);
                                if (Grace_isTrue(opresult7506)) {
                                  var if7507 = GraceDone;
                                  setLineNumber(1291);    // compilenode string
                                  var string7508 = new GraceString("identifier");
                                  var call7510 = callmethodChecked(var_o, "dtype", [0]);
                                  var call7511 = callmethodChecked(call7510, "kind", [0]);
                                  var opresult7513 = callmethodChecked(call7511, "==", [1], string7508);
                                  if (Grace_isTrue(opresult7513)) {
                                    setLineNumber(1292);    // compilenode identifier
                                    var call7514 = callmethodChecked(var_o, "dtype", [0]);
                                    var call7515 = callmethodChecked(call7514, "value", [0]);
                                    onSelf = true;
                                    var call7516 = callmethodChecked(this, "getTypeLink", [1], call7515);
                                    onSelf = true;
                                    var call7517 = callmethodChecked(this, "writer", [0]);
                                    var call7518 = callmethodChecked(call7517, "addText()inMode", [1, 1], call7516, var_plain);
                                    if7507 = call7518;
                                  } else {
                                    var if7519 = GraceDone;
                                    setLineNumber(1293);    // compilenode string
                                    var string7520 = new GraceString("generic");
                                    var call7522 = callmethodChecked(var_o, "dtype", [0]);
                                    var call7523 = callmethodChecked(call7522, "kind", [0]);
                                    var opresult7525 = callmethodChecked(call7523, "==", [1], string7520);
                                    if (Grace_isTrue(opresult7525)) {
                                      setLineNumber(1294);    // compilenode identifier
                                      var call7526 = callmethodChecked(var_o, "dtype", [0]);
                                      var call7527 = callmethodChecked(call7526, "value", [0]);
                                      var call7528 = callmethodChecked(call7527, "value", [0]);
                                      onSelf = true;
                                      var call7529 = callmethodChecked(this, "getTypeLink", [1], call7528);
                                      onSelf = true;
                                      var call7530 = callmethodChecked(this, "writer", [0]);
                                      var call7531 = callmethodChecked(call7530, "addText()inMode", [1, 1], call7529, var_plain);
                                      setLineNumber(1295);    // compilenode block
                                      var block7532 = new GraceBlock(this, 1295, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block7532.real = function(var_each) {
                                        setLineNumber(1295);    // compilenode string
                                        var string7533 = new GraceString("");
                                        var call7535 = callmethodChecked(var_each, "value", [0]);
                                        var string7537 = new GraceString("");
                                        var opresult7539 = callmethodChecked(string7537, "++", [1], call7535);
                                        var opresult7541 = callmethodChecked(opresult7539, "++", [1], string7533);
                                        onSelf = true;
                                        var call7542 = callmethodChecked(this, "writer", [0]);
                                        var call7543 = callmethodChecked(call7542, "addText()inMode", [1, 1], opresult7541, var_code);
                                        return call7543;
                                      };
                                      var block7544 = new GraceBlock(this, 1295, 0);
                                      block7544.real = function() {
                                        onSelf = true;
                                        var call7545 = callmethodChecked(this, "writer", [0]);
                                        var call7546 = callmethodChecked(call7545, "addComma", [0]);
                                        return call7546;
                                      };
                                      var call7547 = callmethodChecked(var_o, "dtype", [0]);
                                      var call7548 = callmethodChecked(call7547, "args", [0]);
                                      var call7549 = callmethodChecked(call7548, "do()separatedBy", [1, 1], block7532, block7544);
                                      if7519 = call7549;
                                    }
                                    if7507 = if7519;
                                  }
                                  if7502 = if7507;
                                }
                                setLineNumber(1298);    // compilenode call
                                onSelf = true;
                                var call7550 = callmethodChecked(this, "writer", [0]);
                                var call7551 = callmethodChecked(call7550, "addNewline", [0]);
                                setLineNumber(1299);    // compilenode string
                                var string7552 = new GraceString("description");
                                var call7553 = callmethodChecked(superDepth, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call7554 = callmethodChecked(call7553, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call7555 = callmethodChecked(call7554, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string7552, new GraceNum(3));
                                onSelf = true;
                                var call7556 = callmethodChecked(this, "writer", [0]);
                                var call7557 = callmethodChecked(call7556, "addText()inMode", [1, 1], call7555, var_plain);
                                setLineNumber(1300);    // compilenode call
                                onSelf = true;
                                var call7558 = callmethodChecked(this, "writer", [0]);
                                var call7559 = callmethodChecked(call7558, "dumpBin", [0]);
                                onSelf = true;
                                var call7560 = callmethodChecked(this, "section4", [0]);
                                var call7561 = callmethodChecked(call7560, "insert", [1], call7559);
                                if7478 = call7561;
                              } else {
                                var if7562 = GraceDone;
                                setLineNumber(1304);    // compilenode identifier
                                var call7563 = callmethodChecked(var_o, "isReadable", [0]);
                                if (Grace_isTrue(call7563)) {
                                  setLineNumber(1305);    // compilenode call
                                  onSelf = true;
                                  var call7564 = callmethodChecked(this, "writer", [0]);
                                  var call7565 = callmethodChecked(call7564, "addBullet", [0]);
                                  setLineNumber(1306);    // compilenode string
                                  var string7566 = new GraceString("def ");
                                  onSelf = true;
                                  var call7567 = callmethodChecked(this, "writer", [0]);
                                  var call7568 = callmethodChecked(call7567, "addText()inMode", [1, 1], string7566, var_code);
                                  setLineNumber(1307);    // compilenode string
                                  var string7569 = new GraceString("");
                                  var call7571 = callmethodChecked(var_o, "name", [0]);
                                  var call7572 = callmethodChecked(call7571, "value", [0]);
                                  onSelf = true;
                                  var call7574 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                                  var opresult7576 = callmethodChecked(call7574, "++", [1], call7572);
                                  var string7578 = new GraceString("");
                                  var opresult7580 = callmethodChecked(string7578, "++", [1], opresult7576);
                                  var opresult7582 = callmethodChecked(opresult7580, "++", [1], string7569);
                                  onSelf = true;
                                  var call7583 = callmethodChecked(this, "writer", [0]);
                                  var call7584 = callmethodChecked(call7583, "addText()inMode", [1, 1], opresult7582, var_code);
                                  setLineNumber(1308);    // compilenode string
                                  var string7585 = new GraceString(" -> ");
                                  onSelf = true;
                                  var call7586 = callmethodChecked(this, "writer", [0]);
                                  var call7587 = callmethodChecked(call7586, "addText()inMode", [1, 1], string7585, var_code);
                                  setLineNumber(1309);    // compilenode identifier
                                  var call7588 = callmethodChecked(var_o, "name", [0]);
                                  var call7589 = callmethodChecked(call7588, "value", [0]);
                                  var var_n = call7589;
                                  var if7590 = GraceDone;
                                  setLineNumber(1310);    // compilenode identifier
                                  var call7592 = callmethodChecked(var_o, "dtype", [0]);
                                  var opresult7594 = callmethodChecked(call7592, "\u2260", [1], GraceFalse);
                                  if (Grace_isTrue(opresult7594)) {
                                    var if7595 = GraceDone;
                                    setLineNumber(1311);    // compilenode string
                                    var string7596 = new GraceString("identifier");
                                    var call7598 = callmethodChecked(var_o, "dtype", [0]);
                                    var call7599 = callmethodChecked(call7598, "kind", [0]);
                                    var opresult7601 = callmethodChecked(call7599, "==", [1], string7596);
                                    if (Grace_isTrue(opresult7601)) {
                                      setLineNumber(1312);    // compilenode identifier
                                      var call7602 = callmethodChecked(var_o, "dtype", [0]);
                                      var call7603 = callmethodChecked(call7602, "value", [0]);
                                      onSelf = true;
                                      var call7604 = callmethodChecked(this, "getTypeLink", [1], call7603);
                                      onSelf = true;
                                      var call7605 = callmethodChecked(this, "writer", [0]);
                                      var call7606 = callmethodChecked(call7605, "addText()inMode", [1, 1], call7604, var_plain);
                                      if7595 = call7606;
                                    } else {
                                      var if7607 = GraceDone;
                                      setLineNumber(1313);    // compilenode string
                                      var string7608 = new GraceString("generic");
                                      var call7610 = callmethodChecked(var_o, "dtype", [0]);
                                      var call7611 = callmethodChecked(call7610, "kind", [0]);
                                      var opresult7613 = callmethodChecked(call7611, "==", [1], string7608);
                                      if (Grace_isTrue(opresult7613)) {
                                        setLineNumber(1314);    // compilenode identifier
                                        var call7614 = callmethodChecked(var_o, "dtype", [0]);
                                        var call7615 = callmethodChecked(call7614, "value", [0]);
                                        var call7616 = callmethodChecked(call7615, "value", [0]);
                                        onSelf = true;
                                        var call7617 = callmethodChecked(this, "getTypeLink", [1], call7616);
                                        onSelf = true;
                                        var call7618 = callmethodChecked(this, "writer", [0]);
                                        var call7619 = callmethodChecked(call7618, "addText()inMode", [1, 1], call7617, var_plain);
                                        setLineNumber(1315);    // compilenode block
                                        var block7620 = new GraceBlock(this, 1315, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block7620.real = function(var_each) {
                                          setLineNumber(1315);    // compilenode string
                                          var string7621 = new GraceString("");
                                          var call7623 = callmethodChecked(var_each, "value", [0]);
                                          onSelf = true;
                                          var call7624 = callmethodChecked(this, "getTypeLink", [1], call7623);
                                          var string7626 = new GraceString("");
                                          var opresult7628 = callmethodChecked(string7626, "++", [1], call7624);
                                          var opresult7630 = callmethodChecked(opresult7628, "++", [1], string7621);
                                          onSelf = true;
                                          var call7631 = callmethodChecked(this, "writer", [0]);
                                          var call7632 = callmethodChecked(call7631, "addText()inMode", [1, 1], opresult7630, var_plain);
                                          return call7632;
                                        };
                                        var block7633 = new GraceBlock(this, 1315, 0);
                                        block7633.real = function() {
                                          onSelf = true;
                                          var call7634 = callmethodChecked(this, "writer", [0]);
                                          var call7635 = callmethodChecked(call7634, "addComma", [0]);
                                          return call7635;
                                        };
                                        var call7636 = callmethodChecked(var_o, "dtype", [0]);
                                        var call7637 = callmethodChecked(call7636, "args", [0]);
                                        var call7638 = callmethodChecked(call7637, "do()separatedBy", [1, 1], block7620, block7633);
                                        if7607 = call7638;
                                      }
                                      if7595 = if7607;
                                    }
                                    if7590 = if7595;
                                  }
                                  setLineNumber(1318);    // compilenode call
                                  onSelf = true;
                                  var call7639 = callmethodChecked(this, "writer", [0]);
                                  var call7640 = callmethodChecked(call7639, "addNewline", [0]);
                                  setLineNumber(1320);    // compilenode string
                                  var string7641 = new GraceString("description");
                                  var call7642 = callmethodChecked(superDepth, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call7643 = callmethodChecked(call7642, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call7644 = callmethodChecked(call7643, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string7641, new GraceNum(2));
                                  onSelf = true;
                                  var call7645 = callmethodChecked(this, "writer", [0]);
                                  var call7646 = callmethodChecked(call7645, "addText()inMode", [1, 1], call7644, var_plain);
                                  setLineNumber(1321);    // compilenode call
                                  onSelf = true;
                                  var call7647 = callmethodChecked(this, "writer", [0]);
                                  var call7648 = callmethodChecked(call7647, "dumpBin", [0]);
                                  onSelf = true;
                                  var call7649 = callmethodChecked(this, "section4", [0]);
                                  var call7650 = callmethodChecked(call7649, "insert", [1], call7648);
                                  if7562 = call7650;
                                }
                                if7478 = if7562;
                              }
                              setLineNumber(1324);    // compilenode identifier
                              var call7651 = callmethodChecked(var_anc, "parent", [0]);
                              var call7652 = callmethodChecked(call7651, "isObject", [0]);
                              return call7652;
                            }
                            setLineNumber(1236);    // return value
                            if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], if7297)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method visitDefDec(1)up(1) does not have " + 
                                        callmethod(var_Boolean, "asString", [0])._value + "."));
                            return if7297;
                          };
                          func7296.paramCounts = [1, 1];
                          obj5397.methods["visitDefDec()up"] = func7296;
                          func7296.definitionLine = 1235;
                          func7296.definitionModule = "gracedocMD";
                          var func7653 = function(argcv) {    // method visitVarDec(1)up(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_o = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitVarDec (arg list 1) of visitVarDec(1)up(1)"));
                            var var_anc = arguments[curarg];
                            curarg++;
                            if (argcv[1] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitVarDec(1)up(1)"));
                            setModuleName("gracedocMD");
                            setLineNumber(1329);    // compilenode identifier
                            var call7654 = callmethodChecked(var_o, "nameString", [0]);
                            onSelf = true;
                            var call7656 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                            var opresult7658 = callmethodChecked(call7656, "++", [1], call7654);
                            var var_n = opresult7658;
                            var if7659 = GraceDone;
                            setLineNumber(1330);    // compilenode call
                            onSelf = true;
                            var call7661 = callmethodChecked(this, "isOnClassPage", [0]);
                            var opresult7663 = callmethodChecked(call7661, "==", [1], GraceTrue);
                            if (Grace_isTrue(opresult7663)) {
                              var if7664 = GraceDone;
                              setLineNumber(1331);    // compilenode identifier
                              var call7665 = callmethodChecked(var_settings, "publicOnly", [0]);
                              var call7666 = callmethodChecked(call7665, "prefix!", [0]);
                              if (Grace_isTrue(call7666)) {
                                setLineNumber(1332);    // compilenode call
                                onSelf = true;
                                var call7667 = callmethodChecked(this, "writer", [0]);
                                var call7668 = callmethodChecked(call7667, "addBullet", [0]);
                                setLineNumber(1333);    // compilenode string
                                var string7669 = new GraceString("var ");
                                onSelf = true;
                                var call7670 = callmethodChecked(this, "writer", [0]);
                                var call7671 = callmethodChecked(call7670, "addText()inMode", [1, 1], string7669, var_code);
                                setLineNumber(1334);    // compilenode string
                                var string7672 = new GraceString("");
                                var call7674 = callmethodChecked(var_o, "name", [0]);
                                var call7675 = callmethodChecked(call7674, "value", [0]);
                                var string7677 = new GraceString("");
                                onSelf = true;
                                var call7679 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                                var string7681 = new GraceString("");
                                var opresult7683 = callmethodChecked(string7681, "++", [1], call7679);
                                var opresult7685 = callmethodChecked(opresult7683, "++", [1], string7677);
                                var opresult7687 = callmethodChecked(opresult7685, "++", [1], call7675);
                                var opresult7689 = callmethodChecked(opresult7687, "++", [1], string7672);
                                onSelf = true;
                                var call7690 = callmethodChecked(this, "writer", [0]);
                                var call7691 = callmethodChecked(call7690, "addText()inMode", [1, 1], opresult7689, var_code);
                                var if7692 = GraceDone;
                                setLineNumber(1335);    // compilenode identifier
                                var call7694 = callmethodChecked(var_o, "dtype", [0]);
                                var opresult7696 = callmethodChecked(call7694, "\u2260", [1], GraceFalse);
                                if (Grace_isTrue(opresult7696)) {
                                  setLineNumber(1336);    // compilenode string
                                  var string7697 = new GraceString(" -> ");
                                  onSelf = true;
                                  var call7698 = callmethodChecked(this, "writer", [0]);
                                  var call7699 = callmethodChecked(call7698, "addText()inMode", [1, 1], string7697, var_code);
                                  setLineNumber(1337);    // compilenode string
                                  var string7700 = new GraceString("");
                                  var call7702 = callmethodChecked(var_o, "dtype", [0]);
                                  var call7703 = callmethodChecked(call7702, "value", [0]);
                                  onSelf = true;
                                  var call7704 = callmethodChecked(this, "getTypeLink", [1], call7703);
                                  var string7706 = new GraceString("");
                                  var opresult7708 = callmethodChecked(string7706, "++", [1], call7704);
                                  var opresult7710 = callmethodChecked(opresult7708, "++", [1], string7700);
                                  onSelf = true;
                                  var call7711 = callmethodChecked(this, "writer", [0]);
                                  var call7712 = callmethodChecked(call7711, "addText()inMode", [1, 1], opresult7710, var_plain);
                                  if7692 = call7712;
                                }
                                setLineNumber(1339);    // compilenode call
                                onSelf = true;
                                var call7713 = callmethodChecked(this, "writer", [0]);
                                var call7714 = callmethodChecked(call7713, "addNewline", [0]);
                                setLineNumber(1340);    // compilenode string
                                var string7715 = new GraceString("description");
                                var call7716 = callmethodChecked(superDepth, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call7717 = callmethodChecked(call7716, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call7718 = callmethodChecked(call7717, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string7715, new GraceNum(3));
                                onSelf = true;
                                var call7719 = callmethodChecked(this, "writer", [0]);
                                var call7720 = callmethodChecked(call7719, "addText()inMode", [1, 1], call7718, var_plain);
                                setLineNumber(1341);    // compilenode call
                                onSelf = true;
                                var call7721 = callmethodChecked(this, "writer", [0]);
                                var call7722 = callmethodChecked(call7721, "dumpBin", [0]);
                                onSelf = true;
                                var call7723 = callmethodChecked(this, "section4", [0]);
                                var call7724 = callmethodChecked(call7723, "insert", [1], call7722);
                                if7664 = call7724;
                              } else {
                                var if7725 = GraceDone;
                                setLineNumber(1343);    // compilenode identifier
                                var call7726 = callmethodChecked(var_o, "isReadable", [0]);
                                if (Grace_isTrue(call7726)) {
                                  setLineNumber(1344);    // compilenode call
                                  onSelf = true;
                                  var call7727 = callmethodChecked(this, "writer", [0]);
                                  var call7728 = callmethodChecked(call7727, "addBullet", [0]);
                                  setLineNumber(1345);    // compilenode string
                                  var string7729 = new GraceString("var ");
                                  onSelf = true;
                                  var call7730 = callmethodChecked(this, "writer", [0]);
                                  var call7731 = callmethodChecked(call7730, "addText()inMode", [1, 1], string7729, var_code);
                                  setLineNumber(1346);    // compilenode string
                                  var string7732 = new GraceString("");
                                  var call7734 = callmethodChecked(var_o, "name", [0]);
                                  var call7735 = callmethodChecked(call7734, "value", [0]);
                                  var string7737 = new GraceString("");
                                  onSelf = true;
                                  var call7739 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                                  var string7741 = new GraceString("");
                                  var opresult7743 = callmethodChecked(string7741, "++", [1], call7739);
                                  var opresult7745 = callmethodChecked(opresult7743, "++", [1], string7737);
                                  var opresult7747 = callmethodChecked(opresult7745, "++", [1], call7735);
                                  var opresult7749 = callmethodChecked(opresult7747, "++", [1], string7732);
                                  onSelf = true;
                                  var call7750 = callmethodChecked(this, "writer", [0]);
                                  var call7751 = callmethodChecked(call7750, "addText()inMode", [1, 1], opresult7749, var_code);
                                  var if7752 = GraceDone;
                                  setLineNumber(1347);    // compilenode identifier
                                  var call7754 = callmethodChecked(var_o, "dtype", [0]);
                                  var opresult7756 = callmethodChecked(call7754, "\u2260", [1], GraceFalse);
                                  if (Grace_isTrue(opresult7756)) {
                                    setLineNumber(1348);    // compilenode string
                                    var string7757 = new GraceString(" -> ");
                                    onSelf = true;
                                    var call7758 = callmethodChecked(this, "writer", [0]);
                                    var call7759 = callmethodChecked(call7758, "addText()inMode", [1, 1], string7757, var_code);
                                    setLineNumber(1349);    // compilenode string
                                    var string7760 = new GraceString("");
                                    var call7762 = callmethodChecked(var_o, "dtype", [0]);
                                    var call7763 = callmethodChecked(call7762, "value", [0]);
                                    onSelf = true;
                                    var call7764 = callmethodChecked(this, "getTypeLink", [1], call7763);
                                    var string7766 = new GraceString("");
                                    var opresult7768 = callmethodChecked(string7766, "++", [1], call7764);
                                    var opresult7770 = callmethodChecked(opresult7768, "++", [1], string7760);
                                    onSelf = true;
                                    var call7771 = callmethodChecked(this, "writer", [0]);
                                    var call7772 = callmethodChecked(call7771, "addText()inMode", [1, 1], opresult7770, var_plain);
                                    if7752 = call7772;
                                  }
                                  setLineNumber(1351);    // compilenode string
                                  var string7773 = new GraceString("description");
                                  var call7774 = callmethodChecked(superDepth, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call7775 = callmethodChecked(call7774, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call7776 = callmethodChecked(call7775, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string7773, new GraceNum(2));
                                  onSelf = true;
                                  var call7777 = callmethodChecked(this, "writer", [0]);
                                  var call7778 = callmethodChecked(call7777, "addText()inMode", [1, 1], call7776, var_plain);
                                  setLineNumber(1352);    // compilenode call
                                  onSelf = true;
                                  var call7779 = callmethodChecked(this, "writer", [0]);
                                  var call7780 = callmethodChecked(call7779, "dumpBin", [0]);
                                  onSelf = true;
                                  var call7781 = callmethodChecked(this, "section4", [0]);
                                  var call7782 = callmethodChecked(call7781, "insert", [1], call7780);
                                  if7725 = call7782;
                                }
                                var if7783 = GraceDone;
                                setLineNumber(1354);    // compilenode identifier
                                var call7784 = callmethodChecked(var_o, "isWritable", [0]);
                                if (Grace_isTrue(call7784)) {
                                  setLineNumber(1355);    // compilenode call
                                  onSelf = true;
                                  var call7785 = callmethodChecked(this, "writer", [0]);
                                  var call7786 = callmethodChecked(call7785, "addBullet", [0]);
                                  setLineNumber(1356);    // compilenode string
                                  var string7787 = new GraceString("var ");
                                  onSelf = true;
                                  var call7788 = callmethodChecked(this, "writer", [0]);
                                  var call7789 = callmethodChecked(call7788, "addText()inMode", [1, 1], string7787, var_code);
                                  setLineNumber(1357);    // compilenode string
                                  var string7790 = new GraceString("");
                                  var call7792 = callmethodChecked(var_o, "name", [0]);
                                  var call7793 = callmethodChecked(call7792, "value", [0]);
                                  var string7795 = new GraceString("");
                                  onSelf = true;
                                  var call7797 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                                  var string7799 = new GraceString("");
                                  var opresult7801 = callmethodChecked(string7799, "++", [1], call7797);
                                  var opresult7803 = callmethodChecked(opresult7801, "++", [1], string7795);
                                  var opresult7805 = callmethodChecked(opresult7803, "++", [1], call7793);
                                  var opresult7807 = callmethodChecked(opresult7805, "++", [1], string7790);
                                  onSelf = true;
                                  var call7808 = callmethodChecked(this, "writer", [0]);
                                  var call7809 = callmethodChecked(call7808, "addText()inMode", [1, 1], opresult7807, var_code);
                                  var if7810 = GraceDone;
                                  setLineNumber(1358);    // compilenode identifier
                                  var call7812 = callmethodChecked(var_o, "dtype", [0]);
                                  var opresult7814 = callmethodChecked(call7812, "\u2260", [1], GraceFalse);
                                  if (Grace_isTrue(opresult7814)) {
                                    setLineNumber(1359);    // compilenode string
                                    var string7815 = new GraceString(" -> ");
                                    onSelf = true;
                                    var call7816 = callmethodChecked(this, "writer", [0]);
                                    var call7817 = callmethodChecked(call7816, "addText()inMode", [1, 1], string7815, var_code);
                                    setLineNumber(1360);    // compilenode string
                                    var string7818 = new GraceString(")");
                                    var call7820 = callmethodChecked(var_o, "dtype", [0]);
                                    var call7821 = callmethodChecked(call7820, "value", [0]);
                                    onSelf = true;
                                    var call7822 = callmethodChecked(this, "getTypeLink", [1], call7821);
                                    var string7824 = new GraceString("(_:");
                                    var opresult7826 = callmethodChecked(string7824, "++", [1], call7822);
                                    var opresult7828 = callmethodChecked(opresult7826, "++", [1], string7818);
                                    onSelf = true;
                                    var call7829 = callmethodChecked(this, "writer", [0]);
                                    var call7830 = callmethodChecked(call7829, "addText()inMode", [1, 1], opresult7828, var_plain);
                                    if7810 = call7830;
                                  } else {
                                    setLineNumber(1362);    // compilenode string
                                    var string7831 = new GraceString("-> Done");
                                    onSelf = true;
                                    var call7832 = callmethodChecked(this, "writer", [0]);
                                    var call7833 = callmethodChecked(call7832, "addText()inMode", [1, 1], string7831, var_code);
                                    if7810 = call7833;
                                  }
                                  setLineNumber(1364);    // compilenode string
                                  var string7834 = new GraceString("");
                                  var string7837 = new GraceString("Updates ");
                                  var opresult7839 = callmethodChecked(string7837, "++", [1], var_n);
                                  var opresult7841 = callmethodChecked(opresult7839, "++", [1], string7834);
                                  onSelf = true;
                                  var call7842 = callmethodChecked(this, "writer", [0]);
                                  var call7843 = callmethodChecked(call7842, "addText()inMode", [1, 1], opresult7841, var_code);
                                  setLineNumber(1365);    // compilenode call
                                  onSelf = true;
                                  var call7844 = callmethodChecked(this, "writer", [0]);
                                  var call7845 = callmethodChecked(call7844, "dumpBin", [0]);
                                  onSelf = true;
                                  var call7846 = callmethodChecked(this, "section4", [0]);
                                  var call7847 = callmethodChecked(call7846, "insert", [1], call7845);
                                  if7783 = call7847;
                                }
                                if7664 = if7783;
                              }
                              setLineNumber(1368);    // compilenode identifier
                              return GraceFalse;
                            } else {
                              var if7848 = GraceDone;
                              setLineNumber(1370);    // compilenode identifier
                              var call7849 = callmethodChecked(var_settings, "publicOnly", [0]);
                              var call7850 = callmethodChecked(call7849, "prefix!", [0]);
                              if (Grace_isTrue(call7850)) {
                                setLineNumber(1371);    // compilenode call
                                onSelf = true;
                                var call7851 = callmethodChecked(this, "writer", [0]);
                                var call7852 = callmethodChecked(call7851, "addBullet", [0]);
                                setLineNumber(1372);    // compilenode string
                                var string7853 = new GraceString("var ");
                                onSelf = true;
                                var call7854 = callmethodChecked(this, "writer", [0]);
                                var call7855 = callmethodChecked(call7854, "addText()inMode", [1, 1], string7853, var_code);
                                setLineNumber(1373);    // compilenode string
                                var string7856 = new GraceString("");
                                var call7858 = callmethodChecked(var_o, "name", [0]);
                                var call7859 = callmethodChecked(call7858, "value", [0]);
                                var string7861 = new GraceString("");
                                onSelf = true;
                                var call7863 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                                var string7865 = new GraceString("");
                                var opresult7867 = callmethodChecked(string7865, "++", [1], call7863);
                                var opresult7869 = callmethodChecked(opresult7867, "++", [1], string7861);
                                var opresult7871 = callmethodChecked(opresult7869, "++", [1], call7859);
                                var opresult7873 = callmethodChecked(opresult7871, "++", [1], string7856);
                                onSelf = true;
                                var call7874 = callmethodChecked(this, "writer", [0]);
                                var call7875 = callmethodChecked(call7874, "addText()inMode", [1, 1], opresult7873, var_code);
                                var if7876 = GraceDone;
                                setLineNumber(1374);    // compilenode identifier
                                var call7878 = callmethodChecked(var_o, "dtype", [0]);
                                var opresult7880 = callmethodChecked(call7878, "\u2260", [1], GraceFalse);
                                if (Grace_isTrue(opresult7880)) {
                                  setLineNumber(1375);    // compilenode string
                                  var string7881 = new GraceString(" -> ");
                                  onSelf = true;
                                  var call7882 = callmethodChecked(this, "writer", [0]);
                                  var call7883 = callmethodChecked(call7882, "addText()inMode", [1, 1], string7881, var_code);
                                  setLineNumber(1376);    // compilenode string
                                  var string7884 = new GraceString("");
                                  var call7886 = callmethodChecked(var_o, "dtype", [0]);
                                  var call7887 = callmethodChecked(call7886, "value", [0]);
                                  onSelf = true;
                                  var call7888 = callmethodChecked(this, "getTypeLink", [1], call7887);
                                  var string7890 = new GraceString("");
                                  var opresult7892 = callmethodChecked(string7890, "++", [1], call7888);
                                  var opresult7894 = callmethodChecked(opresult7892, "++", [1], string7884);
                                  onSelf = true;
                                  var call7895 = callmethodChecked(this, "writer", [0]);
                                  var call7896 = callmethodChecked(call7895, "addText()inMode", [1, 1], opresult7894, var_plain);
                                  if7876 = call7896;
                                }
                                setLineNumber(1378);    // compilenode call
                                onSelf = true;
                                var call7897 = callmethodChecked(this, "writer", [0]);
                                var call7898 = callmethodChecked(call7897, "addNewline", [0]);
                                setLineNumber(1379);    // compilenode string
                                var string7899 = new GraceString("description");
                                var call7900 = callmethodChecked(superDepth, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call7901 = callmethodChecked(call7900, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call7902 = callmethodChecked(call7901, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string7899, new GraceNum(3));
                                onSelf = true;
                                var call7903 = callmethodChecked(this, "writer", [0]);
                                var call7904 = callmethodChecked(call7903, "addText()inMode", [1, 1], call7902, var_plain);
                                setLineNumber(1380);    // compilenode call
                                onSelf = true;
                                var call7905 = callmethodChecked(this, "writer", [0]);
                                var call7906 = callmethodChecked(call7905, "dumpBin", [0]);
                                onSelf = true;
                                var call7907 = callmethodChecked(this, "section4", [0]);
                                var call7908 = callmethodChecked(call7907, "insert", [1], call7906);
                                if7848 = call7908;
                              } else {
                                var if7909 = GraceDone;
                                setLineNumber(1382);    // compilenode identifier
                                var call7910 = callmethodChecked(var_o, "isReadable", [0]);
                                if (Grace_isTrue(call7910)) {
                                  setLineNumber(1383);    // compilenode call
                                  onSelf = true;
                                  var call7911 = callmethodChecked(this, "writer", [0]);
                                  var call7912 = callmethodChecked(call7911, "addBullet", [0]);
                                  setLineNumber(1384);    // compilenode string
                                  var string7913 = new GraceString("var ");
                                  onSelf = true;
                                  var call7914 = callmethodChecked(this, "writer", [0]);
                                  var call7915 = callmethodChecked(call7914, "addText()inMode", [1, 1], string7913, var_code);
                                  setLineNumber(1385);    // compilenode string
                                  var string7916 = new GraceString("");
                                  var call7918 = callmethodChecked(var_o, "name", [0]);
                                  var call7919 = callmethodChecked(call7918, "value", [0]);
                                  var string7921 = new GraceString("");
                                  onSelf = true;
                                  var call7923 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                                  var string7925 = new GraceString("");
                                  var opresult7927 = callmethodChecked(string7925, "++", [1], call7923);
                                  var opresult7929 = callmethodChecked(opresult7927, "++", [1], string7921);
                                  var opresult7931 = callmethodChecked(opresult7929, "++", [1], call7919);
                                  var opresult7933 = callmethodChecked(opresult7931, "++", [1], string7916);
                                  onSelf = true;
                                  var call7934 = callmethodChecked(this, "writer", [0]);
                                  var call7935 = callmethodChecked(call7934, "addText()inMode", [1, 1], opresult7933, var_code);
                                  var if7936 = GraceDone;
                                  setLineNumber(1386);    // compilenode identifier
                                  var call7938 = callmethodChecked(var_o, "dtype", [0]);
                                  var opresult7940 = callmethodChecked(call7938, "\u2260", [1], GraceFalse);
                                  if (Grace_isTrue(opresult7940)) {
                                    setLineNumber(1387);    // compilenode string
                                    var string7941 = new GraceString(" -> ");
                                    onSelf = true;
                                    var call7942 = callmethodChecked(this, "writer", [0]);
                                    var call7943 = callmethodChecked(call7942, "addText()inMode", [1, 1], string7941, var_code);
                                    setLineNumber(1388);    // compilenode string
                                    var string7944 = new GraceString("");
                                    var call7946 = callmethodChecked(var_o, "dtype", [0]);
                                    var call7947 = callmethodChecked(call7946, "value", [0]);
                                    onSelf = true;
                                    var call7948 = callmethodChecked(this, "getTypeLink", [1], call7947);
                                    var string7950 = new GraceString("");
                                    var opresult7952 = callmethodChecked(string7950, "++", [1], call7948);
                                    var opresult7954 = callmethodChecked(opresult7952, "++", [1], string7944);
                                    onSelf = true;
                                    var call7955 = callmethodChecked(this, "writer", [0]);
                                    var call7956 = callmethodChecked(call7955, "addText()inMode", [1, 1], opresult7954, var_plain);
                                    if7936 = call7956;
                                  }
                                  setLineNumber(1390);    // compilenode call
                                  onSelf = true;
                                  var call7957 = callmethodChecked(this, "writer", [0]);
                                  var call7958 = callmethodChecked(call7957, "addNewline", [0]);
                                  setLineNumber(1391);    // compilenode string
                                  var string7959 = new GraceString("description");
                                  var call7960 = callmethodChecked(superDepth, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call7961 = callmethodChecked(call7960, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call7962 = callmethodChecked(call7961, "formatComments()rowClass()colspan", [1, 1, 1], var_o, string7959, new GraceNum(2));
                                  onSelf = true;
                                  var call7963 = callmethodChecked(this, "writer", [0]);
                                  var call7964 = callmethodChecked(call7963, "addText()inMode", [1, 1], call7962, var_plain);
                                  setLineNumber(1392);    // compilenode call
                                  onSelf = true;
                                  var call7965 = callmethodChecked(this, "writer", [0]);
                                  var call7966 = callmethodChecked(call7965, "dumpBin", [0]);
                                  onSelf = true;
                                  var call7967 = callmethodChecked(this, "section4", [0]);
                                  var call7968 = callmethodChecked(call7967, "insert", [1], call7966);
                                  if7909 = call7968;
                                }
                                var if7969 = GraceDone;
                                setLineNumber(1394);    // compilenode identifier
                                var call7970 = callmethodChecked(var_o, "isWritable", [0]);
                                if (Grace_isTrue(call7970)) {
                                  setLineNumber(1395);    // compilenode call
                                  onSelf = true;
                                  var call7971 = callmethodChecked(this, "writer", [0]);
                                  var call7972 = callmethodChecked(call7971, "addBullet", [0]);
                                  setLineNumber(1396);    // compilenode string
                                  var string7973 = new GraceString("var ");
                                  onSelf = true;
                                  var call7974 = callmethodChecked(this, "writer", [0]);
                                  var call7975 = callmethodChecked(call7974, "addText()inMode", [1, 1], string7973, var_code);
                                  setLineNumber(1397);    // compilenode string
                                  var string7976 = new GraceString("");
                                  var call7978 = callmethodChecked(var_o, "name", [0]);
                                  var call7979 = callmethodChecked(call7978, "value", [0]);
                                  var string7981 = new GraceString("");
                                  onSelf = true;
                                  var call7983 = callmethodChecked(this, "buildDefChain", [1], var_anc);
                                  var string7985 = new GraceString("");
                                  var opresult7987 = callmethodChecked(string7985, "++", [1], call7983);
                                  var opresult7989 = callmethodChecked(opresult7987, "++", [1], string7981);
                                  var opresult7991 = callmethodChecked(opresult7989, "++", [1], call7979);
                                  var opresult7993 = callmethodChecked(opresult7991, "++", [1], string7976);
                                  onSelf = true;
                                  var call7994 = callmethodChecked(this, "writer", [0]);
                                  var call7995 = callmethodChecked(call7994, "addText()inMode", [1, 1], opresult7993, var_code);
                                  var if7996 = GraceDone;
                                  setLineNumber(1398);    // compilenode identifier
                                  var call7998 = callmethodChecked(var_o, "dtype", [0]);
                                  var opresult8000 = callmethodChecked(call7998, "\u2260", [1], GraceFalse);
                                  if (Grace_isTrue(opresult8000)) {
                                    setLineNumber(1399);    // compilenode string
                                    var string8001 = new GraceString(" -> ");
                                    onSelf = true;
                                    var call8002 = callmethodChecked(this, "writer", [0]);
                                    var call8003 = callmethodChecked(call8002, "addText()inMode", [1, 1], string8001, var_code);
                                    setLineNumber(1400);    // compilenode string
                                    var string8004 = new GraceString(")");
                                    var call8006 = callmethodChecked(var_o, "dtype", [0]);
                                    var call8007 = callmethodChecked(call8006, "value", [0]);
                                    onSelf = true;
                                    var call8008 = callmethodChecked(this, "getTypeLink", [1], call8007);
                                    var string8010 = new GraceString("(_:");
                                    var opresult8012 = callmethodChecked(string8010, "++", [1], call8008);
                                    var opresult8014 = callmethodChecked(opresult8012, "++", [1], string8004);
                                    onSelf = true;
                                    var call8015 = callmethodChecked(this, "writer", [0]);
                                    var call8016 = callmethodChecked(call8015, "addText()inMode", [1, 1], opresult8014, var_plain);
                                    if7996 = call8016;
                                  } else {
                                    setLineNumber(1403);    // compilenode string
                                    var string8017 = new GraceString("-> Done");
                                    onSelf = true;
                                    var call8018 = callmethodChecked(this, "writer", [0]);
                                    var call8019 = callmethodChecked(call8018, "addText()inMode", [1, 1], string8017, var_code);
                                    if7996 = call8019;
                                  }
                                  setLineNumber(1405);    // compilenode string
                                  var string8020 = new GraceString("");
                                  var string8023 = new GraceString("Updates ");
                                  var opresult8025 = callmethodChecked(string8023, "++", [1], var_n);
                                  var opresult8027 = callmethodChecked(opresult8025, "++", [1], string8020);
                                  onSelf = true;
                                  var call8028 = callmethodChecked(this, "writer", [0]);
                                  var call8029 = callmethodChecked(call8028, "addText()inMode", [1, 1], opresult8027, var_code);
                                  setLineNumber(1406);    // compilenode call
                                  onSelf = true;
                                  var call8030 = callmethodChecked(this, "writer", [0]);
                                  var call8031 = callmethodChecked(call8030, "dumpBin", [0]);
                                  onSelf = true;
                                  var call8032 = callmethodChecked(this, "section4", [0]);
                                  var call8033 = callmethodChecked(call8032, "insert", [1], call8031);
                                  if7969 = call8033;
                                }
                                if7848 = if7969;
                              }
                              setLineNumber(1409);    // compilenode identifier
                              return GraceFalse;
                            }
                            setLineNumber(1330);    // return value
                            if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], if7659)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method visitVarDec(1)up(1) does not have " + 
                                        callmethod(var_Boolean, "asString", [0])._value + "."));
                            return if7659;
                          };
                          func7653.paramCounts = [1, 1];
                          obj5397.methods["visitVarDec()up"] = func7653;
                          func7653.definitionLine = 1328;
                          func7653.definitionModule = "gracedocMD";
                          var func8034 = function(argcv) {    // method visitInherits(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_o = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitInherits(1)"));
                            setModuleName("gracedocMD");
                            setLineNumber(1417);    // compilenode identifier
                            return GraceTrue;
                          };
                          func8034.paramCounts = [1];
                          obj5397.methods["visitInherits"] = func8034;
                          func8034.definitionLine = 1413;
                          func8034.definitionModule = "gracedocMD";
                          setLineNumber(614);    // compilenode identifier
                          var call8035 = callmethodChecked(var_ast, "baseVisitor()object", [0, 1], this);
                          obj5397.superobj = call8035;
                          if (call8035.data) obj5397.data = call8035.data;
                          if (call8035.hasOwnProperty('_value'))
                              obj5397._value = call8035._value;
                          setLineNumber(616);    // compilenode identifier
                          obj5397.data["isOnClassPage"] = GraceFalse;
                          var reader_gracedocMD_isOnClassPage8036 = function() {
                            return this.data["isOnClassPage"];
                          };
                          obj5397.methods["isOnClassPage"] = reader_gracedocMD_isOnClassPage8036;
                          obj5397.data["isOnClassPage"] = GraceFalse;
                          var writer_gracedocMD_isOnClassPage8036 = function(argcv, o) {
                            this.data["isOnClassPage"] = o;
                            return GraceDone;
                          };
                          obj5397.methods["isOnClassPage:="] = writer_gracedocMD_isOnClassPage8036;
                          reader_gracedocMD_isOnClassPage8036.confidential = true;
                          writer_gracedocMD_isOnClassPage8036.confidential = true;
                          obj5397.mutable = true;
                          setLineNumber(617);    // compilenode identifier
                          obj5397.data["isOnTypePage"] = GraceFalse;
                          var reader_gracedocMD_isOnTypePage8037 = function() {
                            return this.data["isOnTypePage"];
                          };
                          obj5397.methods["isOnTypePage"] = reader_gracedocMD_isOnTypePage8037;
                          obj5397.data["isOnTypePage"] = GraceFalse;
                          var writer_gracedocMD_isOnTypePage8037 = function(argcv, o) {
                            this.data["isOnTypePage"] = o;
                            return GraceDone;
                          };
                          obj5397.methods["isOnTypePage:="] = writer_gracedocMD_isOnTypePage8037;
                          reader_gracedocMD_isOnTypePage8037.confidential = true;
                          writer_gracedocMD_isOnTypePage8037.confidential = true;
                          obj5397.mutable = true;
                          var if8038 = GraceDone;
                          setLineNumber(618);    // compilenode string
                          var string8039 = new GraceString("class");
                          var opresult8042 = callmethodChecked(var_pageType, "==", [1], string8039);
                          if (Grace_isTrue(opresult8042)) {
                            onSelf = true;
                            var call8043 = callmethodChecked(this, "isOnClassPage:=", [1], GraceTrue);
                            if8038 = call8043;
                          } else {
                            var if8044 = GraceDone;
                            setLineNumber(619);    // compilenode string
                            var string8045 = new GraceString("type");
                            var opresult8048 = callmethodChecked(var_pageType, "==", [1], string8045);
                            if (Grace_isTrue(opresult8048)) {
                              onSelf = true;
                              var call8049 = callmethodChecked(this, "isOnTypePage:=", [1], GraceTrue);
                              if8044 = call8049;
                            }
                            if8038 = if8044;
                          }
                          var if8050 = GraceDone;
                          setLineNumber(621);    // compilenode string
                          var string8051 = new GraceString(".grace");
                          var call8052 = callmethodChecked(var_in, "endsWith", [1], string8051);
                          var call8053 = callmethodChecked(call8052, "not", [0]);
                          if (Grace_isTrue(call8053)) {
                            if8050 = var_in;
                          } else {
                            setLineNumber(622);    // compilenode identifier
                            var call8055 = callmethodChecked(var_in, "size", [0]);
                            var diff8057 = callmethodChecked(call8055, "-", [1], new GraceNum(6));
                            var call8058 = callmethodChecked(var_in, "substringFrom()to", [1, 1], new GraceNum(0), diff8057);
                            if8050 = call8058;
                          }
                          obj5397.data["pageName"] = if8050;
                          var reader_gracedocMD_pageName8059 = function() {
                            return this.data["pageName"];
                          };
                          reader_gracedocMD_pageName8059.def = true;
                          reader_gracedocMD_pageName8059.confidential = true;
                          obj5397.methods["pageName"] = reader_gracedocMD_pageName8059;
                          var if8060 = GraceDone;
                          setLineNumber(623);    // compilenode call
                          onSelf = true;
                          var call8061 = callmethodChecked(this, "isOnTypePage", [0]);
                          if (Grace_isTrue(call8061)) {
                            var string8062 = new GraceString("");
                            onSelf = true;
                            var call8064 = callmethodChecked(this, "pageName", [0]);
                            var string8066 = new GraceString("Type: ");
                            var opresult8068 = callmethodChecked(string8066, "++", [1], call8064);
                            var opresult8070 = callmethodChecked(opresult8068, "++", [1], string8062);
                            if8060 = opresult8070;
                          } else {
                            var if8071 = GraceDone;
                            setLineNumber(624);    // compilenode call
                            onSelf = true;
                            var call8072 = callmethodChecked(this, "isOnClassPage", [0]);
                            if (Grace_isTrue(call8072)) {
                              var string8073 = new GraceString("");
                              onSelf = true;
                              var call8075 = callmethodChecked(this, "pageName", [0]);
                              var string8077 = new GraceString("Class: ");
                              var opresult8079 = callmethodChecked(string8077, "++", [1], call8075);
                              var opresult8081 = callmethodChecked(opresult8079, "++", [1], string8073);
                              if8071 = opresult8081;
                            } else {
                              setLineNumber(625);    // compilenode string
                              var string8082 = new GraceString("");
                              onSelf = true;
                              var call8084 = callmethodChecked(this, "pageName", [0]);
                              var string8086 = new GraceString("Module: ");
                              var opresult8088 = callmethodChecked(string8086, "++", [1], call8084);
                              var opresult8090 = callmethodChecked(opresult8088, "++", [1], string8082);
                              if8071 = opresult8090;
                            }
                            if8060 = if8071;
                          }
                          obj5397.data["title"] = if8060;
                          var reader_gracedocMD_title8091 = function() {
                            return this.data["title"];
                          };
                          reader_gracedocMD_title8091.def = true;
                          reader_gracedocMD_title8091.confidential = true;
                          obj5397.methods["title"] = reader_gracedocMD_title8091;
                          obj5397.data["section1"] = undefined;
                          var reader_gracedocMD_section18092 = function() {
                            return this.data["section1"];
                          };
                          obj5397.methods["section1"] = reader_gracedocMD_section18092;
                          obj5397.data["section1"] = undefined;
                          var writer_gracedocMD_section18092 = function(argcv, o) {
                            this.data["section1"] = o;
                            return GraceDone;
                          };
                          obj5397.methods["section1:="] = writer_gracedocMD_section18092;
                          reader_gracedocMD_section18092.confidential = true;
                          writer_gracedocMD_section18092.confidential = true;
                          obj5397.mutable = true;
                          obj5397.data["section2"] = undefined;
                          var reader_gracedocMD_section28093 = function() {
                            return this.data["section2"];
                          };
                          obj5397.methods["section2"] = reader_gracedocMD_section28093;
                          obj5397.data["section2"] = undefined;
                          var writer_gracedocMD_section28093 = function(argcv, o) {
                            this.data["section2"] = o;
                            return GraceDone;
                          };
                          obj5397.methods["section2:="] = writer_gracedocMD_section28093;
                          reader_gracedocMD_section28093.confidential = true;
                          writer_gracedocMD_section28093.confidential = true;
                          obj5397.mutable = true;
                          obj5397.data["section3"] = undefined;
                          var reader_gracedocMD_section38094 = function() {
                            return this.data["section3"];
                          };
                          obj5397.methods["section3"] = reader_gracedocMD_section38094;
                          obj5397.data["section3"] = undefined;
                          var writer_gracedocMD_section38094 = function(argcv, o) {
                            this.data["section3"] = o;
                            return GraceDone;
                          };
                          obj5397.methods["section3:="] = writer_gracedocMD_section38094;
                          reader_gracedocMD_section38094.confidential = true;
                          writer_gracedocMD_section38094.confidential = true;
                          obj5397.mutable = true;
                          obj5397.data["section4"] = undefined;
                          var reader_gracedocMD_section48095 = function() {
                            return this.data["section4"];
                          };
                          obj5397.methods["section4"] = reader_gracedocMD_section48095;
                          obj5397.data["section4"] = undefined;
                          var writer_gracedocMD_section48095 = function(argcv, o) {
                            this.data["section4"] = o;
                            return GraceDone;
                          };
                          obj5397.methods["section4:="] = writer_gracedocMD_section48095;
                          reader_gracedocMD_section48095.confidential = true;
                          writer_gracedocMD_section48095.confidential = true;
                          obj5397.mutable = true;
                          obj5397.data["section5"] = undefined;
                          var reader_gracedocMD_section58096 = function() {
                            return this.data["section5"];
                          };
                          obj5397.methods["section5"] = reader_gracedocMD_section58096;
                          obj5397.data["section5"] = undefined;
                          var writer_gracedocMD_section58096 = function(argcv, o) {
                            this.data["section5"] = o;
                            return GraceDone;
                          };
                          obj5397.methods["section5:="] = writer_gracedocMD_section58096;
                          reader_gracedocMD_section58096.confidential = true;
                          writer_gracedocMD_section58096.confidential = true;
                          obj5397.mutable = true;
                          obj5397.data["footerSection"] = undefined;
                          var reader_gracedocMD_footerSection8097 = function() {
                            return this.data["footerSection"];
                          };
                          obj5397.methods["footerSection"] = reader_gracedocMD_footerSection8097;
                          obj5397.data["footerSection"] = undefined;
                          var writer_gracedocMD_footerSection8097 = function(argcv, o) {
                            this.data["footerSection"] = o;
                            return GraceDone;
                          };
                          obj5397.methods["footerSection:="] = writer_gracedocMD_footerSection8097;
                          reader_gracedocMD_footerSection8097.confidential = true;
                          writer_gracedocMD_footerSection8097.confidential = true;
                          obj5397.mutable = true;
                          obj5397.data["methodtypesSection"] = undefined;
                          var reader_gracedocMD_methodtypesSection8098 = function() {
                            return this.data["methodtypesSection"];
                          };
                          obj5397.methods["methodtypesSection"] = reader_gracedocMD_methodtypesSection8098;
                          obj5397.data["methodtypesSection"] = undefined;
                          var writer_gracedocMD_methodtypesSection8098 = function(argcv, o) {
                            this.data["methodtypesSection"] = o;
                            return GraceDone;
                          };
                          obj5397.methods["methodtypesSection:="] = writer_gracedocMD_methodtypesSection8098;
                          reader_gracedocMD_methodtypesSection8098.confidential = true;
                          writer_gracedocMD_methodtypesSection8098.confidential = true;
                          obj5397.mutable = true;
                          obj5397.data["section6"] = undefined;
                          var reader_gracedocMD_section68099 = function() {
                            return this.data["section6"];
                          };
                          obj5397.methods["section6"] = reader_gracedocMD_section68099;
                          obj5397.data["section6"] = undefined;
                          var writer_gracedocMD_section68099 = function(argcv, o) {
                            this.data["section6"] = o;
                            return GraceDone;
                          };
                          obj5397.methods["section6:="] = writer_gracedocMD_section68099;
                          reader_gracedocMD_section68099.confidential = true;
                          writer_gracedocMD_section68099.confidential = true;
                          obj5397.mutable = true;
                          setLineNumber(634);    // compilenode call
                          var call8100 = callmethodChecked(superDepth, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call8101 = callmethodChecked(call8100, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call8102 = callmethodChecked(call8101, "markdownWriter", [0]);
                          obj5397.data["writer"] = call8102;
                          var reader_gracedocMD_writer8103 = function() {
                            return this.data["writer"];
                          };
                          obj5397.methods["writer"] = reader_gracedocMD_writer8103;
                          obj5397.data["writer"] = call8102;
                          var writer_gracedocMD_writer8103 = function(argcv, o) {
                            this.data["writer"] = o;
                            return GraceDone;
                          };
                          obj5397.methods["writer:="] = writer_gracedocMD_writer8103;
                          reader_gracedocMD_writer8103.confidential = true;
                          writer_gracedocMD_writer8103.confidential = true;
                          obj5397.mutable = true;
                          var if8104 = GraceDone;
                          setLineNumber(636);    // compilenode call
                          onSelf = true;
                          var call8105 = callmethodChecked(this, "isOnTypePage", [0]);
                          onSelf = true;
                          var call8107 = callmethodChecked(this, "isOnClassPage", [0]);
                          var opresult8109 = callmethodChecked(call8107, "||", [1], call8105);
                          if (Grace_isTrue(opresult8109)) {
                            if8104 = var_dir;
                          } else {
                            onSelf = true;
                            var call8110 = callmethodChecked(this, "pageName", [0]);
                            if8104 = call8110;
                          }
                          obj5397.data["outdir"] = if8104;
                          var reader_gracedocMD_outdir8111 = function() {
                            return this.data["outdir"];
                          };
                          reader_gracedocMD_outdir8111.def = true;
                          reader_gracedocMD_outdir8111.confidential = true;
                          obj5397.methods["outdir"] = reader_gracedocMD_outdir8111;
                          var if8112 = GraceDone;
                          setLineNumber(639);    // compilenode identifier
                          var call8114 = callmethodChecked(var_settings, "verbosity", [0]);
                          var opresult8116 = callmethodChecked(call8114, ">", [1], new GraceNum(1));
                          if (Grace_isTrue(opresult8116)) {
                            var string8117 = new GraceString(")");
                            var call8119 = callmethodChecked(var_sys, "elapsedTime", [0]);
                            var string8121 = new GraceString(" at time: (");
                            onSelf = true;
                            var call8123 = callmethodChecked(this, "outdir", [0]);
                            var string8125 = new GraceString(" - graceDocVisitor created... inMod ");
                            onSelf = true;
                            var call8127 = callmethodChecked(this, "title", [0]);
                            var string8129 = new GraceString("On ");
                            var opresult8131 = callmethodChecked(string8129, "++", [1], call8127);
                            var opresult8133 = callmethodChecked(opresult8131, "++", [1], string8125);
                            var opresult8135 = callmethodChecked(opresult8133, "++", [1], call8123);
                            var opresult8137 = callmethodChecked(opresult8135, "++", [1], string8121);
                            var opresult8139 = callmethodChecked(opresult8137, "++", [1], call8119);
                            var opresult8141 = callmethodChecked(opresult8139, "++", [1], string8117);
                            var call8142 = Grace_print(opresult8141);
                            if8112 = call8142;
                          }
                          setLineNumber(642);    // compilenode call
                          onSelf = true;
                          var call8143 = callmethodChecked(this, "buildTemplate", [0]);
                          superDepth = origSuperDepth;
                        };
                        obj_init_5397.apply(inheritingObject, []);
                        return obj5397;
                        };
                        obj2646.methods["createFrom()outTo()as()object"] = func5396;
                      var func8144 = function(argcv) {    // method 
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        setModuleName("gracedocMD");
                        setLineNumber(613);    // compilenode string
                        var string8145 = new GraceString("class graceDocVisitor");
                        return string8145;
                      };
                      func8144.paramCounts = [];
                      obj2646.methods["asString"] = func8144;
                      func8144.definitionLine = 613;
                      func8144.definitionModule = "gracedocMD";
                      superDepth = origSuperDepth;
                    };
                    obj_init_2646.apply(obj2646, []);
                    var var_graceDocVisitor = obj2646;
                    setLineNumber(642);    // compilenode method
                    var func8146 = function(argcv) {    // method graceDocVisitor
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for graceDocVisitor"));
                      setModuleName("gracedocMD");
                      // graceDocVisitor is a simple accessor - elide try ... catch
                      setLineNumber(613);    // compilenode identifier
                      return var_graceDocVisitor;
                    };
                    func8146.paramCounts = [0];
                    this.methods["graceDocVisitor"] = func8146;
                    func8146.definitionLine = 642;
                    func8146.definitionModule = "gracedocMD";
                    this.methods["graceDocVisitor"].debug = "def";
                    setLineNumber(1431);    // compilenode call
                    onSelf = true;
                    var call8147 = callmethodChecked(this, "parseArguments", [0]);
                    setLineNumber(1433);    // compilenode vardec
                    var var_file;
                    setLineNumber(1431);    // compilenode method
                    var func8148 = function(argcv) {    // method file
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for file"));
                      setModuleName("gracedocMD");
                      // file is a simple accessor - elide try ... catch
                      setLineNumber(1433);    // compilenode identifier
                      return var_file;
                    };
                    func8148.paramCounts = [0];
                    this.methods["file"] = func8148;
                    func8148.definitionLine = 1431;
                    func8148.definitionModule = "gracedocMD";
                    setLineNumber(1431);    // compilenode method
                    var func8149 = function(argcv) {    // method file:=(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var___95__var__95__assign__95__tmp = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for file:=(1)"));
                      setModuleName("gracedocMD");
                      var_file = var___95__var__95__assign__95__tmp;
                      return GraceDone;
                    };
                    func8149.paramCounts = [1];
                    this.methods["file:="] = func8149;
                    func8149.definitionLine = 1431;
                    func8149.definitionModule = "gracedocMD";
                    this.methods["file"].debug = "var";
                    setLineNumber(1434);    // compilenode vardec
                    var var_dbv;
                    setLineNumber(1431);    // compilenode method
                    var func8150 = function(argcv) {    // method dbv
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for dbv"));
                      setModuleName("gracedocMD");
                      // dbv is a simple accessor - elide try ... catch
                      setLineNumber(1434);    // compilenode identifier
                      return var_dbv;
                    };
                    func8150.paramCounts = [0];
                    this.methods["dbv"] = func8150;
                    func8150.definitionLine = 1431;
                    func8150.definitionModule = "gracedocMD";
                    setLineNumber(1431);    // compilenode method
                    var func8151 = function(argcv) {    // method dbv:=(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var___95__var__95__assign__95__tmp = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for dbv:=(1)"));
                      setModuleName("gracedocMD");
                      var_dbv = var___95__var__95__assign__95__tmp;
                      return GraceDone;
                    };
                    func8151.paramCounts = [1];
                    this.methods["dbv:="] = func8151;
                    func8151.definitionLine = 1431;
                    func8151.definitionModule = "gracedocMD";
                    this.methods["dbv"].debug = "var";
                    setLineNumber(1435);    // compilenode vardec
                    var var_gdv;
                    setLineNumber(1431);    // compilenode method
                    var func8152 = function(argcv) {    // method gdv
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for gdv"));
                      setModuleName("gracedocMD");
                      // gdv is a simple accessor - elide try ... catch
                      setLineNumber(1435);    // compilenode identifier
                      return var_gdv;
                    };
                    func8152.paramCounts = [0];
                    this.methods["gdv"] = func8152;
                    func8152.definitionLine = 1431;
                    func8152.definitionModule = "gracedocMD";
                    setLineNumber(1431);    // compilenode method
                    var func8153 = function(argcv) {    // method gdv:=(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var___95__var__95__assign__95__tmp = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for gdv:=(1)"));
                      setModuleName("gracedocMD");
                      var_gdv = var___95__var__95__assign__95__tmp;
                      return GraceDone;
                    };
                    func8153.paramCounts = [1];
                    this.methods["gdv:="] = func8153;
                    func8153.definitionLine = 1431;
                    func8153.definitionModule = "gracedocMD";
                    this.methods["gdv"].debug = "var";
                    setLineNumber(1436);    // compilenode vardec
                    var var_modulename;
                    setLineNumber(1431);    // compilenode method
                    var func8154 = function(argcv) {    // method modulename
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for modulename"));
                      setModuleName("gracedocMD");
                      // modulename is a simple accessor - elide try ... catch
                      setLineNumber(1436);    // compilenode identifier
                      return var_modulename;
                    };
                    func8154.paramCounts = [0];
                    this.methods["modulename"] = func8154;
                    func8154.definitionLine = 1431;
                    func8154.definitionModule = "gracedocMD";
                    setLineNumber(1431);    // compilenode method
                    var func8155 = function(argcv) {    // method modulename:=(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var___95__var__95__assign__95__tmp = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for modulename:=(1)"));
                      setModuleName("gracedocMD");
                      var_modulename = var___95__var__95__assign__95__tmp;
                      return GraceDone;
                    };
                    func8155.paramCounts = [1];
                    this.methods["modulename:="] = func8155;
                    func8155.definitionLine = 1431;
                    func8155.definitionModule = "gracedocMD";
                    this.methods["modulename"].debug = "var";
                    setLineNumber(1437);    // compilenode vardec
                    var var_counter;
                    setLineNumber(1431);    // compilenode method
                    var func8156 = function(argcv) {    // method counter
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for counter"));
                      setModuleName("gracedocMD");
                      // counter is a simple accessor - elide try ... catch
                      setLineNumber(1437);    // compilenode identifier
                      return var_counter;
                    };
                    func8156.paramCounts = [0];
                    this.methods["counter"] = func8156;
                    func8156.definitionLine = 1431;
                    func8156.definitionModule = "gracedocMD";
                    setLineNumber(1431);    // compilenode method
                    var func8157 = function(argcv) {    // method counter:=(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var___95__var__95__assign__95__tmp = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for counter:=(1)"));
                      setModuleName("gracedocMD");
                      var_counter = var___95__var__95__assign__95__tmp;
                      return GraceDone;
                    };
                    func8157.paramCounts = [1];
                    this.methods["counter:="] = func8157;
                    func8157.definitionLine = 1431;
                    func8157.definitionModule = "gracedocMD";
                    this.methods["counter"].debug = "var";
                    setLineNumber(1439);    // compilenode identifier
                    var call8158 = callmethodChecked(var_settings, "inputdir", [0]);
                    var call8159 = callmethodChecked(var_io, "listdir", [1], call8158);
                    var var_allModules = call8159;
                    var func8160 = function(argcv) {    // method allModules
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for allModules"));
                      setModuleName("gracedocMD");
                      // allModules is a simple accessor - elide try ... catch
                      return var_allModules;
                    };
                    func8160.paramCounts = [0];
                    this.methods["allModules"] = func8160;
                    func8160.definitionLine = 1439;
                    func8160.definitionModule = "gracedocMD";
                    var func8161 = function(argcv) {    // method allModules:=(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var___95__var__95__assign__95__tmp = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for allModules:=(1)"));
                      setModuleName("gracedocMD");
                      var_allModules = var___95__var__95__assign__95__tmp;
                      return GraceDone;
                    };
                    func8161.paramCounts = [1];
                    this.methods["allModules:="] = func8161;
                    func8161.definitionLine = 1439;
                    func8161.definitionModule = "gracedocMD";
                    this.methods["allModules"].debug = "var";
                    setLineNumber(1440);    // compilenode array
                    var array8162 = new Lineup([]);
                    var call8163 = callmethodChecked(var_prelude, "dictionary", [1], array8162);
                    var var_parsedFiles = call8163;
                    setLineNumber(1439);    // compilenode method
                    var func8164 = function(argcv) {    // method parsedFiles
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for parsedFiles"));
                      setModuleName("gracedocMD");
                      // parsedFiles is a simple accessor - elide try ... catch
                      setLineNumber(1440);    // compilenode identifier
                      return var_parsedFiles;
                    };
                    func8164.paramCounts = [0];
                    this.methods["parsedFiles"] = func8164;
                    func8164.definitionLine = 1439;
                    func8164.definitionModule = "gracedocMD";
                    setLineNumber(1439);    // compilenode method
                    var func8165 = function(argcv) {    // method parsedFiles:=(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var___95__var__95__assign__95__tmp = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for parsedFiles:=(1)"));
                      setModuleName("gracedocMD");
                      var_parsedFiles = var___95__var__95__assign__95__tmp;
                      return GraceDone;
                    };
                    func8165.paramCounts = [1];
                    this.methods["parsedFiles:="] = func8165;
                    func8165.definitionLine = 1439;
                    func8165.definitionModule = "gracedocMD";
                    this.methods["parsedFiles"].debug = "var";
                    setLineNumber(1441);    // compilenode identifier
                    var var_inputWasFound = GraceFalse;
                    setLineNumber(1439);    // compilenode method
                    var func8166 = function(argcv) {    // method inputWasFound
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inputWasFound"));
                      setModuleName("gracedocMD");
                      // inputWasFound is a simple accessor - elide try ... catch
                      setLineNumber(1441);    // compilenode identifier
                      return var_inputWasFound;
                    };
                    func8166.paramCounts = [0];
                    this.methods["inputWasFound"] = func8166;
                    func8166.definitionLine = 1439;
                    func8166.definitionModule = "gracedocMD";
                    setLineNumber(1439);    // compilenode method
                    var func8167 = function(argcv) {    // method inputWasFound:=(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var___95__var__95__assign__95__tmp = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inputWasFound:=(1)"));
                      setModuleName("gracedocMD");
                      var_inputWasFound = var___95__var__95__assign__95__tmp;
                      return GraceDone;
                    };
                    func8167.paramCounts = [1];
                    this.methods["inputWasFound:="] = func8167;
                    func8167.definitionLine = 1439;
                    func8167.definitionModule = "gracedocMD";
                    this.methods["inputWasFound"].debug = "var";
                    setLineNumber(1442);    // compilenode call
                    onSelf = true;
                    var call8168 = callmethodChecked(this, "sidebarFileGenerator", [0]);
                    var var_sidebarGen = call8168;
                    var func8169 = function(argcv) {    // method sidebarGen
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sidebarGen"));
                      setModuleName("gracedocMD");
                      // sidebarGen is a simple accessor - elide try ... catch
                      return var_sidebarGen;
                    };
                    func8169.paramCounts = [0];
                    this.methods["sidebarGen"] = func8169;
                    func8169.definitionLine = 1442;
                    func8169.definitionModule = "gracedocMD";
                    var func8170 = function(argcv) {    // method sidebarGen:=(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var___95__var__95__assign__95__tmp = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sidebarGen:=(1)"));
                      setModuleName("gracedocMD");
                      var_sidebarGen = var___95__var__95__assign__95__tmp;
                      return GraceDone;
                    };
                    func8170.paramCounts = [1];
                    this.methods["sidebarGen:="] = func8170;
                    func8170.definitionLine = 1442;
                    func8170.definitionModule = "gracedocMD";
                    this.methods["sidebarGen"].debug = "var";
                    setLineNumber(1445);    // compilenode num
                    var_counter = new GraceNum(1);
                    setLineNumber(1446);    // compilenode block
                    var block8171 = new GraceBlock(this, 1446, 1);
                    setLineNumber(1);    // compilenode identifier
                    block8171.real = function(var_filename) {
                      var if8172 = GraceDone;
                      setLineNumber(1447);    // compilenode string
                      var string8173 = new GraceString(".grace");
                      var call8174 = callmethodChecked(var_filename, "endsWith", [1], string8173);
                      if (Grace_isTrue(call8174)) {
                        setLineNumber(1448);    // compilenode string
                        var string8175 = new GraceString("");
                        var string8178 = new GraceString("/");
                        var call8180 = callmethodChecked(var_settings, "inputdir", [0]);
                        var string8182 = new GraceString("");
                        var opresult8184 = callmethodChecked(string8182, "++", [1], call8180);
                        var opresult8186 = callmethodChecked(opresult8184, "++", [1], string8178);
                        var opresult8188 = callmethodChecked(opresult8186, "++", [1], var_filename);
                        var opresult8190 = callmethodChecked(opresult8188, "++", [1], string8175);
                        var string8191 = new GraceString("r");
                        var call8192 = callmethodChecked(var_io, "open", [2], opresult8190, string8191);
                        var_file = call8192;
                        var if8193 = GraceDone;
                        setLineNumber(1449);    // compilenode identifier
                        var call8195 = callmethodChecked(var_settings, "verbosity", [0]);
                        var opresult8197 = callmethodChecked(call8195, ">", [1], new GraceNum(0));
                        if (Grace_isTrue(opresult8197)) {
                          var string8198 = new GraceString(")");
                          var call8200 = callmethodChecked(var_sys, "elapsedTime", [0]);
                          var string8202 = new GraceString(" - lexing... (");
                          var string8205 = new GraceString("On ");
                          var opresult8207 = callmethodChecked(string8205, "++", [1], var_filename);
                          var opresult8209 = callmethodChecked(opresult8207, "++", [1], string8202);
                          var opresult8211 = callmethodChecked(opresult8209, "++", [1], call8200);
                          var opresult8213 = callmethodChecked(opresult8211, "++", [1], string8198);
                          var call8214 = Grace_print(opresult8213);
                          if8193 = call8214;
                        }
                        setLineNumber(1450);    // compilenode identifier
                        var call8215 = callmethodChecked(var_lexer, "new", [0]);
                        var call8216 = callmethodChecked(call8215, "lexfile", [1], var_file);
                        var var_tokens = call8216;
                        var if8217 = GraceDone;
                        setLineNumber(1451);    // compilenode identifier
                        var call8219 = callmethodChecked(var_settings, "verbosity", [0]);
                        var opresult8221 = callmethodChecked(call8219, ">", [1], new GraceNum(0));
                        if (Grace_isTrue(opresult8221)) {
                          var string8222 = new GraceString(")");
                          var call8224 = callmethodChecked(var_sys, "elapsedTime", [0]);
                          var string8226 = new GraceString(" - done lexing... (");
                          var string8229 = new GraceString("On ");
                          var opresult8231 = callmethodChecked(string8229, "++", [1], var_filename);
                          var opresult8233 = callmethodChecked(opresult8231, "++", [1], string8226);
                          var opresult8235 = callmethodChecked(opresult8233, "++", [1], call8224);
                          var opresult8237 = callmethodChecked(opresult8235, "++", [1], string8222);
                          var call8238 = Grace_print(opresult8237);
                          if8217 = call8238;
                        }
                        var if8239 = GraceDone;
                        setLineNumber(1452);    // compilenode identifier
                        var call8241 = callmethodChecked(var_settings, "verbosity", [0]);
                        var opresult8243 = callmethodChecked(call8241, ">", [1], new GraceNum(0));
                        if (Grace_isTrue(opresult8243)) {
                          var string8244 = new GraceString(")");
                          var call8246 = callmethodChecked(var_sys, "elapsedTime", [0]);
                          var string8248 = new GraceString(" - parsing... (");
                          var string8251 = new GraceString("On ");
                          var opresult8253 = callmethodChecked(string8251, "++", [1], var_filename);
                          var opresult8255 = callmethodChecked(opresult8253, "++", [1], string8248);
                          var opresult8257 = callmethodChecked(opresult8255, "++", [1], call8246);
                          var opresult8259 = callmethodChecked(opresult8257, "++", [1], string8244);
                          var call8260 = Grace_print(opresult8259);
                          if8239 = call8260;
                        }
                        setLineNumber(1454);    // compilenode identifier
                        var call8261 = callmethodChecked(var_parser, "parse", [1], var_tokens);
                        var call8262 = callmethodChecked(var_parsedFiles, "at()put", [1, 1], var_counter, call8261);
                        var if8263 = GraceDone;
                        setLineNumber(1456);    // compilenode identifier
                        var call8265 = callmethodChecked(var_settings, "verbosity", [0]);
                        var opresult8267 = callmethodChecked(call8265, ">", [1], new GraceNum(0));
                        if (Grace_isTrue(opresult8267)) {
                          var string8268 = new GraceString(")");
                          var call8270 = callmethodChecked(var_sys, "elapsedTime", [0]);
                          var string8272 = new GraceString(" - done parsing... (");
                          var string8275 = new GraceString("On ");
                          var opresult8277 = callmethodChecked(string8275, "++", [1], var_filename);
                          var opresult8279 = callmethodChecked(opresult8277, "++", [1], string8272);
                          var opresult8281 = callmethodChecked(opresult8279, "++", [1], call8270);
                          var opresult8283 = callmethodChecked(opresult8281, "++", [1], string8268);
                          var call8284 = Grace_print(opresult8283);
                          if8263 = call8284;
                        }
                        setLineNumber(1457);    // compilenode identifier
                        var opresult8287 = callmethodChecked(var_counter, "+", [1], new GraceNum(1));
                        var_counter = opresult8287;
                        setLineNumber(1458);    // compilenode identifier
                        var_inputWasFound = GraceTrue;
                        setLineNumber(1459);    // compilenode identifier
                        var call8288 = callmethodChecked(var_file, "close", [0]);
                        if8172 = call8288;
                      }
                      return if8172;
                    };
                    var call8289 = callmethodChecked(var_prelude, "for()do", [1, 1], var_allModules, block8171);
                    var if8290 = GraceDone;
                    setLineNumber(1463);    // compilenode identifier
                    var call8291 = callmethodChecked(var_inputWasFound, "prefix!", [0]);
                    if (Grace_isTrue(call8291)) {
                      setLineNumber(1464);    // compilenode string
                      var string8292 = new GraceString("gracedoc: Input error - no Grace files found in the input directory.");
                      var call8293 = callmethodChecked(var_io, "error", [0]);
                      var call8294 = callmethodChecked(call8293, "write", [1], string8292);
                      setLineNumber(1465);    // compilenode string
                      var string8295 = new GraceString("          Either the directory doesn't exist, or it doesn't contain any files.");
                      var call8296 = callmethodChecked(var_io, "error", [0]);
                      var call8297 = callmethodChecked(call8296, "write", [1], string8295);
                      setLineNumber(1466);    // compilenode string
                      var string8298 = new GraceString("          Directories should be named relative to the ./minigrace executable.");
                      var call8299 = callmethodChecked(var_io, "error", [0]);
                      var call8300 = callmethodChecked(call8299, "write", [1], string8298);
                      setLineNumber(1467);    // compilenode identifier
                      var call8301 = callmethodChecked(var_sys, "exit", [1], new GraceNum(1));
                      if8290 = call8301;
                    }
                    setLineNumber(1471);    // compilenode num
                    var_counter = new GraceNum(1);
                    setLineNumber(1472);    // compilenode block
                    var block8302 = new GraceBlock(this, 1472, 1);
                    setLineNumber(1);    // compilenode identifier
                    block8302.real = function(var_filename) {
                      var if8303 = GraceDone;
                      setLineNumber(1473);    // compilenode string
                      var string8304 = new GraceString(".grace");
                      var call8305 = callmethodChecked(var_filename, "endsWith", [1], string8304);
                      if (Grace_isTrue(call8305)) {
                        var if8306 = GraceDone;
                        setLineNumber(1474);    // compilenode identifier
                        var call8308 = callmethodChecked(var_settings, "verbosity", [0]);
                        var opresult8310 = callmethodChecked(call8308, ">", [1], new GraceNum(0));
                        if (Grace_isTrue(opresult8310)) {
                          var string8311 = new GraceString(")");
                          var call8313 = callmethodChecked(var_sys, "elapsedTime", [0]);
                          var string8315 = new GraceString(" - building directories... (");
                          var string8318 = new GraceString("On ");
                          var opresult8320 = callmethodChecked(string8318, "++", [1], var_filename);
                          var opresult8322 = callmethodChecked(opresult8320, "++", [1], string8315);
                          var opresult8324 = callmethodChecked(opresult8322, "++", [1], call8313);
                          var opresult8326 = callmethodChecked(opresult8324, "++", [1], string8311);
                          var call8327 = Grace_print(opresult8326);
                          if8306 = call8327;
                        }
                        setLineNumber(1475);    // compilenode identifier
                        var call8329 = callmethodChecked(var_filename, "size", [0]);
                        var diff8331 = callmethodChecked(call8329, "-", [1], new GraceNum(6));
                        var call8332 = callmethodChecked(var_filename, "substringFrom()to", [1, 1], new GraceNum(1), diff8331);
                        var_modulename = call8332;
                        setLineNumber(1476);    // compilenode identifier
                        var call8333 = callmethodChecked(var_parsedFiles, "at", [1], var_counter);
                        var var_moduleObject = call8333;
                        setLineNumber(1477);    // compilenode string
                        var string8334 = new GraceString("module");
                        onSelf = true;
                        var call8335 = callmethodChecked(this, "directoryBuilderForFile()outTo()as", [1, 1, 1], var_filename, var_modulename, string8334);
                        var_dbv = call8335;
                        setLineNumber(1478);    // compilenode identifier
                        var call8336 = callmethodChecked(var_moduleObject, "accept", [1], var_dbv);
                        setLineNumber(1479);    // compilenode identifier
                        var call8337 = callmethodChecked(var_dbv, "generate", [0]);
                        var if8338 = GraceDone;
                        setLineNumber(1480);    // compilenode identifier
                        var call8340 = callmethodChecked(var_settings, "verbosity", [0]);
                        var opresult8342 = callmethodChecked(call8340, ">", [1], new GraceNum(0));
                        if (Grace_isTrue(opresult8342)) {
                          var string8343 = new GraceString(")");
                          var call8345 = callmethodChecked(var_sys, "elapsedTime", [0]);
                          var string8347 = new GraceString(" - directories built... (");
                          var string8350 = new GraceString("On ");
                          var opresult8352 = callmethodChecked(string8350, "++", [1], var_filename);
                          var opresult8354 = callmethodChecked(opresult8352, "++", [1], string8347);
                          var opresult8356 = callmethodChecked(opresult8354, "++", [1], call8345);
                          var opresult8358 = callmethodChecked(opresult8356, "++", [1], string8343);
                          var call8359 = Grace_print(opresult8358);
                          if8338 = call8359;
                        }
                        setLineNumber(1481);    // compilenode identifier
                        var opresult8362 = callmethodChecked(var_counter, "+", [1], new GraceNum(1));
                        var_counter = opresult8362;
                        if8303 = GraceDone;
                      }
                      return if8303;
                    };
                    var call8363 = callmethodChecked(var_prelude, "for()do", [1, 1], var_allModules, block8302);
                    setLineNumber(1486);    // compilenode num
                    var_counter = new GraceNum(1);
                    setLineNumber(1488);    // compilenode block
                    var block8364 = new GraceBlock(this, 1488, 1);
                    setLineNumber(1);    // compilenode identifier
                    block8364.real = function(var_filename) {
                      var if8365 = GraceDone;
                      setLineNumber(1489);    // compilenode string
                      var string8366 = new GraceString(".grace");
                      var call8367 = callmethodChecked(var_filename, "endsWith", [1], string8366);
                      if (Grace_isTrue(call8367)) {
                        var if8368 = GraceDone;
                        setLineNumber(1490);    // compilenode identifier
                        var call8370 = callmethodChecked(var_settings, "verbosity", [0]);
                        var opresult8372 = callmethodChecked(call8370, ">", [1], new GraceNum(0));
                        if (Grace_isTrue(opresult8372)) {
                          var string8373 = new GraceString(")");
                          var call8375 = callmethodChecked(var_sys, "elapsedTime", [0]);
                          var string8377 = new GraceString(" - generating GraceDocs... (");
                          var string8380 = new GraceString("On ");
                          var opresult8382 = callmethodChecked(string8380, "++", [1], var_filename);
                          var opresult8384 = callmethodChecked(opresult8382, "++", [1], string8377);
                          var opresult8386 = callmethodChecked(opresult8384, "++", [1], call8375);
                          var opresult8388 = callmethodChecked(opresult8386, "++", [1], string8373);
                          var call8389 = Grace_print(opresult8388);
                          if8368 = call8389;
                        }
                        setLineNumber(1491);    // compilenode identifier
                        var call8391 = callmethodChecked(var_filename, "size", [0]);
                        var diff8393 = callmethodChecked(call8391, "-", [1], new GraceNum(6));
                        var call8394 = callmethodChecked(var_filename, "substringFrom()to", [1, 1], new GraceNum(1), diff8393);
                        var_modulename = call8394;
                        setLineNumber(1492);    // compilenode identifier
                        var call8395 = callmethodChecked(var_parsedFiles, "at", [1], var_counter);
                        var var_moduleObject = call8395;
                        setLineNumber(1493);    // compilenode string
                        var string8396 = new GraceString("module");
                        var call8397 = callmethodChecked(var_graceDocVisitor, "createFrom()outTo()as", [1, 1, 1], var_filename, var_modulename, string8396);
                        var_gdv = call8397;
                        setLineNumber(1494);    // compilenode identifier
                        var call8398 = callmethodChecked(var_moduleObject, "accept", [1], var_gdv);
                        setLineNumber(1495);    // compilenode identifier
                        var call8399 = callmethodChecked(var_gdv, "generate", [0]);
                        setLineNumber(1499);    // compilenode identifier
                        var call8400 = callmethodChecked(var_gdv, "build404", [0]);
                        setLineNumber(1500);    // compilenode identifier
                        var call8401 = callmethodChecked(var_gdv, "setSidebarName", [0]);
                        setLineNumber(1501);    // compilenode identifier
                        var call8402 = callmethodChecked(var_sidebarGen, "generate", [1], var_modulename);
                        var if8403 = GraceDone;
                        setLineNumber(1502);    // compilenode identifier
                        var call8405 = callmethodChecked(var_settings, "verbosity", [0]);
                        var opresult8407 = callmethodChecked(call8405, ">", [1], new GraceNum(0));
                        if (Grace_isTrue(opresult8407)) {
                          var string8408 = new GraceString(")");
                          var call8410 = callmethodChecked(var_sys, "elapsedTime", [0]);
                          var string8412 = new GraceString(" - done! (");
                          var string8415 = new GraceString("On ");
                          var opresult8417 = callmethodChecked(string8415, "++", [1], var_filename);
                          var opresult8419 = callmethodChecked(opresult8417, "++", [1], string8412);
                          var opresult8421 = callmethodChecked(opresult8419, "++", [1], call8410);
                          var opresult8423 = callmethodChecked(opresult8421, "++", [1], string8408);
                          var call8424 = Grace_print(opresult8423);
                          if8403 = call8424;
                        }
                        var if8425 = GraceDone;
                        setLineNumber(1503);    // compilenode identifier
                        var call8427 = callmethodChecked(var_settings, "verbosity", [0]);
                        var opresult8429 = callmethodChecked(call8427, ">", [1], new GraceNum(0));
                        if (Grace_isTrue(opresult8429)) {
                          var string8430 = new GraceString(")");
                          var call8432 = callmethodChecked(var_sys, "elapsedTime", [0]);
                          var string8434 = new GraceString(" at (");
                          var string8437 = new GraceString("\n\nSidebar generated:");
                          var opresult8439 = callmethodChecked(string8437, "++", [1], var_modulename);
                          var opresult8441 = callmethodChecked(opresult8439, "++", [1], string8434);
                          var opresult8443 = callmethodChecked(opresult8441, "++", [1], call8432);
                          var opresult8445 = callmethodChecked(opresult8443, "++", [1], string8430);
                          var call8446 = Grace_print(opresult8445);
                          if8425 = call8446;
                        }
                        setLineNumber(1504);    // compilenode identifier
                        var opresult8449 = callmethodChecked(var_counter, "+", [1], new GraceNum(1));
                        var_counter = opresult8449;
                        if8365 = GraceDone;
                      }
                      return if8365;
                    };
                    var call8450 = callmethodChecked(var_prelude, "for()do", [1, 1], var_allModules, block8364);
                    return this;
                  }
                  gracecode_gracedocMD.imports = ['ast', 'io', 'lexer', 'parser', 'sys'];
                  if (typeof gctCache !== "undefined")
                    gctCache['gracedocMD'] = "classes:\n emptySection\n graceDocVisitor\n section\nconfidential:\nconstructors-of:emptySection:\n withCursorAt\nconstructors-of:graceDocVisitor:\n createFrom()outTo()as\nconstructors-of:section:\n withTemplate()andCursorAt\nfresh-methods:\n Parameter\n Property\n directoryBuilderForFile()outTo()as\n markdownWriter\n sidebarFileGenerator\n sidebarModule\nfresh:Parameter:\n args\n insertArg\n insertName\n name\nfresh:Property:\n addParam\n comments\n name\n params\nfresh:directoryBuilderForFile()outTo()as:\n asString\n generate\n isOnClassPage\n isOnTypePage\n outdir\n pageName\n title\n visitArray\n visitArray()up\n visitBind\n visitBind()up\n visitBlank\n visitBlank()up\n visitBlock\n visitBlock()up\n visitCall\n visitCall()up\n visitComment\n visitComment()up\n visitDefDec\n visitDefDec()up\n visitDialect\n visitDialect()up\n visitGeneric\n visitGeneric()up\n visitIdentifier\n visitIdentifier()up\n visitIf\n visitIf()up\n visitImport\n visitImport()up\n visitInherits\n visitInherits()up\n visitMatchCase\n visitMatchCase()up\n visitMember\n visitMember()up\n visitMethod\n visitMethod()up\n visitMethodType\n visitMethodType()up\n visitModule\n visitModule()up\n visitNum\n visitNum()up\n visitObject\n visitObject()up\n visitOp\n visitOp()up\n visitReturn\n visitReturn()up\n visitSignaturePart\n visitSignaturePart()up\n visitString\n visitString()up\n visitTryCatch\n visitTryCatch()up\n visitTypeDec\n visitTypeDec()up\n visitTypeLiteral\n visitTypeLiteral()up\n visitTypeParameters\n visitTypeParameters()up\n visitVarDec\n visitVarDec()up\nfresh:markdownWriter:\n add\n addBullet\n addCode\n addColon\n addComma\n addHeader\n addLink\n addNewline\n addProp()withDesc\n addSpace\n addText\n addText()inMode\n bin\n buildMarkdown\n changeMode\n currentMode\n definition\n description\n dumpBin\n insertDef\n insertDesc\n propSet\nfresh:sidebarFileGenerator:\n add\n add()toList()inModule\n addFile()withLink()toList()inModule\n addFolder\n addSubFolder\n classFiles\n contentExistsInFolder\n fileIndent\n fileOut\n folderIndent\n generate\n inSubFolder\n modSet\n moduleList\n setModule\n signalSubfolders\n typeFiles\nfresh:sidebarModule:\n classFiles\n name\n typeFiles\nmethods-of:emptySection.withCursorAt:\n addElement()withText\n alphabetize\n cursor\n elts\n hasContent\n insert\n md\nmethods-of:graceDocVisitor.createFrom()outTo()as:\n asString\n build404\n buildDefChain\n buildTemplate\n buildcss\n buildindex\n buildjs\n doClassMethod()up\n footerSection\n generate\n getClassLink\n getClassLink()show\n getTypeLink\n isOnClassPage\n isOnTypePage\n methodtypesSection\n outdir\n pageName\n section1\n section2\n section3\n section4\n section5\n section6\n setSidebarName\n title\n visitArray\n visitArray()up\n visitBind\n visitBind()up\n visitBlank\n visitBlank()up\n visitBlock\n visitBlock()up\n visitCall\n visitCall()up\n visitComment\n visitComment()up\n visitDefDec\n visitDefDec()up\n visitDialect\n visitDialect()up\n visitGeneric\n visitGeneric()up\n visitIdentifier\n visitIdentifier()up\n visitIf\n visitIf()up\n visitImport\n visitImport()up\n visitInherits\n visitInherits()up\n visitMatchCase\n visitMatchCase()up\n visitMember\n visitMember()up\n visitMethod\n visitMethod()up\n visitMethodType\n visitMethodType()up\n visitModule\n visitModule()up\n visitNum\n visitNum()up\n visitObject\n visitObject()up\n visitOp\n visitOp()up\n visitReturn\n visitReturn()up\n visitSignaturePart\n visitSignaturePart()up\n visitString\n visitString()up\n visitTryCatch\n visitTryCatch()up\n visitTypeDec\n visitTypeDec()up\n visitTypeLiteral\n visitTypeLiteral()up\n visitTypeParameters\n visitTypeParameters()up\n visitVarDec\n visitVarDec()up\n writer\nmethods-of:section.withTemplate()andCursorAt:\n addElement()withText\n alphabetize\n cursor\n elts\n hasContent\n insert\n md\nmethodtypes-of:Section:\n 1 insert -> Done\n 1 isEmpty -> Boolean\n 1 md -> String\nmodules:\n ast\n errormessages\n identifierKinds\n io\n lexer\n parser\n stringMap\n sys\n unicode\n unixFilePath\n util\npath:\n gracedocMD\npublic:\n Parameter\n Property\n Section\n directoryBuilderForFile()outTo()as\n emptySection\n formatComments()rowClass()colspan\n graceDocVisitor\n indent\n markdownWriter\n parseArguments\n section\n sidebarFileGenerator\n sidebarModule\n trim\ntypes:\n Section\n";
                  if (typeof originalSourceLines !== "undefined") {
                    originalSourceLines["gracedocMD"] = [
                      "import \"ast\" as ast",
                      "import \"parser\" as parser",
                      "import \"lexer\" as lexer",
                      "import \"io\" as io",
                      "import \"sys\" as sys",
                      "",
                      "def settings = object {",
                      "    var inputdir:String is public := \"\"",
                      "    var outputdir:String is public := \"\"",
                      "    var verbosity:Number is public := 0",
                      "    var publicOnly:Boolean is public := false",
                      "    def version:Number is public = 1.1",
                      "}",
                      "",
                      "//Markdown styling codewords",
                      "def code = \"code\"",
                      "def plain = \"plaintext\"",
                      "def heading = \"heading\"",
                      "def bold = \"bold\"",
                      "def italic = \"italic\"",
                      "def baseUrl = \"/grace-documentation/\" //NOTE: This must be changed for each different site",
                      "                                        //    being built!",
                      "def classList = \"classList\"",
                      "def typeList = \"typeList\"",
                      "",
                      "",
                      "method parseArguments {",
                      "    def args = sys.argv",
                      "    if (args.size > 1) then {",
                      "        def indices = args.indices",
                      "        var skip := true",
                      "        for (indices) do { i ->",
                      "            def arg = args.at(i)",
                      "            if (arg.at(1)==\"-\") then {",
                      "                match (arg)",
                      "                    case { \"-i\" ->",
                      "                        if (args.size < (i+1)) then {",
                      "                            io.error.write \"gracedoc: -i requires an argument.\\n\"",
                      "                            sys.exit(1)",
                      "                        }",
                      "                        skip := true",
                      "                        settings.inputdir := args.at(i+1)",
                      "                    } case { \"-o\" ->",
                      "                        if (args.size < (i+1)) then {",
                      "                            io.error.write \"gracedoc: -o requires an argument.\\n\"",
                      "                            sys.exit(1)",
                      "                        }",
                      "                        skip := true",
                      "                        settings.outputdir := args.at(i+1)",
                      "                    } case { \"-v\" ->",
                      "                        if (args.size < (i+1)) then {",
                      "                            io.error.write \"gracedoc: -v requires an argument.\\n\"",
                      "                            sys.exit(1)",
                      "                        }",
                      "                        skip := true",
                      "                        settings.verbosity := args.at(i+1).asNumber",
                      "                    } case { \"--publiconly\" ->",
                      "                        settings.publicOnly := true",
                      "                    } case { \"--help\" ->",
                      "                        print \"Usage: {args.at(1)} -i <path> -o <path> [-v <level>] [--help] [--publiconly]\"",
                      "                        print \"  -i <path>      The directory to process (contains .grace files)\"",
                      "                        print \"  -o <path>      The directory to contain the generated HTML files\"",
                      "                        print \"  [-v <level>]   Optional. Level of detail in output (0 = none, 1 = some, 2 = all); default is 0\"",
                      "                        print \"  [--publiconly] Optional. If set, only public methods are documented and public \"",
                      "                        print \"                 variables are listed as methods. Default is off.\"",
                      "                        print \"  [--help]       Optional. Print this usage information.\"",
                      "                    } case { _ ->",
                      "                        io.error.write \"gracedoc: Invalid argument {arg}.\\n\"",
                      "                    }",
                      "            } else {",
                      "                if (skip == true) then {",
                      "                    skip := false",
                      "                } else {",
                      "                    io.error.write \"gracedoc: Invalid argument {arg}. Arguments must start with a -.\\n\"",
                      "                    sys.exit(1)",
                      "                }",
                      "            }",
                      "        }",
                      "        if ((settings.inputdir==\"\") || (settings.outputdir==\"\")) then {",
                      "            io.error.write \"gracedoc: Both the -i and -o arguments are required.\\n\"",
                      "            sys.exit(1)",
                      "        }",
                      "    } else {",
                      "        io.error.write \"gracedoc: Both the -i and -o arguments are required.\\n\"",
                      "        sys.exit(1)",
                      "    }",
                      "}",
                      "",
                      "type Section = type {",
                      "    md -> String",
                      "    isEmpty -> Boolean",
                      "    insert -> Done",
                      "}",
                      "",
                      "//Class for the template that the program uses to create the HTML page",
                      "class section.withTemplate(md')andCursorAt(idx) -> Section {",
                      "    var md:String is readable := md'",
                      "    var hasContent is readable := false",
                      "    var cursor:Number is confidential := idx",
                      "    var elts is public := dictionary []",
                      "    method addElement(n:String)withText(t:String) {",
                      "        hasContent := true",
                      "        elts.at(n)put(t)",
                      "    }",
                      "    method insert(t:String) {",
                      "        hasContent := true",
                      "        def begin = md.substringFrom(1)to(cursor)",
                      "        def end = md.substringFrom(cursor+1)to(md.size)",
                      "        md := \"{begin}{t}{end}\"",
                      "        cursor := cursor + t.size",
                      "    }",
                      "    method alphabetize {",
                      "        var alpha := elts.keys.sorted",
                      "        var numElts := 0",
                      "        for (alpha) do { k ->",
                      "            var rowClass",
                      "            if ((numElts % 2) == 0)",
                      "                then { rowClass := \"row-even\" }",
                      "                else { rowClass := \"row-odd\" }",
                      "            elts.at(k)put(elts.at(k).replace(\"class='placeholder'\")",
                      "                                        with(\"class='{rowClass}'\"))",
                      "            insert(elts.at(k))",
                      "            numElts := numElts + 1",
                      "        }",
                      "    }",
                      "}",
                      "",
                      "//Class for other sections without a template",
                      "class emptySection.withCursorAt(idx) -> Section {",
                      "    var md:String is readable := \"\"",
                      "    var hasContent is readable := false",
                      "    var cursor:Number is confidential := idx",
                      "    var elts is public := dictionary []",
                      "    method addElement(n:String)withText(t:String) {",
                      "        hasContent := true",
                      "        elts.at(n)put(t)",
                      "    }",
                      "    method insert(t:String) {",
                      "        hasContent := true",
                      "        def begin = md.substringFrom(1)to(cursor)",
                      "        def end = md.substringFrom(cursor+1)to(md.size)",
                      "        md := \"{begin}{t}{end}\"",
                      "        cursor := cursor + t.size",
                      "    }",
                      "    method alphabetize {",
                      "        var alpha := elts.keys.sorted",
                      "        var numElts := 0",
                      "        for (alpha) do { k ->",
                      "            var rowClass",
                      "            if ((numElts % 2) == 0)",
                      "                then { rowClass := \"row-even\" }",
                      "                else { rowClass := \"row-odd\" }",
                      "            elts.at(k)put(elts.at(k).replace(\"class='placeholder'\")",
                      "                                        with(\"class='{rowClass}'\"))",
                      "            insert(elts.at(k))",
                      "            numElts := numElts + 1",
                      "        }",
                      "    }",
                      "}",
                      "",
                      "/////////////////////////////////////////////////////////////////////////////////////",
                      "",
                      "//Parameter class",
                      "class Parameter{",
                      "     var name:String is public := \"\"",
                      "     var args:String is public := \"\"",
                      "",
                      "     method insertName(text:String){name := name ++ text}",
                      "     method insertArg(text:String){args := args ++ text}",
                      "}",
                      "",
                      "",
                      "//Type to hold the properties of methods or",
                      "// other parts of objects",
                      "class Property{",
                      "     var name:String is public := \"\"",
                      "     var params: Set<Parameter> is readable := set [] //Set of parameters",
                      "     var comments:String is public := \"\"",
                      "",
                      "     method addParam(param:Parameter) {params.add(param)}",
                      "}",
                      "",
                      "class sidebarModule{",
                      "     var name is public := \"\"",
                      "     var classFiles is public := \"\"",
                      "     var typeFiles is public := \"\"",
                      "}",
                      "",
                      "//Class to generate sidebar file...",
                      "class sidebarFileGenerator",
                      "{",
                      "     var fileOut:String := \"entries:\\n- title: Sidebar\\n  product: Grace Documentation\\n  version: 1.0\\n  folders:\\n\\n\"",
                      "     var folderIndent := 2",
                      "     var fileIndent := 4",
                      "     var classFiles:String := \"\"",
                      "     var typeFiles:String := \"\"",
                      "     var modSet := false",
                      "     var inSubFolder := true",
                      "     var contentExistsInFolder := false",
                      "     var moduleList: dictionary<sidebarModule> := dictionary []",
                      "",
                      "",
                      "     //Add to a specific list output",
                      "     method add(string:String)toList(aList:String)inModule(modName:String)",
                      "     {",
                      "          var mod:sidebarModule",
                      "",
                      "          //Try to find the mod in the mooduleList first",
                      "          if(moduleList.containsKey(modName))then{",
                      "               mod := moduleList.at(modName)",
                      "          } else {",
                      "               //Create and name the mod",
                      "               mod := sidebarModule",
                      "               mod.name := modName",
                      "",
                      "               //Store the module in the dictionary",
                      "               moduleList.at(modName)put(mod)",
                      "               //print \"\\n\\nADDED MOD: {mod.name} onbar: {modName}\\n\"",
                      "          }",
                      "",
                      "          if(aList == classList) then",
                      "          {",
                      "               mod.classFiles := mod.classFiles ++ string",
                      "               //classFiles := classFiles ++ string;",
                      "          }",
                      "          elseif(aList == typeList) then",
                      "          {",
                      "               mod.typeFiles := mod.typeFiles ++ string",
                      "               //typeFiles := typeFiles ++ string;",
                      "          }",
                      "          else",
                      "          {",
                      "               fileOut := fileOut ++ string;",
                      "          }",
                      "     }",
                      "",
                      "     //Sets the module name and overarching sidebar",
                      "     method setModule(name:String)",
                      "     {",
                      "          //Add the main folder for the module...",
                      "          addFolder(name)",
                      "",
                      "          //Set mod flag to true",
                      "          modSet := true",
                      "     }",
                      "",
                      "     //Add to main output",
                      "     method add(string:String)",
                      "     {",
                      "          fileOut := fileOut ++ string;",
                      "     }",
                      "",
                      "     //Adds a folder to the sidebar",
                      "     method addFolder(title:String)",
                      "     {",
                      "          add(\"\\n\")",
                      "          add(\"  - title: \\\"{title}\\\"\\n\")",
                      "          add(\"    output: web, pdf\\n\")",
                      "          add(\"    folderitems:\\n\")",
                      "",
                      "          //Set the sub folder flag to track indent",
                      "          inSubFolder := false",
                      "          contentExistsInFolder := false",
                      "     }",
                      "",
                      "     //Signals that sub-folders will follow",
                      "     method signalSubfolders",
                      "     {",
                      "          //Check for content... if no content add a blank one",
                      "          if(!contentExistsInFolder)  then {addFile(\"\")withLink(\"404\")toList(\"---\")inModule(\"-none-\")}",
                      "",
                      "          //Add the subforlder signal",
                      "          add(\"      subfolders:\\n\")",
                      "     }",
                      "",
                      "     //Adds a subfolder to the sidebar",
                      "     method addSubFolder(title:String)",
                      "     {",
                      "          //Check if we are NOT in subfolder mode... then signal sub-folder start",
                      "          if(!inSubFolder) then {signalSubfolders}",
                      "",
                      "          add(\"\\n\")",
                      "          add(\"      - title: \\\"{title}\\\"\\n\")",
                      "          add(\"        output: web, pdf\\n\")",
                      "          add(\"        subfolderitems:\\n\")",
                      "",
                      "          //Set the sub folder flags to track indent",
                      "          inSubFolder := true",
                      "          contentExistsInFolder := false",
                      "     }",
                      "",
                      "     //Adds a file to the sidebar",
                      "     method addFile(title:String)withLink(link:String)toList(aList:String)inModule(modName:String)",
                      "     {",
                      "          if(inSubFolder) then",
                      "          {",
                      "               add(\"\\n\")toList(aList)inModule(modName)",
                      "               add(\"        - title: \\\"{title}\\\"\\n\")toList(aList)inModule(modName)",
                      "               add(\"          url: /{link}/\\n\")toList(aList)inModule(modName)",
                      "               add(\"          output: web \\n\")toList(aList)inModule(modName)",
                      "          }",
                      "          else",
                      "          {",
                      "               add(\"\\n\")toList(aList)inModule(modName)",
                      "               add(\"    - title: \\\"{title}\\\"\\n\")toList(aList)inModule(modName)",
                      "               add(\"      url: /{link}/\\n\")toList(aList)inModule(modName)",
                      "               add(\"      output: web \\n\")toList(aList)inModule(modName)",
                      "          }",
                      "",
                      "          contentExistsInFolder := true",
                      "     }",
                      "",
                      "     method generate(module:String)",
                      "     {",
                      "          print \"\\nGenerating Sidebar... \"",
                      "          if(!modSet) then { setModule(\"Main-1\")}; //Just in case setModule was not already called,",
                      "                                             // which it should have been",
                      "",
                      "          var mod:sidebarModule := moduleList.at(module)",
                      "",
                      "          //print \"\\n\\nSidebar MOD NAME: {mod.name} onbar: {module}\\n\"",
                      "",
                      "          //Generate Sub-Folders and then add Files",
                      "          addSubFolder(\"Classes\")",
                      "          fileOut := fileOut ++ mod.classFiles",
                      "          //fileOut := fileOut ++ classFiles",
                      "",
                      "          addSubFolder(\"Types\")",
                      "          fileOut := fileOut ++ mod.typeFiles",
                      "          //fileOut := fileOut ++ typeFiles",
                      "",
                      "          var out := io.open(\"{settings.outputdir}/grace-doc-sidebar.yml\", \"w\")",
                      "          out.write(fileOut)",
                      "          out.close",
                      "     }",
                      "}",
                      "",
                      "",
                      "//Class for a markdown writer object",
                      "class markdownWriter",
                      "{",
                      "     var definition: String is readable := \"\"",
                      "     var description: String is readable := \"\"",
                      "     var propSet: Set<Property> is readable := set [] //Set of propeties",
                      "     var bin: String is readable := \"\"",
                      "     var currentMode: String := plain",
                      "",
                      "     //Method to add text to definition",
                      "     method insertDef(text:String)",
                      "     {",
                      "          definition := definition ++ text",
                      "          print \"\\n\\n Inserted to definition\"",
                      "     }",
                      "",
                      "     //Method to add text to description",
                      "     method insertDesc(text:String)",
                      "     {",
                      "          description := description ++ text",
                      "          print \"\\n\\n Inserted to description\"",
                      "     }",
                      "",
                      "     //Adds a propety to the set contained in this obj",
                      "     method addProp(aTitle:String)withDesc(desc:String)",
                      "     {",
                      "          //Create the property",
                      "          var newProp := Property",
                      "",
                      "          //Set the values",
                      "          newProp.title := aTitle;",
                      "          newProp.description := desc;",
                      "",
                      "          //Add it to the set",
                      "          propSet.add(newProp);",
                      "",
                      "          print \"added prop\"",
                      "     }",
                      "////////////////////////////////////////////////////////",
                      "",
                      "     //For encapsulating code",
                      "     method changeMode(newMode:String)",
                      "     {",
                      "          //Change to code writing",
                      "          if((newMode == code) && (currentMode == plain)) then {bin := bin ++ \"`\"}",
                      "          if((newMode == code) && (currentMode == heading)) then {bin := bin ++ \"`\"}",
                      "",
                      "          //Change to plain writing",
                      "          if((newMode == plain) && (currentMode == code)) then {bin := bin ++ \"`\"}",
                      "          //if((newMode == plain) && (currentMode == heading)) then {bin := bin ++ \"\"}",
                      "",
                      "          //Change to heading writing",
                      "          if((newMode == heading) && (currentMode == code)) then {bin := bin ++ \"`\\n\"}",
                      "          if(newMode == heading) then { bin := bin ++ \"\\n### \" }",
                      "          //No styling change required from plain formatting",
                      "",
                      "          //Set current mode to new mode",
                      "          currentMode := newMode;",
                      "     }",
                      "",
                      "     //Add text -- ignore mode",
                      "     method addText(string:String){ bin := bin ++ string }",
                      "",
                      "     //Add to the non-structured bin variable",
                      "     method addText(string:String)inMode(mode:String)",
                      "     {",
                      "          //Change formatting mode if needed",
                      "          changeMode(mode)",
                      "",
                      "          bin := bin ++ string",
                      "",
                      "          //Add a newline after the heading -- hard to do correctly with changeMode call",
                      "          if(mode == heading) then {bin := bin ++ \"\\n\"}",
                      "     }",
                      "",
                      "     method addCode(string:String)",
                      "     {",
                      "          bin := bin ++ \"`\" ++ string ++ \"`\"",
                      "     }",
                      "",
                      "     method addLink(string:String)",
                      "     {",
                      "          bin := bin ++ string",
                      "     }",
                      "",
                      "     method addHeader(string:String)",
                      "     {",
                      "          bin := bin ++ string ++ \"\\n\"",
                      "     }",
                      "",
                      "     method add(string:String) {bin := bin ++ string}",
                      "",
                      "     method addSpace{bin := bin ++ \" \"}",
                      "     method addColon{bin := bin ++ \":\"}",
                      "     method addComma{bin := bin ++ \",\"}",
                      "     method addBullet{bin := bin ++ \"- \"}",
                      "",
                      "     //Newline is special, since we should reset the mode...",
                      "     method addNewline",
                      "     {",
                      "          changeMode(plain)",
                      "          bin := bin ++ \"  \\n\"",
                      "     }",
                      "",
                      "     //Write out all of the markdown to a string,",
                      "     //formatted correctly",
                      "     method buildMarkdown -> String",
                      "     {",
                      "          var temp := \"### Definition \\n\"",
                      "          temp := temp ++ definition",
                      "          temp := temp ++ \"\\n\\n### Description\\n\"",
                      "          temp := temp ++ description",
                      "",
                      "          print (temp)",
                      "          return temp",
                      "",
                      "     }",
                      "",
                      "     //Dumps the current bin variable and clears it",
                      "     method dumpBin -> String",
                      "     {",
                      "          //Reset write mode to create a clean slate",
                      "          currentMode := plain;",
                      "          var temp := bin;",
                      "          bin := \"\";",
                      "          return temp }",
                      "}",
                      "",
                      "",
                      "method trim(c:String) -> String {",
                      "    var start := 1",
                      "    var end := c.size",
                      "    while { c.at(start) == \" \" } do { start := start + 1 }",
                      "    while { c.at(end) == \" \" } do { end := end - 1 }",
                      "    return c.substringFrom(start)to(end)",
                      "}",
                      "",
                      "method indent(n:Number) -> String {",
                      "    //unrolled for optimization",
                      "    if (n==0) then { return \"\" }",
                      "    elseif (n==1) then { return \"    \" }",
                      "    elseif (n==2) then { return \"        \" }",
                      "    elseif (n==3) then { return \"            \" }",
                      "    elseif (n==4) then { return \"                \" }",
                      "    elseif (n==5) then { return \"                    \" }",
                      "    elseif (n==6) then { return \"                        \" }",
                      "    elseif (n==7) then { return \"                            \" }",
                      "    elseif (n==8) then { return \"                                \" }",
                      "    else { return \"                                    \"}",
                      "}",
                      "",
                      "",
                      "class directoryBuilderForFile(in) outTo (dir) as (pageType) {",
                      "    inherits ast.baseVisitor",
                      "",
                      "    var isOnClassPage := false",
                      "    var isOnTypePage := false",
                      "    if (pageType==\"class\") then { isOnClassPage := true }",
                      "    elseif (pageType==\"type\") then { isOnTypePage := true }",
                      "",
                      "    def pageName = if (in.endsWith(\".grace\").not) then { in }",
                      "                   else { in.substringFrom(0)to(in.size - 6) }",
                      "    def title = if (isOnTypePage) then { \"Type: {pageName}\" }",
                      "                elseif (isOnClassPage) then { \"Class: {pageName}\" }",
                      "                else { \"Module: {pageName}\" }",
                      "",
                      "    def outdir = if (isOnClassPage || isOnTypePage) then { dir } else { pageName }",
                      "",
                      "    method generate is public {",
                      "        var outfile",
                      "        if (!io.exists(\"{settings.outputdir}\")) then { io.system(\"mkdir {settings.outputdir}\") }",
                      "        if (!io.exists(\"{settings.outputdir}/{outdir}\")) then { io.system(\"mkdir {settings.outputdir}/{outdir}\") }",
                      "",
                      "        //Old Types and Classes separate dirs",
                      "        //if (!io.exists(\"{settings.outputdir}/{outdir}/classes\")) then {",
                      "          //  io.system(\"mkdir {settings.outputdir}/{outdir}/classes\")",
                      "        //}",
                      "        //if (!io.exists(\"{settings.outputdir}/{outdir}/types\")) then {",
                      "          //  io.system(\"mkdir {settings.outputdir}/{outdir}/types\")",
                      "        //}",
                      "        //if (isOnClassPage) then {",
                      "     //       outfile := io.open(\"{settings.outputdir}/{outdir}/{pageName}.md\", \"w\")",
                      "       // } elseif (isOnTypePage) then {",
                      "     //       outfile := io.open(\"{settings.outputdir}/{outdir}/{pageName}.md\", \"w\")",
                      "       // } else {",
                      "          //  outfile := io.open(\"{settings.outputdir}/{outdir}/{pageName}.md\", \"w\")",
                      "     //   }",
                      "",
                      "        outfile := io.open(\"{settings.outputdir}/{outdir}/{pageName}.md\", \"w\")",
                      "        outfile.write(\"TEMPORARY\")",
                      "        outfile.close",
                      "",
                      "        if (!isOnClassPage && !isOnTypePage) then {",
                      "            // Rebuild the modules list with contents",
                      "            var out := \"---\\n\"",
                      "            out := out ++ \"title: \\\"{title}\\\"\\n\"",
                      "            out := out ++ \"keywords: mydoc\\n\"",
                      "            out := out ++ \"sidebar: grace-doc-sidebar\\n\"",
                      "            out := out ++ \"toc: false\"",
                      "            out := out ++ \"permalink: /drawingCanvas/\\n\"",
                      "            out := out ++ \"folder: grace-docs\\n\"",
                      "            out := out ++ \"---\\n\"",
                      "",
                      "            var modules := io.listdir(settings.outputdir)",
                      "            def modit = modules.iterator",
                      "            while {modit.hasNext} do {",
                      "                var mod := modit.next",
                      "                if ((mod.startsWith(\".\")==false) && (!mod.endsWith(\".css\")) && (!mod.endsWith(\".js\")) && (mod != \"index.md\") && (mod != \"modules.md\") && (mod != \"404.md\") && (mod != \"inputs\")) then {",
                      "                    out := out ++ \"<li><span class='arrow-button-toggle' id='arrow-button-{mod}' onclick=\\\"toggleContents('{mod}');\\\">&#9654;</span><a href='{mod}/{mod}.md' target='mainFrame'>{mod}</a></li>\"",
                      "",
                      "                    out := out ++ \"<div class='contents-list' id='contents-{mod}' style='display:none;'>\"",
                      "",
                      "                    out := out ++ \"<h6>Types</h6><ul>\"",
                      "                    var types := io.listdir(\"{settings.outputdir}/{mod}/types\")",
                      "                    def typit = types.iterator",
                      "                    while {typit.hasNext} do {",
                      "                        var typ := typit.next",
                      "                        typ := typ.substringFrom(1)to(typ.size - 5)",
                      "                        if ((typ.startsWith(\".\")==false) && (typ != \"contents.md\")) then {",
                      "                            out := out ++ \"<li><a href='{mod}/types/{typ}.md' target='mainFrame'>{typ}</a></li>\"",
                      "                        }",
                      "                    }",
                      "                    out := out ++ \"</ul>\"",
                      "",
                      "                    out := out ++ \"<h6>Classes</h6><ul>\"",
                      "                    var clss := io.listdir(\"{settings.outputdir}/{mod}/classes\")",
                      "                    def clsit = clss.iterator",
                      "                    while {clsit.hasNext} do {",
                      "                        var cls := clsit.next",
                      "                        cls := cls.substringFrom(1)to(cls.size - 5)",
                      "                        if ((cls.startsWith(\".\")==false) && (cls != \"contents.md\")) then {",
                      "                            out := out ++ \"<li><a href='{mod}/classes/{cls}.md' target='mainFrame'>{cls}</a></li>\"",
                      "                        }",
                      "                    }",
                      "                    out := out ++ \"</ul>\"",
                      "",
                      "                    out := out ++ \"</div>\"",
                      "                }",
                      "            }",
                      "            out := out ++ \"</ul></div></body>\"",
                      "            out := out ++ \"</html>\"",
                      "            var moduleslistfile := io.open(\"{settings.outputdir}/modules.md\", \"w\")",
                      "            moduleslistfile.write(out)",
                      "            moduleslistfile.close",
                      "        }",
                      "    }",
                      "",
                      "    method visitTypeDec(o) -> Boolean {",
                      "        if (isOnTypePage == false) then {",
                      "            def typeVis = directoryBuilderForFile (o.name.value) outTo (outdir) as \"type\"",
                      "            o.accept(typeVis)",
                      "            typeVis.generate",
                      "            return false",
                      "        }",
                      "        return true",
                      "    }",
                      "",
                      "    method visitMethod(m) -> Boolean {",
                      "        if (m.isClass.not) then { return false }",
                      "        if (isOnClassPage == false) then {",
                      "            def o = m.body.last",
                      "            if (o.superclass != false) then {",
                      "                o.superclass.accept(self)",
                      "            }",
                      "            def classVis = directoryBuilderForFile (o.name) outTo (outdir) as \"class\"",
                      "            o.accept(classVis)",
                      "            classVis.generate",
                      "            return false",
                      "        }",
                      "        return true",
                      "    }",
                      "}",
                      "",
                      "",
                      "class graceDocVisitor.createFrom(in) outTo (dir) as (pageType) {",
                      "    inherits ast.baseVisitor",
                      "",
                      "    var isOnClassPage := false",
                      "    var isOnTypePage := false",
                      "    if (pageType==\"class\") then { isOnClassPage := true }",
                      "    elseif (pageType==\"type\") then { isOnTypePage := true }",
                      "",
                      "    def pageName = if (in.endsWith(\".grace\").not) then { in }",
                      "                   else { in.substringFrom(0)to(in.size - 6) }",
                      "    def title = if (isOnTypePage) then { \"Type: {pageName}\" }",
                      "                elseif (isOnClassPage) then { \"Class: {pageName}\" }",
                      "                else { \"Module: {pageName}\" }",
                      "    var section1",
                      "    var section2",
                      "    var section3",
                      "    var section4",
                      "    var section5",
                      "    var footerSection",
                      "    var methodtypesSection",
                      "    var section6",
                      "    var writer := markdownWriter",
                      "",
                      "    def outdir = if (isOnClassPage || isOnTypePage) then { dir } else { pageName }",
                      "",
                      "    //debugging",
                      "    if (settings.verbosity > 1) then { print \"On {title} - graceDocVisitor created... inMod {outdir} at time: ({sys.elapsedTime})\" }",
                      "",
                      "    //Build the template ",
                      "    buildTemplate",
                      "",
                      "",
                      "    //LINKS ARE BUILT HERE !! (for both types and classes) MARKDOWN",
                      "    //NOTE: If using a different website -- change the baseUrl variable def",
                      "",
                      "    //This method creates and returns the internal page link -- now in markdown",
                      "    method getTypeLink(v:String) is confidential {",
                      "        def filename = \"{v}\"",
                      "        var out := \"[`{v}`](\"  //BASEURL defined at top of file  {baseUrl}",
                      "        //first, check current module's types directory for filename",
                      "        if (io.exists(\"{settings.outputdir}/{outdir}/{filename}.md\")) then {",
                      "             out := out ++ \"{baseUrl}{filename}\"",
                      "        //if not found, check imported module directories",
                      "        } elseif (io.exists(\"{settings.outputdir}/imported/types/{filename}.md\")) then {",
                      "             out := out ++ \"{baseUrl}{filename}\"",
                      "        //if not found, check gracelib types",
                      "        } elseif (io.exists(\"{settings.outputdir}/gracelib/types/{filename}.md\")) then {",
                      "            out := out ++ \"{baseUrl}{filename}\"",
                      "        } else {",
                      "            out := out ++ \"{baseUrl}404\"",
                      "            //print \"\\nFile NOT FOUND!! --> below\"",
                      "        }",
                      "        //print \"\\nBaseURL: {baseUrl}\\n FileName: {filename}.md\"",
                      "        out := out ++ \")\"",
                      "        return out",
                      "    }",
                      "    method getClassLink(c:String)show(rep:String){",
                      "      def filename = \"{c}\"",
                      "      var out := \"[`{c}`](\"",
                      "      //first, check current module's class directory for filename",
                      "      if (io.exists(\"{settings.outputdir}/{outdir}/{filename}.md\")) then {",
                      "           out := out ++ \"{baseUrl}{filename}\"",
                      "      //if not found, check imported module directories",
                      "      } elseif (io.exists(\"{settings.outputdir}/imported/classes/{filename}.md\")) then {",
                      "           out := out ++ \"{baseUrl}{filename}\"",
                      "      //if not found, check gracelib classes",
                      "      } elseif (io.exists(\"{settings.outputdir}/gracelib/classes/{filename}.md\")) then {",
                      "          out := out ++ \"{baseUrl}{filename}\"",
                      "      } else {",
                      "          out := out ++ \"{baseUrl}404\"",
                      "          //print \"\\nFile NOT FOUND!! --> below\"",
                      "      }",
                      "      //print \"\\nBaseURL: {baseUrl}\\n FileName: {filename}.md\"",
                      "      out := out ++ \")\"",
                      "      return out",
                      "    }",
                      "    method getClassLink(c:String) is confidential {",
                      "        getClassLink(c)show(c)",
                      "    }",
                      "",
                      "    method buildTemplate is confidential {",
                      "        var cursor := 0",
                      "        var out := \"---\\n\"",
                      "        var classIndex := 0",
                      "        var typeIndex := 0",
                      "        var localWriter := markdownWriter",
                      "",
                      "        //Create the permalink for linking",
                      "        //need to filter out \"Class:\" and \"Type: \"",
                      "        var permalink:String := \"{title}\"",
                      "",
                      "        //Remove the class/type declaration",
                      "        permalink := permalink.replace(\"Class:\")with(\"\")",
                      "        permalink := permalink.replace(\"Type:\")with(\"\")",
                      "",
                      "        //Remove all spaces from link name",
                      "        permalink := permalink.replace(\" \")with(\"\")",
                      "",
                      "        //Create the output for the header",
                      "        out := out ++ \"title: \\\"{title}\\\"\\n\"",
                      "        out := out ++ \"keywords: mydoc\\n\"",
                      "        out := out ++ \"sidebar: grace-doc-sidebar\\n\"",
                      "        out := out ++ \"toc: false\\n\"",
                      "        out := out ++ \"permalink: /{permalink}/\\n\"",
                      "        out := out ++ \"folder: grace-docs\\n\"",
                      "        out := out ++ \"---\\n\"",
                      "",
                      "        //Add the file to the sidebar",
                      "        if(title.contains(\"Class:\"))then",
                      "        {",
                      "             sidebarGen.addFile(title)withLink(permalink)toList(classList)inModule(outdir)",
                      "             print \"\\nadded {title} to {classList} in module {outdir}\"",
                      "        }",
                      "        elseif(title.contains(\"Type:\"))then",
                      "        {",
                      "             sidebarGen.addFile(title)withLink(permalink)toList(typeList)inModule(outdir)",
                      "        }",
                      "",
                      "        //If on a class page, then also generate the page header itself...",
                      "        if (isOnClassPage) then",
                      "        {",
                      "             localWriter.addText(\"Definition\")inMode(heading)",
                      "             localWriter.addText(title)inMode(plain)",
                      "             localWriter.addNewline",
                      "             localWriter.addText(\"Description\")inMode(heading)",
                      "             localWriter.addText(\"Not currently available...\")inMode(plain)",
                      "             localWriter.addNewline",
                      "             localWriter.addText(\"Properties\")inMode(heading)",
                      "             localWriter.addNewline",
                      "",
                      "             //Add writer to output...",
                      "             out := out ++ localWriter.dumpBin",
                      "        }",
                      "",
                      "        //If it is a class overview page...",
                      "        if (!isOnClassPage && !isOnTypePage) then",
                      "        {",
                      "             localWriter.addText(\"Methods\")inMode(heading)",
                      "             localWriter.addNewline",
                      "",
                      "             //Add writer to output...",
                      "             out := out ++ localWriter.dumpBin",
                      "        }",
                      "",
                      "        ///////////////////////////////////////////////////////////////////",
                      "",
                      "        //This line generates the header for the file. We dont need the commands below to",
                      "        //be initialized with a template since this program is generating markdown now, not HTML",
                      "        section1 := section.withTemplate(out)andCursorAt(cursor)",
                      "",
                      "        section2 := section.withTemplate(\"\")andCursorAt(cursor)",
                      "",
                      "        cursor := 0",
                      "        writer.addText(\"Types\")inMode(heading)",
                      "        out := writer.dumpBin",
                      "        cursor := out.size",
                      "",
                      "        section3 := section.withTemplate(out)andCursorAt(cursor)",
                      "",
                      "        cursor := 0",
                      "        writer.addText(\"Definitions\")inMode(heading)",
                      "        out := writer.dumpBin",
                      "        cursor := out.size",
                      "        section4 := section.withTemplate(out)andCursorAt(cursor)",
                      "",
                      "        section5 := section.withTemplate(\"\")andCursorAt(cursor)",
                      "",
                      "        section6 := section.withTemplate(\"\")andCursorAt(cursor)",
                      "",
                      "",
                      "        methodtypesSection := section.withTemplate(\"\")andCursorAt(cursor)",
                      "",
                      "        footerSection := section.withTemplate(\"\")andCursorAt(cursor)",
                      "",
                      "        ///////////////////////////////////////////////////////////////////",
                      "",
                      "    }",
                      "",
                      "    //Only called once to build 404 page",
                      "    method build404 {",
                      "        var out := \"---\\n\"",
                      "        out := out ++ \"title: \\\"{title}\\\"\\n\"",
                      "        out := out ++ \"keywords: mydoc\\n\"",
                      "        out := out ++ \"sidebar: grace-doc-sidebar\\n\"",
                      "        out := out ++ \"toc: false\\n\"",
                      "        out := out ++ \"permalink: /404/\\n\"",
                      "        out := out ++ \"folder: grace-docs\\n\"",
                      "        out := out ++ \"---\\n\"",
                      "",
                      "        out := out ++ \"# 404 - Page 'ot Found  \"",
                      "        out := out ++ \"\\n  \\n  \\nOops! The file for this link appears to be missing! \\n\"",
                      "        out := out ++ \"Please naviagte back to your previous page!\\\"\\n\"",
                      "",
                      "        var file404 := io.open(\"{settings.outputdir}/404.md\", \"w\")",
                      "        file404.write(out)",
                      "        file404.close",
                      "    }",
                      "",
                      "    //Sets the module name of the sidebar - allowing all pages to be contained in a div",
                      "    method setSidebarName",
                      "    {",
                      "         sidebarGen.setModule(outdir)",
                      "    }",
                      "",
                      "    method buildindex {",
                      "        var out := \"<!-- generated by Gracedoc, v{settings.version} -- https://github.com/reid47/gracedoc -->\\n\"",
                      "        out := out ++ \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\"",
                      "        out := out ++ \"<head>\"",
                      "        out := out ++ \"<title>GraceDocs</title>\"",
                      "        out := out ++ \"<link rel=\\\"stylesheet\\\" href=\\\"graceDoc.css\\\">\"",
                      "        out := out ++ \"</head>\"",
                      "        out := out ++ \"<body>\"",
                      "        out := out ++ \"<iframe id=\\\"frame-sidebar\\\" src=\\\"modules.md\\\" name=\\\"moduleFrame\\\"></iframe>\"",
                      "        out := out ++ \"<iframe id=\\\"frame-main\\\" src=\\\"\\\" name=\\\"mainFrame\\\"></iframe>\"",
                      "        out := out ++ \"</body>\"",
                      "        out := out ++ \"</html>\"",
                      "        var fileindex := io.open(\"{settings.outputdir}/index.md\", \"w\")",
                      "        fileindex.write(out)",
                      "        fileindex.close",
                      "    }",
                      "",
                      "    method buildjs {",
                      "        var out := ‹function toggleContents(eltid) {",
                      "    var elt = document.getElementById('contents-'+eltid)",
                      "    var arrow = document.getElementById('arrow-button-'+eltid)",
                      "    if (elt.style.display == 'none') {",
                      "        elt.style.display = 'block';",
                      "        arrow.innerHTML = '&#9660';",
                      "    } else {",
                      "        elt.style.display = 'none';",
                      "        arrow.innerHTML = '&#9654';",
                      "    }",
                      "}›",
                      "        var filejs := io.open(\"{settings.outputdir}/gracedoc.js\", \"w\")",
                      "        filejs.write(out)",
                      "        filejs.close",
                      "    }",
                      "",
                      "    method buildcss {",
                      "         print \"CSS Built...\"",
                      "    }",
                      "",
                      "    //Method that generates all of the output based on the different sections",
                      "    method generate is public {",
                      "        if (settings.verbosity > 1) then { print \"On {title} - starting to assemble HTML ({sys.elapsedTime})\" }",
                      "",
                      "        var outfile",
                      "        var output := \"\"",
                      "        outfile := io.open(\"{settings.outputdir}/{outdir}/{pageName}.md\", \"w\")",
                      "",
                      "        //////////////////////////////////",
                      "        // Replace this with our object",
                      "        //////////////////////////////////",
                      "",
                      "",
                      "        output := output ++ section1.md",
                      "        if (section6.hasContent) then {",
                      "            output := output ++ section6.md",
                      "        }",
                      "        if (section4.hasContent) then {",
                      "            section4.alphabetize",
                      "            output := output ++ section4.md",
                      "        }",
                      "        if (methodtypesSection.hasContent) then {",
                      "            methodtypesSection.alphabetize",
                      "            output := output ++ methodtypesSection.md",
                      "        }",
                      "        if (section3.hasContent) then {",
                      "            section3.alphabetize",
                      "            output := output ++ section3.md",
                      "        }",
                      "        if (section5.hasContent) then {",
                      "            section5.alphabetize",
                      "            output := output ++ section5.md",
                      "        }",
                      "        if (section2.hasContent) then {",
                      "            section2.alphabetize",
                      "            output := output ++ section2.md",
                      "        }",
                      "        output := output ++ footerSection.md",
                      "        outfile.write(output)",
                      "        outfile.close",
                      "        if (settings.verbosity > 1) then { print \"On {title} - file written ({sys.elapsedTime})\" }",
                      "    }",
                      "",
                      "    // TYPE LISTER",
                      "    //This is the type compiler that lists all of the variables and methods",
                      "    //that a type would have",
                      "    //NOTE: Called for every method as an individual function call",
                      "    method visitMethodType(o) -> Boolean {",
                      "        if (isOnTypePage) then {",
                      "            writer.addBullet",
                      "            for (o.signature) do { part ->",
                      "                writer.addText(part.name)inMode(code)",
                      "                if (part.params.size > 0) then {",
                      "                    writer.addText(\"(\")inMode(code)",
                      "                    for (part.params) do { param ->",
                      "                        if (param.dtype != false) then {",
                      "                            writer.addText(param.nameString)inMode(code)",
                      "                            writer.addColon",
                      "                            if (param.dtype.kind == \"identifier\") then {",
                      "                                writer.addText(getTypeLink(param.dtype.value))inMode(plain)",
                      "                            } elseif (param.dtype.kind == \"generic\") then {",
                      "                                writer.addText(param.dtype.value.value)inMode(plain)",
                      "                                param.dtype.args.do { each -> writer.addText(\"{getTypeLink(each.value)}\")inMode(code)} separatedBy { writer.addComma }",
                      "                            }",
                      "                        } else {",
                      "                            writer.addText(param.nameString)inMode(code)",
                      "                        }",
                      "                        if ((part.params.size > 1) && (param != part.params.last)) then {",
                      "                            writer.addComma",
                      "                        }",
                      "                    }",
                      "                    writer.addText(\")\")inMode(code)",
                      "                }",
                      "                //here...",
                      "                writer.addSpace",
                      "            }",
                      "            writer.addText(\"—> \")inMode(code)",
                      "",
                      "            if (o.rtype != false) then {",
                      "                if (o.rtype.kind == \"identifier\") then {",
                      "                    writer.addText(getTypeLink(o.rtype.value))inMode(plain)",
                      "                } elseif (o.rtype.kind == \"generic\") then {",
                      "                    writer.addText(getTypeLink(o.rtype.value.value))inMode(plain)",
                      "                    o.rtype.args.do { each -> writer.addText(\"{getTypeLink(each.value)}\")inMode(code) } separatedBy { writer.addComma}",
                      "                }",
                      "            } else {",
                      "                writer.addText(\"Done\")inMode(code)",
                      "            }",
                      "            //Two spaces for markdown newline added here!",
                      "            writer.addText(\"  \\n\")inMode(plain)",
                      "            writer.addText(formatComments(o) rowClass \"description\" colspan 2)inMode(plain)",
                      "            writer.addNewline",
                      "            //methodtypesSection.addElement(n)withText(t)",
                      "            section6.insert(writer.dumpBin)",
                      "            return false",
                      "        } else {",
                      "            return true",
                      "        }",
                      "    }",
                      "",
                      "    //TYPE VISITOR -- MAIN INFO ABOUT TYPE",
                      "    //Compiles and writes out the main information about a type",
                      "    method visitTypeDec(o) -> Boolean {",
                      "",
                      "         //Code is executed if we are on the main page for a class",
                      "         //Lists all of the TYPES in the class",
                      "        if (isOnTypePage == false) then {",
                      "            def n = o.nameString",
                      "            //writer.addText(\"Definition--1\")inMode(heading)",
                      "            writer.addBullet",
                      "            writer.addText(\"{getTypeLink(o.name.value)}\")inMode(plain)",
                      "            if (false != o.typeParams) then {",
                      "                writer.addText(\" -> \")inMode(code)",
                      "                for (o.typeParams.params) do { g ->",
                      "                    writer.addText(g.nameString)inMode(code)",
                      "                    if (g != o.typeParams.params.last) then {writer.addComma}",
                      "                }",
                      "            }",
                      "",
                      "            writer.addNewline",
                      "",
                      "            def typeVis = graceDocVisitor.createFrom(\"{o.name.value}\")outTo(\"{outdir}\")as(\"type\")",
                      "            o.accept(typeVis)",
                      "            typeVis.generate",
                      "",
                      "            writer.addText(formatComments(o) rowClass \"description\" colspan 1)inMode(plain)",
                      "",
                      "            //Write out to the types section",
                      "            section3.addElement(n)withText(writer.dumpBin)",
                      "            return false",
                      "",
                      "        //Actual writing for types happens here",
                      "        } else {",
                      "            writer.addText(\"Definition\")inMode(heading)",
                      "            writer.addText(\"{o.name.value} ->\")inMode(code)",
                      "            if (false != o.typeParams) then {",
                      "                for (o.typeParams.params) do { g->",
                      "                    writer.addText(g.nameString)inMode(code)",
                      "                    if (g != o.typeParams.params.last) then {writer.addText(\", \")inMode(code)}",
                      "                }",
                      "            }",
                      "            writer.addSpace",
                      "            var temp := \"\"",
                      "            var ops := list []",
                      "            var tps := list []",
                      "            var node := o.value",
                      "",
                      "            if (node.kind == \"op\") then {",
                      "                while {node.kind == \"op\"} do {",
                      "                    ops.push(node.value)",
                      "                    if ((node.left.kind == \"identifier\") && (node.right.kind == \"identifier\")) then {",
                      "                        temp := \"{getTypeLink(node.left.value)} `{ops.pop}` {getTypeLink(node.right.value)}\"",
                      "                    } elseif (node.right.kind == \"identifier\") then {",
                      "                        tps.push(node.right.value)",
                      "                    } elseif (node.left.kind == \"identifier\") then {",
                      "                        temp := \"{getTypeLink(node.left.value)} `{ops.pop}`\"",
                      "                    } elseif (node.left.kind == \"member\") then {",
                      "                        temp := getTypeLink(\"{node.left.in.value}.{node.left.value}\") ++ \" `{ops.pop}`\"",
                      "                    } elseif (node.right.kind == \"member\") then {",
                      "                        tps.push(\"{node.left.in.value}.{node.left.value}\")",
                      "                    }",
                      "                    node := node.left",
                      "                }",
                      "",
                      "                //Add and reset temp",
                      "                writer.addText(temp)inMode(plain) //Plain mode needed for linking",
                      "                temp := \"\"",
                      "",
                      "                while {(tps.size > 0) && (ops.size > 0)} do {",
                      "                    def p = tps.pop",
                      "                    temp := \"{temp} {ops.pop} {getTypeLink(p.value)}\"",
                      "                }",
                      "                if (ops.size > 0) then {",
                      "                    temp := \"{temp} {ops.pop}\"",
                      "                }",
                      "",
                      "                temp := temp ++ \"type\"",
                      "                writer.addText(temp)inMode(code)",
                      "                writer.addText(\"\\{...added methods below...\\}\")inMode(code)",
                      "            } elseif (node.kind == \"typeliteral\") then {",
                      "",
                      "                temp := temp ++ \"type\"",
                      "                writer.addText(\"\\{...added methods below...\\}\")inMode(code)",
                      "            } elseif (node.kind == \"identifier\") then {",
                      "                writer.addSpace",
                      "                writer.addText(getTypeLink(node.value))inMode(plain)",
                      "                if (node.generics != false) then {",
                      "                    for (node.generics) do { g->",
                      "                        writer.addText(g.value)inMode(code)",
                      "                        if (g != node.generics.last) then { writer.add(\", \") }",
                      "                    }",
                      "                }",
                      "            } elseif (node.kind == \"member\") then {",
                      "                writer.addText(getTypeLink(\"{node.in.value}.{node.value}\"))inMode(plain)",
                      "                if (node.generics != false) then {",
                      "                    for (node.generics) do { g->",
                      "                        writer.addText(g.value)inMode(code)",
                      "                        if (g != node.generics.last) then {writer.addText(\", \")inMode(code)}",
                      "                    }",
                      "                }",
                      "            }",
                      "            writer.addText(\"Description\")inMode(heading)",
                      "            writer.addText(formatComments(o) rowClass \"top-box-description\" colspan 1)inMode(plain)",
                      "            writer.addText(\"Properties\")inMode(heading)",
                      "            section6.insert(writer.dumpBin)",
                      "            return true",
                      "        }",
                      "",
                      "    }",
                      "",
                      "",
                      "    // Visit some class methods -- on reg class pages",
                      "    method visitMethod(o)up(anc) -> Boolean {",
                      "",
                      "        if (settings.publicOnly && o.isConfidential) then { return false }",
                      "        if (o.isClass) then {",
                      "            return doClassMethod(o)up(anc)",
                      "        }",
                      "        writer.addBullet",
                      "        for (o.signature) do { part ->",
                      "            writer.addText(buildDefChain(anc) ++ part.name)inMode(code)",
                      "            //if (part != o.signature.last) then { n := n ++ \"()\" }",
                      "            if (part.params.size > 0) then {",
                      "                writer.addText(\" ( \")inMode(code)",
                      "                for (part.params) do { param ->",
                      "                    if (param.dtype != false) then {",
                      "                        writer.addText(param.nameString)inMode(code)",
                      "                        writer.addColon",
                      "                        writer.addSpace",
                      "                        if (param.dtype.kind == \"identifier\") then {",
                      "                            writer.addText(getTypeLink(param.dtype.value))inMode(plain)",
                      "                        } elseif (param.dtype.kind == \"generic\") then {",
                      "                            writer.addText(getTypeLink(param.dtype.value.value))inMode(plain)",
                      "                            param.dtype.args.do { each -> writer.addText(\"{getTypeLink(each.value)}\")inMode(plain) } separatedBy { writer.addComma }",
                      "                        }",
                      "                        //t := t ++ \":<span class='parameter-type'>\" ++ getTypeLink(param.dtype.value) ++ \"</span>\"",
                      "                    } else {",
                      "                       writer.addText(param.nameString)inMode(code)",
                      "                    }",
                      "                    if ((part.params.size > 1) && (param != part.params.last)) then {",
                      "                        writer.addComma",
                      "                    }",
                      "                }",
                      "                writer.addText(\")\")inMode(code)",
                      "            }",
                      "        }",
                      "        writer.addSpace",
                      "        writer.addText(\"->\")inMode(code)",
                      "        if (o.dtype != false) then {",
                      "            writer.addText(getTypeLink(o.dtype.value))inMode(plain)",
                      "        } else {",
                      "            writer.addText(getTypeLink(\"Done\"))inMode(plain)",
                      "        }",
                      "        writer.addNewline",
                      "        writer.addText(formatComments(o) rowClass \"description\" colspan 2)inMode(plain)",
                      "       // section2.addElement(buildDefChain(anc) ++ n)withText(t)",
                      "        //Insert the text into the page",
                      "        section6.insert(writer.dumpBin)",
                      "        return false",
                      "    }",
                      "",
                      "",
                      "    method buildDefChain(anc) -> String {",
                      "      var a := anc",
                      "      var s := \"\"",
                      "      while { a.isEmpty.not } do {",
                      "          if (\"defdec\" == a.parent.kind) then {",
                      "              s := (a.parent.nameString ++ \".\" ++ s)",
                      "          }",
                      "          elseif (\"object\" != a.parent.kind) then {",
                      "              return s",
                      "          }",
                      "          a := a.forebears",
                      "      }",
                      "      return s",
                      "    }",
                      "",
                      "    //METHOD INFO VISIOR -- called for each method",
                      "    //WRITER REPLACEMENT COMPLETED ...",
                      "    method doClassMethod(m)up(anc) -> Boolean {",
                      "        def o = m.body.last",
                      "",
                      "        //Called for main class page (for each method... )",
                      "        if (isOnClassPage == false) then {",
                      "            def n = m.nameString //Needed to get class link...",
                      "            def link = getClassLink(n) //show(part.name)",
                      "            var ch := buildDefChain(anc)",
                      "            if (ch != \"\") then {ch := \"`\" ++ ch; ch := ch ++ \"`\";} //Put it in quotes",
                      "            def chain = \"{ch}{link}\"",
                      "            writer.addBullet",
                      "            if(chain != \"\") then {writer.addText(\"{chain}\")inMode(plain)} //Add the ancestor methods if there..",
                      "            if(!m.signature.isEmpty) then {writer.addText(\":: \")inMode(code)}",
                      "            m.signature.do { part ->",
                      "                if (part.params.size > 0) then {",
                      "                    writer.addText(part.name)inMode(code)",
                      "                    writer.addText(\"(\")inMode(code)",
                      "                    for(part.params) do { param ->",
                      "                        if (param.dtype != false) then {",
                      "                            writer.addText(param.value)inMode(code)",
                      "                            writer.addColon;",
                      "                            writer.addText(getTypeLink(param.dtype.nameString))inMode(plain)",
                      "                        } else {",
                      "                            writer.addText(param.value)inMode(code)",
                      "                        }",
                      "                        if ((part.params.size > 1) && (param != part.params.last)) then {",
                      "                            writer.addComma",
                      "                        }",
                      "                    }",
                      "                    writer.addText(\")\")inMode(code)",
                      "                }",
                      "            }",
                      "",
                      "            if (m.dtype != false) then {",
                      "                writer.addText(\" -> \")inMode(code)",
                      "                if (m.dtype.kind == \"identifier\") then {",
                      "                    writer.addText(getTypeLink(m.dtype.value))inMode(plain)",
                      "                } elseif (m.dtype.kind == \"generic\") then {",
                      "                    writer.addText(getTypeLink(m.dtype.value.value))inMode(plain)",
                      "                    m.dtype.args.do { each -> writer.addText(\"{getTypeLink(each.value)}\")inMode(plain) } separatedBy { writer.addComma }",
                      "                }",
                      "            }",
                      "",
                      "            if(o.superclass != false) then {",
                      "                o.superclass.accept(self)",
                      "            }",
                      "",
                      "            def classVis = graceDocVisitor.createFrom(n) outTo (outdir) as \"class\"",
                      "            o.accept(classVis)",
                      "            classVis.generate",
                      "",
                      "            writer.addNewline",
                      "            writer.addNewline",
                      "            section6.insert(writer.dumpBin)",
                      "            //section5.addElement(buildDefChain(anc) ++ n) withText(t)",
                      "            return false",
                      "",
                      "            //IF WE ARE ON A CLASS PAGE",
                      "          } else {",
                      "            writer.addBullet",
                      "            writer.addText(o.name)inMode(code)",
                      "",
                      "            for(m.signature) do { part ->",
                      "                writer.addText(part.name)inMode(code)",
                      "                if (part.params.size > 0) then {",
                      "                    writer.addText(\" (\")inMode(code)",
                      "                    for(part.params) do { param ->",
                      "                        if (param.dtype != false) then {",
                      "                            writer.addText(param.value)inMode(code)",
                      "                            writer.addColon",
                      "                            writer.addText(getTypeLink(param.dtype.value))inMode(plain)",
                      "                        } else {",
                      "                            writer.addText(param.value)inMode(code)",
                      "                            writer.addColon",
                      "                        }",
                      "                        if ((part.params.size > 1) && (param != part.params.at(part.params.size))) then {",
                      "                            writer.addComma",
                      "                        }",
                      "                    }",
                      "                }",
                      "                writer.addText(\")\")inMode(code)",
                      "            }",
                      "",
                      "            if (m.dtype != false) then {",
                      "                writer.addText(\" -> \")inMode(code)",
                      "                if (m.dtype.kind == \"identifier\") then {",
                      "                    writer.addText(getTypeLink(m.dtype.value))inMode(plain)",
                      "                } elseif (m.dtype.kind == \"generic\") then {",
                      "                    writer.addText(getTypeLink(m.dtype.value.value))inMode(plain)",
                      "                    m.dtype.args.do { each -> writer.addText(\"{getTypeLink(each.value)}\")inMode(plain)} separatedBy { writer.addComma }",
                      "                }",
                      "            }",
                      "",
                      "            writer.addNewline",
                      "            writer.addText(formatComments(o) rowClass \"top-box-description\" colspan 1)inMode(plain)",
                      "            section6.insert(writer.dumpBin)",
                      "            return true",
                      "        }",
                      "    }",
                      "",
                      "    //Visits definitions",
                      "    method visitDefDec(o)up(anc) -> Boolean {",
                      "        if (isOnClassPage == true) then {",
                      "            if (!settings.publicOnly) then {",
                      "                def n = o.name.value",
                      "                var temp := buildDefChain(anc) ++ n",
                      "                writer.addBullet",
                      "                if(temp != \"\")then{writer.addText(buildDefChain(anc) ++ n)inMode(code)}",
                      "                writer.addText(\" -> \")inMode(code)",
                      "                if (o.dtype != false) then {",
                      "                    if (o.dtype.kind == \"identifier\") then {",
                      "                        writer.addText(getTypeLink(o.dtype.value))inMode(plain)",
                      "                    } elseif (o.dtype.kind == \"generic\") then {",
                      "                        writer.addText(getTypeLink(o.dtype.value.value))inMode(plain)",
                      "                        o.dtype.args.do { each -> writer.addText(\"{getTypeLink(each.value)}\")inMode(plain) } separatedBy { writer.addComma }",
                      "                    }",
                      "                }",
                      "                writer.addNewline",
                      "",
                      "                writer.addText(formatComments(o) rowClass \"description\" colspan 3)inMode(plain)",
                      "                section4.insert(writer.dumpBin)",
                      "",
                      "            } else {",
                      "                //in publicOnly mode, readable defs should show up as getter methods",
                      "                if (o.isReadable) then {",
                      "                    //FIXME: if isOnTypePage, then ???",
                      "                    def n = o.name.value",
                      "                    var temp := buildDefChain(anc) ++ n",
                      "                    writer.addBullet",
                      "                    writer.addText(\"def \")inMode(code)",
                      "",
                      "                    if(temp != \"\")then{writer.addText(buildDefChain(anc) ++ n)inMode(code)}",
                      "                    writer.addText(\" -> \")inMode(code)",
                      "",
                      "                    if (o.dtype != false) then {",
                      "                        if (o.dtype.kind == \"identifier\") then {",
                      "                            writer.addText(getTypeLink(o.dtype.value))inMode(plain)",
                      "                        } elseif (o.dtype.kind == \"generic\") then {",
                      "                            writer.addText(getTypeLink(o.dtype.value.value))inMode(plain)",
                      "                            o.dtype.args.do { each -> writer.addText(\"{getTypeLink(each.value)}\")inMode(plain) } separatedBy { writer.addComma }",
                      "                        }",
                      "                    }",
                      "                    writer.addNewline",
                      "",
                      "                    writer.addText(formatComments(o) rowClass \"description\" colspan 2)inMode(plain)",
                      "                    section4.insert(writer.dumpBin)",
                      "                }",
                      "            }",
                      "            return anc.parent.isObject",
                      "        } else {",
                      "            if (!settings.publicOnly) then {",
                      "                def n = buildDefChain(anc) ++ o.name.value",
                      "                writer.addBullet",
                      "                writer.addText(\"def {n}\")inMode(code)",
                      "                writer.addText(\" -> \")inMode(code)",
                      "",
                      "                if (o.dtype != false) then {",
                      "                    if (o.dtype.kind == \"identifier\") then {",
                      "                        writer.addText(getTypeLink(o.dtype.value))inMode(plain)",
                      "                    } elseif (o.dtype.kind == \"generic\") then {",
                      "                        writer.addText(getTypeLink(o.dtype.value.value))inMode(plain)",
                      "                        o.dtype.args.do { each -> writer.addText(\"{each.value}\")inMode(code) } separatedBy { writer.addComma }",
                      "                    }",
                      "                }",
                      "                writer.addNewline",
                      "                writer.addText(formatComments(o) rowClass \"description\" colspan 3)inMode(plain)",
                      "                section4.insert(writer.dumpBin)",
                      "",
                      "            } else {",
                      "                //in publicOnly mode, readable defs should show up as getter methods",
                      "                if (o.isReadable) then {",
                      "                    writer.addBullet",
                      "                    writer.addText(\"def \")inMode(code)",
                      "                    writer.addText(\"{buildDefChain(anc) ++ o.name.value}\")inMode(code)",
                      "                    writer.addText(\" -> \")inMode(code)",
                      "                    def n = o.name.value",
                      "                    if (o.dtype != false) then {",
                      "                        if (o.dtype.kind == \"identifier\") then {",
                      "                            writer.addText(getTypeLink(o.dtype.value))inMode(plain)",
                      "                        } elseif (o.dtype.kind == \"generic\") then {",
                      "                            writer.addText(getTypeLink(o.dtype.value.value))inMode(plain)",
                      "                            o.dtype.args.do { each -> writer.addText(\"{getTypeLink(each.value)}\")inMode(plain) } separatedBy { writer.addComma }",
                      "                        }",
                      "                    }",
                      "                    writer.addNewline",
                      "",
                      "                    writer.addText(formatComments(o) rowClass \"description\" colspan 2)inMode(plain)",
                      "                    section4.insert(writer.dumpBin)",
                      "                }",
                      "            }",
                      "            return anc.parent.isObject",
                      "        }",
                      "    }",
                      "",
                      "    method visitVarDec(o)up(anc) -> Boolean {",
                      "        def n = buildDefChain(anc) ++ o.nameString",
                      "        if (isOnClassPage == true) then {",
                      "            if (!settings.publicOnly) then {",
                      "                writer.addBullet",
                      "                writer.addText(\"var \")inMode(code)",
                      "                writer.addText(\"{buildDefChain(anc)}{o.name.value}\")inMode(code)",
                      "                if (o.dtype != false) then {",
                      "                    writer.addText(\" -> \")inMode(code)",
                      "                    writer.addText(\"{getTypeLink(o.dtype.value)}\")inMode(plain)",
                      "                }",
                      "                writer.addNewline",
                      "                writer.addText(formatComments(o) rowClass \"description\" colspan 3)inMode(plain)",
                      "                section4.insert(writer.dumpBin)",
                      "            } else {",
                      "                if (o.isReadable) then {",
                      "                    writer.addBullet",
                      "                    writer.addText(\"var \")inMode(code)",
                      "                    writer.addText(\"{buildDefChain(anc)}{o.name.value}\")inMode(code)",
                      "                    if (o.dtype != false) then {",
                      "                         writer.addText(\" -> \")inMode(code)",
                      "                         writer.addText(\"{getTypeLink(o.dtype.value)}\")inMode(plain)",
                      "                    }",
                      "                    writer.addText(formatComments(o) rowClass \"description\" colspan 2)inMode(plain)",
                      "                    section4.insert(writer.dumpBin)",
                      "                }",
                      "                if (o.isWritable) then {",
                      "                    writer.addBullet",
                      "                    writer.addText(\"var \")inMode(code)",
                      "                    writer.addText(\"{buildDefChain(anc)}{o.name.value}\")inMode(code)",
                      "                    if (o.dtype != false) then {",
                      "                        writer.addText(\" -> \")inMode(code)",
                      "                        writer.addText(\"(_:{getTypeLink(o.dtype.value)})\")inMode(plain)",
                      "                    }else{",
                      "                        writer.addText(\"-> Done\")inMode(code)",
                      "                    }",
                      "                    writer.addText(\"Updates {n}\")inMode(code)",
                      "                    section4.insert(writer.dumpBin)",
                      "                }",
                      "            }",
                      "            return false",
                      "        } else {",
                      "            if (!settings.publicOnly) then {",
                      "                writer.addBullet",
                      "                writer.addText(\"var \")inMode(code)",
                      "                writer.addText(\"{buildDefChain(anc)}{o.name.value}\")inMode(code)",
                      "                if (o.dtype != false) then {",
                      "                     writer.addText(\" -> \")inMode(code)",
                      "                     writer.addText(\"{getTypeLink(o.dtype.value)}\")inMode(plain)",
                      "                }",
                      "                writer.addNewline",
                      "                writer.addText(formatComments(o) rowClass \"description\" colspan 3)inMode(plain)",
                      "                section4.insert(writer.dumpBin)",
                      "            } else {",
                      "                if (o.isReadable) then {",
                      "                    writer.addBullet",
                      "                    writer.addText(\"var \")inMode(code)",
                      "                    writer.addText(\"{buildDefChain(anc)}{o.name.value}\")inMode(code)",
                      "                    if (o.dtype != false) then {",
                      "                         writer.addText(\" -> \")inMode(code)",
                      "                         writer.addText(\"{getTypeLink(o.dtype.value)}\")inMode(plain)",
                      "                    }",
                      "                    writer.addNewline",
                      "                    writer.addText(formatComments(o) rowClass \"description\" colspan 2)inMode(plain)",
                      "                    section4.insert(writer.dumpBin)",
                      "            }",
                      "                if (o.isWritable) then {",
                      "                    writer.addBullet",
                      "                    writer.addText(\"var \")inMode(code)",
                      "                    writer.addText(\"{buildDefChain(anc)}{o.name.value}\")inMode(code)",
                      "                    if (o.dtype != false) then {",
                      "                       writer.addText(\" -> \")inMode(code)",
                      "                       writer.addText(\"(_:{getTypeLink(o.dtype.value)})\")inMode(plain)",
                      "                    }",
                      "                    else{",
                      "                       writer.addText(\"-> Done\")inMode(code)",
                      "                    }",
                      "                    writer.addText(\"Updates {n}\")inMode(code)",
                      "                    section4.insert(writer.dumpBin)",
                      "                }",
                      "            }",
                      "            return false",
                      "        }",
                      "    }",
                      "",
                      "    method visitInherits(o) -> Boolean {",
                      "        //if (isOnClassPage) then {",
                      "",
                      "        //} else {",
                      "            return true",
                      "        //}",
                      "    }",
                      "",
                      "}",
                      "",
                      "method formatComments(astNode) rowClass (rowClassName) colspan (n) -> String {",
                      "    var t := \"\"",
                      "    if (false != astNode.comments) then {",
                      "        t := t ++ astNode.comments.value ++ \"\\n\"",
                      "    }",
                      "    return t",
                      "}",
                      "",
                      "parseArguments",
                      "",
                      "var file",
                      "var dbv",
                      "var gdv",
                      "var modulename",
                      "var counter",
                      "",
                      "var allModules := io.listdir(settings.inputdir)",
                      "var parsedFiles := dictionary []",
                      "var inputWasFound := false",
                      "var sidebarGen := sidebarFileGenerator",
                      "",
                      "//LEX AND PARSE ALL INPUT FILES",
                      "counter := 1",
                      "for (allModules) do { filename ->",
                      "    if (filename.endsWith(\".grace\")) then {",
                      "        file := io.open(\"{settings.inputdir}/{filename}\", \"r\")",
                      "        if (settings.verbosity > 0) then { print \"On {filename} - lexing... ({sys.elapsedTime})\" }",
                      "        var tokens := lexer.new.lexfile(file)",
                      "        if (settings.verbosity > 0) then { print \"On {filename} - done lexing... ({sys.elapsedTime})\" }",
                      "        if (settings.verbosity > 0) then { print \"On {filename} - parsing... ({sys.elapsedTime})\" }",
                      "        //var values := parser.parse(tokens)",
                      "        parsedFiles.at(counter)put(parser.parse(tokens))",
                      "",
                      "        if (settings.verbosity > 0) then { print \"On {filename} - done parsing... ({sys.elapsedTime})\" }",
                      "        counter := counter + 1",
                      "        inputWasFound := true",
                      "        file.close",
                      "    }",
                      "}",
                      "",
                      "if (!inputWasFound) then {",
                      "    io.error.write \"gracedoc: Input error - no Grace files found in the input directory.\"",
                      "    io.error.write \"          Either the directory doesn't exist, or it doesn't contain any files.\"",
                      "    io.error.write \"          Directories should be named relative to the ./minigrace executable.\"",
                      "    sys.exit(1)",
                      "}",
                      "",
                      "//BUILD DIRECTORY STRUCTURE",
                      "counter := 1",
                      "for (allModules) do { filename ->",
                      "    if (filename.endsWith(\".grace\")) then {",
                      "        if (settings.verbosity > 0) then { print \"On {filename} - building directories... ({sys.elapsedTime})\" }",
                      "        modulename := filename.substringFrom(1)to(filename.size - 6)",
                      "        def moduleObject = parsedFiles.at(counter)",
                      "        dbv := directoryBuilderForFile(filename) outTo (modulename) as \"module\"",
                      "        moduleObject.accept(dbv)",
                      "        dbv.generate",
                      "        if (settings.verbosity > 0) then { print \"On {filename} - directories built... ({sys.elapsedTime})\" }",
                      "        counter := counter + 1",
                      "    }",
                      "}",
                      "",
                      "//GENERATE ACTUAL HTML PAGES",
                      "counter := 1",
                      "//Note: Only generares with modules...",
                      "for (allModules) do { filename ->",
                      "    if (filename.endsWith(\".grace\")) then {",
                      "        if (settings.verbosity > 0) then { print \"On {filename} - generating GraceDocs... ({sys.elapsedTime})\" }",
                      "        modulename := filename.substringFrom(1)to(filename.size - 6)",
                      "        def moduleObject = parsedFiles.at (counter)",
                      "        gdv := graceDocVisitor.createFrom(filename) outTo (modulename) as \"module\"",
                      "        moduleObject.accept(gdv)",
                      "        gdv.generate",
                      "        //gdv.buildindex  -- No Longer needed for markdown...",
                      "        //gdv.buildcss",
                      "        //gdv.buildjs",
                      "        gdv.build404",
                      "        gdv.setSidebarName //Set the module of the sidebar for navigation",
                      "        sidebarGen.generate(modulename)",
                      "        if (settings.verbosity > 0) then { print \"On {filename} - done! ({sys.elapsedTime})\" }",
                      "        if (settings.verbosity > 0) then { print \"\\n\\nSidebar generated:{modulename} at ({sys.elapsedTime})\" }",
                      "        counter := counter + 1",
                      "    }",
                      "}" ];
                  }
                  if (typeof global !== "undefined")
                    global.gracecode_gracedocMD = gracecode_gracedocMD;
                  if (typeof window !== "undefined")
                    window.gracecode_gracedocMD = gracecode_gracedocMD;
